
Lora_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fd8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800a118  0800a118  0001a118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a458  0800a458  00020178  2**0
                  CONTENTS
  4 .ARM          00000008  0800a458  0800a458  0001a458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a460  0800a460  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a460  0800a460  0001a460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a464  0800a464  0001a464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  0800a468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f8  20000178  0800a5e0  00020178  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000870  0800a5e0  00020870  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020d1c  00000000  00000000  000201a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004408  00000000  00000000  00040ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e40  00000000  00000000  000452c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c88  00000000  00000000  00047108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022587  00000000  00000000  00048d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002456b  00000000  00000000  0006b317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c46c3  00000000  00000000  0008f882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153f45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008858  00000000  00000000  00153f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000178 	.word	0x20000178
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a100 	.word	0x0800a100

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000017c 	.word	0x2000017c
 800017c:	0800a100 	.word	0x0800a100

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	fbb8 fef5 	udiv	lr, r8, r5
 800029c:	fa1f f78c 	uxth.w	r7, ip
 80002a0:	fb05 831e 	mls	r3, r5, lr, r8
 80002a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a8:	fb0e f107 	mul.w	r1, lr, r7
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d90b      	bls.n	80002c8 <__udivmoddi4+0x68>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4299      	cmp	r1, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002d0:	fb05 3310 	mls	r3, r5, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x96>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e8:	f080 8108 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8105 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 050c 	sub.w	r5, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb5 f3f7 	udiv	r3, r5, r7
 8000368:	fb07 5013 	mls	r0, r7, r3, r5
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0f7 	udiv	r0, r5, r7
 8000394:	fb07 5510 	mls	r5, r7, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa05 f301 	lsl.w	r3, r5, r1
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40fd      	lsrs	r5, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 5518 	mls	r5, r9, r8, r5
 80003f0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0505 	adds.w	r5, ip, r5
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a8      	cmp	r0, r5
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4465      	add	r5, ip
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000420:	fb09 5510 	mls	r5, r9, r0, r5
 8000424:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	45ae      	cmp	lr, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45ae      	cmp	lr, r5
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba5 050e 	sub.w	r5, r5, lr
 800044e:	42a5      	cmp	r5, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb65 050e 	sbc.w	r5, r5, lr
 8000462:	fa05 f707 	lsl.w	r7, r5, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	40cd      	lsrs	r5, r1
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c6 7500 	strd	r7, r5, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa25 f303 	lsr.w	r3, r5, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	430d      	orrs	r5, r1
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3011 	mls	r0, r7, r1, r3
 800049c:	0c2b      	lsrs	r3, r5, #16
 800049e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004a2:	fb01 f00e 	mul.w	r0, r1, lr
 80004a6:	4298      	cmp	r0, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c8:	fb07 3310 	mls	r3, r7, r0, r3
 80004cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d0:	fb00 f30e 	mul.w	r3, r0, lr
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1aed      	subs	r5, r5, r3
 80004ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	4686      	mov	lr, r0
 80004fa:	e6e5      	b.n	80002c8 <__udivmoddi4+0x68>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fa      	b.n	80002f6 <__udivmoddi4+0x96>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4640      	mov	r0, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4465      	add	r5, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4608      	mov	r0, r1
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000550:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4013      	ands	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000558:	68fb      	ldr	r3, [r7, #12]
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <LL_AHB3_GRP1_DisableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_DisableClock(uint32_t Periphs)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 800056c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000570:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	43db      	mvns	r3, r3
 8000576:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800057a:	4013      	ands	r3, r2
 800057c:	650b      	str	r3, [r1, #80]	; 0x50
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <_write>:
extern volatile uint8_t txBuffer_encypt[TXBUFF_SIZE];
extern volatile uint8_t count_id;
//extern bool flag_node[4];

#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	b29a      	uxth	r2, r3
 8000598:	f04f 33ff 	mov.w	r3, #4294967295
 800059c:	68b9      	ldr	r1, [r7, #8]
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <_write+0x28>)
 80005a0:	f006 ff7a 	bl	8007498 <HAL_UART_Transmit>
	return len;
 80005a4:	687b      	ldr	r3, [r7, #4]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000758 	.word	0x20000758

080005b4 <MX_AES_Init>:
__ALIGN_BEGIN static const uint32_t pKeyAES[8] __ALIGN_END = { 0x603DEB10,
		0x15CA71BE, 0x2B73AEF0, 0x857D7781, 0x1F352C07, 0x3B6108D7, 0x2D9810A3,
		0x0914DFF4 };

/* AES init function */
void MX_AES_Init(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	/* USER CODE END AES_Init 0 */

	/* USER CODE BEGIN AES_Init 1 */

	/* USER CODE END AES_Init 1 */
	hcryp.Instance = AES;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_AES_Init+0x4c>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <MX_AES_Init+0x50>)
 80005bc:	601a      	str	r2, [r3, #0]
	hcryp.Init.DataType = CRYP_DATATYPE_32B;
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <MX_AES_Init+0x4c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	605a      	str	r2, [r3, #4]
	hcryp.Init.KeySize = CRYP_KEYSIZE_256B;
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_AES_Init+0x4c>)
 80005c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80005ca:	609a      	str	r2, [r3, #8]
	hcryp.Init.pKey = (uint32_t*) pKeyAES;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_AES_Init+0x4c>)
 80005ce:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <MX_AES_Init+0x54>)
 80005d0:	60da      	str	r2, [r3, #12]
	hcryp.Init.Algorithm = CRYP_AES_ECB;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_AES_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
	hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_AES_Init+0x4c>)
 80005da:	2201      	movs	r2, #1
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
	hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_BYTE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_AES_Init+0x4c>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	629a      	str	r2, [r3, #40]	; 0x28
	hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_AES_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_CRYP_Init(&hcryp) != HAL_OK) {
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_AES_Init+0x4c>)
 80005ec:	f002 fd41 	bl	8003072 <HAL_CRYP_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_AES_Init+0x46>
		Error_Handler();
 80005f6:	f000 fc7f 	bl	8000ef8 <Error_Handler>
	}
	/* USER CODE BEGIN AES_Init 2 */

	/* USER CODE END AES_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000194 	.word	0x20000194
 8000604:	58001800 	.word	0x58001800
 8000608:	0800a2d8 	.word	0x0800a2d8

0800060c <HAL_CRYP_MspInit>:

void HAL_CRYP_MspInit(CRYP_HandleTypeDef *crypHandle) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

	if (crypHandle->Instance == AES) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a05      	ldr	r2, [pc, #20]	; (8000630 <HAL_CRYP_MspInit+0x24>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d103      	bne.n	8000626 <HAL_CRYP_MspInit+0x1a>
		/* USER CODE BEGIN AES_MspInit 0 */

		/* USER CODE END AES_MspInit 0 */
		/* AES clock enable */
		__HAL_RCC_AES_CLK_ENABLE();
 800061e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000622:	f7ff ff87 	bl	8000534 <LL_AHB3_GRP1_EnableClock>
		/* USER CODE BEGIN AES_MspInit 1 */

		/* USER CODE END AES_MspInit 1 */
	}
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	58001800 	.word	0x58001800

08000634 <HAL_CRYP_MspDeInit>:

void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef *crypHandle) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]

	if (crypHandle->Instance == AES) {
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a05      	ldr	r2, [pc, #20]	; (8000658 <HAL_CRYP_MspDeInit+0x24>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d103      	bne.n	800064e <HAL_CRYP_MspDeInit+0x1a>
		/* USER CODE BEGIN AES_MspDeInit 0 */

		/* USER CODE END AES_MspDeInit 0 */
		/* Peripheral clock disable */
		__HAL_RCC_AES_CLK_DISABLE();
 8000646:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800064a:	f7ff ff8b 	bl	8000564 <LL_AHB3_GRP1_DisableClock>
		/* USER CODE BEGIN AES_MspDeInit 1 */

		/* USER CODE END AES_MspDeInit 1 */
	}
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	58001800 	.word	0x58001800

0800065c <AES_Encrypt_MasterPacket>:
	memset(rxBuffer_decypt, 0, sizeof(rxBuffer_decypt));
	memset(rxBuffer_encypt, 0, sizeof(rxBuffer_encypt));

}

void AES_Encrypt_MasterPacket(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	memset(txBuffer_encypt, 0, sizeof(txBuffer_encypt));
 8000660:	220f      	movs	r2, #15
 8000662:	2100      	movs	r1, #0
 8000664:	480e      	ldr	r0, [pc, #56]	; (80006a0 <AES_Encrypt_MasterPacket+0x44>)
 8000666:	f008 fb55 	bl	8008d14 <memset>
	memset(txBuffer, 0, sizeof(txBuffer));
 800066a:	220f      	movs	r2, #15
 800066c:	2100      	movs	r1, #0
 800066e:	480d      	ldr	r0, [pc, #52]	; (80006a4 <AES_Encrypt_MasterPacket+0x48>)
 8000670:	f008 fb50 	bl	8008d14 <memset>
	memset(Node_id, 0, sizeof(Node_id));
 8000674:	2206      	movs	r2, #6
 8000676:	2100      	movs	r1, #0
 8000678:	480b      	ldr	r0, [pc, #44]	; (80006a8 <AES_Encrypt_MasterPacket+0x4c>)
 800067a:	f008 fb4b 	bl	8008d14 <memset>
	setNodeId();
 800067e:	f000 f8bd 	bl	80007fc <setNodeId>
	strcat(txBuffer, Node_id);
 8000682:	4909      	ldr	r1, [pc, #36]	; (80006a8 <AES_Encrypt_MasterPacket+0x4c>)
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <AES_Encrypt_MasterPacket+0x48>)
 8000686:	f008 fbfb 	bl	8008e80 <strcat>
	printf("tx Master data: %s \r\n ", txBuffer);
 800068a:	4906      	ldr	r1, [pc, #24]	; (80006a4 <AES_Encrypt_MasterPacket+0x48>)
 800068c:	4807      	ldr	r0, [pc, #28]	; (80006ac <AES_Encrypt_MasterPacket+0x50>)
 800068e:	f008 fb49 	bl	8008d24 <iprintf>
	AES_Encrypt(txBuffer, txBuffer_encypt, sizeof(txBuffer));
 8000692:	220f      	movs	r2, #15
 8000694:	4902      	ldr	r1, [pc, #8]	; (80006a0 <AES_Encrypt_MasterPacket+0x44>)
 8000696:	4803      	ldr	r0, [pc, #12]	; (80006a4 <AES_Encrypt_MasterPacket+0x48>)
 8000698:	f000 f828 	bl	80006ec <AES_Encrypt>

	//printf("Encrypted data: ");
	//print_array(txBuffer_encypt, strlen(txBuffer_encypt));
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200002b8 	.word	0x200002b8
 80006a4:	200002a8 	.word	0x200002a8
 80006a8:	200002a0 	.word	0x200002a0
 80006ac:	0800a12c 	.word	0x0800a12c

080006b0 <AES_decrypt_MasterPacket>:
void AES_decrypt_MasterPacket(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	if (rxBuffer_encypt[0] == '\0') {
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <AES_decrypt_MasterPacket+0x30>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d105      	bne.n	80006c8 <AES_decrypt_MasterPacket+0x18>
		memset(rxBuffer_decypt, 0, sizeof(rxBuffer_decypt));
 80006bc:	22ff      	movs	r2, #255	; 0xff
 80006be:	2100      	movs	r1, #0
 80006c0:	4808      	ldr	r0, [pc, #32]	; (80006e4 <AES_decrypt_MasterPacket+0x34>)
 80006c2:	f008 fb27 	bl	8008d14 <memset>
 80006c6:	e004      	b.n	80006d2 <AES_decrypt_MasterPacket+0x22>
	} else
		AES_Decrypt(rxBuffer_encypt, rxBuffer_decypt, sizeof(rxBuffer_encypt));
 80006c8:	22ff      	movs	r2, #255	; 0xff
 80006ca:	4906      	ldr	r1, [pc, #24]	; (80006e4 <AES_decrypt_MasterPacket+0x34>)
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <AES_decrypt_MasterPacket+0x30>)
 80006ce:	f000 f851 	bl	8000774 <AES_Decrypt>

	printf("Decrypted data: %s\n", rxBuffer_decypt);
 80006d2:	4904      	ldr	r1, [pc, #16]	; (80006e4 <AES_decrypt_MasterPacket+0x34>)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <AES_decrypt_MasterPacket+0x38>)
 80006d6:	f008 fb25 	bl	8008d24 <iprintf>
	//memset(rxBuffer_decypt, 0, sizeof(rxBuffer_decypt));
	//memset(rxBuffer_encypt, 0, sizeof(rxBuffer_encypt));
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200002c8 	.word	0x200002c8
 80006e4:	200003c8 	.word	0x200003c8
 80006e8:	0800a118 	.word	0x0800a118

080006ec <AES_Encrypt>:

	}
	printf("\n");

}
void AES_Encrypt(uint8_t *input_data, uint8_t *output_data, uint32_t data_size) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af02      	add	r7, sp, #8
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
	MX_AES_Init();
 80006f8:	f7ff ff5c 	bl	80005b4 <MX_AES_Init>
	uint8_t *input_block = input_data;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	61fb      	str	r3, [r7, #28]
	uint8_t *output_block = output_data;
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	61bb      	str	r3, [r7, #24]
	uint32_t remaining_data = data_size;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	617b      	str	r3, [r7, #20]

	while (remaining_data >= BLOCK_SIZE) {
 8000708:	e014      	b.n	8000734 <AES_Encrypt+0x48>
		if (HAL_CRYP_Encrypt(&hcryp, input_block, BLOCK_SIZE, output_block,
 800070a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	2220      	movs	r2, #32
 8000714:	69f9      	ldr	r1, [r7, #28]
 8000716:	4816      	ldr	r0, [pc, #88]	; (8000770 <AES_Encrypt+0x84>)
 8000718:	f002 fd14 	bl	8003144 <HAL_CRYP_Encrypt>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d11f      	bne.n	8000762 <AES_Encrypt+0x76>
				1000) != HAL_OK) {
			// Xử lý lỗi khi mã hóa AES
			return;
		}
		input_block += BLOCK_SIZE;
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3320      	adds	r3, #32
 8000726:	61fb      	str	r3, [r7, #28]
		output_block += BLOCK_SIZE;
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	3320      	adds	r3, #32
 800072c:	61bb      	str	r3, [r7, #24]
		remaining_data -= BLOCK_SIZE;
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	3b20      	subs	r3, #32
 8000732:	617b      	str	r3, [r7, #20]
	while (remaining_data >= BLOCK_SIZE) {
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	2b1f      	cmp	r3, #31
 8000738:	d8e7      	bhi.n	800070a <AES_Encrypt+0x1e>
	}

	// Mã hóa block cuối cùng
	if (remaining_data > 0) {
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00c      	beq.n	800075a <AES_Encrypt+0x6e>
		if (HAL_CRYP_Encrypt(&hcryp, input_block, remaining_data, output_block,
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	b29a      	uxth	r2, r3
 8000744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	69f9      	ldr	r1, [r7, #28]
 800074e:	4808      	ldr	r0, [pc, #32]	; (8000770 <AES_Encrypt+0x84>)
 8000750:	f002 fcf8 	bl	8003144 <HAL_CRYP_Encrypt>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d105      	bne.n	8000766 <AES_Encrypt+0x7a>
			// Xử lý lỗi khi mã hóa AES
			return;
		}
	}

	HAL_CRYP_DeInit(&hcryp);
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <AES_Encrypt+0x84>)
 800075c:	f002 fcc4 	bl	80030e8 <HAL_CRYP_DeInit>
 8000760:	e002      	b.n	8000768 <AES_Encrypt+0x7c>
			return;
 8000762:	bf00      	nop
 8000764:	e000      	b.n	8000768 <AES_Encrypt+0x7c>
			return;
 8000766:	bf00      	nop
}
 8000768:	3720      	adds	r7, #32
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000194 	.word	0x20000194

08000774 <AES_Decrypt>:
void AES_Decrypt(uint8_t *input_data, uint8_t *output_data, uint32_t data_size) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af02      	add	r7, sp, #8
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]

	MX_AES_Init();
 8000780:	f7ff ff18 	bl	80005b4 <MX_AES_Init>
	uint8_t *input_block = input_data;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	61fb      	str	r3, [r7, #28]
	uint8_t *output_block = output_data;
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	61bb      	str	r3, [r7, #24]
	uint32_t remaining_data = data_size;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	617b      	str	r3, [r7, #20]

	while (remaining_data >= BLOCK_SIZE) {
 8000790:	e014      	b.n	80007bc <AES_Decrypt+0x48>
		if (HAL_CRYP_Decrypt(&hcryp, input_block, BLOCK_SIZE, output_block,
 8000792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	2220      	movs	r2, #32
 800079c:	69f9      	ldr	r1, [r7, #28]
 800079e:	4816      	ldr	r0, [pc, #88]	; (80007f8 <AES_Decrypt+0x84>)
 80007a0:	f002 fd6a 	bl	8003278 <HAL_CRYP_Decrypt>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d11f      	bne.n	80007ea <AES_Decrypt+0x76>
				1000) != HAL_OK) {
			// Xử lý lỗi khi giải mã AES
			return;
		}
		input_block += BLOCK_SIZE;
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3320      	adds	r3, #32
 80007ae:	61fb      	str	r3, [r7, #28]
		output_block += BLOCK_SIZE;
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	3320      	adds	r3, #32
 80007b4:	61bb      	str	r3, [r7, #24]
		remaining_data -= BLOCK_SIZE;
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	3b20      	subs	r3, #32
 80007ba:	617b      	str	r3, [r7, #20]
	while (remaining_data >= BLOCK_SIZE) {
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	2b1f      	cmp	r3, #31
 80007c0:	d8e7      	bhi.n	8000792 <AES_Decrypt+0x1e>
	}

	// Giải mã block cuối cùng
	if (remaining_data > 0) {
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d00c      	beq.n	80007e2 <AES_Decrypt+0x6e>
		if (HAL_CRYP_Decrypt(&hcryp, input_block, remaining_data, output_block,
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	69f9      	ldr	r1, [r7, #28]
 80007d6:	4808      	ldr	r0, [pc, #32]	; (80007f8 <AES_Decrypt+0x84>)
 80007d8:	f002 fd4e 	bl	8003278 <HAL_CRYP_Decrypt>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d105      	bne.n	80007ee <AES_Decrypt+0x7a>
			// Xử lý lỗi khi giải mã AES
			return;
		}
	}

	HAL_CRYP_DeInit(&hcryp);
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <AES_Decrypt+0x84>)
 80007e4:	f002 fc80 	bl	80030e8 <HAL_CRYP_DeInit>
 80007e8:	e002      	b.n	80007f0 <AES_Decrypt+0x7c>
			return;
 80007ea:	bf00      	nop
 80007ec:	e000      	b.n	80007f0 <AES_Decrypt+0x7c>
			return;
 80007ee:	bf00      	nop
}
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000194 	.word	0x20000194

080007fc <setNodeId>:
void setNodeId() {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
//		} else
//			flag_node[i] = false;
//
//	}

	sprintf(Node_id, "Node%d,", count_id);
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <setNodeId+0x40>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	490d      	ldr	r1, [pc, #52]	; (8000840 <setNodeId+0x44>)
 800080a:	480e      	ldr	r0, [pc, #56]	; (8000844 <setNodeId+0x48>)
 800080c:	f008 fb18 	bl	8008e40 <siprintf>
	count_id++;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <setNodeId+0x40>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	3301      	adds	r3, #1
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <setNodeId+0x40>)
 800081c:	701a      	strb	r2, [r3, #0]
	if (count_id == COUNT_ID_END) {
 800081e:	4b07      	ldr	r3, [pc, #28]	; (800083c <setNodeId+0x40>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	2b04      	cmp	r3, #4
 8000826:	d102      	bne.n	800082e <setNodeId+0x32>
		count_id = COUNT_ID_START;
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <setNodeId+0x40>)
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
	}
	printf("Node ID: %s\r\n", Node_id);
 800082e:	4905      	ldr	r1, [pc, #20]	; (8000844 <setNodeId+0x48>)
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <setNodeId+0x4c>)
 8000832:	f008 fa77 	bl	8008d24 <iprintf>

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000000 	.word	0x20000000
 8000840:	0800a14c 	.word	0x0800a14c
 8000844:	200002a0 	.word	0x200002a0
 8000848:	0800a154 	.word	0x0800a154

0800084c <Uart_Indicate>:
void Uart_Indicate() {
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	switch (count_id) {
 8000850:	4b41      	ldr	r3, [pc, #260]	; (8000958 <Uart_Indicate+0x10c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b03      	cmp	r3, #3
 8000858:	d054      	beq.n	8000904 <Uart_Indicate+0xb8>
 800085a:	2b03      	cmp	r3, #3
 800085c:	dc79      	bgt.n	8000952 <Uart_Indicate+0x106>
 800085e:	2b01      	cmp	r3, #1
 8000860:	d002      	beq.n	8000868 <Uart_Indicate+0x1c>
 8000862:	2b02      	cmp	r3, #2
 8000864:	d027      	beq.n	80008b6 <Uart_Indicate+0x6a>
		HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_SET);
		printf("Node ID enable uart: %s\r\n", Node_id);
		break;
	default:
		break;
 8000866:	e074      	b.n	8000952 <Uart_Indicate+0x106>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2120      	movs	r1, #32
 800086c:	483b      	ldr	r0, [pc, #236]	; (800095c <Uart_Indicate+0x110>)
 800086e:	f004 facb 	bl	8004e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2108      	movs	r1, #8
 8000876:	4839      	ldr	r0, [pc, #228]	; (800095c <Uart_Indicate+0x110>)
 8000878:	f004 fac6 	bl	8004e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000882:	4836      	ldr	r0, [pc, #216]	; (800095c <Uart_Indicate+0x110>)
 8000884:	f004 fac0 	bl	8004e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2104      	movs	r1, #4
 800088c:	4834      	ldr	r0, [pc, #208]	; (8000960 <Uart_Indicate+0x114>)
 800088e:	f004 fabb 	bl	8004e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089c:	f004 fab4 	bl	8004e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2110      	movs	r1, #16
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a8:	f004 faae 	bl	8004e08 <HAL_GPIO_WritePin>
		printf("Node ID enable uart: %s\r\n", Node_id);
 80008ac:	492d      	ldr	r1, [pc, #180]	; (8000964 <Uart_Indicate+0x118>)
 80008ae:	482e      	ldr	r0, [pc, #184]	; (8000968 <Uart_Indicate+0x11c>)
 80008b0:	f008 fa38 	bl	8008d24 <iprintf>
		break;
 80008b4:	e04e      	b.n	8000954 <Uart_Indicate+0x108>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2120      	movs	r1, #32
 80008ba:	4828      	ldr	r0, [pc, #160]	; (800095c <Uart_Indicate+0x110>)
 80008bc:	f004 faa4 	bl	8004e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2108      	movs	r1, #8
 80008c4:	4825      	ldr	r0, [pc, #148]	; (800095c <Uart_Indicate+0x110>)
 80008c6:	f004 fa9f 	bl	8004e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d0:	4822      	ldr	r0, [pc, #136]	; (800095c <Uart_Indicate+0x110>)
 80008d2:	f004 fa99 	bl	8004e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2104      	movs	r1, #4
 80008da:	4821      	ldr	r0, [pc, #132]	; (8000960 <Uart_Indicate+0x114>)
 80008dc:	f004 fa94 	bl	8004e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ea:	f004 fa8d 	bl	8004e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2110      	movs	r1, #16
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f004 fa87 	bl	8004e08 <HAL_GPIO_WritePin>
		printf("Node ID enable uart: %s\r\n", Node_id);
 80008fa:	491a      	ldr	r1, [pc, #104]	; (8000964 <Uart_Indicate+0x118>)
 80008fc:	481a      	ldr	r0, [pc, #104]	; (8000968 <Uart_Indicate+0x11c>)
 80008fe:	f008 fa11 	bl	8008d24 <iprintf>
		break;
 8000902:	e027      	b.n	8000954 <Uart_Indicate+0x108>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2120      	movs	r1, #32
 8000908:	4814      	ldr	r0, [pc, #80]	; (800095c <Uart_Indicate+0x110>)
 800090a:	f004 fa7d 	bl	8004e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2108      	movs	r1, #8
 8000912:	4812      	ldr	r0, [pc, #72]	; (800095c <Uart_Indicate+0x110>)
 8000914:	f004 fa78 	bl	8004e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800091e:	480f      	ldr	r0, [pc, #60]	; (800095c <Uart_Indicate+0x110>)
 8000920:	f004 fa72 	bl	8004e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	2104      	movs	r1, #4
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <Uart_Indicate+0x114>)
 800092a:	f004 fa6d 	bl	8004e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f004 fa66 	bl	8004e08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	2110      	movs	r1, #16
 8000940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000944:	f004 fa60 	bl	8004e08 <HAL_GPIO_WritePin>
		printf("Node ID enable uart: %s\r\n", Node_id);
 8000948:	4906      	ldr	r1, [pc, #24]	; (8000964 <Uart_Indicate+0x118>)
 800094a:	4807      	ldr	r0, [pc, #28]	; (8000968 <Uart_Indicate+0x11c>)
 800094c:	f008 f9ea 	bl	8008d24 <iprintf>
		break;
 8000950:	e000      	b.n	8000954 <Uart_Indicate+0x108>
		break;
 8000952:	bf00      	nop

	}
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000000 	.word	0x20000000
 800095c:	48000400 	.word	0x48000400
 8000960:	48000800 	.word	0x48000800
 8000964:	200002a0 	.word	0x200002a0
 8000968:	0800a164 	.word	0x0800a164

0800096c <LL_AHB1_GRP1_EnableClock>:
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000978:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800097a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4313      	orrs	r3, r2
 8000982:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4013      	ands	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000990:	68fb      	ldr	r3, [r7, #12]
}
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80009a0:	2004      	movs	r0, #4
 80009a2:	f7ff ffe3 	bl	800096c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009a6:	2001      	movs	r0, #1
 80009a8:	f7ff ffe0 	bl	800096c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	200b      	movs	r0, #11
 80009b2:	f002 fb36 	bl	8003022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009b6:	200b      	movs	r0, #11
 80009b8:	f002 fb4d 	bl	8003056 <HAL_NVIC_EnableIRQ>

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <LL_AHB2_GRP1_EnableClock>:
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009e4:	68fb      	ldr	r3, [r7, #12]
}
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff ffdb 	bl	80009c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	2002      	movs	r0, #2
 8000a0c:	f7ff ffd8 	bl	80009c0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a10:	2004      	movs	r0, #4
 8000a12:	f7ff ffd5 	bl	80009c0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|GPIO_PIN_3|LED2_Pin|GPIO_PIN_5
 8000a16:	2200      	movs	r2, #0
 8000a18:	f649 2128 	movw	r1, #39464	; 0x9a28
 8000a1c:	4844      	ldr	r0, [pc, #272]	; (8000b30 <MX_GPIO_Init+0x140>)
 8000a1e:	f004 f9f3 	bl	8004e08 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 612f 	mov.w	r1, #2800	; 0xaf0
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2c:	f004 f9ec 	bl	8004e08 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	213c      	movs	r1, #60	; 0x3c
 8000a34:	483f      	ldr	r0, [pc, #252]	; (8000b34 <MX_GPIO_Init+0x144>)
 8000a36:	f004 f9e7 	bl	8004e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000a3a:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000a3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4837      	ldr	r0, [pc, #220]	; (8000b30 <MX_GPIO_Init+0x140>)
 8000a52:	f004 f879 	bl	8004b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA9 PA6 PA7
                           PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_7
 8000a56:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8000a5a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a70:	f004 f86a 	bl	8004b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_12;
 8000a74:	f241 0328 	movw	r3, #4136	; 0x1028
 8000a78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4829      	ldr	r0, [pc, #164]	; (8000b30 <MX_GPIO_Init+0x140>)
 8000a8c:	f004 f85c 	bl	8004b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a90:	2304      	movs	r3, #4
 8000a92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4823      	ldr	r0, [pc, #140]	; (8000b34 <MX_GPIO_Init+0x144>)
 8000aa6:	f004 f84f 	bl	8004b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000aaa:	2338      	movs	r3, #56	; 0x38
 8000aac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	481d      	ldr	r0, [pc, #116]	; (8000b34 <MX_GPIO_Init+0x144>)
 8000ac0:	f004 f842 	bl	8004b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000acc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ada:	f004 f835 	bl	8004b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|B3_Pin;
 8000ade:	2342      	movs	r3, #66	; 0x42
 8000ae0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ae2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ae6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	4810      	ldr	r0, [pc, #64]	; (8000b34 <MX_GPIO_Init+0x144>)
 8000af2:	f004 f829 	bl	8004b48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	2006      	movs	r0, #6
 8000afc:	f002 fa91 	bl	8003022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b00:	2006      	movs	r0, #6
 8000b02:	f002 faa8 	bl	8003056 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2007      	movs	r0, #7
 8000b0c:	f002 fa89 	bl	8003022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b10:	2007      	movs	r0, #7
 8000b12:	f002 faa0 	bl	8003056 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2016      	movs	r0, #22
 8000b1c:	f002 fa81 	bl	8003022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b20:	2016      	movs	r0, #22
 8000b22:	f002 fa98 	bl	8003056 <HAL_NVIC_EnableIRQ>

}
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	48000400 	.word	0x48000400
 8000b34:	48000800 	.word	0x48000800

08000b38 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b48:	f023 0218 	bic.w	r2, r3, #24
 8000b4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b66:	f002 f947 	bl	8002df8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6a:	f000 f813 	bl	8000b94 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6e:	f7ff ff3f 	bl	80009f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b72:	f7ff ff13 	bl	800099c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b76:	f000 feff 	bl	8001978 <MX_USART2_UART_Init>
  MX_SUBGHZ_Init();
 8000b7a:	f000 fac5 	bl	8001108 <MX_SUBGHZ_Init>
  MX_AES_Init();
 8000b7e:	f7ff fd19 	bl	80005b4 <MX_AES_Init>
  /* USER CODE BEGIN 2 */
  radioInit();
 8000b82:	f000 fae7 	bl	8001154 <radioInit>
  fsmInit();
 8000b86:	f000 fdd5 	bl	8001734 <fsmInit>
  UartDmaStart();
 8000b8a:	f000 ffdf 	bl	8001b4c <UartDmaStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 SUBGHZ();
 8000b8e:	f000 fe23 	bl	80017d8 <SUBGHZ>
 8000b92:	e7fc      	b.n	8000b8e <main+0x2c>

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b09a      	sub	sp, #104	; 0x68
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0320 	add.w	r3, r7, #32
 8000b9e:	2248      	movs	r2, #72	; 0x48
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f008 f8b6 	bl	8008d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
 8000bb6:	615a      	str	r2, [r3, #20]
 8000bb8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bba:	f004 f955 	bl	8004e68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff ffba 	bl	8000b38 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <SystemClock_Config+0xac>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bcc:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <SystemClock_Config+0xac>)
 8000bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <SystemClock_Config+0xac>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000be0:	2324      	movs	r3, #36	; 0x24
 8000be2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000be4:	2381      	movs	r3, #129	; 0x81
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000be8:	2301      	movs	r3, #1
 8000bea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000bec:	2300      	movs	r3, #0
 8000bee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000bf0:	23b0      	movs	r3, #176	; 0xb0
 8000bf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf8:	f107 0320 	add.w	r3, r7, #32
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f004 fc05 	bl	800540c <HAL_RCC_OscConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c08:	f000 f976 	bl	8000ef8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000c0c:	234f      	movs	r3, #79	; 0x4f
 8000c0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2102      	movs	r1, #2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f004 ff71 	bl	8005b10 <HAL_RCC_ClockConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000c34:	f000 f960 	bl	8000ef8 <Error_Handler>
  }
}
 8000c38:	bf00      	nop
 8000c3a:	3768      	adds	r7, #104	; 0x68
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	58000400 	.word	0x58000400

08000c44 <HAL_GPIO_EXTI_Callback>:
  * @param  radioIrq  interrupt pending status information
  * @retval None
  */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_1) {
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	f040 8132 	bne.w	8000eba <HAL_GPIO_EXTI_Callback+0x276>

				switch (freChannel) {
 8000c56:	4b9b      	ldr	r3, [pc, #620]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x280>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b07      	cmp	r3, #7
 8000c5e:	f200 80fb 	bhi.w	8000e58 <HAL_GPIO_EXTI_Callback+0x214>
 8000c62:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <HAL_GPIO_EXTI_Callback+0x24>)
 8000c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c68:	08000c89 	.word	0x08000c89
 8000c6c:	08000cc3 	.word	0x08000cc3
 8000c70:	08000cfd 	.word	0x08000cfd
 8000c74:	08000d37 	.word	0x08000d37
 8000c78:	08000d71 	.word	0x08000d71
 8000c7c:	08000dab 	.word	0x08000dab
 8000c80:	08000de5 	.word	0x08000de5
 8000c84:	08000e1f 	.word	0x08000e1f
				case 0:
					RF_FREQUENCY = RF_FREQUENCY0
 8000c88:	4b8f      	ldr	r3, [pc, #572]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x284>)
 8000c8a:	4a90      	ldr	r2, [pc, #576]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x288>)
 8000c8c:	601a      	str	r2, [r3, #0]
					;
					HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c96:	f004 f8b7 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2140      	movs	r1, #64	; 0x40
 8000c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca2:	f004 f8b1 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2140      	movs	r1, #64	; 0x40
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cae:	f004 f8ab 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbc:	f004 f8a4 	bl	8004e08 <HAL_GPIO_WritePin>
					break;
 8000cc0:	e0e6      	b.n	8000e90 <HAL_GPIO_EXTI_Callback+0x24c>
				case 1:
					RF_FREQUENCY = RF_FREQUENCY1
 8000cc2:	4b81      	ldr	r3, [pc, #516]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x284>)
 8000cc4:	4a81      	ldr	r2, [pc, #516]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x288>)
 8000cc6:	601a      	str	r2, [r3, #0]
					;
					HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd0:	f004 f89a 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2140      	movs	r1, #64	; 0x40
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cdc:	f004 f894 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2140      	movs	r1, #64	; 0x40
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f004 f88e 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf6:	f004 f887 	bl	8004e08 <HAL_GPIO_WritePin>
					break;
 8000cfa:	e0c9      	b.n	8000e90 <HAL_GPIO_EXTI_Callback+0x24c>
				case 2:
					RF_FREQUENCY = RF_FREQUENCY2
 8000cfc:	4b72      	ldr	r3, [pc, #456]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x284>)
 8000cfe:	4a73      	ldr	r2, [pc, #460]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x288>)
 8000d00:	601a      	str	r2, [r3, #0]
					;
					HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0a:	f004 f87d 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2140      	movs	r1, #64	; 0x40
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d16:	f004 f877 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2140      	movs	r1, #64	; 0x40
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d22:	f004 f871 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d30:	f004 f86a 	bl	8004e08 <HAL_GPIO_WritePin>
					break;
 8000d34:	e0ac      	b.n	8000e90 <HAL_GPIO_EXTI_Callback+0x24c>
				case 3:
					RF_FREQUENCY = RF_FREQUENCY3
 8000d36:	4b64      	ldr	r3, [pc, #400]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x284>)
 8000d38:	4a64      	ldr	r2, [pc, #400]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x288>)
 8000d3a:	601a      	str	r2, [r3, #0]
					;
					HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d44:	f004 f860 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2140      	movs	r1, #64	; 0x40
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d50:	f004 f85a 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2140      	movs	r1, #64	; 0x40
 8000d58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5c:	f004 f854 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6a:	f004 f84d 	bl	8004e08 <HAL_GPIO_WritePin>
					break;
 8000d6e:	e08f      	b.n	8000e90 <HAL_GPIO_EXTI_Callback+0x24c>
				case 4:
					RF_FREQUENCY = RF_FREQUENCY4
 8000d70:	4b55      	ldr	r3, [pc, #340]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x284>)
 8000d72:	4a56      	ldr	r2, [pc, #344]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x288>)
 8000d74:	601a      	str	r2, [r3, #0]
					;
					HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7e:	f004 f843 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	2140      	movs	r1, #64	; 0x40
 8000d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8a:	f004 f83d 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2140      	movs	r1, #64	; 0x40
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d96:	f004 f837 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_SET);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da4:	f004 f830 	bl	8004e08 <HAL_GPIO_WritePin>
					break;
 8000da8:	e072      	b.n	8000e90 <HAL_GPIO_EXTI_Callback+0x24c>
				case 5:
					RF_FREQUENCY = RF_FREQUENCY5
 8000daa:	4b47      	ldr	r3, [pc, #284]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x284>)
 8000dac:	4a47      	ldr	r2, [pc, #284]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x288>)
 8000dae:	601a      	str	r2, [r3, #0]
					;
					HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2180      	movs	r1, #128	; 0x80
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f004 f826 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2140      	movs	r1, #64	; 0x40
 8000dc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc4:	f004 f820 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_SET);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd0:	f004 f81a 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dde:	f004 f813 	bl	8004e08 <HAL_GPIO_WritePin>
					break;
 8000de2:	e055      	b.n	8000e90 <HAL_GPIO_EXTI_Callback+0x24c>
				case 6:
					RF_FREQUENCY = RF_FREQUENCY6
 8000de4:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x284>)
 8000de6:	4a39      	ldr	r2, [pc, #228]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x288>)
 8000de8:	601a      	str	r2, [r3, #0]
					;
					HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f004 f809 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2140      	movs	r1, #64	; 0x40
 8000dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfe:	f004 f803 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2140      	movs	r1, #64	; 0x40
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0a:	f003 fffd 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e18:	f003 fff6 	bl	8004e08 <HAL_GPIO_WritePin>
					break;
 8000e1c:	e038      	b.n	8000e90 <HAL_GPIO_EXTI_Callback+0x24c>
				case 7:
					RF_FREQUENCY = RF_FREQUENCY7
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x284>)
 8000e20:	4a2a      	ldr	r2, [pc, #168]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x288>)
 8000e22:	601a      	str	r2, [r3, #0]
					;
					HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f003 ffec 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2140      	movs	r1, #64	; 0x40
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e38:	f003 ffe6 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2140      	movs	r1, #64	; 0x40
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e44:	f003 ffe0 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e52:	f003 ffd9 	bl	8004e08 <HAL_GPIO_WritePin>
					break;
 8000e56:	e01b      	b.n	8000e90 <HAL_GPIO_EXTI_Callback+0x24c>

				default:
					RF_FREQUENCY = RF_FREQUENCY0
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x284>)
 8000e5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x288>)
 8000e5c:	601a      	str	r2, [r3, #0]
					;
					HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2180      	movs	r1, #128	; 0x80
 8000e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e66:	f003 ffcf 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2140      	movs	r1, #64	; 0x40
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f003 ffc9 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2140      	movs	r1, #64	; 0x40
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7e:	f003 ffc3 	bl	8004e08 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8c:	f003 ffbc 	bl	8004e08 <HAL_GPIO_WritePin>

					//break
				}
				printf("Fre: %s\r\n", RF_FREQUENCY);
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x284>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	480e      	ldr	r0, [pc, #56]	; (8000ed0 <HAL_GPIO_EXTI_Callback+0x28c>)
 8000e98:	f007 ff44 	bl	8008d24 <iprintf>
				freChannel++;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x280>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x280>)
 8000ea8:	701a      	strb	r2, [r3, #0]
				if (freChannel == FRE_CHANNEL_END)
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x280>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b07      	cmp	r3, #7
 8000eb2:	d102      	bne.n	8000eba <HAL_GPIO_EXTI_Callback+0x276>
					freChannel = FRE_CHANNEL_START;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x280>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
			}
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200005c7 	.word	0x200005c7
 8000ec8:	20000104 	.word	0x20000104
 8000ecc:	19cf0e40 	.word	0x19cf0e40
 8000ed0:	0800a180 	.word	0x0800a180

08000ed4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d101      	bne.n	8000eea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ee6:	f001 ffa7 	bl	8002e38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40014800 	.word	0x40014800

08000ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000efc:	b672      	cpsid	i
}
 8000efe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <Error_Handler+0x8>

08000f02 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr

08000f0e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b085      	sub	sp, #20
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
	...

08000f40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f50:	2300      	movs	r3, #0
 8000f52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000f56:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000f5a:	f7ff ffd8 	bl	8000f0e <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f5e:	f107 020c 	add.w	r2, r7, #12
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f004 ffeb 	bl	8005f44 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f6e:	f004 ffd7 	bl	8005f20 <HAL_RCC_GetPCLK2Freq>
 8000f72:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f76:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <HAL_InitTick+0xbc>)
 8000f78:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7c:	0c9b      	lsrs	r3, r3, #18
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <HAL_InitTick+0xc0>)
 8000f84:	4a1f      	ldr	r2, [pc, #124]	; (8001004 <HAL_InitTick+0xc4>)
 8000f86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <HAL_InitTick+0xc0>)
 8000f8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f8e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000f90:	4a1b      	ldr	r2, [pc, #108]	; (8001000 <HAL_InitTick+0xc0>)
 8000f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f94:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <HAL_InitTick+0xc0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_InitTick+0xc0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8000fa2:	4817      	ldr	r0, [pc, #92]	; (8001000 <HAL_InitTick+0xc0>)
 8000fa4:	f005 ff9a 	bl	8006edc <HAL_TIM_Base_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8000fae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d11b      	bne.n	8000fee <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000fb6:	4812      	ldr	r0, [pc, #72]	; (8001000 <HAL_InitTick+0xc0>)
 8000fb8:	f005 fff0 	bl	8006f9c <HAL_TIM_Base_Start_IT>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8000fc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d111      	bne.n	8000fee <HAL_InitTick+0xae>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000fca:	201d      	movs	r0, #29
 8000fcc:	f002 f843 	bl	8003056 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b0f      	cmp	r3, #15
 8000fd4:	d808      	bhi.n	8000fe8 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	201d      	movs	r0, #29
 8000fdc:	f002 f821 	bl	8003022 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe0:	4a09      	ldr	r2, [pc, #36]	; (8001008 <HAL_InitTick+0xc8>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e002      	b.n	8000fee <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

 /* Return function status */
  return status;
 8000fee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3738      	adds	r7, #56	; 0x38
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	431bde83 	.word	0x431bde83
 8001000:	200005c8 	.word	0x200005c8
 8001004:	40014800 	.word	0x40014800
 8001008:	2000010c 	.word	0x2000010c

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <NMI_Handler+0x4>

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler+0x4>

0800101e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <UsageFault_Handler+0x4>

0800102a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr

08001036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr

0800104e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800105e:	2001      	movs	r0, #1
 8001060:	f003 feea 	bl	8004e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800106c:	2002      	movs	r0, #2
 800106e:	f003 fee3 	bl	8004e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <DMA1_Channel1_IRQHandler+0x10>)
 800107e:	f003 fbc5 	bl	800480c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200007ec 	.word	0x200007ec

0800108c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8001090:	2040      	movs	r0, #64	; 0x40
 8001092:	f003 fed1 	bl	8004e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <TIM17_IRQHandler+0x10>)
 80010a2:	f005 ffc7 	bl	8007034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200005c8 	.word	0x200005c8

080010b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <USART2_IRQHandler+0x10>)
 80010b6:	f006 fa75 	bl	80075a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000758 	.word	0x20000758

080010c4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <SUBGHZ_Radio_IRQHandler+0x10>)
 80010ca:	f005 fd5f 	bl	8006b8c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000748 	.word	0x20000748

080010d8 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80010e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80010e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80010f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4013      	ands	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010fc:	68fb      	ldr	r3, [r7, #12]
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <MX_SUBGHZ_Init>:
/* USER CODE END 0 */

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	/* USER CODE END SUBGHZ_Init 0 */

	/* USER CODE BEGIN SUBGHZ_Init 1 */

	/* USER CODE END SUBGHZ_Init 1 */
	hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_SUBGHZ_Init+0x20>)
 800110e:	2208      	movs	r2, #8
 8001110:	601a      	str	r2, [r3, #0]
	if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_SUBGHZ_Init+0x20>)
 8001114:	f005 fab8 	bl	8006688 <HAL_SUBGHZ_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_SUBGHZ_Init+0x1a>
		Error_Handler();
 800111e:	f7ff feeb 	bl	8000ef8 <Error_Handler>
	}
	/* USER CODE BEGIN SUBGHZ_Init 2 */

	/* USER CODE END SUBGHZ_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000748 	.word	0x20000748

0800112c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef *subghzHandle) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN SUBGHZ_MspInit 0 */

	/* USER CODE END SUBGHZ_MspInit 0 */
	/* SUBGHZ clock enable */
	__HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001134:	2001      	movs	r0, #1
 8001136:	f7ff ffcf 	bl	80010d8 <LL_APB3_GRP1_EnableClock>

	/* SUBGHZ interrupt Init */
	HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	2032      	movs	r0, #50	; 0x32
 8001140:	f001 ff6f 	bl	8003022 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001144:	2032      	movs	r0, #50	; 0x32
 8001146:	f001 ff86 	bl	8003056 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN SUBGHZ_MspInit 1 */

	/* USER CODE END SUBGHZ_MspInit 1 */
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <radioInit>:

	/* USER CODE END SUBGHZ_MspDeInit 1 */
}

/* USER CODE BEGIN 1 */
void radioInit(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
	// Initialize the hardware (SPI bus, TCXO control, RF switch)
	SUBGRF_Init(RadioOnDioIrq);
 800115a:	4831      	ldr	r0, [pc, #196]	; (8001220 <radioInit+0xcc>)
 800115c:	f000 fe4a 	bl	8001df4 <SUBGRF_Init>

	// Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
	// "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
	SUBGRF_WriteRegister(SUBGHZ_SMPSC0R,
			(SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 8001160:	f640 1016 	movw	r0, #2326	; 0x916
 8001164:	f001 fc4a 	bl	80029fc <SUBGRF_ReadRegister>
 8001168:	4603      	mov	r3, r0
	SUBGRF_WriteRegister(SUBGHZ_SMPSC0R,
 800116a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4619      	mov	r1, r3
 8001172:	f640 1016 	movw	r0, #2326	; 0x916
 8001176:	f001 fc2d 	bl	80029d4 <SUBGRF_WriteRegister>
	SUBGRF_SetRegulatorMode();
 800117a:	f000 ffc4 	bl	8002106 <SUBGRF_SetRegulatorMode>

	// Use the whole 256-byte buffer for both TX and RX
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 800117e:	2100      	movs	r1, #0
 8001180:	2000      	movs	r0, #0
 8001182:	f001 fb91 	bl	80028a8 <SUBGRF_SetBufferBaseAddress>

	SUBGRF_SetRfFrequency(RF_FREQUENCY);
 8001186:	4b27      	ldr	r3, [pc, #156]	; (8001224 <radioInit+0xd0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f001 f8e0 	bl	8002350 <SUBGRF_SetRfFrequency>
	SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 8001190:	200e      	movs	r0, #14
 8001192:	f001 fd3b 	bl	8002c0c <SUBGRF_SetRfTxPower>
	SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 8001196:	2000      	movs	r0, #0
 8001198:	f000 ffa6 	bl	80020e8 <SUBGRF_SetStopRxTimerOnPreambleDetect>

	SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 800119c:	2001      	movs	r0, #1
 800119e:	f001 f91d 	bl	80023dc <SUBGRF_SetPacketType>

	SUBGRF_WriteRegister( REG_LR_SYNCWORD,
 80011a2:	2114      	movs	r1, #20
 80011a4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80011a8:	f001 fc14 	bl	80029d4 <SUBGRF_WriteRegister>
			( LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
	SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1,
 80011ac:	2124      	movs	r1, #36	; 0x24
 80011ae:	f240 7041 	movw	r0, #1857	; 0x741
 80011b2:	f001 fc0f 	bl	80029d4 <SUBGRF_WriteRegister>
	LORA_MAC_PRIVATE_SYNCWORD & 0xFF);

	ModulationParams_t modulationParams;
	modulationParams.PacketType = PACKET_TYPE_LORA;
 80011b6:	2301      	movs	r3, #1
 80011b8:	713b      	strb	r3, [r7, #4]
	modulationParams.Params.LoRa.Bandwidth = Bandwidths[LORA_BANDWIDTH];
 80011ba:	2304      	movs	r3, #4
 80011bc:	777b      	strb	r3, [r7, #29]
	modulationParams.Params.LoRa.CodingRate =
 80011be:	2301      	movs	r3, #1
 80011c0:	77bb      	strb	r3, [r7, #30]
			(RadioLoRaCodingRates_t) LORA_CODINGRATE;
	modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80011c2:	2300      	movs	r3, #0
 80011c4:	77fb      	strb	r3, [r7, #31]
	modulationParams.Params.LoRa.SpreadingFactor =
 80011c6:	2307      	movs	r3, #7
 80011c8:	773b      	strb	r3, [r7, #28]
			(RadioLoRaSpreadingFactors_t) LORA_SPREADING_FACTOR;
	SUBGRF_SetModulationParams(&modulationParams);
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 f9f9 	bl	80025c4 <SUBGRF_SetModulationParams>

	packetParams.PacketType = PACKET_TYPE_LORA;
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <radioInit+0xd4>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
	packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <radioInit+0xd4>)
 80011da:	2201      	movs	r2, #1
 80011dc:	761a      	strb	r2, [r3, #24]
	packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <radioInit+0xd4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	749a      	strb	r2, [r3, #18]
	packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <radioInit+0xd4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	765a      	strb	r2, [r3, #25]
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <radioInit+0xd4>)
 80011ec:	22ff      	movs	r2, #255	; 0xff
 80011ee:	615a      	str	r2, [r3, #20]

	packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <radioInit+0xd4>)
 80011f2:	2208      	movs	r2, #8
 80011f4:	821a      	strh	r2, [r3, #16]
	SUBGRF_SetPacketParams(&packetParams);
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <radioInit+0xd4>)
 80011f8:	f001 fab6 	bl	8002768 <SUBGRF_SetPacketParams>

	//SUBGRF_SetLoRaSymbNumTimeout(LORA_SYMBOL_TIMEOUT);

	// WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
	// RegIqPolaritySetup @address 0x0736
	SUBGRF_WriteRegister(0x0736, SUBGRF_ReadRegister(0x0736) | (1 << 2));
 80011fc:	f240 7036 	movw	r0, #1846	; 0x736
 8001200:	f001 fbfc 	bl	80029fc <SUBGRF_ReadRegister>
 8001204:	4603      	mov	r3, r0
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	b2db      	uxtb	r3, r3
 800120c:	4619      	mov	r1, r3
 800120e:	f240 7036 	movw	r0, #1846	; 0x736
 8001212:	f001 fbdf 	bl	80029d4 <SUBGRF_WriteRegister>
}
 8001216:	bf00      	nop
 8001218:	3720      	adds	r7, #32
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	0800122d 	.word	0x0800122d
 8001224:	20000104 	.word	0x20000104
 8001228:	20000728 	.word	0x20000728

0800122c <RadioOnDioIrq>:
void RadioOnDioIrq(RadioIrqMasks_t radioIrq) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	80fb      	strh	r3, [r7, #6]
	switch (radioIrq) {
 8001236:	88fb      	ldrh	r3, [r7, #6]
 8001238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800123c:	d013      	beq.n	8001266 <RadioOnDioIrq+0x3a>
 800123e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001242:	dc26      	bgt.n	8001292 <RadioOnDioIrq+0x66>
 8001244:	2b40      	cmp	r3, #64	; 0x40
 8001246:	d020      	beq.n	800128a <RadioOnDioIrq+0x5e>
 8001248:	2b40      	cmp	r3, #64	; 0x40
 800124a:	dc22      	bgt.n	8001292 <RadioOnDioIrq+0x66>
 800124c:	2b01      	cmp	r3, #1
 800124e:	d002      	beq.n	8001256 <RadioOnDioIrq+0x2a>
 8001250:	2b02      	cmp	r3, #2
 8001252:	d004      	beq.n	800125e <RadioOnDioIrq+0x32>
		break;
	case IRQ_CRC_ERROR:
		eventReceptor = eventRxError;
		break;
	default:
		break;
 8001254:	e01d      	b.n	8001292 <RadioOnDioIrq+0x66>
		eventReceptor = eventTxDone;
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <RadioOnDioIrq+0x74>)
 8001258:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <RadioOnDioIrq+0x78>)
 800125a:	601a      	str	r2, [r3, #0]
		break;
 800125c:	e01c      	b.n	8001298 <RadioOnDioIrq+0x6c>
		eventReceptor = eventRxDone;
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <RadioOnDioIrq+0x74>)
 8001260:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <RadioOnDioIrq+0x7c>)
 8001262:	601a      	str	r2, [r3, #0]
		break;
 8001264:	e018      	b.n	8001298 <RadioOnDioIrq+0x6c>
		if (SUBGRF_GetOperatingMode() == MODE_TX) {
 8001266:	f000 fe0d 	bl	8001e84 <SUBGRF_GetOperatingMode>
 800126a:	4603      	mov	r3, r0
 800126c:	2b04      	cmp	r3, #4
 800126e:	d103      	bne.n	8001278 <RadioOnDioIrq+0x4c>
			eventReceptor = eventTxTimeout;
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <RadioOnDioIrq+0x74>)
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <RadioOnDioIrq+0x80>)
 8001274:	601a      	str	r2, [r3, #0]
		break;
 8001276:	e00e      	b.n	8001296 <RadioOnDioIrq+0x6a>
		} else if (SUBGRF_GetOperatingMode() == MODE_RX) {
 8001278:	f000 fe04 	bl	8001e84 <SUBGRF_GetOperatingMode>
 800127c:	4603      	mov	r3, r0
 800127e:	2b05      	cmp	r3, #5
 8001280:	d109      	bne.n	8001296 <RadioOnDioIrq+0x6a>
			eventReceptor = eventRxTimeout;
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <RadioOnDioIrq+0x74>)
 8001284:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <RadioOnDioIrq+0x84>)
 8001286:	601a      	str	r2, [r3, #0]
		break;
 8001288:	e005      	b.n	8001296 <RadioOnDioIrq+0x6a>
		eventReceptor = eventRxError;
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <RadioOnDioIrq+0x74>)
 800128c:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <RadioOnDioIrq+0x88>)
 800128e:	601a      	str	r2, [r3, #0]
		break;
 8001290:	e002      	b.n	8001298 <RadioOnDioIrq+0x6c>
		break;
 8001292:	bf00      	nop
 8001294:	e000      	b.n	8001298 <RadioOnDioIrq+0x6c>
		break;
 8001296:	bf00      	nop
	}
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000744 	.word	0x20000744
 80012a4:	080012b9 	.word	0x080012b9
 80012a8:	08001321 	.word	0x08001321
 80012ac:	08001415 	.word	0x08001415
 80012b0:	0800147d 	.word	0x0800147d
 80012b4:	080014e9 	.word	0x080014e9

080012b8 <eventTxDone>:
/**
 * @brief  Process the TX Done event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventTxDone(pingPongFSM_t *const fsm) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) "Event TX Done\r\n", 15,
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	220f      	movs	r2, #15
 80012c6:	4914      	ldr	r1, [pc, #80]	; (8001318 <eventTxDone+0x60>)
 80012c8:	4814      	ldr	r0, [pc, #80]	; (800131c <eventTxDone+0x64>)
 80012ca:	f006 f8e5 	bl	8007498 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	switch (fsm->state) {
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d002      	beq.n	80012dc <eventTxDone+0x24>
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d00d      	beq.n	80012f6 <eventTxDone+0x3e>
		default:
			break;
		}
		break;
	default:
		break;
 80012da:	e019      	b.n	8001310 <eventTxDone+0x58>
		switch (fsm->subState) {
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	785b      	ldrb	r3, [r3, #1]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d106      	bne.n	80012f2 <eventTxDone+0x3a>
			enterMasterRx(fsm);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 f935 	bl	8001554 <enterMasterRx>
			fsm->subState = SSTATE_RX;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	705a      	strb	r2, [r3, #1]
			break;
 80012f0:	e000      	b.n	80012f4 <eventTxDone+0x3c>
			break;
 80012f2:	bf00      	nop
		break;
 80012f4:	e00c      	b.n	8001310 <eventTxDone+0x58>
		switch (fsm->subState) {
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	785b      	ldrb	r3, [r3, #1]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d106      	bne.n	800130c <eventTxDone+0x54>
			enterSlaveRx(fsm);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f956 	bl	80015b0 <enterSlaveRx>
			fsm->subState = SSTATE_RX;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	705a      	strb	r2, [r3, #1]
			break;
 800130a:	e000      	b.n	800130e <eventTxDone+0x56>
			break;
 800130c:	bf00      	nop
		break;
 800130e:	bf00      	nop
	}
}
 8001310:	bf00      	nop
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	0800a18c 	.word	0x0800a18c
 800131c:	20000758 	.word	0x20000758

08001320 <eventRxDone>:
/**
 * @brief  Process the RX Done event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventRxDone(pingPongFSM_t *const fsm) {
 8001320:	b580      	push	{r7, lr}
 8001322:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8001326:	af00      	add	r7, sp, #0
 8001328:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800132c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001330:	6018      	str	r0, [r3, #0]
	char DataREC[1023];
	HAL_UART_Transmit(&huart2, (uint8_t*) "Event RX Done\r\n", 15,
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	220f      	movs	r2, #15
 8001338:	4930      	ldr	r1, [pc, #192]	; (80013fc <eventRxDone+0xdc>)
 800133a:	4831      	ldr	r0, [pc, #196]	; (8001400 <eventRxDone+0xe0>)
 800133c:	f006 f8ac 	bl	8007498 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	switch (fsm->state) {
 8001340:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001344:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d001      	beq.n	8001354 <eventRxDone+0x34>
 8001350:	2b02      	cmp	r3, #2
//		default:
//			break;
//		}
//		break;
//	default:
		break;
 8001352:	e04d      	b.n	80013f0 <eventRxDone+0xd0>
		switch (fsm->subState) {
 8001354:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001358:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	785b      	ldrb	r3, [r3, #1]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d143      	bne.n	80013ec <eventRxDone+0xcc>
			transitionRxDone(fsm);
 8001364:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001368:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	f000 f99b 	bl	80016a8 <transitionRxDone>
			memcpy(rxBuffer_encypt, fsm->rxBuffer, sizeof(fsm->rxBuffer));
 8001372:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001376:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3310      	adds	r3, #16
 800137e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001382:	4619      	mov	r1, r3
 8001384:	481f      	ldr	r0, [pc, #124]	; (8001404 <eventRxDone+0xe4>)
 8001386:	f007 fcb7 	bl	8008cf8 <memcpy>
			AES_decrypt_MasterPacket();
 800138a:	f7ff f991 	bl	80006b0 <AES_decrypt_MasterPacket>
			if (strncmp(rxBuffer_decypt, Node_id, 6) == 0) {
 800138e:	2206      	movs	r2, #6
 8001390:	491d      	ldr	r1, [pc, #116]	; (8001408 <eventRxDone+0xe8>)
 8001392:	481e      	ldr	r0, [pc, #120]	; (800140c <eventRxDone+0xec>)
 8001394:	f007 fd83 	bl	8008e9e <strncmp>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d11e      	bne.n	80013dc <eventRxDone+0xbc>
				Uart_Indicate();
 800139e:	f7ff fa55 	bl	800084c <Uart_Indicate>
						strlen(rxBuffer_decypt), HAL_MAX_DELAY);
 80013a2:	481a      	ldr	r0, [pc, #104]	; (800140c <eventRxDone+0xec>)
 80013a4:	f7fe feec 	bl	8000180 <strlen>
 80013a8:	4603      	mov	r3, r0
				HAL_UART_Transmit(&huart2, (uint8_t*) rxBuffer_decypt,
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	4916      	ldr	r1, [pc, #88]	; (800140c <eventRxDone+0xec>)
 80013b2:	4813      	ldr	r0, [pc, #76]	; (8001400 <eventRxDone+0xe0>)
 80013b4:	f006 f870 	bl	8007498 <HAL_UART_Transmit>
				printf("\r\n");
 80013b8:	4815      	ldr	r0, [pc, #84]	; (8001410 <eventRxDone+0xf0>)
 80013ba:	f007 fd39 	bl	8008e30 <puts>
				enterMasterTx(fsm);
 80013be:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80013c2:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	f000 f920 	bl	800160c <enterMasterTx>
				fsm->subState = SSTATE_TX;
 80013cc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80013d0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2202      	movs	r2, #2
 80013d8:	705a      	strb	r2, [r3, #1]
			break;
 80013da:	e008      	b.n	80013ee <eventRxDone+0xce>
				enterMasterRx(fsm);
 80013dc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80013e0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80013e4:	6818      	ldr	r0, [r3, #0]
 80013e6:	f000 f8b5 	bl	8001554 <enterMasterRx>
			break;
 80013ea:	e000      	b.n	80013ee <eventRxDone+0xce>
			break;
 80013ec:	bf00      	nop
		break;
 80013ee:	bf00      	nop
	}
}
 80013f0:	bf00      	nop
 80013f2:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	0800a19c 	.word	0x0800a19c
 8001400:	20000758 	.word	0x20000758
 8001404:	200002c8 	.word	0x200002c8
 8001408:	200002a0 	.word	0x200002a0
 800140c:	200003c8 	.word	0x200003c8
 8001410:	0800a1ac 	.word	0x0800a1ac

08001414 <eventTxTimeout>:
/**
 * @brief  Process the TX Timeout event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventTxTimeout(pingPongFSM_t *const fsm) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) "Event TX Timeout\r\n", 18,
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	2212      	movs	r2, #18
 8001422:	4914      	ldr	r1, [pc, #80]	; (8001474 <eventTxTimeout+0x60>)
 8001424:	4814      	ldr	r0, [pc, #80]	; (8001478 <eventTxTimeout+0x64>)
 8001426:	f006 f837 	bl	8007498 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	switch (fsm->state) {
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d002      	beq.n	8001438 <eventTxTimeout+0x24>
 8001432:	2b02      	cmp	r3, #2
 8001434:	d00d      	beq.n	8001452 <eventTxTimeout+0x3e>
		default:
			break;
		}
		break;
	default:
		break;
 8001436:	e019      	b.n	800146c <eventTxTimeout+0x58>
		switch (fsm->subState) {
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	785b      	ldrb	r3, [r3, #1]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d106      	bne.n	800144e <eventTxTimeout+0x3a>
			enterMasterRx(fsm);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f887 	bl	8001554 <enterMasterRx>
			fsm->subState = SSTATE_RX;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	705a      	strb	r2, [r3, #1]
			break;
 800144c:	e000      	b.n	8001450 <eventTxTimeout+0x3c>
			break;
 800144e:	bf00      	nop
		break;
 8001450:	e00c      	b.n	800146c <eventTxTimeout+0x58>
		switch (fsm->subState) {
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	785b      	ldrb	r3, [r3, #1]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d106      	bne.n	8001468 <eventTxTimeout+0x54>
			enterSlaveRx(fsm);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 f8a8 	bl	80015b0 <enterSlaveRx>
			fsm->subState = SSTATE_RX;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	705a      	strb	r2, [r3, #1]
			break;
 8001466:	e000      	b.n	800146a <eventTxTimeout+0x56>
			break;
 8001468:	bf00      	nop
		break;
 800146a:	bf00      	nop
	}
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	0800a1b0 	.word	0x0800a1b0
 8001478:	20000758 	.word	0x20000758

0800147c <eventRxTimeout>:
/**
 * @brief  Process the RX Timeout event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventRxTimeout(pingPongFSM_t *const fsm) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) "Event RX Timeout\r\n", 18,
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
 8001488:	2212      	movs	r2, #18
 800148a:	4915      	ldr	r1, [pc, #84]	; (80014e0 <eventRxTimeout+0x64>)
 800148c:	4815      	ldr	r0, [pc, #84]	; (80014e4 <eventRxTimeout+0x68>)
 800148e:	f006 f803 	bl	8007498 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	switch (fsm->state) {
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d002      	beq.n	80014a0 <eventRxTimeout+0x24>
 800149a:	2b02      	cmp	r3, #2
 800149c:	d012      	beq.n	80014c4 <eventRxTimeout+0x48>
		default:
			break;
		}
		break;
	default:
		break;
 800149e:	e01b      	b.n	80014d8 <eventRxTimeout+0x5c>
		switch (fsm->subState) {
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	785b      	ldrb	r3, [r3, #1]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d10b      	bne.n	80014c0 <eventRxTimeout+0x44>
			HAL_Delay(fsm->randomDelay);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 fcdf 	bl	8002e70 <HAL_Delay>
			enterMasterTx(fsm);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f8aa 	bl	800160c <enterMasterTx>
			fsm->subState = SSTATE_TX;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2202      	movs	r2, #2
 80014bc:	705a      	strb	r2, [r3, #1]
			break;
 80014be:	e000      	b.n	80014c2 <eventRxTimeout+0x46>
			break;
 80014c0:	bf00      	nop
		break;
 80014c2:	e009      	b.n	80014d8 <eventRxTimeout+0x5c>
		switch (fsm->subState) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	785b      	ldrb	r3, [r3, #1]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d103      	bne.n	80014d4 <eventRxTimeout+0x58>
			enterSlaveRx(fsm);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f86f 	bl	80015b0 <enterSlaveRx>
			break;
 80014d2:	e000      	b.n	80014d6 <eventRxTimeout+0x5a>
			break;
 80014d4:	bf00      	nop
		break;
 80014d6:	bf00      	nop
	}
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	0800a1c4 	.word	0x0800a1c4
 80014e4:	20000758 	.word	0x20000758

080014e8 <eventRxError>:
/**
 * @brief  Process the RX Error event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventRxError(pingPongFSM_t *const fsm) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) "Event Rx Error\r\n", 16,
 80014f0:	f04f 33ff 	mov.w	r3, #4294967295
 80014f4:	2210      	movs	r2, #16
 80014f6:	4915      	ldr	r1, [pc, #84]	; (800154c <eventRxError+0x64>)
 80014f8:	4815      	ldr	r0, [pc, #84]	; (8001550 <eventRxError+0x68>)
 80014fa:	f005 ffcd 	bl	8007498 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	switch (fsm->state) {
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d002      	beq.n	800150c <eventRxError+0x24>
 8001506:	2b02      	cmp	r3, #2
 8001508:	d012      	beq.n	8001530 <eventRxError+0x48>
		default:
			break;
		}
		break;
	default:
		break;
 800150a:	e01b      	b.n	8001544 <eventRxError+0x5c>
		switch (fsm->subState) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	785b      	ldrb	r3, [r3, #1]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d10b      	bne.n	800152c <eventRxError+0x44>
			HAL_Delay(fsm->randomDelay);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	4618      	mov	r0, r3
 800151a:	f001 fca9 	bl	8002e70 <HAL_Delay>
			enterMasterTx(fsm);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f874 	bl	800160c <enterMasterTx>
			fsm->subState = SSTATE_TX;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2202      	movs	r2, #2
 8001528:	705a      	strb	r2, [r3, #1]
			break;
 800152a:	e000      	b.n	800152e <eventRxError+0x46>
			break;
 800152c:	bf00      	nop
		break;
 800152e:	e009      	b.n	8001544 <eventRxError+0x5c>
		switch (fsm->subState) {
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d103      	bne.n	8001540 <eventRxError+0x58>
			enterSlaveRx(fsm);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 f839 	bl	80015b0 <enterSlaveRx>
			break;
 800153e:	e000      	b.n	8001542 <eventRxError+0x5a>
			break;
 8001540:	bf00      	nop
		break;
 8001542:	bf00      	nop
	}
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	0800a1d8 	.word	0x0800a1d8
 8001550:	20000758 	.word	0x20000758

08001554 <enterMasterRx>:
/**
 * @brief  Entry actions for the RX sub-state of the Master state
 * @param  fsm pointer to FSM context
 * @retval None
 */
void enterMasterRx(pingPongFSM_t *const fsm) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) "Master Rx start\r\n", 17,
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	2211      	movs	r2, #17
 8001562:	4910      	ldr	r1, [pc, #64]	; (80015a4 <enterMasterRx+0x50>)
 8001564:	4810      	ldr	r0, [pc, #64]	; (80015a8 <enterMasterRx+0x54>)
 8001566:	f005 ff97 	bl	8007498 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	SUBGRF_SetDioIrqParams(
 800156a:	2300      	movs	r3, #0
 800156c:	2200      	movs	r2, #0
 800156e:	f240 2162 	movw	r1, #610	; 0x262
 8001572:	f240 2062 	movw	r0, #610	; 0x262
 8001576:	f000 fe8f 	bl	8002298 <SUBGRF_SetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
			IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 800157a:	2100      	movs	r1, #0
 800157c:	2001      	movs	r0, #1
 800157e:	f001 fb1d 	bl	8002bbc <SUBGRF_SetSwitch>
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <enterMasterRx+0x58>)
 8001584:	22ff      	movs	r2, #255	; 0xff
 8001586:	615a      	str	r2, [r3, #20]
	SUBGRF_SetPacketParams(&packetParams);
 8001588:	4808      	ldr	r0, [pc, #32]	; (80015ac <enterMasterRx+0x58>)
 800158a:	f001 f8ed 	bl	8002768 <SUBGRF_SetPacketParams>
	SUBGRF_SetRx(fsm->rxTimeout << 6);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	019b      	lsls	r3, r3, #6
 8001594:	4618      	mov	r0, r3
 8001596:	f000 fd87 	bl	80020a8 <SUBGRF_SetRx>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	0800a1ec 	.word	0x0800a1ec
 80015a8:	20000758 	.word	0x20000758
 80015ac:	20000728 	.word	0x20000728

080015b0 <enterSlaveRx>:
/**
 * @brief  Entry actions for the RX sub-state of the Slave state
 * @param  fsm pointer to FSM context
 * @retval None
 */
void enterSlaveRx(pingPongFSM_t *const fsm) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) "Slave Rx start\r\n", 16,
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295
 80015bc:	2210      	movs	r2, #16
 80015be:	4910      	ldr	r1, [pc, #64]	; (8001600 <enterSlaveRx+0x50>)
 80015c0:	4810      	ldr	r0, [pc, #64]	; (8001604 <enterSlaveRx+0x54>)
 80015c2:	f005 ff69 	bl	8007498 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	SUBGRF_SetDioIrqParams(
 80015c6:	2300      	movs	r3, #0
 80015c8:	2200      	movs	r2, #0
 80015ca:	f240 2162 	movw	r1, #610	; 0x262
 80015ce:	f240 2062 	movw	r0, #610	; 0x262
 80015d2:	f000 fe61 	bl	8002298 <SUBGRF_SetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
			IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 80015d6:	2100      	movs	r1, #0
 80015d8:	2001      	movs	r0, #1
 80015da:	f001 faef 	bl	8002bbc <SUBGRF_SetSwitch>
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <enterSlaveRx+0x58>)
 80015e0:	22ff      	movs	r2, #255	; 0xff
 80015e2:	615a      	str	r2, [r3, #20]
	SUBGRF_SetPacketParams(&packetParams);
 80015e4:	4808      	ldr	r0, [pc, #32]	; (8001608 <enterSlaveRx+0x58>)
 80015e6:	f001 f8bf 	bl	8002768 <SUBGRF_SetPacketParams>
	SUBGRF_SetRx(fsm->rxTimeout << 6);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	019b      	lsls	r3, r3, #6
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fd59 	bl	80020a8 <SUBGRF_SetRx>
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	0800a200 	.word	0x0800a200
 8001604:	20000758 	.word	0x20000758
 8001608:	20000728 	.word	0x20000728

0800160c <enterMasterTx>:
/**
 * @brief  Entry actions for the TX sub-state of the Master state
 * @param  fsm pointer to FSM context
 * @retval None
 */
void enterMasterTx(pingPongFSM_t *const fsm) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	HAL_Delay(fsm->rxMargin);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4618      	mov	r0, r3
 800161a:	f001 fc29 	bl	8002e70 <HAL_Delay>

	HAL_UART_Transmit(&huart2, (uint8_t*) "...PING\r\n", 9, HAL_MAX_DELAY);
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	2209      	movs	r2, #9
 8001624:	491a      	ldr	r1, [pc, #104]	; (8001690 <enterMasterTx+0x84>)
 8001626:	481b      	ldr	r0, [pc, #108]	; (8001694 <enterMasterTx+0x88>)
 8001628:	f005 ff36 	bl	8007498 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) "Master Tx start\r\n", 17,
 800162c:	f04f 33ff 	mov.w	r3, #4294967295
 8001630:	2211      	movs	r2, #17
 8001632:	4919      	ldr	r1, [pc, #100]	; (8001698 <enterMasterTx+0x8c>)
 8001634:	4817      	ldr	r0, [pc, #92]	; (8001694 <enterMasterTx+0x88>)
 8001636:	f005 ff2f 	bl	8007498 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	SUBGRF_SetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800163a:	2300      	movs	r3, #0
 800163c:	2200      	movs	r2, #0
 800163e:	f240 2101 	movw	r1, #513	; 0x201
 8001642:	f240 2001 	movw	r0, #513	; 0x201
 8001646:	f000 fe27 	bl	8002298 <SUBGRF_SetDioIrqParams>
			IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 800164a:	2101      	movs	r1, #1
 800164c:	2001      	movs	r0, #1
 800164e:	f001 fab5 	bl	8002bbc <SUBGRF_SetSwitch>
	// Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
	SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 255));
 8001652:	f640 0089 	movw	r0, #2185	; 0x889
 8001656:	f001 f9d1 	bl	80029fc <SUBGRF_ReadRegister>
 800165a:	21ff      	movs	r1, #255	; 0xff
 800165c:	f640 0089 	movw	r0, #2185	; 0x889
 8001660:	f001 f9b8 	bl	80029d4 <SUBGRF_WriteRegister>
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <enterMasterTx+0x90>)
 8001666:	22ff      	movs	r2, #255	; 0xff
 8001668:	615a      	str	r2, [r3, #20]
	SUBGRF_SetPacketParams(&packetParams);
 800166a:	480c      	ldr	r0, [pc, #48]	; (800169c <enterMasterTx+0x90>)
 800166c:	f001 f87c 	bl	8002768 <SUBGRF_SetPacketParams>
	//SUBGRF_SendPayload((uint8_t *)"PINGpppppppppppppppppppppppppppppppppppppppp", 255, 0);
	AES_Encrypt_MasterPacket();
 8001670:	f7fe fff4 	bl	800065c <AES_Encrypt_MasterPacket>
	SUBGRF_SendPayload(txBuffer_encypt, 255, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	21ff      	movs	r1, #255	; 0xff
 8001678:	4809      	ldr	r0, [pc, #36]	; (80016a0 <enterMasterTx+0x94>)
 800167a:	f000 fc3f 	bl	8001efc <SUBGRF_SendPayload>
	memset(txBuffer, 0, sizeof(txBuffer));
 800167e:	220f      	movs	r2, #15
 8001680:	2100      	movs	r1, #0
 8001682:	4808      	ldr	r0, [pc, #32]	; (80016a4 <enterMasterTx+0x98>)
 8001684:	f007 fb46 	bl	8008d14 <memset>
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	0800a214 	.word	0x0800a214
 8001694:	20000758 	.word	0x20000758
 8001698:	0800a220 	.word	0x0800a220
 800169c:	20000728 	.word	0x20000728
 80016a0:	200002b8 	.word	0x200002b8
 80016a4:	200002a8 	.word	0x200002a8

080016a8 <transitionRxDone>:
/**
 * @brief  Transition actions executed on every RX Done event (helper function)
 * @param  fsm pointer to FSM context
 * @retval None
 */
void transitionRxDone(pingPongFSM_t *const fsm) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b094      	sub	sp, #80	; 0x50
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	PacketStatus_t packetStatus;
	char uartBuff[50];

	// Workaround 15.3 in DS.SX1261-2.W.APP (because following RX w/ timeout sequence)
	SUBGRF_WriteRegister(0x0920, 0x00);
 80016b0:	2100      	movs	r1, #0
 80016b2:	f44f 6012 	mov.w	r0, #2336	; 0x920
 80016b6:	f001 f98d 	bl	80029d4 <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister(0x0944, (SUBGRF_ReadRegister(0x0944) | 0x02));
 80016ba:	f640 1044 	movw	r0, #2372	; 0x944
 80016be:	f001 f99d 	bl	80029fc <SUBGRF_ReadRegister>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	4619      	mov	r1, r3
 80016cc:	f640 1044 	movw	r0, #2372	; 0x944
 80016d0:	f001 f980 	bl	80029d4 <SUBGRF_WriteRegister>

	SUBGRF_GetPayload((uint8_t*) fsm->rxBuffer, &fsm->rxSize, 0xFF);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f103 0010 	add.w	r0, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80016e0:	22ff      	movs	r2, #255	; 0xff
 80016e2:	4619      	mov	r1, r3
 80016e4:	f000 fbe8 	bl	8001eb8 <SUBGRF_GetPayload>
	SUBGRF_GetPacketStatus(&packetStatus);
 80016e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016ec:	4618      	mov	r0, r3
 80016ee:	f001 f91f 	bl	8002930 <SUBGRF_GetPacketStatus>

	sprintf(uartBuff, "RssiValue=%d dBm, SnrValue=%d Hz\r\n",
			packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt);
 80016f2:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
	sprintf(uartBuff, "RssiValue=%d dBm, SnrValue=%d Hz\r\n",
 80016f6:	461a      	mov	r2, r3
			packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt);
 80016f8:	f997 3049 	ldrsb.w	r3, [r7, #73]	; 0x49
	sprintf(uartBuff, "RssiValue=%d dBm, SnrValue=%d Hz\r\n",
 80016fc:	f107 0008 	add.w	r0, r7, #8
 8001700:	490a      	ldr	r1, [pc, #40]	; (800172c <transitionRxDone+0x84>)
 8001702:	f007 fb9d 	bl	8008e40 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uartBuff, strlen(uartBuff),
 8001706:	f107 0308 	add.w	r3, r7, #8
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe fd38 	bl	8000180 <strlen>
 8001710:	4603      	mov	r3, r0
 8001712:	b29a      	uxth	r2, r3
 8001714:	f107 0108 	add.w	r1, r7, #8
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <transitionRxDone+0x88>)
 800171e:	f005 febb 	bl	8007498 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
}
 8001722:	bf00      	nop
 8001724:	3750      	adds	r7, #80	; 0x50
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	0800a254 	.word	0x0800a254
 8001730:	20000758 	.word	0x20000758

08001734 <fsmInit>:
void fsmInit(void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0

	// get random number
	uint32_t rnd = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
	SUBGRF_SetDioIrqParams(IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE,
 800173e:	2300      	movs	r3, #0
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	2000      	movs	r0, #0
 8001746:	f000 fda7 	bl	8002298 <SUBGRF_SetDioIrqParams>
			IRQ_RADIO_NONE);
	rnd = SUBGRF_GetRandom();
 800174a:	f000 fc2a 	bl	8001fa2 <SUBGRF_GetRandom>
 800174e:	6078      	str	r0, [r7, #4]

	fsm.state = STATE_NULL;
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <fsmInit+0x98>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
	fsm.subState = SSTATE_NULL;
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <fsmInit+0x98>)
 8001758:	2200      	movs	r2, #0
 800175a:	705a      	strb	r2, [r3, #1]
	fsm.rxTimeout = 1000; // 3000 ms
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <fsmInit+0x98>)
 800175e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001762:	605a      	str	r2, [r3, #4]
	fsm.rxMargin = 200;   // 200 ms
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <fsmInit+0x98>)
 8001766:	22c8      	movs	r2, #200	; 0xc8
 8001768:	609a      	str	r2, [r3, #8]
	fsm.randomDelay = rnd >> 22; // [0, 1023] ms
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	0d9b      	lsrs	r3, r3, #22
 800176e:	4a17      	ldr	r2, [pc, #92]	; (80017cc <fsmInit+0x98>)
 8001770:	60d3      	str	r3, [r2, #12]
	//sprintf(uartBuff, "rand=%lu\r\n", fsm.randomDelay);
	HAL_UART_Transmit(&huart2, (uint8_t*) uartBuff, strlen(uartBuff),
 8001772:	4817      	ldr	r0, [pc, #92]	; (80017d0 <fsmInit+0x9c>)
 8001774:	f7fe fd04 	bl	8000180 <strlen>
 8001778:	4603      	mov	r3, r0
 800177a:	b29a      	uxth	r2, r3
 800177c:	f04f 33ff 	mov.w	r3, #4294967295
 8001780:	4913      	ldr	r1, [pc, #76]	; (80017d0 <fsmInit+0x9c>)
 8001782:	4814      	ldr	r0, [pc, #80]	; (80017d4 <fsmInit+0xa0>)
 8001784:	f005 fe88 	bl	8007498 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	HAL_Delay(fsm.randomDelay);
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <fsmInit+0x98>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	4618      	mov	r0, r3
 800178e:	f001 fb6f 	bl	8002e70 <HAL_Delay>
	SUBGRF_SetDioIrqParams(IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
 8001792:	2300      	movs	r3, #0
 8001794:	2200      	movs	r2, #0
 8001796:	f240 2142 	movw	r1, #578	; 0x242
 800179a:	f240 2042 	movw	r0, #578	; 0x242
 800179e:	f000 fd7b 	bl	8002298 <SUBGRF_SetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 80017a2:	2100      	movs	r1, #0
 80017a4:	2001      	movs	r0, #1
 80017a6:	f001 fa09 	bl	8002bbc <SUBGRF_SetSwitch>
	SUBGRF_SetRx(fsm.rxTimeout << 6);
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <fsmInit+0x98>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	019b      	lsls	r3, r3, #6
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fc79 	bl	80020a8 <SUBGRF_SetRx>
	//fsm.state = STATE_SLAVE;
	//fsm.subState = SSTATE_RX;
	fsm.state = STATE_MASTER;
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <fsmInit+0x98>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
	fsm.subState = SSTATE_RX;
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <fsmInit+0x98>)
 80017be:	2201      	movs	r2, #1
 80017c0:	705a      	strb	r2, [r3, #1]
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000614 	.word	0x20000614
 80017d0:	200004c8 	.word	0x200004c8
 80017d4:	20000758 	.word	0x20000758

080017d8 <SUBGHZ>:

	// RF_{IRQ0, IRQ1, IRQ2} pins
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
void SUBGHZ(void) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	eventReceptor = NULL;
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <SUBGHZ+0x24>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
	while (eventReceptor == NULL)
 80017e2:	bf00      	nop
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <SUBGHZ+0x24>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0fb      	beq.n	80017e4 <SUBGHZ+0xc>
		;
	{
		radioInit();
 80017ec:	f7ff fcb2 	bl	8001154 <radioInit>
		eventReceptor(&fsm);
 80017f0:	4b02      	ldr	r3, [pc, #8]	; (80017fc <SUBGHZ+0x24>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <SUBGHZ+0x28>)
 80017f6:	4798      	blx	r3
	}
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000744 	.word	0x20000744
 8001800:	20000614 	.word	0x20000614

08001804 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	e00a      	b.n	800182c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001816:	f3af 8000 	nop.w
 800181a:	4601      	mov	r1, r0
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60ba      	str	r2, [r7, #8]
 8001822:	b2ca      	uxtb	r2, r1
 8001824:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3301      	adds	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	dbf0      	blt.n	8001816 <_read+0x12>
  }

  return len;
 8001834:	687b      	ldr	r3, [r7, #4]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_close>:
  }
  return len;
}

int _close(int file)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001864:	605a      	str	r2, [r3, #4]
  return 0;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <_isatty>:

int _isatty(int file)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001886:	b480      	push	{r7}
 8001888:	b085      	sub	sp, #20
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
	...

080018a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a8:	4a14      	ldr	r2, [pc, #80]	; (80018fc <_sbrk+0x5c>)
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <_sbrk+0x60>)
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <_sbrk+0x64>)
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <_sbrk+0x68>)
 80018c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d207      	bcs.n	80018e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d0:	f007 f9e8 	bl	8008ca4 <__errno>
 80018d4:	4603      	mov	r3, r0
 80018d6:	220c      	movs	r2, #12
 80018d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	e009      	b.n	80018f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <_sbrk+0x64>)
 80018f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20010000 	.word	0x20010000
 8001900:	00000400 	.word	0x00000400
 8001904:	20000754 	.word	0x20000754
 8001908:	20000870 	.word	0x20000870

0800190c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <LL_AHB2_GRP1_EnableClock>:
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001924:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4313      	orrs	r3, r2
 800192e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800193c:	68fb      	ldr	r3, [r7, #12]
}
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <LL_APB1_GRP1_EnableClock>:
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001954:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4313      	orrs	r3, r2
 800195e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001964:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4013      	ands	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800196c:	68fb      	ldr	r3, [r7, #12]
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800197c:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <MX_USART2_UART_Init+0x90>)
 800197e:	4a23      	ldr	r2, [pc, #140]	; (8001a0c <MX_USART2_UART_Init+0x94>)
 8001980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001982:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <MX_USART2_UART_Init+0x90>)
 8001984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800198a:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <MX_USART2_UART_Init+0x90>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001990:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <MX_USART2_UART_Init+0x90>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001996:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <MX_USART2_UART_Init+0x90>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800199c:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <MX_USART2_UART_Init+0x90>)
 800199e:	220c      	movs	r2, #12
 80019a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a2:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <MX_USART2_UART_Init+0x90>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a8:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <MX_USART2_UART_Init+0x90>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <MX_USART2_UART_Init+0x90>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019b4:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <MX_USART2_UART_Init+0x90>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ba:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <MX_USART2_UART_Init+0x90>)
 80019bc:	2200      	movs	r2, #0
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019c0:	4811      	ldr	r0, [pc, #68]	; (8001a08 <MX_USART2_UART_Init+0x90>)
 80019c2:	f005 fd19 	bl	80073f8 <HAL_UART_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80019cc:	f7ff fa94 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019d0:	2100      	movs	r1, #0
 80019d2:	480d      	ldr	r0, [pc, #52]	; (8001a08 <MX_USART2_UART_Init+0x90>)
 80019d4:	f007 f82e 	bl	8008a34 <HAL_UARTEx_SetTxFifoThreshold>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80019de:	f7ff fa8b 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e2:	2100      	movs	r1, #0
 80019e4:	4808      	ldr	r0, [pc, #32]	; (8001a08 <MX_USART2_UART_Init+0x90>)
 80019e6:	f007 f863 	bl	8008ab0 <HAL_UARTEx_SetRxFifoThreshold>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80019f0:	f7ff fa82 	bl	8000ef8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80019f4:	4804      	ldr	r0, [pc, #16]	; (8001a08 <MX_USART2_UART_Init+0x90>)
 80019f6:	f006 ffe5 	bl	80089c4 <HAL_UARTEx_DisableFifoMode>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001a00:	f7ff fa7a 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000758 	.word	0x20000758
 8001a0c:	40004400 	.word	0x40004400

08001a10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b096      	sub	sp, #88	; 0x58
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	2238      	movs	r2, #56	; 0x38
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f007 f96f 	bl	8008d14 <memset>
  if(uartHandle->Instance==USART2)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a34      	ldr	r2, [pc, #208]	; (8001b0c <HAL_UART_MspInit+0xfc>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d161      	bne.n	8001b04 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a40:	2302      	movs	r3, #2
 8001a42:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a44:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001a48:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f004 fc66 	bl	8006320 <HAL_RCCEx_PeriphCLKConfig>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a5a:	f7ff fa4d 	bl	8000ef8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a5e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001a62:	f7ff ff71 	bl	8001948 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2001      	movs	r0, #1
 8001a68:	f7ff ff56 	bl	8001918 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a7c:	2307      	movs	r3, #7
 8001a7e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a84:	4619      	mov	r1, r3
 8001a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8a:	f003 f85d 	bl	8004b48 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <HAL_UART_MspInit+0x100>)
 8001a90:	4a20      	ldr	r2, [pc, #128]	; (8001b14 <HAL_UART_MspInit+0x104>)
 8001a92:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001a94:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <HAL_UART_MspInit+0x100>)
 8001a96:	2213      	movs	r2, #19
 8001a98:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <HAL_UART_MspInit+0x100>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_UART_MspInit+0x100>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <HAL_UART_MspInit+0x100>)
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aac:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_UART_MspInit+0x100>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <HAL_UART_MspInit+0x100>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_UART_MspInit+0x100>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_UART_MspInit+0x100>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ac4:	4812      	ldr	r0, [pc, #72]	; (8001b10 <HAL_UART_MspInit+0x100>)
 8001ac6:	f002 fcbd 	bl	8004444 <HAL_DMA_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001ad0:	f7ff fa12 	bl	8000ef8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001ad4:	2110      	movs	r1, #16
 8001ad6:	480e      	ldr	r0, [pc, #56]	; (8001b10 <HAL_UART_MspInit+0x100>)
 8001ad8:	f002 ff5e 	bl	8004998 <HAL_DMA_ConfigChannelAttributes>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <HAL_UART_MspInit+0xd6>
    {
      Error_Handler();
 8001ae2:	f7ff fa09 	bl	8000ef8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <HAL_UART_MspInit+0x100>)
 8001aea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001aee:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <HAL_UART_MspInit+0x100>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2100      	movs	r1, #0
 8001af8:	2025      	movs	r0, #37	; 0x25
 8001afa:	f001 fa92 	bl	8003022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001afe:	2025      	movs	r0, #37	; 0x25
 8001b00:	f001 faa9 	bl	8003056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b04:	bf00      	nop
 8001b06:	3758      	adds	r7, #88	; 0x58
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40004400 	.word	0x40004400
 8001b10:	200007ec 	.word	0x200007ec
 8001b14:	40020008 	.word	0x40020008

08001b18 <HAL_UARTEx_RxEventCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	807b      	strh	r3, [r7, #2]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, RX_SIZE);
 8001b24:	22ff      	movs	r2, #255	; 0xff
 8001b26:	4906      	ldr	r1, [pc, #24]	; (8001b40 <HAL_UARTEx_RxEventCallback+0x28>)
 8001b28:	4806      	ldr	r0, [pc, #24]	; (8001b44 <HAL_UARTEx_RxEventCallback+0x2c>)
 8001b2a:	f006 ffff 	bl	8008b2c <HAL_UARTEx_ReceiveToIdle_DMA>
    size = Size;
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_UARTEx_RxEventCallback+0x30>)
 8001b34:	701a      	strb	r2, [r3, #0]
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000004 	.word	0x20000004
 8001b44:	20000758 	.word	0x20000758
 8001b48:	200004c7 	.word	0x200004c7

08001b4c <UartDmaStart>:
void UartDmaStart(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, RX_SIZE);
 8001b50:	22ff      	movs	r2, #255	; 0xff
 8001b52:	4907      	ldr	r1, [pc, #28]	; (8001b70 <UartDmaStart+0x24>)
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <UartDmaStart+0x28>)
 8001b56:	f006 ffe9 	bl	8008b2c <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <UartDmaStart+0x2c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <UartDmaStart+0x2c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0204 	bic.w	r2, r2, #4
 8001b68:	601a      	str	r2, [r3, #0]
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000004 	.word	0x20000004
 8001b74:	20000758 	.word	0x20000758
 8001b78:	200007ec 	.word	0x200007ec

08001b7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b7e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b80:	f7ff fec4 	bl	800190c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b86:	490d      	ldr	r1, [pc, #52]	; (8001bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b88:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <LoopForever+0xe>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b8c:	e002      	b.n	8001b94 <LoopCopyDataInit>

08001b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b92:	3304      	adds	r3, #4

08001b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b98:	d3f9      	bcc.n	8001b8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b9c:	4c0a      	ldr	r4, [pc, #40]	; (8001bc8 <LoopForever+0x16>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ba0:	e001      	b.n	8001ba6 <LoopFillZerobss>

08001ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba4:	3204      	adds	r2, #4

08001ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba8:	d3fb      	bcc.n	8001ba2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001baa:	f007 f881 	bl	8008cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bae:	f7fe ffd8 	bl	8000b62 <main>

08001bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bb2:	e7fe      	b.n	8001bb2 <LoopForever>
  ldr   r0, =_estack
 8001bb4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bbc:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 8001bc0:	0800a468 	.word	0x0800a468
  ldr r2, =_sbss
 8001bc4:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 8001bc8:	20000870 	.word	0x20000870

08001bcc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bcc:	e7fe      	b.n	8001bcc <ADC_IRQHandler>

08001bce <LL_AHB2_GRP1_EnableClock>:
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
	...

08001c00 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001c14:	2004      	movs	r0, #4
 8001c16:	f7ff ffda 	bl	8001bce <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001c1a:	2310      	movs	r3, #16
 8001c1c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c26:	2303      	movs	r3, #3
 8001c28:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4812      	ldr	r0, [pc, #72]	; (8001c78 <BSP_RADIO_Init+0x78>)
 8001c30:	f002 ff8a 	bl	8004b48 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001c34:	2320      	movs	r3, #32
 8001c36:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480e      	ldr	r0, [pc, #56]	; (8001c78 <BSP_RADIO_Init+0x78>)
 8001c3e:	f002 ff83 	bl	8004b48 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001c42:	2308      	movs	r3, #8
 8001c44:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	480b      	ldr	r0, [pc, #44]	; (8001c78 <BSP_RADIO_Init+0x78>)
 8001c4c:	f002 ff7c 	bl	8004b48 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001c50:	2200      	movs	r2, #0
 8001c52:	2120      	movs	r1, #32
 8001c54:	4808      	ldr	r0, [pc, #32]	; (8001c78 <BSP_RADIO_Init+0x78>)
 8001c56:	f003 f8d7 	bl	8004e08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2110      	movs	r1, #16
 8001c5e:	4806      	ldr	r0, [pc, #24]	; (8001c78 <BSP_RADIO_Init+0x78>)
 8001c60:	f003 f8d2 	bl	8004e08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001c64:	2200      	movs	r2, #0
 8001c66:	2108      	movs	r1, #8
 8001c68:	4803      	ldr	r0, [pc, #12]	; (8001c78 <BSP_RADIO_Init+0x78>)
 8001c6a:	f003 f8cd 	bl	8004e08 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	48000800 	.word	0x48000800

08001c7c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d84b      	bhi.n	8001d24 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8001c8c:	a201      	add	r2, pc, #4	; (adr r2, 8001c94 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c92:	bf00      	nop
 8001c94:	08001ca5 	.word	0x08001ca5
 8001c98:	08001cc5 	.word	0x08001cc5
 8001c9c:	08001ce5 	.word	0x08001ce5
 8001ca0:	08001d05 	.word	0x08001d05
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2108      	movs	r1, #8
 8001ca8:	4821      	ldr	r0, [pc, #132]	; (8001d30 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001caa:	f003 f8ad 	bl	8004e08 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	2110      	movs	r1, #16
 8001cb2:	481f      	ldr	r0, [pc, #124]	; (8001d30 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001cb4:	f003 f8a8 	bl	8004e08 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2120      	movs	r1, #32
 8001cbc:	481c      	ldr	r0, [pc, #112]	; (8001d30 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001cbe:	f003 f8a3 	bl	8004e08 <HAL_GPIO_WritePin>
      break;      
 8001cc2:	e030      	b.n	8001d26 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	2108      	movs	r1, #8
 8001cc8:	4819      	ldr	r0, [pc, #100]	; (8001d30 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001cca:	f003 f89d 	bl	8004e08 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2110      	movs	r1, #16
 8001cd2:	4817      	ldr	r0, [pc, #92]	; (8001d30 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001cd4:	f003 f898 	bl	8004e08 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2120      	movs	r1, #32
 8001cdc:	4814      	ldr	r0, [pc, #80]	; (8001d30 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001cde:	f003 f893 	bl	8004e08 <HAL_GPIO_WritePin>
      break;
 8001ce2:	e020      	b.n	8001d26 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	2108      	movs	r1, #8
 8001ce8:	4811      	ldr	r0, [pc, #68]	; (8001d30 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001cea:	f003 f88d 	bl	8004e08 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001cee:	2201      	movs	r2, #1
 8001cf0:	2110      	movs	r1, #16
 8001cf2:	480f      	ldr	r0, [pc, #60]	; (8001d30 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001cf4:	f003 f888 	bl	8004e08 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	2120      	movs	r1, #32
 8001cfc:	480c      	ldr	r0, [pc, #48]	; (8001d30 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001cfe:	f003 f883 	bl	8004e08 <HAL_GPIO_WritePin>
      break;
 8001d02:	e010      	b.n	8001d26 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001d04:	2201      	movs	r2, #1
 8001d06:	2108      	movs	r1, #8
 8001d08:	4809      	ldr	r0, [pc, #36]	; (8001d30 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001d0a:	f003 f87d 	bl	8004e08 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2110      	movs	r1, #16
 8001d12:	4807      	ldr	r0, [pc, #28]	; (8001d30 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001d14:	f003 f878 	bl	8004e08 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001d18:	2201      	movs	r2, #1
 8001d1a:	2120      	movs	r1, #32
 8001d1c:	4804      	ldr	r0, [pc, #16]	; (8001d30 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001d1e:	f003 f873 	bl	8004e08 <HAL_GPIO_WritePin>
      break;
 8001d22:	e000      	b.n	8001d26 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8001d24:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	48000800 	.word	0x48000800

08001d34 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr

08001d42 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8001d46:	2301      	movs	r3, #1
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001d54:	2301      	movs	r3, #1
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr

08001d5e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b085      	sub	sp, #20
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d102      	bne.n	8001d74 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8001d6e:	230f      	movs	r3, #15
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	e001      	b.n	8001d78 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001d74:	2316      	movs	r3, #22
 8001d76:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001d78:	68fb      	ldr	r3, [r7, #12]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8001d88:	f7ff ff3a 	bl	8001c00 <BSP_RADIO_Init>
 8001d8c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	4603      	mov	r3, r0
 8001d9a:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff6c 	bl	8001c7c <BSP_RADIO_ConfigRFSwitch>
 8001da4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8001db2:	f7ff ffbf 	bl	8001d34 <BSP_RADIO_GetTxConfig>
 8001db6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8001dc0:	f7ff ffbf 	bl	8001d42 <BSP_RADIO_IsTCXO>
 8001dc4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8001dce:	f7ff ffbf 	bl	8001d50 <BSP_RADIO_IsDCDC>
 8001dd2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ffba 	bl	8001d5e <BSP_RADIO_GetRFOMaxPowerConfig>
 8001dea:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8001e02:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <SUBGRF_Init+0x84>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8001e08:	f7ff f97e 	bl	8001108 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8001e0c:	2002      	movs	r0, #2
 8001e0e:	f000 ffd1 	bl	8002db4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <SUBGRF_Init+0x88>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f000 f909 	bl	8002030 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8001e1e:	f7ff ffcd 	bl	8001dbc <RBI_IsTCXO>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d10e      	bne.n	8001e46 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8001e28:	2140      	movs	r1, #64	; 0x40
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f000 fa6e 	bl	800230c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8001e30:	2100      	movs	r1, #0
 8001e32:	f640 1011 	movw	r0, #2321	; 0x911
 8001e36:	f000 fdcd 	bl	80029d4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8001e3a:	237f      	movs	r3, #127	; 0x7f
 8001e3c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8001e3e:	7b38      	ldrb	r0, [r7, #12]
 8001e40:	f000 f978 	bl	8002134 <SUBGRF_Calibrate>
 8001e44:	e009      	b.n	8001e5a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8001e46:	2120      	movs	r1, #32
 8001e48:	f640 1011 	movw	r0, #2321	; 0x911
 8001e4c:	f000 fdc2 	bl	80029d4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8001e50:	2120      	movs	r1, #32
 8001e52:	f640 1012 	movw	r0, #2322	; 0x912
 8001e56:	f000 fdbd 	bl	80029d4 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8001e5a:	210e      	movs	r1, #14
 8001e5c:	f640 101f 	movw	r0, #2335	; 0x91f
 8001e60:	f000 fdb8 	bl	80029d4 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8001e64:	f7ff ff8e 	bl	8001d84 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <SUBGRF_Init+0x8c>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000858 	.word	0x20000858
 8001e7c:	20000854 	.word	0x20000854
 8001e80:	2000084c 	.word	0x2000084c

08001e84 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
    return OperatingMode;
 8001e88:	4b02      	ldr	r3, [pc, #8]	; (8001e94 <SUBGRF_GetOperatingMode+0x10>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	2000084c 	.word	0x2000084c

08001e98 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f000 fdfe 	bl	8002aac <SUBGRF_WriteBuffer>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8001eca:	f107 0317 	add.w	r3, r7, #23
 8001ece:	4619      	mov	r1, r3
 8001ed0:	68b8      	ldr	r0, [r7, #8]
 8001ed2:	f000 fd01 	bl	80028d8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	79fa      	ldrb	r2, [r7, #7]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d201      	bcs.n	8001ee4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e007      	b.n	8001ef4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8001ee4:	7df8      	ldrb	r0, [r7, #23]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	68f9      	ldr	r1, [r7, #12]
 8001eee:	f000 fdff 	bl	8002af0 <SUBGRF_ReadBuffer>

    return 0;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	460b      	mov	r3, r1
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8001f0a:	7afb      	ldrb	r3, [r7, #11]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f7ff ffc2 	bl	8001e98 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f8a7 	bl	8002068 <SUBGRF_SetTx>
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8001f3c:	f000 fa6a 	bl	8002414 <SUBGRF_GetPacketType>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d108      	bne.n	8001f58 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8001f52:	f000 fd67 	bl	8002a24 <SUBGRF_WriteRegisters>
            break;
 8001f56:	e000      	b.n	8001f5a <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8001f58:	bf00      	nop
    }
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8001f7c:	f000 fa4a 	bl	8002414 <SUBGRF_GetPacketType>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d108      	bne.n	8001f98 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f240 60be 	movw	r0, #1726	; 0x6be
 8001f92:	f000 fd47 	bl	8002a24 <SUBGRF_WriteRegisters>
            break;
 8001f96:	e000      	b.n	8001f9a <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8001f98:	bf00      	nop
    }
}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <SUBGRF_GetRandom>:
            break;
    }
}

uint32_t SUBGRF_GetRandom( void )
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8001fb4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8001fb8:	f000 fd20 	bl	80029fc <SUBGRF_ReadRegister>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	f023 0301 	bic.w	r3, r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8001fce:	f000 fd01 	bl	80029d4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8001fd2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8001fd6:	f000 fd11 	bl	80029fc <SUBGRF_ReadRegister>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8001fde:	79bb      	ldrb	r3, [r7, #6]
 8001fe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8001fec:	f000 fcf2 	bl	80029d4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8001ff0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001ff4:	f000 f858 	bl	80020a8 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8001ff8:	463b      	mov	r3, r7
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f640 0019 	movw	r0, #2073	; 0x819
 8002002:	f000 fd31 	bl	8002a68 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8002006:	2000      	movs	r0, #0
 8002008:	f000 f812 	bl	8002030 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	4619      	mov	r1, r3
 8002010:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8002014:	f000 fcde 	bl	80029d4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8002018:	79bb      	ldrb	r3, [r7, #6]
 800201a:	4619      	mov	r1, r3
 800201c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8002020:	f000 fcd8 	bl	80029d4 <SUBGRF_WriteRegister>

    return number;
 8002024:	683b      	ldr	r3, [r7, #0]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800203a:	1dfb      	adds	r3, r7, #7
 800203c:	2201      	movs	r2, #1
 800203e:	4619      	mov	r1, r3
 8002040:	2080      	movs	r0, #128	; 0x80
 8002042:	f000 fd77 	bl	8002b34 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <SUBGRF_SetStandby+0x34>)
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8002052:	e002      	b.n	800205a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <SUBGRF_SetStandby+0x34>)
 8002056:	2202      	movs	r2, #2
 8002058:	701a      	strb	r2, [r3, #0]
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000084c 	.word	0x2000084c

08002068 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <SUBGRF_SetTx+0x3c>)
 8002072:	2204      	movs	r2, #4
 8002074:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	0c1b      	lsrs	r3, r3, #16
 800207a:	b2db      	uxtb	r3, r3
 800207c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	b2db      	uxtb	r3, r3
 8002084:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	b2db      	uxtb	r3, r3
 800208a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	2203      	movs	r2, #3
 8002092:	4619      	mov	r1, r3
 8002094:	2083      	movs	r0, #131	; 0x83
 8002096:	f000 fd4d 	bl	8002b34 <SUBGRF_WriteCommand>
}
 800209a:	bf00      	nop
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000084c 	.word	0x2000084c

080020a8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <SUBGRF_SetRx+0x3c>)
 80020b2:	2205      	movs	r2, #5
 80020b4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	0c1b      	lsrs	r3, r3, #16
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	2203      	movs	r2, #3
 80020d2:	4619      	mov	r1, r3
 80020d4:	2082      	movs	r0, #130	; 0x82
 80020d6:	f000 fd2d 	bl	8002b34 <SUBGRF_WriteCommand>
}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000084c 	.word	0x2000084c

080020e8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80020f2:	1dfb      	adds	r3, r7, #7
 80020f4:	2201      	movs	r2, #1
 80020f6:	4619      	mov	r1, r3
 80020f8:	209f      	movs	r0, #159	; 0x9f
 80020fa:	f000 fd1b 	bl	8002b34 <SUBGRF_WriteCommand>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800210c:	f7ff fe5d 	bl	8001dca <RBI_IsDCDC>
 8002110:	4603      	mov	r3, r0
 8002112:	2b01      	cmp	r3, #1
 8002114:	d102      	bne.n	800211c <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8002116:	2301      	movs	r3, #1
 8002118:	71fb      	strb	r3, [r7, #7]
 800211a:	e001      	b.n	8002120 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800211c:	2300      	movs	r3, #0
 800211e:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8002120:	1dfb      	adds	r3, r7, #7
 8002122:	2201      	movs	r2, #1
 8002124:	4619      	mov	r1, r3
 8002126:	2096      	movs	r0, #150	; 0x96
 8002128:	f000 fd04 	bl	8002b34 <SUBGRF_WriteCommand>
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800213c:	793b      	ldrb	r3, [r7, #4]
 800213e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8002148:	793b      	ldrb	r3, [r7, #4]
 800214a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8002152:	b25b      	sxtb	r3, r3
 8002154:	4313      	orrs	r3, r2
 8002156:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8002158:	793b      	ldrb	r3, [r7, #4]
 800215a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800215e:	b2db      	uxtb	r3, r3
 8002160:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8002162:	b25b      	sxtb	r3, r3
 8002164:	4313      	orrs	r3, r2
 8002166:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8002168:	793b      	ldrb	r3, [r7, #4]
 800216a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800216e:	b2db      	uxtb	r3, r3
 8002170:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8002172:	b25b      	sxtb	r3, r3
 8002174:	4313      	orrs	r3, r2
 8002176:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8002178:	793b      	ldrb	r3, [r7, #4]
 800217a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8002182:	b25b      	sxtb	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8002188:	793b      	ldrb	r3, [r7, #4]
 800218a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8002192:	b25b      	sxtb	r3, r3
 8002194:	4313      	orrs	r3, r2
 8002196:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8002198:	793b      	ldrb	r3, [r7, #4]
 800219a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b25b      	sxtb	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80021a8:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80021aa:	f107 030f 	add.w	r3, r7, #15
 80021ae:	2201      	movs	r2, #1
 80021b0:	4619      	mov	r1, r3
 80021b2:	2089      	movs	r0, #137	; 0x89
 80021b4:	f000 fcbe 	bl	8002b34 <SUBGRF_WriteCommand>
}
 80021b8:	bf00      	nop
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a1d      	ldr	r2, [pc, #116]	; (8002240 <SUBGRF_CalibrateImage+0x80>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d904      	bls.n	80021da <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80021d0:	23e1      	movs	r3, #225	; 0xe1
 80021d2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80021d4:	23e9      	movs	r3, #233	; 0xe9
 80021d6:	737b      	strb	r3, [r7, #13]
 80021d8:	e027      	b.n	800222a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a19      	ldr	r2, [pc, #100]	; (8002244 <SUBGRF_CalibrateImage+0x84>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d904      	bls.n	80021ec <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80021e2:	23d7      	movs	r3, #215	; 0xd7
 80021e4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80021e6:	23db      	movs	r3, #219	; 0xdb
 80021e8:	737b      	strb	r3, [r7, #13]
 80021ea:	e01e      	b.n	800222a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a16      	ldr	r2, [pc, #88]	; (8002248 <SUBGRF_CalibrateImage+0x88>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d904      	bls.n	80021fe <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80021f4:	23c1      	movs	r3, #193	; 0xc1
 80021f6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80021f8:	23c5      	movs	r3, #197	; 0xc5
 80021fa:	737b      	strb	r3, [r7, #13]
 80021fc:	e015      	b.n	800222a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a12      	ldr	r2, [pc, #72]	; (800224c <SUBGRF_CalibrateImage+0x8c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d904      	bls.n	8002210 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8002206:	2375      	movs	r3, #117	; 0x75
 8002208:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800220a:	2381      	movs	r3, #129	; 0x81
 800220c:	737b      	strb	r3, [r7, #13]
 800220e:	e00c      	b.n	800222a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <SUBGRF_CalibrateImage+0x90>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d904      	bls.n	8002222 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8002218:	236b      	movs	r3, #107	; 0x6b
 800221a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800221c:	236f      	movs	r3, #111	; 0x6f
 800221e:	737b      	strb	r3, [r7, #13]
 8002220:	e003      	b.n	800222a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8002222:	2329      	movs	r3, #41	; 0x29
 8002224:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8002226:	232b      	movs	r3, #43	; 0x2b
 8002228:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800222a:	f107 030c 	add.w	r3, r7, #12
 800222e:	2202      	movs	r2, #2
 8002230:	4619      	mov	r1, r3
 8002232:	2098      	movs	r0, #152	; 0x98
 8002234:	f000 fc7e 	bl	8002b34 <SUBGRF_WriteCommand>
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	35a4e900 	.word	0x35a4e900
 8002244:	32a9f880 	.word	0x32a9f880
 8002248:	2de54480 	.word	0x2de54480
 800224c:	1b6b0b00 	.word	0x1b6b0b00
 8002250:	1954fc40 	.word	0x1954fc40

08002254 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	4604      	mov	r4, r0
 800225c:	4608      	mov	r0, r1
 800225e:	4611      	mov	r1, r2
 8002260:	461a      	mov	r2, r3
 8002262:	4623      	mov	r3, r4
 8002264:	71fb      	strb	r3, [r7, #7]
 8002266:	4603      	mov	r3, r0
 8002268:	71bb      	strb	r3, [r7, #6]
 800226a:	460b      	mov	r3, r1
 800226c:	717b      	strb	r3, [r7, #5]
 800226e:	4613      	mov	r3, r2
 8002270:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8002276:	79bb      	ldrb	r3, [r7, #6]
 8002278:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800227a:	797b      	ldrb	r3, [r7, #5]
 800227c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800227e:	793b      	ldrb	r3, [r7, #4]
 8002280:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8002282:	f107 030c 	add.w	r3, r7, #12
 8002286:	2204      	movs	r2, #4
 8002288:	4619      	mov	r1, r3
 800228a:	2095      	movs	r0, #149	; 0x95
 800228c:	f000 fc52 	bl	8002b34 <SUBGRF_WriteCommand>
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	bd90      	pop	{r4, r7, pc}

08002298 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	4604      	mov	r4, r0
 80022a0:	4608      	mov	r0, r1
 80022a2:	4611      	mov	r1, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	4623      	mov	r3, r4
 80022a8:	80fb      	strh	r3, [r7, #6]
 80022aa:	4603      	mov	r3, r0
 80022ac:	80bb      	strh	r3, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	807b      	strh	r3, [r7, #2]
 80022b2:	4613      	mov	r3, r2
 80022b4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80022c6:	88bb      	ldrh	r3, [r7, #4]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80022d0:	88bb      	ldrh	r3, [r7, #4]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80022d6:	887b      	ldrh	r3, [r7, #2]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	b29b      	uxth	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80022e6:	883b      	ldrh	r3, [r7, #0]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80022f0:	883b      	ldrh	r3, [r7, #0]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80022f6:	f107 0308 	add.w	r3, r7, #8
 80022fa:	2208      	movs	r2, #8
 80022fc:	4619      	mov	r1, r3
 80022fe:	2008      	movs	r0, #8
 8002300:	f000 fc18 	bl	8002b34 <SUBGRF_WriteCommand>
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	bd90      	pop	{r4, r7, pc}

0800230c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	b2db      	uxtb	r3, r3
 8002320:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	0c1b      	lsrs	r3, r3, #16
 8002326:	b2db      	uxtb	r3, r3
 8002328:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	b2db      	uxtb	r3, r3
 8002330:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2db      	uxtb	r3, r3
 8002336:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8002338:	f107 030c 	add.w	r3, r7, #12
 800233c:	2204      	movs	r2, #4
 800233e:	4619      	mov	r1, r3
 8002340:	2097      	movs	r0, #151	; 0x97
 8002342:	f000 fbf7 	bl	8002b34 <SUBGRF_WriteCommand>
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8002350:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800235e:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <SUBGRF_SetRfFrequency+0x84>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	f083 0301 	eor.w	r3, r3, #1
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff ff27 	bl	80021c0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8002372:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <SUBGRF_SetRfFrequency+0x84>)
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	461c      	mov	r4, r3
 800237e:	4615      	mov	r5, r2
 8002380:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8002384:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8002388:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <SUBGRF_SetRfFrequency+0x88>)
 800238a:	f04f 0300 	mov.w	r3, #0
 800238e:	4640      	mov	r0, r8
 8002390:	4649      	mov	r1, r9
 8002392:	f7fd ff4d 	bl	8000230 <__aeabi_uldivmod>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4613      	mov	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	0e1b      	lsrs	r3, r3, #24
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	0c1b      	lsrs	r3, r3, #16
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80023bc:	f107 0308 	add.w	r3, r7, #8
 80023c0:	2204      	movs	r2, #4
 80023c2:	4619      	mov	r1, r3
 80023c4:	2086      	movs	r0, #134	; 0x86
 80023c6:	f000 fbb5 	bl	8002b34 <SUBGRF_WriteCommand>
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023d4:	20000854 	.word	0x20000854
 80023d8:	01e84800 	.word	0x01e84800

080023dc <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80023e6:	79fa      	ldrb	r2, [r7, #7]
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <SUBGRF_SetPacketType+0x34>)
 80023ea:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d104      	bne.n	80023fc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80023f2:	2100      	movs	r1, #0
 80023f4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80023f8:	f000 faec 	bl	80029d4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80023fc:	1dfb      	adds	r3, r7, #7
 80023fe:	2201      	movs	r2, #1
 8002400:	4619      	mov	r1, r3
 8002402:	208a      	movs	r0, #138	; 0x8a
 8002404:	f000 fb96 	bl	8002b34 <SUBGRF_WriteCommand>
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	2000084d 	.word	0x2000084d

08002414 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
    return PacketType;
 8002418:	4b02      	ldr	r3, [pc, #8]	; (8002424 <SUBGRF_GetPacketType+0x10>)
 800241a:	781b      	ldrb	r3, [r3, #0]
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	2000084d 	.word	0x2000084d

08002428 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
 8002432:	460b      	mov	r3, r1
 8002434:	71bb      	strb	r3, [r7, #6]
 8002436:	4613      	mov	r3, r2
 8002438:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d149      	bne.n	80024d4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8002440:	2000      	movs	r0, #0
 8002442:	f7ff fcc9 	bl	8001dd8 <RBI_GetRFOMaxPowerConfig>
 8002446:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8002448:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	429a      	cmp	r2, r3
 8002450:	da01      	bge.n	8002456 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b0e      	cmp	r3, #14
 800245a:	d10e      	bne.n	800247a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800245c:	2301      	movs	r3, #1
 800245e:	2201      	movs	r2, #1
 8002460:	2100      	movs	r1, #0
 8002462:	2004      	movs	r0, #4
 8002464:	f7ff fef6 	bl	8002254 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8002468:	79ba      	ldrb	r2, [r7, #6]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	330e      	adds	r3, #14
 8002474:	b2db      	uxtb	r3, r3
 8002476:	71bb      	strb	r3, [r7, #6]
 8002478:	e01f      	b.n	80024ba <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b0a      	cmp	r3, #10
 800247e:	d10e      	bne.n	800249e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8002480:	2301      	movs	r3, #1
 8002482:	2201      	movs	r2, #1
 8002484:	2100      	movs	r1, #0
 8002486:	2001      	movs	r0, #1
 8002488:	f7ff fee4 	bl	8002254 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800248c:	79ba      	ldrb	r2, [r7, #6]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	330d      	adds	r3, #13
 8002498:	b2db      	uxtb	r3, r3
 800249a:	71bb      	strb	r3, [r7, #6]
 800249c:	e00d      	b.n	80024ba <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800249e:	2301      	movs	r3, #1
 80024a0:	2201      	movs	r2, #1
 80024a2:	2100      	movs	r1, #0
 80024a4:	2007      	movs	r0, #7
 80024a6:	f7ff fed5 	bl	8002254 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80024aa:	79ba      	ldrb	r2, [r7, #6]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	330e      	adds	r3, #14
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 80024ba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80024be:	f113 0f11 	cmn.w	r3, #17
 80024c2:	da01      	bge.n	80024c8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80024c4:	23ef      	movs	r3, #239	; 0xef
 80024c6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80024c8:	2118      	movs	r1, #24
 80024ca:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80024ce:	f000 fa81 	bl	80029d4 <SUBGRF_WriteRegister>
 80024d2:	e067      	b.n	80025a4 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80024d4:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80024d8:	f000 fa90 	bl	80029fc <SUBGRF_ReadRegister>
 80024dc:	4603      	mov	r3, r0
 80024de:	f043 031e 	orr.w	r3, r3, #30
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	4619      	mov	r1, r3
 80024e6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80024ea:	f000 fa73 	bl	80029d4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80024ee:	2001      	movs	r0, #1
 80024f0:	f7ff fc72 	bl	8001dd8 <RBI_GetRFOMaxPowerConfig>
 80024f4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80024f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	da01      	bge.n	8002504 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b14      	cmp	r3, #20
 8002508:	d10e      	bne.n	8002528 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800250a:	2301      	movs	r3, #1
 800250c:	2200      	movs	r2, #0
 800250e:	2105      	movs	r1, #5
 8002510:	2003      	movs	r0, #3
 8002512:	f7ff fe9f 	bl	8002254 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8002516:	79ba      	ldrb	r2, [r7, #6]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3316      	adds	r3, #22
 8002522:	b2db      	uxtb	r3, r3
 8002524:	71bb      	strb	r3, [r7, #6]
 8002526:	e031      	b.n	800258c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b11      	cmp	r3, #17
 800252c:	d10e      	bne.n	800254c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800252e:	2301      	movs	r3, #1
 8002530:	2200      	movs	r2, #0
 8002532:	2103      	movs	r1, #3
 8002534:	2002      	movs	r0, #2
 8002536:	f7ff fe8d 	bl	8002254 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800253a:	79ba      	ldrb	r2, [r7, #6]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	3316      	adds	r3, #22
 8002546:	b2db      	uxtb	r3, r3
 8002548:	71bb      	strb	r3, [r7, #6]
 800254a:	e01f      	b.n	800258c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2b0e      	cmp	r3, #14
 8002550:	d10e      	bne.n	8002570 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8002552:	2301      	movs	r3, #1
 8002554:	2200      	movs	r2, #0
 8002556:	2102      	movs	r1, #2
 8002558:	2002      	movs	r0, #2
 800255a:	f7ff fe7b 	bl	8002254 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800255e:	79ba      	ldrb	r2, [r7, #6]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	b2db      	uxtb	r3, r3
 8002568:	330e      	adds	r3, #14
 800256a:	b2db      	uxtb	r3, r3
 800256c:	71bb      	strb	r3, [r7, #6]
 800256e:	e00d      	b.n	800258c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8002570:	2301      	movs	r3, #1
 8002572:	2200      	movs	r2, #0
 8002574:	2107      	movs	r1, #7
 8002576:	2004      	movs	r0, #4
 8002578:	f7ff fe6c 	bl	8002254 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800257c:	79ba      	ldrb	r2, [r7, #6]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	3316      	adds	r3, #22
 8002588:	b2db      	uxtb	r3, r3
 800258a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800258c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002590:	f113 0f09 	cmn.w	r3, #9
 8002594:	da01      	bge.n	800259a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8002596:	23f7      	movs	r3, #247	; 0xf7
 8002598:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800259a:	2138      	movs	r1, #56	; 0x38
 800259c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80025a0:	f000 fa18 	bl	80029d4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80025a4:	79bb      	ldrb	r3, [r7, #6]
 80025a6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 80025a8:	797b      	ldrb	r3, [r7, #5]
 80025aa:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80025ac:	f107 0308 	add.w	r3, r7, #8
 80025b0:	2202      	movs	r2, #2
 80025b2:	4619      	mov	r1, r3
 80025b4:	208e      	movs	r0, #142	; 0x8e
 80025b6:	f000 fabd 	bl	8002b34 <SUBGRF_WriteCommand>
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80025c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80025d2:	4a61      	ldr	r2, [pc, #388]	; (8002758 <SUBGRF_SetModulationParams+0x194>)
 80025d4:	f107 0308 	add.w	r3, r7, #8
 80025d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025dc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	781a      	ldrb	r2, [r3, #0]
 80025e4:	4b5d      	ldr	r3, [pc, #372]	; (800275c <SUBGRF_SetModulationParams+0x198>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d004      	beq.n	80025f6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fef3 	bl	80023dc <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	f200 80a5 	bhi.w	800274a <SUBGRF_SetModulationParams+0x186>
 8002600:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <SUBGRF_SetModulationParams+0x44>)
 8002602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002606:	bf00      	nop
 8002608:	08002619 	.word	0x08002619
 800260c:	080026d9 	.word	0x080026d9
 8002610:	0800269b 	.word	0x0800269b
 8002614:	08002707 	.word	0x08002707
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8002618:	2308      	movs	r3, #8
 800261a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4a4f      	ldr	r2, [pc, #316]	; (8002760 <SUBGRF_SetModulationParams+0x19c>)
 8002622:	fbb2 f3f3 	udiv	r3, r2, r3
 8002626:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	0c1b      	lsrs	r3, r3, #16
 800262c:	b2db      	uxtb	r3, r3
 800262e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	b2db      	uxtb	r3, r3
 8002636:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	b2db      	uxtb	r3, r3
 800263c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7b1b      	ldrb	r3, [r3, #12]
 8002642:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	7b5b      	ldrb	r3, [r3, #13]
 8002648:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2200      	movs	r2, #0
 8002650:	461c      	mov	r4, r3
 8002652:	4615      	mov	r5, r2
 8002654:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8002658:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800265c:	4a41      	ldr	r2, [pc, #260]	; (8002764 <SUBGRF_SetModulationParams+0x1a0>)
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	4640      	mov	r0, r8
 8002664:	4649      	mov	r1, r9
 8002666:	f7fd fde3 	bl	8000230 <__aeabi_uldivmod>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4613      	mov	r3, r2
 8002670:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	b2db      	uxtb	r3, r3
 8002678:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	b2db      	uxtb	r3, r3
 8002680:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	b29a      	uxth	r2, r3
 800268c:	f107 0308 	add.w	r3, r7, #8
 8002690:	4619      	mov	r1, r3
 8002692:	208b      	movs	r0, #139	; 0x8b
 8002694:	f000 fa4e 	bl	8002b34 <SUBGRF_WriteCommand>
        break;
 8002698:	e058      	b.n	800274c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800269a:	2304      	movs	r3, #4
 800269c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	4a2f      	ldr	r2, [pc, #188]	; (8002760 <SUBGRF_SetModulationParams+0x19c>)
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7d1b      	ldrb	r3, [r3, #20]
 80026c4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	f107 0308 	add.w	r3, r7, #8
 80026ce:	4619      	mov	r1, r3
 80026d0:	208b      	movs	r0, #139	; 0x8b
 80026d2:	f000 fa2f 	bl	8002b34 <SUBGRF_WriteCommand>
        break;
 80026d6:	e039      	b.n	800274c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 80026d8:	2304      	movs	r3, #4
 80026da:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	7e1b      	ldrb	r3, [r3, #24]
 80026e0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	7e5b      	ldrb	r3, [r3, #25]
 80026e6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	7e9b      	ldrb	r3, [r3, #26]
 80026ec:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	7edb      	ldrb	r3, [r3, #27]
 80026f2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	f107 0308 	add.w	r3, r7, #8
 80026fc:	4619      	mov	r1, r3
 80026fe:	208b      	movs	r0, #139	; 0x8b
 8002700:	f000 fa18 	bl	8002b34 <SUBGRF_WriteCommand>

        break;
 8002704:	e022      	b.n	800274c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8002706:	2305      	movs	r3, #5
 8002708:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4a14      	ldr	r2, [pc, #80]	; (8002760 <SUBGRF_SetModulationParams+0x19c>)
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	0c1b      	lsrs	r3, r3, #16
 800271a:	b2db      	uxtb	r3, r3
 800271c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	b2db      	uxtb	r3, r3
 8002724:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7b1b      	ldrb	r3, [r3, #12]
 8002730:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7b5b      	ldrb	r3, [r3, #13]
 8002736:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	b29a      	uxth	r2, r3
 800273c:	f107 0308 	add.w	r3, r7, #8
 8002740:	4619      	mov	r1, r3
 8002742:	208b      	movs	r0, #139	; 0x8b
 8002744:	f000 f9f6 	bl	8002b34 <SUBGRF_WriteCommand>
        break;
 8002748:	e000      	b.n	800274c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800274a:	bf00      	nop
    }
}
 800274c:	bf00      	nop
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002756:	bf00      	nop
 8002758:	0800a278 	.word	0x0800a278
 800275c:	2000084d 	.word	0x2000084d
 8002760:	3d090000 	.word	0x3d090000
 8002764:	01e84800 	.word	0x01e84800

08002768 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8002774:	4a49      	ldr	r2, [pc, #292]	; (800289c <SUBGRF_SetPacketParams+0x134>)
 8002776:	f107 030c 	add.w	r3, r7, #12
 800277a:	ca07      	ldmia	r2, {r0, r1, r2}
 800277c:	c303      	stmia	r3!, {r0, r1}
 800277e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	781a      	ldrb	r2, [r3, #0]
 8002784:	4b46      	ldr	r3, [pc, #280]	; (80028a0 <SUBGRF_SetPacketParams+0x138>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d004      	beq.n	8002796 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fe23 	bl	80023dc <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d879      	bhi.n	8002892 <SUBGRF_SetPacketParams+0x12a>
 800279e:	a201      	add	r2, pc, #4	; (adr r2, 80027a4 <SUBGRF_SetPacketParams+0x3c>)
 80027a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a4:	080027b5 	.word	0x080027b5
 80027a8:	08002845 	.word	0x08002845
 80027ac:	08002839 	.word	0x08002839
 80027b0:	080027b5 	.word	0x080027b5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7adb      	ldrb	r3, [r3, #11]
 80027b8:	2bf1      	cmp	r3, #241	; 0xf1
 80027ba:	d10a      	bne.n	80027d2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80027bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027c0:	f7ff fbaf 	bl	8001f22 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80027c4:	f248 0005 	movw	r0, #32773	; 0x8005
 80027c8:	f7ff fbcb 	bl	8001f62 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80027cc:	2302      	movs	r3, #2
 80027ce:	75bb      	strb	r3, [r7, #22]
 80027d0:	e011      	b.n	80027f6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7adb      	ldrb	r3, [r3, #11]
 80027d6:	2bf2      	cmp	r3, #242	; 0xf2
 80027d8:	d10a      	bne.n	80027f0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80027da:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80027de:	f7ff fba0 	bl	8001f22 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80027e2:	f241 0021 	movw	r0, #4129	; 0x1021
 80027e6:	f7ff fbbc 	bl	8001f62 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80027ea:	2306      	movs	r3, #6
 80027ec:	75bb      	strb	r3, [r7, #22]
 80027ee:	e002      	b.n	80027f6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7adb      	ldrb	r3, [r3, #11]
 80027f4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80027f6:	2309      	movs	r3, #9
 80027f8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	889b      	ldrh	r3, [r3, #4]
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	b29b      	uxth	r3, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	889b      	ldrh	r3, [r3, #4]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	799b      	ldrb	r3, [r3, #6]
 8002812:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	79db      	ldrb	r3, [r3, #7]
 8002818:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	7a1b      	ldrb	r3, [r3, #8]
 800281e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	7a5b      	ldrb	r3, [r3, #9]
 8002824:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7a9b      	ldrb	r3, [r3, #10]
 800282a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800282c:	7dbb      	ldrb	r3, [r7, #22]
 800282e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	7b1b      	ldrb	r3, [r3, #12]
 8002834:	753b      	strb	r3, [r7, #20]
        break;
 8002836:	e023      	b.n	8002880 <SUBGRF_SetPacketParams+0x118>
    case PACKET_TYPE_BPSK:
        n = 1;
 8002838:	2301      	movs	r3, #1
 800283a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7b9b      	ldrb	r3, [r3, #14]
 8002840:	733b      	strb	r3, [r7, #12]
        break;
 8002842:	e01d      	b.n	8002880 <SUBGRF_SetPacketParams+0x118>
    case PACKET_TYPE_LORA:
        n = 6;
 8002844:	2306      	movs	r3, #6
 8002846:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	8a1b      	ldrh	r3, [r3, #16]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	b29b      	uxth	r3, r3
 8002850:	b2db      	uxtb	r3, r3
 8002852:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	8a1b      	ldrh	r3, [r3, #16]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	7c9a      	ldrb	r2, [r3, #18]
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <SUBGRF_SetPacketParams+0x13c>)
 8002862:	4611      	mov	r1, r2
 8002864:	7019      	strb	r1, [r3, #0]
 8002866:	4613      	mov	r3, r2
 8002868:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	b2db      	uxtb	r3, r3
 8002870:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	7e1b      	ldrb	r3, [r3, #24]
 8002876:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	7e5b      	ldrb	r3, [r3, #25]
 800287c:	747b      	strb	r3, [r7, #17]
        break;
 800287e:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8002880:	7dfb      	ldrb	r3, [r7, #23]
 8002882:	b29a      	uxth	r2, r3
 8002884:	f107 030c 	add.w	r3, r7, #12
 8002888:	4619      	mov	r1, r3
 800288a:	208c      	movs	r0, #140	; 0x8c
 800288c:	f000 f952 	bl	8002b34 <SUBGRF_WriteCommand>
 8002890:	e000      	b.n	8002894 <SUBGRF_SetPacketParams+0x12c>
        return;
 8002892:	bf00      	nop
}
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	0800a280 	.word	0x0800a280
 80028a0:	2000084d 	.word	0x2000084d
 80028a4:	2000084e 	.word	0x2000084e

080028a8 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	460a      	mov	r2, r1
 80028b2:	71fb      	strb	r3, [r7, #7]
 80028b4:	4613      	mov	r3, r2
 80028b6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80028bc:	79bb      	ldrb	r3, [r7, #6]
 80028be:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80028c0:	f107 030c 	add.w	r3, r7, #12
 80028c4:	2202      	movs	r2, #2
 80028c6:	4619      	mov	r1, r3
 80028c8:	208f      	movs	r0, #143	; 0x8f
 80028ca:	f000 f933 	bl	8002b34 <SUBGRF_WriteCommand>
}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80028e2:	f107 030c 	add.w	r3, r7, #12
 80028e6:	2202      	movs	r2, #2
 80028e8:	4619      	mov	r1, r3
 80028ea:	2013      	movs	r0, #19
 80028ec:	f000 f944 	bl	8002b78 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80028f0:	f7ff fd90 	bl	8002414 <SUBGRF_GetPacketType>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d10d      	bne.n	8002916 <SUBGRF_GetRxBufferStatus+0x3e>
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <SUBGRF_GetRxBufferStatus+0x54>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	d108      	bne.n	8002916 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8002904:	f240 7002 	movw	r0, #1794	; 0x702
 8002908:	f000 f878 	bl	80029fc <SUBGRF_ReadRegister>
 800290c:	4603      	mov	r3, r0
 800290e:	461a      	mov	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	e002      	b.n	800291c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8002916:	7b3a      	ldrb	r2, [r7, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800291c:	7b7a      	ldrb	r2, [r7, #13]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	701a      	strb	r2, [r3, #0]
}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	2000084e 	.word	0x2000084e

08002930 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8002938:	f107 030c 	add.w	r3, r7, #12
 800293c:	2203      	movs	r2, #3
 800293e:	4619      	mov	r1, r3
 8002940:	2014      	movs	r0, #20
 8002942:	f000 f919 	bl	8002b78 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8002946:	f7ff fd65 	bl	8002414 <SUBGRF_GetPacketType>
 800294a:	4603      	mov	r3, r0
 800294c:	461a      	mov	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <SUBGRF_GetPacketStatus+0x30>
 800295a:	2b01      	cmp	r3, #1
 800295c:	d013      	beq.n	8002986 <SUBGRF_GetPacketStatus+0x56>
 800295e:	e02a      	b.n	80029b6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8002960:	7b3a      	ldrb	r2, [r7, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8002966:	7b7b      	ldrb	r3, [r7, #13]
 8002968:	425b      	negs	r3, r3
 800296a:	105b      	asrs	r3, r3, #1
 800296c:	b25a      	sxtb	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8002972:	7bbb      	ldrb	r3, [r7, #14]
 8002974:	425b      	negs	r3, r3
 8002976:	105b      	asrs	r3, r3, #1
 8002978:	b25a      	sxtb	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
            break;
 8002984:	e020      	b.n	80029c8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8002986:	7b3b      	ldrb	r3, [r7, #12]
 8002988:	425b      	negs	r3, r3
 800298a:	105b      	asrs	r3, r3, #1
 800298c:	b25a      	sxtb	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8002992:	7b7b      	ldrb	r3, [r7, #13]
 8002994:	b25b      	sxtb	r3, r3
 8002996:	3302      	adds	r3, #2
 8002998:	109b      	asrs	r3, r3, #2
 800299a:	b25a      	sxtb	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80029a0:	7bbb      	ldrb	r3, [r7, #14]
 80029a2:	425b      	negs	r3, r3
 80029a4:	105b      	asrs	r3, r3, #1
 80029a6:	b25a      	sxtb	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <SUBGRF_GetPacketStatus+0xa0>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	611a      	str	r2, [r3, #16]
            break;
 80029b4:	e008      	b.n	80029c8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80029b6:	2214      	movs	r2, #20
 80029b8:	2100      	movs	r1, #0
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f006 f956 	bl	8008c6c <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	220f      	movs	r2, #15
 80029c4:	701a      	strb	r2, [r3, #0]
            break;
 80029c6:	bf00      	nop
    }
}
 80029c8:	bf00      	nop
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000850 	.word	0x20000850

080029d4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	460a      	mov	r2, r1
 80029de:	80fb      	strh	r3, [r7, #6]
 80029e0:	4613      	mov	r3, r2
 80029e2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80029e4:	1d7a      	adds	r2, r7, #5
 80029e6:	88f9      	ldrh	r1, [r7, #6]
 80029e8:	2301      	movs	r3, #1
 80029ea:	4803      	ldr	r0, [pc, #12]	; (80029f8 <SUBGRF_WriteRegister+0x24>)
 80029ec:	f003 feb0 	bl	8006750 <HAL_SUBGHZ_WriteRegisters>
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20000748 	.word	0x20000748

080029fc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8002a06:	f107 020f 	add.w	r2, r7, #15
 8002a0a:	88f9      	ldrh	r1, [r7, #6]
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	4804      	ldr	r0, [pc, #16]	; (8002a20 <SUBGRF_ReadRegister+0x24>)
 8002a10:	f003 fefd 	bl	800680e <HAL_SUBGHZ_ReadRegisters>
    return data;
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000748 	.word	0x20000748

08002a24 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	6039      	str	r1, [r7, #0]
 8002a2e:	80fb      	strh	r3, [r7, #6]
 8002a30:	4613      	mov	r3, r2
 8002a32:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a34:	f3ef 8310 	mrs	r3, PRIMASK
 8002a38:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002a3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a3e:	b672      	cpsid	i
}
 8002a40:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8002a42:	88bb      	ldrh	r3, [r7, #4]
 8002a44:	88f9      	ldrh	r1, [r7, #6]
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	4806      	ldr	r0, [pc, #24]	; (8002a64 <SUBGRF_WriteRegisters+0x40>)
 8002a4a:	f003 fe81 	bl	8006750 <HAL_SUBGHZ_WriteRegisters>
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f383 8810 	msr	PRIMASK, r3
}
 8002a58:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002a5a:	bf00      	nop
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000748 	.word	0x20000748

08002a68 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	6039      	str	r1, [r7, #0]
 8002a72:	80fb      	strh	r3, [r7, #6]
 8002a74:	4613      	mov	r3, r2
 8002a76:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a78:	f3ef 8310 	mrs	r3, PRIMASK
 8002a7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002a80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a82:	b672      	cpsid	i
}
 8002a84:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8002a86:	88bb      	ldrh	r3, [r7, #4]
 8002a88:	88f9      	ldrh	r1, [r7, #6]
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	4806      	ldr	r0, [pc, #24]	; (8002aa8 <SUBGRF_ReadRegisters+0x40>)
 8002a8e:	f003 febe 	bl	800680e <HAL_SUBGHZ_ReadRegisters>
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f383 8810 	msr	PRIMASK, r3
}
 8002a9c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000748 	.word	0x20000748

08002aac <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	6039      	str	r1, [r7, #0]
 8002ab6:	71fb      	strb	r3, [r7, #7]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002abc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002ac4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac6:	b672      	cpsid	i
}
 8002ac8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8002aca:	79bb      	ldrb	r3, [r7, #6]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	79f9      	ldrb	r1, [r7, #7]
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	4806      	ldr	r0, [pc, #24]	; (8002aec <SUBGRF_WriteBuffer+0x40>)
 8002ad4:	f003 ffaf 	bl	8006a36 <HAL_SUBGHZ_WriteBuffer>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	f383 8810 	msr	PRIMASK, r3
}
 8002ae2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002ae4:	bf00      	nop
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000748 	.word	0x20000748

08002af0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	6039      	str	r1, [r7, #0]
 8002afa:	71fb      	strb	r3, [r7, #7]
 8002afc:	4613      	mov	r3, r2
 8002afe:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b00:	f3ef 8310 	mrs	r3, PRIMASK
 8002b04:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b06:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002b08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b0a:	b672      	cpsid	i
}
 8002b0c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8002b0e:	79bb      	ldrb	r3, [r7, #6]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	79f9      	ldrb	r1, [r7, #7]
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	4806      	ldr	r0, [pc, #24]	; (8002b30 <SUBGRF_ReadBuffer+0x40>)
 8002b18:	f003 ffe0 	bl	8006adc <HAL_SUBGHZ_ReadBuffer>
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f383 8810 	msr	PRIMASK, r3
}
 8002b26:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002b28:	bf00      	nop
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000748 	.word	0x20000748

08002b34 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	6039      	str	r1, [r7, #0]
 8002b3e:	71fb      	strb	r3, [r7, #7]
 8002b40:	4613      	mov	r3, r2
 8002b42:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b44:	f3ef 8310 	mrs	r3, PRIMASK
 8002b48:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002b4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b4e:	b672      	cpsid	i
}
 8002b50:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8002b52:	88bb      	ldrh	r3, [r7, #4]
 8002b54:	79f9      	ldrb	r1, [r7, #7]
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	4806      	ldr	r0, [pc, #24]	; (8002b74 <SUBGRF_WriteCommand+0x40>)
 8002b5a:	f003 feb9 	bl	80068d0 <HAL_SUBGHZ_ExecSetCmd>
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f383 8810 	msr	PRIMASK, r3
}
 8002b68:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002b6a:	bf00      	nop
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000748 	.word	0x20000748

08002b78 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	71fb      	strb	r3, [r7, #7]
 8002b84:	4613      	mov	r3, r2
 8002b86:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b88:	f3ef 8310 	mrs	r3, PRIMASK
 8002b8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002b90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b92:	b672      	cpsid	i
}
 8002b94:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8002b96:	88bb      	ldrh	r3, [r7, #4]
 8002b98:	79f9      	ldrb	r1, [r7, #7]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	4806      	ldr	r0, [pc, #24]	; (8002bb8 <SUBGRF_ReadCommand+0x40>)
 8002b9e:	f003 fef6 	bl	800698e <HAL_SUBGHZ_ExecGetCmd>
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f383 8810 	msr	PRIMASK, r3
}
 8002bac:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002bae:	bf00      	nop
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000748 	.word	0x20000748

08002bbc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	460a      	mov	r2, r1
 8002bc6:	71fb      	strb	r3, [r7, #7]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8002bd0:	79bb      	ldrb	r3, [r7, #6]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d10d      	bne.n	8002bf2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d104      	bne.n	8002be6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8002be0:	2004      	movs	r0, #4
 8002be2:	f000 f8e7 	bl	8002db4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d107      	bne.n	8002bfc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8002bec:	2303      	movs	r3, #3
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	e004      	b.n	8002bfc <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8002bf2:	79bb      	ldrb	r3, [r7, #6]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff f8c7 	bl	8001d92 <RBI_ConfigRFSwitch>
}
 8002c04:	bf00      	nop
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8002c1a:	f7ff f8c8 	bl	8001dae <RBI_GetTxConfig>
 8002c1e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d016      	beq.n	8002c54 <SUBGRF_SetRfTxPower+0x48>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	dc16      	bgt.n	8002c5a <SUBGRF_SetRfTxPower+0x4e>
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <SUBGRF_SetRfTxPower+0x2e>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d00a      	beq.n	8002c4e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8002c38:	e00f      	b.n	8002c5a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	2b0f      	cmp	r3, #15
 8002c40:	dd02      	ble.n	8002c48 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8002c42:	2302      	movs	r3, #2
 8002c44:	73fb      	strb	r3, [r7, #15]
            break;
 8002c46:	e009      	b.n	8002c5c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
            break;
 8002c4c:	e006      	b.n	8002c5c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
            break;
 8002c52:	e003      	b.n	8002c5c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8002c54:	2302      	movs	r3, #2
 8002c56:	73fb      	strb	r3, [r7, #15]
            break;
 8002c58:	e000      	b.n	8002c5c <SUBGRF_SetRfTxPower+0x50>
            break;
 8002c5a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8002c5c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2202      	movs	r2, #2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff fbdf 	bl	8002428 <SUBGRF_SetTxParams>
    //SUBGRF_SetTxParams( RFO_HP, power, RADIO_RAMP_40_US );
    return paSelect;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2001      	movs	r0, #1
 8002c82:	4798      	blx	r3
}
 8002c84:	bf00      	nop
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000858 	.word	0x20000858

08002c90 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8002c98:	4b03      	ldr	r3, [pc, #12]	; (8002ca8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2002      	movs	r0, #2
 8002c9e:	4798      	blx	r3
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000858 	.word	0x20000858

08002cac <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2040      	movs	r0, #64	; 0x40
 8002cba:	4798      	blx	r3
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20000858 	.word	0x20000858

08002cc8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d005      	beq.n	8002cea <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8002cde:	e00a      	b.n	8002cf6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2080      	movs	r0, #128	; 0x80
 8002ce6:	4798      	blx	r3
            break;
 8002ce8:	e005      	b.n	8002cf6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8002cea:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002cf2:	4798      	blx	r3
            break;
 8002cf4:	bf00      	nop
    }
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000858 	.word	0x20000858

08002d04 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d14:	4798      	blx	r3
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000858 	.word	0x20000858

08002d24 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8002d2c:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2020      	movs	r0, #32
 8002d32:	4798      	blx	r3
}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000858 	.word	0x20000858

08002d40 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2004      	movs	r0, #4
 8002d4e:	4798      	blx	r3
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000858 	.word	0x20000858

08002d5c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2008      	movs	r0, #8
 8002d6a:	4798      	blx	r3
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000858 	.word	0x20000858

08002d78 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2010      	movs	r0, #16
 8002d86:	4798      	blx	r3
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000858 	.word	0x20000858

08002d94 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002da4:	4798      	blx	r3
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000858 	.word	0x20000858

08002db4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	4603      	mov	r3, r0
 8002dbc:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8002dbe:	f7ff f804 	bl	8001dca <RBI_IsDCDC>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d112      	bne.n	8002dee <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8002dc8:	f640 1023 	movw	r0, #2339	; 0x923
 8002dcc:	f7ff fe16 	bl	80029fc <SUBGRF_ReadRegister>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	f023 0306 	bic.w	r3, r3, #6
 8002dda:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8002ddc:	7bfa      	ldrb	r2, [r7, #15]
 8002dde:	79fb      	ldrb	r3, [r7, #7]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	4619      	mov	r1, r3
 8002de6:	f640 1023 	movw	r0, #2339	; 0x923
 8002dea:	f7ff fdf3 	bl	80029d4 <SUBGRF_WriteRegister>
  }
}
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e02:	2003      	movs	r0, #3
 8002e04:	f000 f902 	bl	800300c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e08:	f003 f864 	bl	8005ed4 <HAL_RCC_GetHCLKFreq>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4a09      	ldr	r2, [pc, #36]	; (8002e34 <HAL_Init+0x3c>)
 8002e10:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e12:	200f      	movs	r0, #15
 8002e14:	f7fe f894 	bl	8000f40 <HAL_InitTick>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	71fb      	strb	r3, [r7, #7]
 8002e22:	e001      	b.n	8002e28 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e24:	f7fe f86d 	bl	8000f02 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e28:	79fb      	ldrb	r3, [r7, #7]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000108 	.word	0x20000108

08002e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_IncTick+0x1c>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_IncTick+0x20>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4413      	add	r3, r2
 8002e48:	4a03      	ldr	r2, [pc, #12]	; (8002e58 <HAL_IncTick+0x20>)
 8002e4a:	6013      	str	r3, [r2, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr
 8002e54:	20000110 	.word	0x20000110
 8002e58:	2000085c 	.word	0x2000085c

08002e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e60:	4b02      	ldr	r3, [pc, #8]	; (8002e6c <HAL_GetTick+0x10>)
 8002e62:	681b      	ldr	r3, [r3, #0]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr
 8002e6c:	2000085c 	.word	0x2000085c

08002e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e78:	f7ff fff0 	bl	8002e5c <HAL_GetTick>
 8002e7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e88:	d005      	beq.n	8002e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <HAL_Delay+0x44>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4413      	add	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e96:	bf00      	nop
 8002e98:	f7ff ffe0 	bl	8002e5c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d8f7      	bhi.n	8002e98 <HAL_Delay+0x28>
  {
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000110 	.word	0x20000110

08002eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <__NVIC_SetPriorityGrouping+0x44>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ee4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eea:	4a04      	ldr	r2, [pc, #16]	; (8002efc <__NVIC_SetPriorityGrouping+0x44>)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	60d3      	str	r3, [r2, #12]
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <__NVIC_GetPriorityGrouping+0x18>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	0a1b      	lsrs	r3, r3, #8
 8002f0a:	f003 0307 	and.w	r3, r3, #7
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	e000ed00 	.word	0xe000ed00

08002f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	db0b      	blt.n	8002f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	f003 021f 	and.w	r2, r3, #31
 8002f34:	4906      	ldr	r1, [pc, #24]	; (8002f50 <__NVIC_EnableIRQ+0x34>)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	e000e100 	.word	0xe000e100

08002f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	6039      	str	r1, [r7, #0]
 8002f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	db0a      	blt.n	8002f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	490c      	ldr	r1, [pc, #48]	; (8002fa0 <__NVIC_SetPriority+0x4c>)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	0112      	lsls	r2, r2, #4
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	440b      	add	r3, r1
 8002f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f7c:	e00a      	b.n	8002f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4908      	ldr	r1, [pc, #32]	; (8002fa4 <__NVIC_SetPriority+0x50>)
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	3b04      	subs	r3, #4
 8002f8c:	0112      	lsls	r2, r2, #4
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	440b      	add	r3, r1
 8002f92:	761a      	strb	r2, [r3, #24]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000e100 	.word	0xe000e100
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f1c3 0307 	rsb	r3, r3, #7
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	bf28      	it	cs
 8002fc6:	2304      	movcs	r3, #4
 8002fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	2b06      	cmp	r3, #6
 8002fd0:	d902      	bls.n	8002fd8 <NVIC_EncodePriority+0x30>
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3b03      	subs	r3, #3
 8002fd6:	e000      	b.n	8002fda <NVIC_EncodePriority+0x32>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	401a      	ands	r2, r3
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffa:	43d9      	mvns	r1, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003000:	4313      	orrs	r3, r2
         );
}
 8003002:	4618      	mov	r0, r3
 8003004:	3724      	adds	r7, #36	; 0x24
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff ff4f 	bl	8002eb8 <__NVIC_SetPriorityGrouping>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b086      	sub	sp, #24
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003030:	f7ff ff66 	bl	8002f00 <__NVIC_GetPriorityGrouping>
 8003034:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	6978      	ldr	r0, [r7, #20]
 800303c:	f7ff ffb4 	bl	8002fa8 <NVIC_EncodePriority>
 8003040:	4602      	mov	r2, r0
 8003042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff83 	bl	8002f54 <__NVIC_SetPriority>
}
 800304e:	bf00      	nop
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	4603      	mov	r3, r0
 800305e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff59 	bl	8002f1c <__NVIC_EnableIRQ>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e02d      	b.n	80030e0 <HAL_CRYP_Init+0x6e>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d106      	bne.n	800309e <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7fd fab7 	bl	800060c <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size (This bit field is do not care in the DES or TDES modes), data type and Algorithm */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 80030a8:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6851      	ldr	r1, [r2, #4]
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6892      	ldr	r2, [r2, #8]
 80030b4:	4311      	orrs	r1, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6952      	ldr	r2, [r2, #20]
 80030ba:	4311      	orrs	r1, r2
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6013      	str	r3, [r2, #0]

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_CRYP_DeInit>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_CRYP_DeInit(CRYP_HandleTypeDef *hcryp)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_CRYP_DeInit+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e020      	b.n	800313c <HAL_CRYP_DeInit+0x54>
  }

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset CrypInCount and CrypOutCount */
  hcryp->CrypInCount = 0;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->CrypOutCount = 0;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  hcryp->CrypHeaderCount = 0;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	879a      	strh	r2, [r3, #60]	; 0x3c

  /* Disable the CRYP peripheral clock */
  __HAL_CRYP_DISABLE(hcryp);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
  hcryp->MspDeInitCallback(hcryp);

#else

  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_CRYP_MspDeInit(hcryp);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7fd fa85 	bl	8000634 <HAL_CRYP_MspDeInit>

#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_RESET;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hcryp);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_CRYP_Encrypt>:
  * @param  Output Pointer to the output buffer(ciphertext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	4613      	mov	r3, r2
 8003152:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b01      	cmp	r3, #1
 800315e:	d17c      	bne.n	800325a <HAL_CRYP_Encrypt+0x116>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process locked */
    __HAL_LOCK(hcryp);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_CRYP_Encrypt+0x32>
 8003172:	2302      	movs	r3, #2
 8003174:	e07a      	b.n	800326c <HAL_CRYP_Encrypt+0x128>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/
    hcryp->CrypInCount = 0U;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hcryp->pCrypInBuffPtr = Input;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	2b00      	cmp	r3, #0
 800319e:	d106      	bne.n	80031ae <HAL_CRYP_Encrypt+0x6a>
    {
      hcryp->Size = Size * 4U;
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80031ac:	e003      	b.n	80031b6 <HAL_CRYP_Encrypt+0x72>
    }
    else
    {
      hcryp->Size = Size;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	88fa      	ldrh	r2, [r7, #6]
 80031b2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }

    /* Set the operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0218 	bic.w	r2, r2, #24
 80031c4:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4b29      	ldr	r3, [pc, #164]	; (8003274 <HAL_CRYP_Encrypt+0x130>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]

    switch (algo)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d8:	d023      	beq.n	8003222 <HAL_CRYP_Encrypt+0xde>
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e0:	d826      	bhi.n	8003230 <HAL_CRYP_Encrypt+0xec>
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	2b60      	cmp	r3, #96	; 0x60
 80031e6:	d015      	beq.n	8003214 <HAL_CRYP_Encrypt+0xd0>
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2b60      	cmp	r3, #96	; 0x60
 80031ec:	d820      	bhi.n	8003230 <HAL_CRYP_Encrypt+0xec>
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2b40      	cmp	r3, #64	; 0x40
 80031f2:	d008      	beq.n	8003206 <HAL_CRYP_Encrypt+0xc2>
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b40      	cmp	r3, #64	; 0x40
 80031f8:	d81a      	bhi.n	8003230 <HAL_CRYP_Encrypt+0xec>
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <HAL_CRYP_Encrypt+0xc2>
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2b20      	cmp	r3, #32
 8003204:	d114      	bne.n	8003230 <HAL_CRYP_Encrypt+0xec>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 8003206:	6a39      	ldr	r1, [r7, #32]
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 f8da 	bl	80033c2 <CRYP_AES_Encrypt>
 800320e:	4603      	mov	r3, r0
 8003210:	75fb      	strb	r3, [r7, #23]
        break;
 8003212:	e016      	b.n	8003242 <HAL_CRYP_Encrypt+0xfe>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 8003214:	6a39      	ldr	r1, [r7, #32]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 fbc3 	bl	80039a2 <CRYP_AESGCM_Process>
 800321c:	4603      	mov	r3, r0
 800321e:	75fb      	strb	r3, [r7, #23]
        break;
 8003220:	e00f      	b.n	8003242 <HAL_CRYP_Encrypt+0xfe>

      case CRYP_AES_CCM:

        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 8003222:	6a39      	ldr	r1, [r7, #32]
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fd64 	bl	8003cf2 <CRYP_AESCCM_Process>
 800322a:	4603      	mov	r3, r0
 800322c:	75fb      	strb	r3, [r7, #23]
        break;
 800322e:	e008      	b.n	8003242 <HAL_CRYP_Encrypt+0xfe>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	f043 0220 	orr.w	r2, r3, #32
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	75fb      	strb	r3, [r7, #23]
        break;
 8003240:	bf00      	nop
    }

    if (status == HAL_OK)
 8003242:	7dfb      	ldrb	r3, [r7, #23]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d110      	bne.n	800326a <HAL_CRYP_Encrypt+0x126>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003258:	e007      	b.n	800326a <HAL_CRYP_Encrypt+0x126>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	f043 0208 	orr.w	r2, r3, #8
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800326a:	7dfb      	ldrb	r3, [r7, #23]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3718      	adds	r7, #24
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	00010060 	.word	0x00010060

08003278 <HAL_CRYP_Decrypt>:
  * @param  Output Pointer to the output buffer(plaintext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	4613      	mov	r3, r2
 8003286:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d17e      	bne.n	8003392 <HAL_CRYP_Decrypt+0x11a>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process locked */
    __HAL_LOCK(hcryp);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_CRYP_Decrypt+0x32>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e07c      	b.n	80033a4 <HAL_CRYP_Decrypt+0x12c>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/
    hcryp->CrypInCount = 0U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hcryp->pCrypInBuffPtr = Input;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d106      	bne.n	80032e2 <HAL_CRYP_Decrypt+0x6a>
    {
      hcryp->Size = Size * 4U;
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80032e0:	e003      	b.n	80032ea <HAL_CRYP_Decrypt+0x72>
    }
    else
    {
      hcryp->Size = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	88fa      	ldrh	r2, [r7, #6]
 80032e6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }

    /* Set Decryption operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f023 0218 	bic.w	r2, r3, #24
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0210 	orr.w	r2, r2, #16
 80032fc:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b29      	ldr	r3, [pc, #164]	; (80033ac <HAL_CRYP_Decrypt+0x134>)
 8003306:	4013      	ands	r3, r2
 8003308:	613b      	str	r3, [r7, #16]

    switch (algo)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003310:	d023      	beq.n	800335a <HAL_CRYP_Decrypt+0xe2>
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003318:	d826      	bhi.n	8003368 <HAL_CRYP_Decrypt+0xf0>
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b60      	cmp	r3, #96	; 0x60
 800331e:	d015      	beq.n	800334c <HAL_CRYP_Decrypt+0xd4>
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b60      	cmp	r3, #96	; 0x60
 8003324:	d820      	bhi.n	8003368 <HAL_CRYP_Decrypt+0xf0>
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d008      	beq.n	800333e <HAL_CRYP_Decrypt+0xc6>
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2b40      	cmp	r3, #64	; 0x40
 8003330:	d81a      	bhi.n	8003368 <HAL_CRYP_Decrypt+0xf0>
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <HAL_CRYP_Decrypt+0xc6>
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	2b20      	cmp	r3, #32
 800333c:	d114      	bne.n	8003368 <HAL_CRYP_Decrypt+0xf0>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES decryption */
        status = CRYP_AES_Decrypt(hcryp, Timeout);
 800333e:	6a39      	ldr	r1, [r7, #32]
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f8c6 	bl	80034d2 <CRYP_AES_Decrypt>
 8003346:	4603      	mov	r3, r0
 8003348:	75fb      	strb	r3, [r7, #23]
        break;
 800334a:	e016      	b.n	800337a <HAL_CRYP_Decrypt+0x102>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM decryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 800334c:	6a39      	ldr	r1, [r7, #32]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fb27 	bl	80039a2 <CRYP_AESGCM_Process>
 8003354:	4603      	mov	r3, r0
 8003356:	75fb      	strb	r3, [r7, #23]
        break;
 8003358:	e00f      	b.n	800337a <HAL_CRYP_Decrypt+0x102>

      case CRYP_AES_CCM:

        /* AES CCM decryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 800335a:	6a39      	ldr	r1, [r7, #32]
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 fcc8 	bl	8003cf2 <CRYP_AESCCM_Process>
 8003362:	4603      	mov	r3, r0
 8003364:	75fb      	strb	r3, [r7, #23]
        break;
 8003366:	e008      	b.n	800337a <HAL_CRYP_Decrypt+0x102>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	75fb      	strb	r3, [r7, #23]
        break;
 8003378:	bf00      	nop
    }

    if (status == HAL_OK)
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d110      	bne.n	80033a2 <HAL_CRYP_Decrypt+0x12a>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003390:	e007      	b.n	80033a2 <HAL_CRYP_Decrypt+0x12a>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003396:	f043 0208 	orr.w	r2, r3, #8
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	00010060 	.word	0x00010060

080033b0 <HAL_CRYP_ErrorCallback>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CRYP_ErrorCallback can be implemented in the user file
   */
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc80      	pop	{r7}
 80033c0:	4770      	bx	lr

080033c2 <CRYP_AES_Encrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 80033cc:	2301      	movs	r3, #1
 80033ce:	60bb      	str	r3, [r7, #8]

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)|| (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d003      	beq.n	80033e0 <CRYP_AES_Encrypt+0x1e>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d109      	bne.n	80033f4 <CRYP_AES_Encrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d102      	bne.n	80033ee <CRYP_AES_Encrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	e002      	b.n	80033f4 <CRYP_AES_Encrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d122      	bne.n	8003440 <CRYP_AES_Encrypt+0x7e>
  {
    /*  Set the Key*/
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	4619      	mov	r1, r3
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fa6c 	bl	80038de <CRYP_SetKey>

    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d022      	beq.n	8003454 <CRYP_AES_Encrypt+0x92>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6852      	ldr	r2, [r2, #4]
 8003424:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6892      	ldr	r2, [r2, #8]
 8003430:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68d2      	ldr	r2, [r2, #12]
 800343c:	621a      	str	r2, [r3, #32]
 800343e:	e009      	b.n	8003454 <CRYP_AES_Encrypt+0x92>
    }
  } /* if (DoKeyIVConfig == 1U) */
  else
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	2b04      	cmp	r3, #4
 8003446:	d105      	bne.n	8003454 <CRYP_AES_Encrypt+0x92>
    {
      /* Set the Key */
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4619      	mov	r1, r3
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fa45 	bl	80038de <CRYP_SetKey>
    }
  }
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0201 	orr.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346e:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003476:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8003478:	e00a      	b.n	8003490 <CRYP_AES_Encrypt+0xce>
  {
    /* Write plain Ddta and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 800347a:	6839      	ldr	r1, [r7, #0]
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f976 	bl	800376e <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003486:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800348e:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	b29b      	uxth	r3, r3
 800349a:	89fa      	ldrh	r2, [r7, #14]
 800349c:	429a      	cmp	r2, r3
 800349e:	d207      	bcs.n	80034b0 <CRYP_AES_Encrypt+0xee>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80034a6:	089b      	lsrs	r3, r3, #2
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	89ba      	ldrh	r2, [r7, #12]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d3e4      	bcc.n	800347a <CRYP_AES_Encrypt+0xb8>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Return function status */
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <CRYP_AES_Decrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout Specify Timeout value
  * @retval HAL status
*/
static HAL_StatusTypeDef CRYP_AES_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 80034dc:	2301      	movs	r3, #1
 80034de:	60bb      	str	r3, [r7, #8]

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d003      	beq.n	80034f0 <CRYP_AES_Decrypt+0x1e>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d109      	bne.n	8003504 <CRYP_AES_Decrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d102      	bne.n	80034fe <CRYP_AES_Decrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	e002      	b.n	8003504 <CRYP_AES_Decrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b01      	cmp	r3, #1
 8003508:	f040 8086 	bne.w	8003618 <CRYP_AES_Decrypt+0x146>
  {
    /*  Key preparation for ECB/CBC */
    if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	2b40      	cmp	r3, #64	; 0x40
 8003512:	d05d      	beq.n	80035d0 <CRYP_AES_Decrypt+0xfe>
    {
      if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800351a:	2b00      	cmp	r3, #0
 800351c:	d149      	bne.n	80035b2 <CRYP_AES_Decrypt+0xe0>
      {
        /* Set key preparation for decryption operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f023 0218 	bic.w	r2, r3, #24
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0208 	orr.w	r2, r2, #8
 8003530:	601a      	str	r2, [r3, #0]

        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	4619      	mov	r1, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f9d0 	bl	80038de <CRYP_SetKey>

        /* Enable CRYP */
        __HAL_CRYP_ENABLE(hcryp);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800354e:	6839      	ldr	r1, [r7, #0]
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 ff51 	bl	80043f8 <CRYP_WaitOnCCFlag>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d017      	beq.n	800358c <CRYP_AES_Decrypt+0xba>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0201 	bic.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

          /* Change state & error code*/
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	f043 0210 	orr.w	r2, r3, #16
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0ec      	b.n	8003766 <CRYP_AES_Decrypt+0x294>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800359a:	601a      	str	r2, [r3, #0]

        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 0218 	bic.w	r2, r3, #24
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0210 	orr.w	r2, r2, #16
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	e014      	b.n	80035dc <CRYP_AES_Decrypt+0x10a>
      }
      else /*Mode 4 : decryption & Key preparation*/
      {
        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4619      	mov	r1, r3
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f990 	bl	80038de <CRYP_SetKey>

        /* Set decryption & Key preparation operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0218 	orr.w	r2, r2, #24
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	e005      	b.n	80035dc <CRYP_AES_Decrypt+0x10a>
      }
    }
    else  /*Algorithm CTR */
    {
      /*  Set the Key*/
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4619      	mov	r1, r3
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f981 	bl	80038de <CRYP_SetKey>
    }

    /* Set IV */
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 8085 	beq.w	80036f0 <CRYP_AES_Decrypt+0x21e>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691a      	ldr	r2, [r3, #16]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6852      	ldr	r2, [r2, #4]
 80035fc:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691a      	ldr	r2, [r3, #16]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6892      	ldr	r2, [r2, #8]
 8003608:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68d2      	ldr	r2, [r2, #12]
 8003614:	621a      	str	r2, [r3, #32]
 8003616:	e06b      	b.n	80036f0 <CRYP_AES_Decrypt+0x21e>
    }
  } /* if (DoKeyIVConfig == 1U) */
  else /* if (dokeyivconfig == 0U) */
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	2b04      	cmp	r3, #4
 800361e:	d167      	bne.n	80036f0 <CRYP_AES_Decrypt+0x21e>
    {
      /*  Key preparation for ECB/CBC */
      if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	2b40      	cmp	r3, #64	; 0x40
 8003626:	d05d      	beq.n	80036e4 <CRYP_AES_Decrypt+0x212>
      {
        if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800362e:	2b00      	cmp	r3, #0
 8003630:	d149      	bne.n	80036c6 <CRYP_AES_Decrypt+0x1f4>
        {
          /* Set key preparation for decryption operating mode*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f023 0218 	bic.w	r2, r3, #24
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0208 	orr.w	r2, r2, #8
 8003644:	601a      	str	r2, [r3, #0]
          
          /*  Set the Key*/
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	4619      	mov	r1, r3
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f946 	bl	80038de <CRYP_SetKey>
          
          /* Enable CRYP */
          __HAL_CRYP_ENABLE(hcryp);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]
          
          /* Wait for CCF flag to be raised */
          if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003662:	6839      	ldr	r1, [r7, #0]
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fec7 	bl	80043f8 <CRYP_WaitOnCCFlag>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d017      	beq.n	80036a0 <CRYP_AES_Decrypt+0x1ce>
          {
            /* Disable the CRYP peripheral clock */
            __HAL_CRYP_DISABLE(hcryp);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]
            
            /* Change state & error code*/
            hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003684:	f043 0210 	orr.w	r2, r3, #16
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	655a      	str	r2, [r3, #84]	; 0x54
            hcryp->State = HAL_CRYP_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            /* Process unlocked */
            __HAL_UNLOCK(hcryp);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e062      	b.n	8003766 <CRYP_AES_Decrypt+0x294>
          }
          /* Clear CCF Flag */
          __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036ae:	601a      	str	r2, [r3, #0]
          
          /* Return to decryption operating mode(Mode 3)*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 0218 	bic.w	r2, r3, #24
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0210 	orr.w	r2, r2, #16
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	e014      	b.n	80036f0 <CRYP_AES_Decrypt+0x21e>
        }
        else /*Mode 4 : decryption & Key preparation*/
        {
          /*  Set the Key*/
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	4619      	mov	r1, r3
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f906 	bl	80038de <CRYP_SetKey>
          
          /* Set decryption & Key preparation operating mode*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0218 	orr.w	r2, r2, #24
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e005      	b.n	80036f0 <CRYP_AES_Decrypt+0x21e>
        }
      }
      else  /*Algorithm CTR */
      {
        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f8f7 	bl	80038de <CRYP_SetKey>
      }
    }
  }
 
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370a:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003712:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8003714:	e00a      	b.n	800372c <CRYP_AES_Decrypt+0x25a>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8003716:	6839      	ldr	r1, [r7, #0]
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f828 	bl	800376e <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003722:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800372a:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003732:	089b      	lsrs	r3, r3, #2
 8003734:	b29b      	uxth	r3, r3
 8003736:	89fa      	ldrh	r2, [r7, #14]
 8003738:	429a      	cmp	r2, r3
 800373a:	d207      	bcs.n	800374c <CRYP_AES_Decrypt+0x27a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003742:	089b      	lsrs	r3, r3, #2
 8003744:	b29b      	uxth	r3, r3
 8003746:	89ba      	ldrh	r2, [r7, #12]
 8003748:	429a      	cmp	r2, r3
 800374a:	d3e4      	bcc.n	8003716 <CRYP_AES_Decrypt+0x244>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b088      	sub	sp, #32
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]

  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t i;

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003780:	b29b      	uxth	r3, r3
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	441a      	add	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003792:	b29b      	uxth	r3, r3
 8003794:	3301      	adds	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	441a      	add	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3301      	adds	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	441a      	add	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3301      	adds	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	441a      	add	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3301      	adds	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003808:	6839      	ldr	r1, [r7, #0]
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fdf4 	bl	80043f8 <CRYP_WaitOnCCFlag>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d018      	beq.n	8003848 <CRYP_AES_ProcessData+0xda>
  {
    /* Disable the CRYP peripheral clock */
    __HAL_CRYP_DISABLE(hcryp);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]

    /* Change state */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	f043 0210 	orr.w	r2, r3, #16
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	655a      	str	r2, [r3, #84]	; 0x54
    hcryp->State = HAL_CRYP_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /*Call registered error callback*/
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff fdb4 	bl	80033b0 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003856:	601a      	str	r2, [r3, #0]

  /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 8003858:	2300      	movs	r3, #0
 800385a:	61fb      	str	r3, [r7, #28]
 800385c:	e00b      	b.n	8003876 <CRYP_AES_ProcessData+0x108>
  {
    temp[i] = hcryp->Instance->DOUTR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	3320      	adds	r3, #32
 800386a:	443b      	add	r3, r7
 800386c:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < 4U; i++)
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	3301      	adds	r3, #1
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d9f0      	bls.n	800385e <CRYP_AES_ProcessData+0xf0>
  }
  i= 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8003880:	e01a      	b.n	80038b8 <CRYP_AES_ProcessData+0x14a>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800388c:	b29b      	uxth	r3, r3
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	441a      	add	r2, r3
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	3320      	adds	r3, #32
 8003898:	443b      	add	r3, r7
 800389a:	f853 3c14 	ldr.w	r3, [r3, #-20]
 800389e:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    i++;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038be:	b29b      	uxth	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80038c8:	3303      	adds	r3, #3
 80038ca:	089b      	lsrs	r3, r3, #2
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d202      	bcs.n	80038d6 <CRYP_AES_ProcessData+0x168>
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d9d5      	bls.n	8003882 <CRYP_AES_ProcessData+0x114>
  }
}
 80038d6:	bf00      	nop
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <CRYP_SetKey>:
  * @note   If pKey is NULL, the Key registers are not written. This configuration
  *         occurs when the key is written out of HAL scope.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
  if (hcryp->Init.pKey != NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d050      	beq.n	8003992 <CRYP_SetKey+0xb4>
  {
    switch (KeySize)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d034      	beq.n	8003960 <CRYP_SetKey+0x82>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038fc:	d14b      	bne.n	8003996 <CRYP_SetKey+0xb8>
    {
      case CRYP_KEYSIZE_256B:
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	63da      	str	r2, [r3, #60]	; 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6852      	ldr	r2, [r2, #4]
 8003914:	639a      	str	r2, [r3, #56]	; 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6892      	ldr	r2, [r2, #8]
 8003920:	635a      	str	r2, [r3, #52]	; 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68d2      	ldr	r2, [r2, #12]
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6912      	ldr	r2, [r2, #16]
 8003938:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6952      	ldr	r2, [r2, #20]
 8003944:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6992      	ldr	r2, [r2, #24]
 8003950:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69d2      	ldr	r2, [r2, #28]
 800395c:	611a      	str	r2, [r3, #16]
        break;
 800395e:	e01b      	b.n	8003998 <CRYP_SetKey+0xba>
      case CRYP_KEYSIZE_128B:
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6852      	ldr	r2, [r2, #4]
 8003976:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6892      	ldr	r2, [r2, #8]
 8003982:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68d2      	ldr	r2, [r2, #12]
 800398e:	611a      	str	r2, [r3, #16]

        break;
 8003990:	e002      	b.n	8003998 <CRYP_SetKey+0xba>
      default:
        break;
    }
  }
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <CRYP_SetKey+0xba>
        break;
 8003996:	bf00      	nop
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr

080039a2 <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b08e      	sub	sp, #56	; 0x38
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80039b2:	089b      	lsrs	r3, r3, #2
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 80039b8:	2301      	movs	r3, #1
 80039ba:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d118      	bne.n	80039f6 <CRYP_AESGCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d10a      	bne.n	80039e2 <CRYP_AESGCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 80039da:	441a      	add	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	65da      	str	r2, [r3, #92]	; 0x5c
 80039e0:	e00f      	b.n	8003a02 <CRYP_AESGCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80039ee:	461a      	mov	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80039f4:	e005      	b.n	8003a02 <CRYP_AESGCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80039fc:	461a      	mov	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d16d      	bne.n	8003ae4 <CRYP_AESGCM_Process+0x142>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	879a      	strh	r2, [r3, #60]	; 0x3c

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8003a1c:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	4619      	mov	r1, r3
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff ff5a 	bl	80038de <CRYP_SetKey>

    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6812      	ldr	r2, [r2, #0]
 8003a34:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6852      	ldr	r2, [r2, #4]
 8003a40:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6892      	ldr	r2, [r2, #8]
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68d2      	ldr	r2, [r2, #12]
 8003a58:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 0201 	orr.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003a6a:	6839      	ldr	r1, [r7, #0]
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fcc3 	bl	80043f8 <CRYP_WaitOnCCFlag>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00f      	beq.n	8003a98 <CRYP_AESGCM_Process+0xf6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7c:	f043 0210 	orr.w	r2, r3, #16
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e128      	b.n	8003cea <CRYP_AESGCM_Process+0x348>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aa6:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8003aa8:	6839      	ldr	r1, [r7, #0]
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 face 	bl	800404c <CRYP_GCMCCM_SetHeaderPhase>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <CRYP_AESGCM_Process+0x118>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e117      	b.n	8003cea <CRYP_AESGCM_Process+0x348>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2202      	movs	r2, #2
 8003abe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ad2:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ae2:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <CRYP_AESGCM_Process+0x15a>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 8003af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af6:	f023 0303 	bic.w	r3, r3, #3
 8003afa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003afc:	f7ff f9ae 	bl	8002e5c <HAL_GetTick>
 8003b00:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output Data */
  incount = hcryp->CrypInCount;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8003b14:	e033      	b.n	8003b7e <CRYP_AESGCM_Process+0x1dc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8003b16:	6839      	ldr	r1, [r7, #0]
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7ff fe28 	bl	800376e <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d022      	beq.n	8003b6c <CRYP_AESGCM_Process+0x1ca>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b26:	f7ff f999 	bl	8002e5c <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d302      	bcc.n	8003b3c <CRYP_AESGCM_Process+0x19a>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d117      	bne.n	8003b6c <CRYP_AESGCM_Process+0x1ca>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	f043 0210 	orr.w	r2, r3, #16
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0be      	b.n	8003cea <CRYP_AESGCM_Process+0x348>
      }
    }
    incount = hcryp->CrypInCount;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8003b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d203      	bcs.n	8003b8e <CRYP_AESGCM_Process+0x1ec>
 8003b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d3c3      	bcc.n	8003b16 <CRYP_AESGCM_Process+0x174>
  }

  if ((hcryp->Size % 16U) != 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80a4 	beq.w	8003ce8 <CRYP_AESGCM_Process+0x346>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003ba6:	091b      	lsrs	r3, r3, #4
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	3301      	adds	r3, #1
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]

    /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0318 	and.w	r3, r3, #24
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10a      	bne.n	8003bdc <CRYP_AESGCM_Process+0x23a>
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	051a      	lsls	r2, r3, #20
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]
    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d105      	bne.n	8003bf2 <CRYP_AESGCM_Process+0x250>
    {
      lastwordsize = (16U - npblb) / 4U;
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	f1c3 0310 	rsb	r3, r3, #16
 8003bec:	089b      	lsrs	r3, r3, #2
 8003bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf0:	e005      	b.n	8003bfe <CRYP_AESGCM_Process+0x25c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	f1c3 0310 	rsb	r3, r3, #16
 8003bf8:	089b      	lsrs	r3, r3, #2
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /*  last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	633b      	str	r3, [r7, #48]	; 0x30
 8003c02:	e014      	b.n	8003c2e <CRYP_AESGCM_Process+0x28c>
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	441a      	add	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3301      	adds	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (index = 0U; index < lastwordsize; index ++)
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d3e6      	bcc.n	8003c04 <CRYP_AESGCM_Process+0x262>
    }
    while (index < 4U)
 8003c36:	e006      	b.n	8003c46 <CRYP_AESGCM_Process+0x2a4>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR  = 0U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	609a      	str	r2, [r3, #8]
      index++;
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	3301      	adds	r3, #1
 8003c44:	633b      	str	r3, [r7, #48]	; 0x30
    while (index < 4U)
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d9f5      	bls.n	8003c38 <CRYP_AESGCM_Process+0x296>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003c4c:	6839      	ldr	r1, [r7, #0]
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fbd2 	bl	80043f8 <CRYP_WaitOnCCFlag>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <CRYP_AESGCM_Process+0x2ce>
    {
      hcryp->State = HAL_CRYP_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff fba0 	bl	80033b0 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c7e:	601a      	str	r2, [r3, #0]

    /*Read the output block from the output FIFO */
    for (index = 0U; index < 4U; index++)
 8003c80:	2300      	movs	r3, #0
 8003c82:	633b      	str	r3, [r7, #48]	; 0x30
 8003c84:	e00b      	b.n	8003c9e <CRYP_AESGCM_Process+0x2fc>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[index] = hcryp->Instance->DOUTR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	3338      	adds	r3, #56	; 0x38
 8003c92:	443b      	add	r3, r7
 8003c94:	f843 2c30 	str.w	r2, [r3, #-48]
    for (index = 0U; index < 4U; index++)
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d9f0      	bls.n	8003c86 <CRYP_AESGCM_Process+0x2e4>
    }
    for (index = 0U; index < lastwordsize; index++)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca8:	e01a      	b.n	8003ce0 <CRYP_AESGCM_Process+0x33e>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	441a      	add	r2, r3
 8003cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	3338      	adds	r3, #56	; 0x38
 8003cc0:	443b      	add	r3, r7
 8003cc2:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8003cc6:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (index = 0U; index < lastwordsize; index++)
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	3301      	adds	r3, #1
 8003cde:	633b      	str	r3, [r7, #48]	; 0x30
 8003ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d3e0      	bcc.n	8003caa <CRYP_AESGCM_Process+0x308>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3738      	adds	r7, #56	; 0x38
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b08e      	sub	sp, #56	; 0x38
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003d02:	089b      	lsrs	r3, r3, #2
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t npblb;
  uint32_t lastwordsize;
  uint32_t temp[4] ;  /* Temporary CrypOutBuff */
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8003d08:	2301      	movs	r3, #1
 8003d0a:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d118      	bne.n	8003d46 <CRYP_AESCCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d10a      	bne.n	8003d32 <CRYP_AESCCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8003d2a:	441a      	add	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d30:	e00f      	b.n	8003d52 <CRYP_AESCCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003d3e:	461a      	mov	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d44:	e005      	b.n	8003d52 <CRYP_AESCCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d16d      	bne.n	8003e34 <CRYP_AESCCM_Process+0x142>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	879a      	strh	r2, [r3, #60]	; 0x3c

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8003d6c:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	4619      	mov	r1, r3
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff fdb2 	bl	80038de <CRYP_SetKey>

    /* Set the initialization vector (IV) with B0 */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1a      	ldr	r2, [r3, #32]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1a      	ldr	r2, [r3, #32]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6852      	ldr	r2, [r2, #4]
 8003d90:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1a      	ldr	r2, [r3, #32]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6892      	ldr	r2, [r2, #8]
 8003d9c:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1a      	ldr	r2, [r3, #32]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68d2      	ldr	r2, [r2, #12]
 8003da8:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0201 	orr.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003dba:	6839      	ldr	r1, [r7, #0]
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fb1b 	bl	80043f8 <CRYP_WaitOnCCFlag>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00f      	beq.n	8003de8 <CRYP_AESCCM_Process+0xf6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dcc:	f043 0210 	orr.w	r2, r3, #16
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e12d      	b.n	8004044 <CRYP_AESCCM_Process+0x352>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003df6:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8003df8:	6839      	ldr	r1, [r7, #0]
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f926 	bl	800404c <CRYP_GCMCCM_SetHeaderPhase>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <CRYP_AESCCM_Process+0x118>
    {
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e11c      	b.n	8004044 <CRYP_AESCCM_Process+0x352>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e22:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003e32:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <CRYP_AESCCM_Process+0x15a>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 8003e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e46:	f023 0303 	bic.w	r3, r3, #3
 8003e4a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003e4c:	f7ff f806 	bl	8002e5c <HAL_GetTick>
 8003e50:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output data */
  incount = hcryp->CrypInCount;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8003e64:	e033      	b.n	8003ece <CRYP_AESCCM_Process+0x1dc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8003e66:	6839      	ldr	r1, [r7, #0]
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff fc80 	bl	800376e <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d022      	beq.n	8003ebc <CRYP_AESCCM_Process+0x1ca>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) ||(Timeout == 0U))
 8003e76:	f7fe fff1 	bl	8002e5c <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d302      	bcc.n	8003e8c <CRYP_AESCCM_Process+0x19a>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d117      	bne.n	8003ebc <CRYP_AESCCM_Process+0x1ca>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0201 	bic.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea0:	f043 0210 	orr.w	r2, r3, #16
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0c3      	b.n	8004044 <CRYP_AESCCM_Process+0x352>
      }
    }
    incount = hcryp->CrypInCount;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8003ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d203      	bcs.n	8003ede <CRYP_AESCCM_Process+0x1ec>
 8003ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d3c3      	bcc.n	8003e66 <CRYP_AESCCM_Process+0x174>
  }

  if ((hcryp->Size % 16U) != 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 80a9 	beq.w	8004042 <CRYP_AESCCM_Process+0x350>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3301      	adds	r3, #1
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8003f04:	1a9b      	subs	r3, r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]

    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0318 	and.w	r3, r3, #24
 8003f12:	2b10      	cmp	r3, #16
 8003f14:	d10a      	bne.n	8003f2c <CRYP_AESCCM_Process+0x23a>
    {
      /* Set Npblb in case of AES CCM payload decryption to get right tag  */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	051a      	lsls	r2, r3, #20
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	601a      	str	r2, [r3, #0]

    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d105      	bne.n	8003f42 <CRYP_AESCCM_Process+0x250>
    {
      lastwordsize = (16U - npblb) / 4U;
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	f1c3 0310 	rsb	r3, r3, #16
 8003f3c:	089b      	lsrs	r3, r3, #2
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f40:	e005      	b.n	8003f4e <CRYP_AESCCM_Process+0x25c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	f1c3 0310 	rsb	r3, r3, #16
 8003f48:	089b      	lsrs	r3, r3, #2
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Write the last input block in the IN FIFO */
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8003f4e:	2300      	movs	r3, #0
 8003f50:	633b      	str	r3, [r7, #48]	; 0x30
 8003f52:	e014      	b.n	8003f7e <CRYP_AESCCM_Process+0x28c>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	441a      	add	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3301      	adds	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d3e6      	bcc.n	8003f54 <CRYP_AESCCM_Process+0x262>
    }

    /* Pad the data with zeros to have a complete block */
    while (loopcounter < 4U)
 8003f86:	e006      	b.n	8003f96 <CRYP_AESCCM_Process+0x2a4>
    {
      hcryp->Instance->DINR  = 0U;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	609a      	str	r2, [r3, #8]
      loopcounter++;
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	3301      	adds	r3, #1
 8003f94:	633b      	str	r3, [r7, #48]	; 0x30
    while (loopcounter < 4U)
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d9f5      	bls.n	8003f88 <CRYP_AESCCM_Process+0x296>
    }
    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003f9c:	6839      	ldr	r1, [r7, #0]
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fa2a 	bl	80043f8 <CRYP_WaitOnCCFlag>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00f      	beq.n	8003fca <CRYP_AESCCM_Process+0x2d8>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	f043 0210 	orr.w	r2, r3, #16
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e03c      	b.n	8004044 <CRYP_AESCCM_Process+0x352>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003fd8:	601a      	str	r2, [r3, #0]

    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8003fde:	e00b      	b.n	8003ff8 <CRYP_AESCCM_Process+0x306>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[loopcounter] = hcryp->Instance->DOUTR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	3338      	adds	r3, #56	; 0x38
 8003fec:	443b      	add	r3, r7
 8003fee:	f843 2c30 	str.w	r2, [r3, #-48]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8003ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d9f0      	bls.n	8003fe0 <CRYP_AESCCM_Process+0x2ee>
    }
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 8003ffe:	2300      	movs	r3, #0
 8004000:	633b      	str	r3, [r7, #48]	; 0x30
 8004002:	e01a      	b.n	800403a <CRYP_AESCCM_Process+0x348>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800400e:	b29b      	uxth	r3, r3
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	441a      	add	r2, r3
 8004014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	3338      	adds	r3, #56	; 0x38
 800401a:	443b      	add	r3, r7
 800401c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8004020:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004028:	b29b      	uxth	r3, r3
 800402a:	3301      	adds	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	3301      	adds	r3, #1
 8004038:	633b      	str	r3, [r7, #48]	; 0x30
 800403a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800403c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403e:	429a      	cmp	r2, r3
 8004040:	d3e0      	bcc.n	8004004 <CRYP_AESCCM_Process+0x312>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3738      	adds	r7, #56	; 0x38
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800404c:	b5b0      	push	{r4, r5, r7, lr}
 800404e:	b092      	sub	sp, #72	; 0x48
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 8004056:	4b8c      	ldr	r3, [pc, #560]	; (8004288 <CRYP_GCMCCM_SetHeaderPhase+0x23c>)
 8004058:	f107 040c 	add.w	r4, r7, #12
 800405c:	461d      	mov	r5, r3
 800405e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004066:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800406a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                       0x0U, 0x0000FF00U, 0x0000FFFFU, 0xFF00FFFFU,  /* 16-bit data type */
                       0x0U, 0x000000FFU, 0x0000FFFFU, 0x00FFFFFFU}; /*  8-bit data type */

  /***************************** Header phase for GCM/GMAC or CCM *********************************/
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	2b00      	cmp	r3, #0
 8004074:	d104      	bne.n	8004080 <CRYP_GCMCCM_SetHeaderPhase+0x34>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	643b      	str	r3, [r7, #64]	; 0x40
 800407e:	e002      	b.n	8004086 <CRYP_GCMCCM_SetHeaderPhase+0x3a>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	643b      	str	r3, [r7, #64]	; 0x40
  }

  if ((size_in_bytes != 0U))
 8004086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 8192 	beq.w	80043b2 <CRYP_GCMCCM_SetHeaderPhase+0x366>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040a0:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0201 	orr.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 80040b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d17a      	bne.n	80041b2 <CRYP_GCMCCM_SetHeaderPhase+0x166>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 80040bc:	2300      	movs	r3, #0
 80040be:	647b      	str	r3, [r7, #68]	; 0x44
 80040c0:	e071      	b.n	80041a6 <CRYP_GCMCCM_SetHeaderPhase+0x15a>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	441a      	add	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6812      	ldr	r2, [r2, #0]
 80040d6:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80040dc:	b29b      	uxth	r3, r3
 80040de:	3301      	adds	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	441a      	add	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004100:	b29b      	uxth	r3, r3
 8004102:	3301      	adds	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004112:	b29b      	uxth	r3, r3
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	441a      	add	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004124:	b29b      	uxth	r3, r3
 8004126:	3301      	adds	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004136:	b29b      	uxth	r3, r3
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	441a      	add	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004148:	b29b      	uxth	r3, r3
 800414a:	3301      	adds	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8004152:	6839      	ldr	r1, [r7, #0]
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f94f 	bl	80043f8 <CRYP_WaitOnCCFlag>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d017      	beq.n	8004190 <CRYP_GCMCCM_SetHeaderPhase+0x144>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0201 	bic.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004174:	f043 0210 	orr.w	r2, r3, #16
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e12e      	b.n	80043ee <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800419e:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 80041a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a2:	3304      	adds	r3, #4
 80041a4:	647b      	str	r3, [r7, #68]	; 0x44
 80041a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041a8:	089b      	lsrs	r3, r3, #2
 80041aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d388      	bcc.n	80040c2 <CRYP_GCMCCM_SetHeaderPhase+0x76>
 80041b0:	e11c      	b.n	80043ec <CRYP_GCMCCM_SetHeaderPhase+0x3a0>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 80041b2:	2300      	movs	r3, #0
 80041b4:	647b      	str	r3, [r7, #68]	; 0x44
 80041b6:	e074      	b.n	80042a2 <CRYP_GCMCCM_SetHeaderPhase+0x256>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	699a      	ldr	r2, [r3, #24]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	441a      	add	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3301      	adds	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699a      	ldr	r2, [r3, #24]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	441a      	add	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3301      	adds	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699a      	ldr	r2, [r3, #24]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004208:	b29b      	uxth	r3, r3
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	441a      	add	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800421a:	b29b      	uxth	r3, r3
 800421c:	3301      	adds	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699a      	ldr	r2, [r3, #24]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800422c:	b29b      	uxth	r3, r3
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	441a      	add	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800423e:	b29b      	uxth	r3, r3
 8004240:	3301      	adds	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8004248:	6839      	ldr	r1, [r7, #0]
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f8d4 	bl	80043f8 <CRYP_WaitOnCCFlag>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d01a      	beq.n	800428c <CRYP_GCMCCM_SetHeaderPhase+0x240>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	f043 0210 	orr.w	r2, r3, #16
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e0b3      	b.n	80043ee <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
 8004286:	bf00      	nop
 8004288:	0800a28c 	.word	0x0800a28c
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800429a:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 800429c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800429e:	3304      	adds	r3, #4
 80042a0:	647b      	str	r3, [r7, #68]	; 0x44
 80042a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d384      	bcc.n	80041b8 <CRYP_GCMCCM_SetHeaderPhase+0x16c>
      }
      /* Write last complete words */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 80042ae:	2300      	movs	r3, #0
 80042b0:	647b      	str	r3, [r7, #68]	; 0x44
 80042b2:	e014      	b.n	80042de <CRYP_GCMCCM_SetHeaderPhase+0x292>
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699a      	ldr	r2, [r3, #24]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80042bc:	b29b      	uxth	r3, r3
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	441a      	add	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3301      	adds	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	879a      	strh	r2, [r3, #60]	; 0x3c
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 80042d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042da:	3301      	adds	r3, #1
 80042dc:	647b      	str	r3, [r7, #68]	; 0x44
 80042de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e0:	089b      	lsrs	r3, r3, #2
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d3e3      	bcc.n	80042b4 <CRYP_GCMCCM_SetHeaderPhase+0x268>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 80042ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <CRYP_GCMCCM_SetHeaderPhase+0x2c2>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 80042f6:	e006      	b.n	8004306 <CRYP_GCMCCM_SetHeaderPhase+0x2ba>
        {
          hcryp->Instance->DINR = 0x0U;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2200      	movs	r2, #0
 80042fe:	609a      	str	r2, [r3, #8]
          loopcounter++;
 8004300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004302:	3301      	adds	r3, #1
 8004304:	647b      	str	r3, [r7, #68]	; 0x44
        while (loopcounter < 4U)
 8004306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004308:	2b03      	cmp	r3, #3
 800430a:	d9f5      	bls.n	80042f8 <CRYP_GCMCCM_SetHeaderPhase+0x2ac>
 800430c:	e029      	b.n	8004362 <CRYP_GCMCCM_SetHeaderPhase+0x316>
        }
      }
      else
      {
         /* Enter last bytes, padded with zeros */
         tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004316:	b29b      	uxth	r3, r3
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	63fb      	str	r3, [r7, #60]	; 0x3c
         tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	005a      	lsls	r2, r3, #1
 8004326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	3348      	adds	r3, #72	; 0x48
 8004332:	443b      	add	r3, r7
 8004334:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004338:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800433a:	4013      	ands	r3, r2
 800433c:	63fb      	str	r3, [r7, #60]	; 0x3c
         hcryp->Instance->DINR = tmp;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004344:	609a      	str	r2, [r3, #8]
         loopcounter++;
 8004346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004348:	3301      	adds	r3, #1
 800434a:	647b      	str	r3, [r7, #68]	; 0x44
         /* Pad the data with zeros to have a complete block */
         while (loopcounter < 4U)
 800434c:	e006      	b.n	800435c <CRYP_GCMCCM_SetHeaderPhase+0x310>
         {
           hcryp->Instance->DINR = 0x0U;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2200      	movs	r2, #0
 8004354:	609a      	str	r2, [r3, #8]
           loopcounter++;
 8004356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004358:	3301      	adds	r3, #1
 800435a:	647b      	str	r3, [r7, #68]	; 0x44
         while (loopcounter < 4U)
 800435c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800435e:	2b03      	cmp	r3, #3
 8004360:	d9f5      	bls.n	800434e <CRYP_GCMCCM_SetHeaderPhase+0x302>
         }
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8004362:	6839      	ldr	r1, [r7, #0]
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f847 	bl	80043f8 <CRYP_WaitOnCCFlag>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d017      	beq.n	80043a0 <CRYP_GCMCCM_SetHeaderPhase+0x354>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0201 	bic.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004384:	f043 0210 	orr.w	r2, r3, #16
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e026      	b.n	80043ee <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	e01c      	b.n	80043ec <CRYP_GCMCCM_SetHeaderPhase+0x3a0>
    }
  }
  else
  {
    /*Workaround 1: only AES, before re-enabling the peripheral, datatype can be configured.*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f023 0106 	bic.w	r1, r3, #6
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	601a      	str	r2, [r3, #0]

    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043da:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
  }
  /* Return function status */
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3748      	adds	r7, #72	; 0x48
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bdb0      	pop	{r4, r5, r7, pc}
 80043f6:	bf00      	nop

080043f8 <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004402:	f7fe fd2b 	bl	8002e5c <HAL_GetTick>
 8004406:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8004408:	e010      	b.n	800442c <CRYP_WaitOnCCFlag+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004410:	d00c      	beq.n	800442c <CRYP_WaitOnCCFlag+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004412:	f7fe fd23 	bl	8002e5c <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d302      	bcc.n	8004428 <CRYP_WaitOnCCFlag+0x30>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <CRYP_WaitOnCCFlag+0x34>
      {
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e007      	b.n	800443c <CRYP_WaitOnCCFlag+0x44>
  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0e7      	beq.n	800440a <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e08e      	b.n	8004574 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	4b47      	ldr	r3, [pc, #284]	; (800457c <HAL_DMA_Init+0x138>)
 800445e:	429a      	cmp	r2, r3
 8004460:	d80f      	bhi.n	8004482 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	4b45      	ldr	r3, [pc, #276]	; (8004580 <HAL_DMA_Init+0x13c>)
 800446a:	4413      	add	r3, r2
 800446c:	4a45      	ldr	r2, [pc, #276]	; (8004584 <HAL_DMA_Init+0x140>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	091b      	lsrs	r3, r3, #4
 8004474:	009a      	lsls	r2, r3, #2
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a42      	ldr	r2, [pc, #264]	; (8004588 <HAL_DMA_Init+0x144>)
 800447e:	641a      	str	r2, [r3, #64]	; 0x40
 8004480:	e00e      	b.n	80044a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	4b40      	ldr	r3, [pc, #256]	; (800458c <HAL_DMA_Init+0x148>)
 800448a:	4413      	add	r3, r2
 800448c:	4a3d      	ldr	r2, [pc, #244]	; (8004584 <HAL_DMA_Init+0x140>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	091b      	lsrs	r3, r3, #4
 8004494:	009a      	lsls	r2, r3, #2
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a3c      	ldr	r2, [pc, #240]	; (8004590 <HAL_DMA_Init+0x14c>)
 800449e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80044b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ba:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6819      	ldr	r1, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 fabc 	bl	8004a70 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004500:	d102      	bne.n	8004508 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004510:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004514:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800451e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d010      	beq.n	800454a <HAL_DMA_Init+0x106>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b04      	cmp	r3, #4
 800452e:	d80c      	bhi.n	800454a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fae5 	bl	8004b00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004546:	605a      	str	r2, [r3, #4]
 8004548:	e008      	b.n	800455c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40020407 	.word	0x40020407
 8004580:	bffdfff8 	.word	0xbffdfff8
 8004584:	cccccccd 	.word	0xcccccccd
 8004588:	40020000 	.word	0x40020000
 800458c:	bffdfbf8 	.word	0xbffdfbf8
 8004590:	40020400 	.word	0x40020400

08004594 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_DMA_Start_IT+0x20>
 80045b0:	2302      	movs	r3, #2
 80045b2:	e069      	b.n	8004688 <HAL_DMA_Start_IT+0xf4>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d155      	bne.n	8004674 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0201 	bic.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	68b9      	ldr	r1, [r7, #8]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 fa02 	bl	80049f6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d008      	beq.n	800460c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 020e 	orr.w	r2, r2, #14
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	e00f      	b.n	800462c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0204 	bic.w	r2, r2, #4
 800461a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 020a 	orr.w	r2, r2, #10
 800462a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004648:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004660:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0201 	orr.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e008      	b.n	8004686 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2280      	movs	r2, #128	; 0x80
 8004678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004686:	7dfb      	ldrb	r3, [r7, #23]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e04f      	b.n	8004742 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d008      	beq.n	80046c0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2204      	movs	r2, #4
 80046b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e040      	b.n	8004742 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 020e 	bic.w	r2, r2, #14
 80046ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f4:	f003 021c 	and.w	r2, r3, #28
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	2101      	movs	r1, #1
 80046fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004702:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800470c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00c      	beq.n	8004730 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004724:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800472e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr

0800474c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004754:	2300      	movs	r3, #0
 8004756:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d005      	beq.n	8004770 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2204      	movs	r2, #4
 8004768:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
 800476e:	e047      	b.n	8004800 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 020e 	bic.w	r2, r2, #14
 800477e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800479a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800479e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a4:	f003 021c 	and.w	r2, r3, #28
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	2101      	movs	r1, #1
 80047ae:	fa01 f202 	lsl.w	r2, r1, r2
 80047b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00c      	beq.n	80047e0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d003      	beq.n	8004800 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	4798      	blx	r3
    }
  }
  return status;
 8004800:	7bfb      	ldrb	r3, [r7, #15]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004828:	f003 031c 	and.w	r3, r3, #28
 800482c:	2204      	movs	r2, #4
 800482e:	409a      	lsls	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4013      	ands	r3, r2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d027      	beq.n	8004888 <HAL_DMA_IRQHandler+0x7c>
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d022      	beq.n	8004888 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0320 	and.w	r3, r3, #32
 800484c:	2b00      	cmp	r3, #0
 800484e:	d107      	bne.n	8004860 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 0204 	bic.w	r2, r2, #4
 800485e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004864:	f003 021c 	and.w	r2, r3, #28
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	2104      	movs	r1, #4
 800486e:	fa01 f202 	lsl.w	r2, r1, r2
 8004872:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 8081 	beq.w	8004980 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004886:	e07b      	b.n	8004980 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488c:	f003 031c 	and.w	r3, r3, #28
 8004890:	2202      	movs	r2, #2
 8004892:	409a      	lsls	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d03d      	beq.n	8004918 <HAL_DMA_IRQHandler+0x10c>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d038      	beq.n	8004918 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10b      	bne.n	80048cc <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 020a 	bic.w	r2, r2, #10
 80048c2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	4b2e      	ldr	r3, [pc, #184]	; (800498c <HAL_DMA_IRQHandler+0x180>)
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d909      	bls.n	80048ec <HAL_DMA_IRQHandler+0xe0>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048dc:	f003 031c 	and.w	r3, r3, #28
 80048e0:	4a2b      	ldr	r2, [pc, #172]	; (8004990 <HAL_DMA_IRQHandler+0x184>)
 80048e2:	2102      	movs	r1, #2
 80048e4:	fa01 f303 	lsl.w	r3, r1, r3
 80048e8:	6053      	str	r3, [r2, #4]
 80048ea:	e008      	b.n	80048fe <HAL_DMA_IRQHandler+0xf2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f0:	f003 031c 	and.w	r3, r3, #28
 80048f4:	4a27      	ldr	r2, [pc, #156]	; (8004994 <HAL_DMA_IRQHandler+0x188>)
 80048f6:	2102      	movs	r1, #2
 80048f8:	fa01 f303 	lsl.w	r3, r1, r3
 80048fc:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d038      	beq.n	8004980 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004916:	e033      	b.n	8004980 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491c:	f003 031c 	and.w	r3, r3, #28
 8004920:	2208      	movs	r2, #8
 8004922:	409a      	lsls	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4013      	ands	r3, r2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d02a      	beq.n	8004982 <HAL_DMA_IRQHandler+0x176>
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	2b00      	cmp	r3, #0
 8004934:	d025      	beq.n	8004982 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 020e 	bic.w	r2, r2, #14
 8004944:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	f003 021c 	and.w	r2, r3, #28
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	2101      	movs	r1, #1
 8004954:	fa01 f202 	lsl.w	r2, r1, r2
 8004958:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004974:	2b00      	cmp	r3, #0
 8004976:	d004      	beq.n	8004982 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004980:	bf00      	nop
 8004982:	bf00      	nop
}
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40020080 	.word	0x40020080
 8004990:	40020400 	.word	0x40020400
 8004994:	40020000 	.word	0x40020000

08004998 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d103      	bne.n	80049b4 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	72fb      	strb	r3, [r7, #11]
    return status;
 80049b0:	7afb      	ldrb	r3, [r7, #11]
 80049b2:	e01b      	b.n	80049ec <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00d      	beq.n	80049e2 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d004      	beq.n	80049da <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	e003      	b.n	80049e2 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80049e0:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	601a      	str	r2, [r3, #0]

  return status;
 80049ea:	7afb      	ldrb	r3, [r7, #11]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	4770      	bx	lr

080049f6 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b085      	sub	sp, #20
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a0c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d004      	beq.n	8004a20 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a1e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a24:	f003 021c 	and.w	r2, r3, #28
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a32:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2b10      	cmp	r3, #16
 8004a42:	d108      	bne.n	8004a56 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a54:	e007      	b.n	8004a66 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	60da      	str	r2, [r3, #12]
}
 8004a66:	bf00      	nop
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr

08004a70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4b1c      	ldr	r3, [pc, #112]	; (8004af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d813      	bhi.n	8004aac <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a88:	089b      	lsrs	r3, r3, #2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a90:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	3b08      	subs	r3, #8
 8004aa0:	4a14      	ldr	r2, [pc, #80]	; (8004af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	091b      	lsrs	r3, r3, #4
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	e011      	b.n	8004ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab0:	089b      	lsrs	r3, r3, #2
 8004ab2:	009a      	lsls	r2, r3, #2
 8004ab4:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004ab6:	4413      	add	r3, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	3b08      	subs	r3, #8
 8004ac4:	4a0b      	ldr	r2, [pc, #44]	; (8004af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	091b      	lsrs	r3, r3, #4
 8004acc:	3307      	adds	r3, #7
 8004ace:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a0a      	ldr	r2, [pc, #40]	; (8004afc <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004ad4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f003 031f 	and.w	r3, r3, #31
 8004adc:	2201      	movs	r2, #1
 8004ade:	409a      	lsls	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ae4:	bf00      	nop
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40020407 	.word	0x40020407
 8004af4:	cccccccd 	.word	0xcccccccd
 8004af8:	4002081c 	.word	0x4002081c
 8004afc:	40020880 	.word	0x40020880

08004b00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b10:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004b16:	4413      	add	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a08      	ldr	r2, [pc, #32]	; (8004b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b24:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	2201      	movs	r2, #1
 8004b30:	409a      	lsls	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr
 8004b40:	1000823f 	.word	0x1000823f
 8004b44:	40020940 	.word	0x40020940

08004b48 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b56:	e140      	b.n	8004dda <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	fa01 f303 	lsl.w	r3, r1, r3
 8004b64:	4013      	ands	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 8132 	beq.w	8004dd4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d005      	beq.n	8004b88 <HAL_GPIO_Init+0x40>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 0303 	and.w	r3, r3, #3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d130      	bne.n	8004bea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	2203      	movs	r2, #3
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	68da      	ldr	r2, [r3, #12]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	091b      	lsrs	r3, r3, #4
 8004bd4:	f003 0201 	and.w	r2, r3, #1
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d017      	beq.n	8004c26 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	2203      	movs	r2, #3
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	43db      	mvns	r3, r3
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d123      	bne.n	8004c7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	08da      	lsrs	r2, r3, #3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3208      	adds	r2, #8
 8004c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	220f      	movs	r2, #15
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4013      	ands	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	691a      	ldr	r2, [r3, #16]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	08da      	lsrs	r2, r3, #3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3208      	adds	r2, #8
 8004c74:	6939      	ldr	r1, [r7, #16]
 8004c76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	2203      	movs	r2, #3
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43db      	mvns	r3, r3
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f003 0203 	and.w	r2, r3, #3
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 808c 	beq.w	8004dd4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004cbc:	4a4e      	ldr	r2, [pc, #312]	; (8004df8 <HAL_GPIO_Init+0x2b0>)
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	089b      	lsrs	r3, r3, #2
 8004cc2:	3302      	adds	r3, #2
 8004cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	2207      	movs	r2, #7
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ce6:	d00d      	beq.n	8004d04 <HAL_GPIO_Init+0x1bc>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a44      	ldr	r2, [pc, #272]	; (8004dfc <HAL_GPIO_Init+0x2b4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d007      	beq.n	8004d00 <HAL_GPIO_Init+0x1b8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a43      	ldr	r2, [pc, #268]	; (8004e00 <HAL_GPIO_Init+0x2b8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d101      	bne.n	8004cfc <HAL_GPIO_Init+0x1b4>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e004      	b.n	8004d06 <HAL_GPIO_Init+0x1be>
 8004cfc:	2307      	movs	r3, #7
 8004cfe:	e002      	b.n	8004d06 <HAL_GPIO_Init+0x1be>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e000      	b.n	8004d06 <HAL_GPIO_Init+0x1be>
 8004d04:	2300      	movs	r3, #0
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	f002 0203 	and.w	r2, r2, #3
 8004d0c:	0092      	lsls	r2, r2, #2
 8004d0e:	4093      	lsls	r3, r2
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d16:	4938      	ldr	r1, [pc, #224]	; (8004df8 <HAL_GPIO_Init+0x2b0>)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	089b      	lsrs	r3, r3, #2
 8004d1c:	3302      	adds	r3, #2
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d24:	4b37      	ldr	r3, [pc, #220]	; (8004e04 <HAL_GPIO_Init+0x2bc>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4013      	ands	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d48:	4a2e      	ldr	r2, [pc, #184]	; (8004e04 <HAL_GPIO_Init+0x2bc>)
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004d4e:	4b2d      	ldr	r3, [pc, #180]	; (8004e04 <HAL_GPIO_Init+0x2bc>)
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	43db      	mvns	r3, r3
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d72:	4a24      	ldr	r2, [pc, #144]	; (8004e04 <HAL_GPIO_Init+0x2bc>)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004d78:	4b22      	ldr	r3, [pc, #136]	; (8004e04 <HAL_GPIO_Init+0x2bc>)
 8004d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d7e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	43db      	mvns	r3, r3
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4013      	ands	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004d9e:	4a19      	ldr	r2, [pc, #100]	; (8004e04 <HAL_GPIO_Init+0x2bc>)
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004da6:	4b17      	ldr	r3, [pc, #92]	; (8004e04 <HAL_GPIO_Init+0x2bc>)
 8004da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dac:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	43db      	mvns	r3, r3
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4013      	ands	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004dcc:	4a0d      	ldr	r2, [pc, #52]	; (8004e04 <HAL_GPIO_Init+0x2bc>)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	fa22 f303 	lsr.w	r3, r2, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f47f aeb7 	bne.w	8004b58 <HAL_GPIO_Init+0x10>
  }
}
 8004dea:	bf00      	nop
 8004dec:	bf00      	nop
 8004dee:	371c      	adds	r7, #28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40010000 	.word	0x40010000
 8004dfc:	48000400 	.word	0x48000400
 8004e00:	48000800 	.word	0x48000800
 8004e04:	58000800 	.word	0x58000800

08004e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	807b      	strh	r3, [r7, #2]
 8004e14:	4613      	mov	r3, r2
 8004e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e18:	787b      	ldrb	r3, [r7, #1]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e1e:	887a      	ldrh	r2, [r7, #2]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e24:	e002      	b.n	8004e2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e26:	887a      	ldrh	r2, [r7, #2]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bc80      	pop	{r7}
 8004e34:	4770      	bx	lr
	...

08004e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e42:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	88fb      	ldrh	r3, [r7, #6]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d006      	beq.n	8004e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e4e:	4a05      	ldr	r2, [pc, #20]	; (8004e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e54:	88fb      	ldrh	r3, [r7, #6]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fb fef4 	bl	8000c44 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e5c:	bf00      	nop
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	58000800 	.word	0x58000800

08004e68 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e6c:	4b04      	ldr	r3, [pc, #16]	; (8004e80 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a03      	ldr	r2, [pc, #12]	; (8004e80 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e76:	6013      	str	r3, [r2, #0]
}
 8004e78:	bf00      	nop
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bc80      	pop	{r7}
 8004e7e:	4770      	bx	lr
 8004e80:	58000400 	.word	0x58000400

08004e84 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004e88:	4b03      	ldr	r3, [pc, #12]	; (8004e98 <HAL_PWREx_GetVoltageRange+0x14>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bc80      	pop	{r7}
 8004e96:	4770      	bx	lr
 8004e98:	58000400 	.word	0x58000400

08004e9c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004ea0:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eac:	d101      	bne.n	8004eb2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e000      	b.n	8004eb4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	58000400 	.word	0x58000400

08004ec0 <LL_RCC_HSE_EnableTcxo>:
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ece:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ed2:	6013      	str	r3, [r2, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr

08004edc <LL_RCC_HSE_DisableTcxo>:
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004eee:	6013      	str	r3, [r2, #0]
}
 8004ef0:	bf00      	nop
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bc80      	pop	{r7}
 8004ef6:	4770      	bx	lr

08004ef8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f0a:	d101      	bne.n	8004f10 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e000      	b.n	8004f12 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bc80      	pop	{r7}
 8004f18:	4770      	bx	lr

08004f1a <LL_RCC_HSE_Enable>:
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2c:	6013      	str	r3, [r2, #0]
}
 8004f2e:	bf00      	nop
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr

08004f36 <LL_RCC_HSE_Disable>:
{
 8004f36:	b480      	push	{r7}
 8004f38:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f48:	6013      	str	r3, [r2, #0]
}
 8004f4a:	bf00      	nop
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr

08004f52 <LL_RCC_HSE_IsReady>:
{
 8004f52:	b480      	push	{r7}
 8004f54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f64:	d101      	bne.n	8004f6a <LL_RCC_HSE_IsReady+0x18>
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <LL_RCC_HSE_IsReady+0x1a>
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr

08004f74 <LL_RCC_HSI_Enable>:
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f86:	6013      	str	r3, [r2, #0]
}
 8004f88:	bf00      	nop
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr

08004f90 <LL_RCC_HSI_Disable>:
{
 8004f90:	b480      	push	{r7}
 8004f92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fa2:	6013      	str	r3, [r2, #0]
}
 8004fa4:	bf00      	nop
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr

08004fac <LL_RCC_HSI_IsReady>:
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fbe:	d101      	bne.n	8004fc4 <LL_RCC_HSI_IsReady+0x18>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e000      	b.n	8004fc6 <LL_RCC_HSI_IsReady+0x1a>
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr

08004fce <LL_RCC_HSI_SetCalibTrimming>:
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	061b      	lsls	r3, r3, #24
 8004fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	604b      	str	r3, [r1, #4]
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bc80      	pop	{r7}
 8004ff4:	4770      	bx	lr

08004ff6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b02      	cmp	r3, #2
 8005008:	d101      	bne.n	800500e <LL_RCC_LSE_IsReady+0x18>
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <LL_RCC_LSE_IsReady+0x1a>
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr

08005018 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800501c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005028:	f043 0301 	orr.w	r3, r3, #1
 800502c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005030:	bf00      	nop
 8005032:	46bd      	mov	sp, r7
 8005034:	bc80      	pop	{r7}
 8005036:	4770      	bx	lr

08005038 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800503c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005048:	f023 0301 	bic.w	r3, r3, #1
 800504c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005050:	bf00      	nop
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr

08005058 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800505c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b02      	cmp	r3, #2
 800506a:	d101      	bne.n	8005070 <LL_RCC_LSI_IsReady+0x18>
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <LL_RCC_LSI_IsReady+0x1a>
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	46bd      	mov	sp, r7
 8005076:	bc80      	pop	{r7}
 8005078:	4770      	bx	lr

0800507a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800507a:	b480      	push	{r7}
 800507c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800507e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005088:	f043 0301 	orr.w	r3, r3, #1
 800508c:	6013      	str	r3, [r2, #0]
}
 800508e:	bf00      	nop
 8005090:	46bd      	mov	sp, r7
 8005092:	bc80      	pop	{r7}
 8005094:	4770      	bx	lr

08005096 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8005096:	b480      	push	{r7}
 8005098:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800509a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	6013      	str	r3, [r2, #0]
}
 80050aa:	bf00      	nop
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bc80      	pop	{r7}
 80050b0:	4770      	bx	lr

080050b2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80050b2:	b480      	push	{r7}
 80050b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80050b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d101      	bne.n	80050c8 <LL_RCC_MSI_IsReady+0x16>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <LL_RCC_MSI_IsReady+0x18>
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr

080050d2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80050d2:	b480      	push	{r7}
 80050d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80050d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d101      	bne.n	80050e8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bc80      	pop	{r7}
 80050f0:	4770      	bx	lr

080050f2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80050f2:	b480      	push	{r7}
 80050f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80050f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005100:	4618      	mov	r0, r3
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr

08005108 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800510c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005114:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005118:	4618      	mov	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	bc80      	pop	{r7}
 800511e:	4770      	bx	lr

08005120 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	021b      	lsls	r3, r3, #8
 8005136:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800513a:	4313      	orrs	r3, r2
 800513c:	604b      	str	r3, [r1, #4]
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	bc80      	pop	{r7}
 8005146:	4770      	bx	lr

08005148 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f023 0203 	bic.w	r2, r3, #3
 800515a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4313      	orrs	r3, r2
 8005162:	608b      	str	r3, [r1, #8]
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	bc80      	pop	{r7}
 800516c:	4770      	bx	lr

0800516e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800516e:	b480      	push	{r7}
 8005170:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 030c 	and.w	r3, r3, #12
}
 800517c:	4618      	mov	r0, r3
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr

08005184 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800518c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4313      	orrs	r3, r2
 800519e:	608b      	str	r3, [r1, #8]
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr

080051aa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80051b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr

080051d4 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051e4:	f023 020f 	bic.w	r2, r3, #15
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	091b      	lsrs	r3, r3, #4
 80051ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr

08005200 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005212:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4313      	orrs	r3, r2
 800521a:	608b      	str	r3, [r1, #8]
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr

08005226 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800522e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005238:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4313      	orrs	r3, r2
 8005240:	608b      	str	r3, [r1, #8]
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr

0800524c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800525a:	4618      	mov	r0, r3
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr

08005262 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8005262:	b480      	push	{r7}
 8005264:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005274:	4618      	mov	r0, r3
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800528a:	4618      	mov	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	bc80      	pop	{r7}
 8005290:	4770      	bx	lr

08005292 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005292:	b480      	push	{r7}
 8005294:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr

080052a8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80052ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ba:	6013      	str	r3, [r2, #0]
}
 80052bc:	bf00      	nop
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80052c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052d6:	6013      	str	r3, [r2, #0]
}
 80052d8:	bf00      	nop
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr

080052e0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80052e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052f2:	d101      	bne.n	80052f8 <LL_RCC_PLL_IsReady+0x18>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <LL_RCC_PLL_IsReady+0x1a>
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bc80      	pop	{r7}
 8005300:	4770      	bx	lr

08005302 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005302:	b480      	push	{r7}
 8005304:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	0a1b      	lsrs	r3, r3, #8
 800530e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005312:	4618      	mov	r0, r3
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr

0800531a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800531a:	b480      	push	{r7}
 800531c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800531e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005328:	4618      	mov	r0, r3
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr

08005330 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800533e:	4618      	mov	r0, r3
 8005340:	46bd      	mov	sp, r7
 8005342:	bc80      	pop	{r7}
 8005344:	4770      	bx	lr

08005346 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005346:	b480      	push	{r7}
 8005348:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800534a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0303 	and.w	r3, r3, #3
}
 8005354:	4618      	mov	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr

0800535c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800536a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800536e:	d101      	bne.n	8005374 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr

0800537e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800537e:	b480      	push	{r7}
 8005380:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005386:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800538a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005392:	d101      	bne.n	8005398 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005394:	2301      	movs	r3, #1
 8005396:	e000      	b.n	800539a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr

080053a2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80053a2:	b480      	push	{r7}
 80053a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80053a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80053ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b6:	d101      	bne.n	80053bc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr

080053c6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80053c6:	b480      	push	{r7}
 80053c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80053ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053d8:	d101      	bne.n	80053de <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80053da:	2301      	movs	r3, #1
 80053dc:	e000      	b.n	80053e0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr

080053e8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80053ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053fa:	d101      	bne.n	8005400 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80053fc:	2301      	movs	r3, #1
 80053fe:	e000      	b.n	8005402 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr
	...

0800540c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e36f      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800541e:	f7ff fea6 	bl	800516e <LL_RCC_GetSysClkSource>
 8005422:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005424:	f7ff ff8f 	bl	8005346 <LL_RCC_PLL_GetMainSource>
 8005428:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80c4 	beq.w	80055c0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d005      	beq.n	800544a <HAL_RCC_OscConfig+0x3e>
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	2b0c      	cmp	r3, #12
 8005442:	d176      	bne.n	8005532 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d173      	bne.n	8005532 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e353      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800545a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_RCC_OscConfig+0x68>
 8005468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005472:	e006      	b.n	8005482 <HAL_RCC_OscConfig+0x76>
 8005474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800547c:	091b      	lsrs	r3, r3, #4
 800547e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005482:	4293      	cmp	r3, r2
 8005484:	d222      	bcs.n	80054cc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fda2 	bl	8005fd4 <RCC_SetFlashLatencyFromMSIRange>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e331      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800549a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054a4:	f043 0308 	orr.w	r3, r3, #8
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054bc:	4313      	orrs	r3, r2
 80054be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff fe2b 	bl	8005120 <LL_RCC_MSI_SetCalibTrimming>
 80054ca:	e021      	b.n	8005510 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054d6:	f043 0308 	orr.w	r3, r3, #8
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054ee:	4313      	orrs	r3, r2
 80054f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff fe12 	bl	8005120 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fd67 	bl	8005fd4 <RCC_SetFlashLatencyFromMSIRange>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e2f6      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005510:	f000 fce0 	bl	8005ed4 <HAL_RCC_GetHCLKFreq>
 8005514:	4603      	mov	r3, r0
 8005516:	4aa7      	ldr	r2, [pc, #668]	; (80057b4 <HAL_RCC_OscConfig+0x3a8>)
 8005518:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800551a:	4ba7      	ldr	r3, [pc, #668]	; (80057b8 <HAL_RCC_OscConfig+0x3ac>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f7fb fd0e 	bl	8000f40 <HAL_InitTick>
 8005524:	4603      	mov	r3, r0
 8005526:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005528:	7cfb      	ldrb	r3, [r7, #19]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d047      	beq.n	80055be <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800552e:	7cfb      	ldrb	r3, [r7, #19]
 8005530:	e2e5      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d02c      	beq.n	8005594 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800553a:	f7ff fd9e 	bl	800507a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800553e:	f7fd fc8d 	bl	8002e5c <HAL_GetTick>
 8005542:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005546:	f7fd fc89 	bl	8002e5c <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e2d2      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005558:	f7ff fdab 	bl	80050b2 <LL_RCC_MSI_IsReady>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f1      	beq.n	8005546 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800556c:	f043 0308 	orr.w	r3, r3, #8
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005580:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005584:	4313      	orrs	r3, r2
 8005586:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff fdc7 	bl	8005120 <LL_RCC_MSI_SetCalibTrimming>
 8005592:	e015      	b.n	80055c0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005594:	f7ff fd7f 	bl	8005096 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005598:	f7fd fc60 	bl	8002e5c <HAL_GetTick>
 800559c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055a0:	f7fd fc5c 	bl	8002e5c <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e2a5      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80055b2:	f7ff fd7e 	bl	80050b2 <LL_RCC_MSI_IsReady>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f1      	bne.n	80055a0 <HAL_RCC_OscConfig+0x194>
 80055bc:	e000      	b.n	80055c0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80055be:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d058      	beq.n	800567e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	2b08      	cmp	r3, #8
 80055d0:	d005      	beq.n	80055de <HAL_RCC_OscConfig+0x1d2>
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	2b0c      	cmp	r3, #12
 80055d6:	d108      	bne.n	80055ea <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d105      	bne.n	80055ea <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d14b      	bne.n	800567e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e289      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80055ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055fc:	4313      	orrs	r3, r2
 80055fe:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005608:	d102      	bne.n	8005610 <HAL_RCC_OscConfig+0x204>
 800560a:	f7ff fc86 	bl	8004f1a <LL_RCC_HSE_Enable>
 800560e:	e00d      	b.n	800562c <HAL_RCC_OscConfig+0x220>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005618:	d104      	bne.n	8005624 <HAL_RCC_OscConfig+0x218>
 800561a:	f7ff fc51 	bl	8004ec0 <LL_RCC_HSE_EnableTcxo>
 800561e:	f7ff fc7c 	bl	8004f1a <LL_RCC_HSE_Enable>
 8005622:	e003      	b.n	800562c <HAL_RCC_OscConfig+0x220>
 8005624:	f7ff fc87 	bl	8004f36 <LL_RCC_HSE_Disable>
 8005628:	f7ff fc58 	bl	8004edc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d012      	beq.n	800565a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005634:	f7fd fc12 	bl	8002e5c <HAL_GetTick>
 8005638:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800563c:	f7fd fc0e 	bl	8002e5c <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b64      	cmp	r3, #100	; 0x64
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e257      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800564e:	f7ff fc80 	bl	8004f52 <LL_RCC_HSE_IsReady>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0f1      	beq.n	800563c <HAL_RCC_OscConfig+0x230>
 8005658:	e011      	b.n	800567e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800565a:	f7fd fbff 	bl	8002e5c <HAL_GetTick>
 800565e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005660:	e008      	b.n	8005674 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005662:	f7fd fbfb 	bl	8002e5c <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b64      	cmp	r3, #100	; 0x64
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e244      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005674:	f7ff fc6d 	bl	8004f52 <LL_RCC_HSE_IsReady>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1f1      	bne.n	8005662 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d046      	beq.n	8005718 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	2b04      	cmp	r3, #4
 800568e:	d005      	beq.n	800569c <HAL_RCC_OscConfig+0x290>
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	2b0c      	cmp	r3, #12
 8005694:	d10e      	bne.n	80056b4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d10b      	bne.n	80056b4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e22a      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff fc8e 	bl	8004fce <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80056b2:	e031      	b.n	8005718 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d019      	beq.n	80056f0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056bc:	f7ff fc5a 	bl	8004f74 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c0:	f7fd fbcc 	bl	8002e5c <HAL_GetTick>
 80056c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c8:	f7fd fbc8 	bl	8002e5c <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e211      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80056da:	f7ff fc67 	bl	8004fac <LL_RCC_HSI_IsReady>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f1      	beq.n	80056c8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7ff fc70 	bl	8004fce <LL_RCC_HSI_SetCalibTrimming>
 80056ee:	e013      	b.n	8005718 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056f0:	f7ff fc4e 	bl	8004f90 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f4:	f7fd fbb2 	bl	8002e5c <HAL_GetTick>
 80056f8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056fc:	f7fd fbae 	bl	8002e5c <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e1f7      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800570e:	f7ff fc4d 	bl	8004fac <LL_RCC_HSI_IsReady>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1f1      	bne.n	80056fc <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b00      	cmp	r3, #0
 8005722:	d06e      	beq.n	8005802 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d056      	beq.n	80057da <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800572c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005734:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69da      	ldr	r2, [r3, #28]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f003 0310 	and.w	r3, r3, #16
 8005740:	429a      	cmp	r2, r3
 8005742:	d031      	beq.n	80057a8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d006      	beq.n	800575c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e1d0      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d013      	beq.n	800578e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8005766:	f7ff fc67 	bl	8005038 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800576a:	f7fd fb77 	bl	8002e5c <HAL_GetTick>
 800576e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005772:	f7fd fb73 	bl	8002e5c <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b11      	cmp	r3, #17
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e1bc      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005784:	f7ff fc68 	bl	8005058 <LL_RCC_LSI_IsReady>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f1      	bne.n	8005772 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800578e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005796:	f023 0210 	bic.w	r2, r3, #16
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057a8:	f7ff fc36 	bl	8005018 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057ac:	f7fd fb56 	bl	8002e5c <HAL_GetTick>
 80057b0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80057b2:	e00c      	b.n	80057ce <HAL_RCC_OscConfig+0x3c2>
 80057b4:	20000108 	.word	0x20000108
 80057b8:	2000010c 	.word	0x2000010c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057bc:	f7fd fb4e 	bl	8002e5c <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b11      	cmp	r3, #17
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e197      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80057ce:	f7ff fc43 	bl	8005058 <LL_RCC_LSI_IsReady>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f1      	beq.n	80057bc <HAL_RCC_OscConfig+0x3b0>
 80057d8:	e013      	b.n	8005802 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057da:	f7ff fc2d 	bl	8005038 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057de:	f7fd fb3d 	bl	8002e5c <HAL_GetTick>
 80057e2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057e6:	f7fd fb39 	bl	8002e5c <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b11      	cmp	r3, #17
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e182      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80057f8:	f7ff fc2e 	bl	8005058 <LL_RCC_LSI_IsReady>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1f1      	bne.n	80057e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 80d8 	beq.w	80059c0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005810:	f7ff fb44 	bl	8004e9c <LL_PWR_IsEnabledBkUpAccess>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d113      	bne.n	8005842 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800581a:	f7ff fb25 	bl	8004e68 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800581e:	f7fd fb1d 	bl	8002e5c <HAL_GetTick>
 8005822:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005826:	f7fd fb19 	bl	8002e5c <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e162      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005838:	f7ff fb30 	bl	8004e9c <LL_PWR_IsEnabledBkUpAccess>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f1      	beq.n	8005826 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d07b      	beq.n	8005942 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	2b85      	cmp	r3, #133	; 0x85
 8005850:	d003      	beq.n	800585a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	2b05      	cmp	r3, #5
 8005858:	d109      	bne.n	800586e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800585a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005862:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005866:	f043 0304 	orr.w	r3, r3, #4
 800586a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800586e:	f7fd faf5 	bl	8002e5c <HAL_GetTick>
 8005872:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005880:	f043 0301 	orr.w	r3, r3, #1
 8005884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005888:	e00a      	b.n	80058a0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800588a:	f7fd fae7 	bl	8002e5c <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	f241 3288 	movw	r2, #5000	; 0x1388
 8005898:	4293      	cmp	r3, r2
 800589a:	d901      	bls.n	80058a0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e12e      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80058a0:	f7ff fba9 	bl	8004ff6 <LL_RCC_LSE_IsReady>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0ef      	beq.n	800588a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b81      	cmp	r3, #129	; 0x81
 80058b0:	d003      	beq.n	80058ba <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b85      	cmp	r3, #133	; 0x85
 80058b8:	d121      	bne.n	80058fe <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ba:	f7fd facf 	bl	8002e5c <HAL_GetTick>
 80058be:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80058c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80058d4:	e00a      	b.n	80058ec <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d6:	f7fd fac1 	bl	8002e5c <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e108      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80058ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0ec      	beq.n	80058d6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80058fc:	e060      	b.n	80059c0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fe:	f7fd faad 	bl	8002e5c <HAL_GetTick>
 8005902:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005918:	e00a      	b.n	8005930 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800591a:	f7fd fa9f 	bl	8002e5c <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	f241 3288 	movw	r2, #5000	; 0x1388
 8005928:	4293      	cmp	r3, r2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e0e6      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1ec      	bne.n	800591a <HAL_RCC_OscConfig+0x50e>
 8005940:	e03e      	b.n	80059c0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005942:	f7fd fa8b 	bl	8002e5c <HAL_GetTick>
 8005946:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005950:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005954:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800595c:	e00a      	b.n	8005974 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595e:	f7fd fa7d 	bl	8002e5c <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	f241 3288 	movw	r2, #5000	; 0x1388
 800596c:	4293      	cmp	r3, r2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e0c4      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1ec      	bne.n	800595e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005984:	f7fd fa6a 	bl	8002e5c <HAL_GetTick>
 8005988:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800598a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005992:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005996:	f023 0301 	bic.w	r3, r3, #1
 800599a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800599e:	e00a      	b.n	80059b6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059a0:	f7fd fa5c 	bl	8002e5c <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e0a3      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80059b6:	f7ff fb1e 	bl	8004ff6 <LL_RCC_LSE_IsReady>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1ef      	bne.n	80059a0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8099 	beq.w	8005afc <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	2b0c      	cmp	r3, #12
 80059ce:	d06c      	beq.n	8005aaa <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d14b      	bne.n	8005a70 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d8:	f7ff fc74 	bl	80052c4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059dc:	f7fd fa3e 	bl	8002e5c <HAL_GetTick>
 80059e0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059e4:	f7fd fa3a 	bl	8002e5c <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b0a      	cmp	r3, #10
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e083      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80059f6:	f7ff fc73 	bl	80052e0 <LL_RCC_PLL_IsReady>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1f1      	bne.n	80059e4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	4b40      	ldr	r3, [pc, #256]	; (8005b08 <HAL_RCC_OscConfig+0x6fc>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a12:	4311      	orrs	r1, r2
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a18:	0212      	lsls	r2, r2, #8
 8005a1a:	4311      	orrs	r1, r2
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a20:	4311      	orrs	r1, r2
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a26:	4311      	orrs	r1, r2
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a36:	f7ff fc37 	bl	80052a8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a48:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a4a:	f7fd fa07 	bl	8002e5c <HAL_GetTick>
 8005a4e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005a50:	e008      	b.n	8005a64 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a52:	f7fd fa03 	bl	8002e5c <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b0a      	cmp	r3, #10
 8005a5e:	d901      	bls.n	8005a64 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e04c      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005a64:	f7ff fc3c 	bl	80052e0 <LL_RCC_PLL_IsReady>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0f1      	beq.n	8005a52 <HAL_RCC_OscConfig+0x646>
 8005a6e:	e045      	b.n	8005afc <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a70:	f7ff fc28 	bl	80052c4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a74:	f7fd f9f2 	bl	8002e5c <HAL_GetTick>
 8005a78:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a7c:	f7fd f9ee 	bl	8002e5c <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b0a      	cmp	r3, #10
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e037      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005a8e:	f7ff fc27 	bl	80052e0 <LL_RCC_PLL_IsReady>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1f1      	bne.n	8005a7c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9c:	68da      	ldr	r2, [r3, #12]
 8005a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aa2:	4b1a      	ldr	r3, [pc, #104]	; (8005b0c <HAL_RCC_OscConfig+0x700>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	60cb      	str	r3, [r1, #12]
 8005aa8:	e028      	b.n	8005afc <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e023      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	f003 0203 	and.w	r2, r3, #3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d115      	bne.n	8005af8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d10e      	bne.n	8005af8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	021b      	lsls	r3, r3, #8
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d106      	bne.n	8005af8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d001      	beq.n	8005afc <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e000      	b.n	8005afe <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3720      	adds	r7, #32
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	11c1808c 	.word	0x11c1808c
 8005b0c:	eefefffc 	.word	0xeefefffc

08005b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e12c      	b.n	8005d7e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b24:	4b98      	ldr	r3, [pc, #608]	; (8005d88 <HAL_RCC_ClockConfig+0x278>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d91b      	bls.n	8005b6a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b32:	4b95      	ldr	r3, [pc, #596]	; (8005d88 <HAL_RCC_ClockConfig+0x278>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f023 0207 	bic.w	r2, r3, #7
 8005b3a:	4993      	ldr	r1, [pc, #588]	; (8005d88 <HAL_RCC_ClockConfig+0x278>)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b42:	f7fd f98b 	bl	8002e5c <HAL_GetTick>
 8005b46:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b4a:	f7fd f987 	bl	8002e5c <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e110      	b.n	8005d7e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b5c:	4b8a      	ldr	r3, [pc, #552]	; (8005d88 <HAL_RCC_ClockConfig+0x278>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d1ef      	bne.n	8005b4a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d016      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff fb02 	bl	8005184 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b80:	f7fd f96c 	bl	8002e5c <HAL_GetTick>
 8005b84:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005b86:	e008      	b.n	8005b9a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b88:	f7fd f968 	bl	8002e5c <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d901      	bls.n	8005b9a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e0f1      	b.n	8005d7e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005b9a:	f7ff fbdf 	bl	800535c <LL_RCC_IsActiveFlag_HPRE>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0f1      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d016      	beq.n	8005bde <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff faf8 	bl	80051aa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bba:	f7fd f94f 	bl	8002e5c <HAL_GetTick>
 8005bbe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005bc0:	e008      	b.n	8005bd4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bc2:	f7fd f94b 	bl	8002e5c <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d901      	bls.n	8005bd4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e0d4      	b.n	8005d7e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005bd4:	f7ff fbd3 	bl	800537e <LL_RCC_IsActiveFlag_C2HPRE>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0f1      	beq.n	8005bc2 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d016      	beq.n	8005c18 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7ff faf0 	bl	80051d4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bf4:	f7fd f932 	bl	8002e5c <HAL_GetTick>
 8005bf8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bfc:	f7fd f92e 	bl	8002e5c <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e0b7      	b.n	8005d7e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005c0e:	f7ff fbc8 	bl	80053a2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0f1      	beq.n	8005bfc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d016      	beq.n	8005c52 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff fae9 	bl	8005200 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c2e:	f7fd f915 	bl	8002e5c <HAL_GetTick>
 8005c32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c34:	e008      	b.n	8005c48 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c36:	f7fd f911 	bl	8002e5c <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e09a      	b.n	8005d7e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c48:	f7ff fbbd 	bl	80053c6 <LL_RCC_IsActiveFlag_PPRE1>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f1      	beq.n	8005c36 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d017      	beq.n	8005c8e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff fade 	bl	8005226 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c6a:	f7fd f8f7 	bl	8002e5c <HAL_GetTick>
 8005c6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005c70:	e008      	b.n	8005c84 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c72:	f7fd f8f3 	bl	8002e5c <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e07c      	b.n	8005d7e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005c84:	f7ff fbb0 	bl	80053e8 <LL_RCC_IsActiveFlag_PPRE2>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0f1      	beq.n	8005c72 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d043      	beq.n	8005d22 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d106      	bne.n	8005cb0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005ca2:	f7ff f956 	bl	8004f52 <LL_RCC_HSE_IsReady>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d11e      	bne.n	8005cea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e066      	b.n	8005d7e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d106      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005cb8:	f7ff fb12 	bl	80052e0 <LL_RCC_PLL_IsReady>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d113      	bne.n	8005cea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e05b      	b.n	8005d7e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005cce:	f7ff f9f0 	bl	80050b2 <LL_RCC_MSI_IsReady>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d108      	bne.n	8005cea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e050      	b.n	8005d7e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005cdc:	f7ff f966 	bl	8004fac <LL_RCC_HSI_IsReady>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e049      	b.n	8005d7e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff fa2a 	bl	8005148 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cf4:	f7fd f8b2 	bl	8002e5c <HAL_GetTick>
 8005cf8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cfa:	e00a      	b.n	8005d12 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cfc:	f7fd f8ae 	bl	8002e5c <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e035      	b.n	8005d7e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d12:	f7ff fa2c 	bl	800516e <LL_RCC_GetSysClkSource>
 8005d16:	4602      	mov	r2, r0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d1ec      	bne.n	8005cfc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d22:	4b19      	ldr	r3, [pc, #100]	; (8005d88 <HAL_RCC_ClockConfig+0x278>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0307 	and.w	r3, r3, #7
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d21b      	bcs.n	8005d68 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d30:	4b15      	ldr	r3, [pc, #84]	; (8005d88 <HAL_RCC_ClockConfig+0x278>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f023 0207 	bic.w	r2, r3, #7
 8005d38:	4913      	ldr	r1, [pc, #76]	; (8005d88 <HAL_RCC_ClockConfig+0x278>)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d40:	f7fd f88c 	bl	8002e5c <HAL_GetTick>
 8005d44:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d48:	f7fd f888 	bl	8002e5c <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e011      	b.n	8005d7e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d5a:	4b0b      	ldr	r3, [pc, #44]	; (8005d88 <HAL_RCC_ClockConfig+0x278>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d1ef      	bne.n	8005d48 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d68:	f000 f8b4 	bl	8005ed4 <HAL_RCC_GetHCLKFreq>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	4a07      	ldr	r2, [pc, #28]	; (8005d8c <HAL_RCC_ClockConfig+0x27c>)
 8005d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8005d72:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <HAL_RCC_ClockConfig+0x280>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fb f8e2 	bl	8000f40 <HAL_InitTick>
 8005d7c:	4603      	mov	r3, r0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	58004000 	.word	0x58004000
 8005d8c:	20000108 	.word	0x20000108
 8005d90:	2000010c 	.word	0x2000010c

08005d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d94:	b590      	push	{r4, r7, lr}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005da2:	f7ff f9e4 	bl	800516e <LL_RCC_GetSysClkSource>
 8005da6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005da8:	f7ff facd 	bl	8005346 <LL_RCC_PLL_GetMainSource>
 8005dac:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <HAL_RCC_GetSysClockFreq+0x2c>
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b0c      	cmp	r3, #12
 8005db8:	d139      	bne.n	8005e2e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d136      	bne.n	8005e2e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005dc0:	f7ff f987 	bl	80050d2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d115      	bne.n	8005df6 <HAL_RCC_GetSysClockFreq+0x62>
 8005dca:	f7ff f982 	bl	80050d2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d106      	bne.n	8005de2 <HAL_RCC_GetSysClockFreq+0x4e>
 8005dd4:	f7ff f98d 	bl	80050f2 <LL_RCC_MSI_GetRange>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	0a1b      	lsrs	r3, r3, #8
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	e005      	b.n	8005dee <HAL_RCC_GetSysClockFreq+0x5a>
 8005de2:	f7ff f991 	bl	8005108 <LL_RCC_MSI_GetRangeAfterStandby>
 8005de6:	4603      	mov	r3, r0
 8005de8:	0a1b      	lsrs	r3, r3, #8
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	4a36      	ldr	r2, [pc, #216]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x134>)
 8005df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df4:	e014      	b.n	8005e20 <HAL_RCC_GetSysClockFreq+0x8c>
 8005df6:	f7ff f96c 	bl	80050d2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d106      	bne.n	8005e0e <HAL_RCC_GetSysClockFreq+0x7a>
 8005e00:	f7ff f977 	bl	80050f2 <LL_RCC_MSI_GetRange>
 8005e04:	4603      	mov	r3, r0
 8005e06:	091b      	lsrs	r3, r3, #4
 8005e08:	f003 030f 	and.w	r3, r3, #15
 8005e0c:	e005      	b.n	8005e1a <HAL_RCC_GetSysClockFreq+0x86>
 8005e0e:	f7ff f97b 	bl	8005108 <LL_RCC_MSI_GetRangeAfterStandby>
 8005e12:	4603      	mov	r3, r0
 8005e14:	091b      	lsrs	r3, r3, #4
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	4a2b      	ldr	r2, [pc, #172]	; (8005ec8 <HAL_RCC_GetSysClockFreq+0x134>)
 8005e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e20:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d115      	bne.n	8005e54 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e2c:	e012      	b.n	8005e54 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	d102      	bne.n	8005e3a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e34:	4b25      	ldr	r3, [pc, #148]	; (8005ecc <HAL_RCC_GetSysClockFreq+0x138>)
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	e00c      	b.n	8005e54 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d109      	bne.n	8005e54 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e40:	f7ff f85a 	bl	8004ef8 <LL_RCC_HSE_IsEnabledDiv2>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d102      	bne.n	8005e50 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005e4a:	4b20      	ldr	r3, [pc, #128]	; (8005ecc <HAL_RCC_GetSysClockFreq+0x138>)
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	e001      	b.n	8005e54 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005e50:	4b1f      	ldr	r3, [pc, #124]	; (8005ed0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005e52:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e54:	f7ff f98b 	bl	800516e <LL_RCC_GetSysClkSource>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b0c      	cmp	r3, #12
 8005e5c:	d12f      	bne.n	8005ebe <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005e5e:	f7ff fa72 	bl	8005346 <LL_RCC_PLL_GetMainSource>
 8005e62:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d003      	beq.n	8005e72 <HAL_RCC_GetSysClockFreq+0xde>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d003      	beq.n	8005e78 <HAL_RCC_GetSysClockFreq+0xe4>
 8005e70:	e00d      	b.n	8005e8e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005e72:	4b16      	ldr	r3, [pc, #88]	; (8005ecc <HAL_RCC_GetSysClockFreq+0x138>)
 8005e74:	60fb      	str	r3, [r7, #12]
        break;
 8005e76:	e00d      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e78:	f7ff f83e 	bl	8004ef8 <LL_RCC_HSE_IsEnabledDiv2>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d102      	bne.n	8005e88 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005e82:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <HAL_RCC_GetSysClockFreq+0x138>)
 8005e84:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005e86:	e005      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005e88:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005e8a:	60fb      	str	r3, [r7, #12]
        break;
 8005e8c:	e002      	b.n	8005e94 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	60fb      	str	r3, [r7, #12]
        break;
 8005e92:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005e94:	f7ff fa35 	bl	8005302 <LL_RCC_PLL_GetN>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	fb03 f402 	mul.w	r4, r3, r2
 8005ea0:	f7ff fa46 	bl	8005330 <LL_RCC_PLL_GetDivider>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	091b      	lsrs	r3, r3, #4
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	fbb4 f4f3 	udiv	r4, r4, r3
 8005eae:	f7ff fa34 	bl	800531a <LL_RCC_PLL_GetR>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	0f5b      	lsrs	r3, r3, #29
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	fbb4 f3f3 	udiv	r3, r4, r3
 8005ebc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005ebe:	697b      	ldr	r3, [r7, #20]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd90      	pop	{r4, r7, pc}
 8005ec8:	0800a358 	.word	0x0800a358
 8005ecc:	00f42400 	.word	0x00f42400
 8005ed0:	01e84800 	.word	0x01e84800

08005ed4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ed4:	b598      	push	{r3, r4, r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005ed8:	f7ff ff5c 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8005edc:	4604      	mov	r4, r0
 8005ede:	f7ff f9b5 	bl	800524c <LL_RCC_GetAHBPrescaler>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	091b      	lsrs	r3, r3, #4
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	4a03      	ldr	r2, [pc, #12]	; (8005ef8 <HAL_RCC_GetHCLKFreq+0x24>)
 8005eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	bd98      	pop	{r3, r4, r7, pc}
 8005ef8:	0800a2f8 	.word	0x0800a2f8

08005efc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005efc:	b598      	push	{r3, r4, r7, lr}
 8005efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005f00:	f7ff ffe8 	bl	8005ed4 <HAL_RCC_GetHCLKFreq>
 8005f04:	4604      	mov	r4, r0
 8005f06:	f7ff f9b9 	bl	800527c <LL_RCC_GetAPB1Prescaler>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	0a1b      	lsrs	r3, r3, #8
 8005f0e:	4a03      	ldr	r2, [pc, #12]	; (8005f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f14:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	bd98      	pop	{r3, r4, r7, pc}
 8005f1c:	0800a338 	.word	0x0800a338

08005f20 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f20:	b598      	push	{r3, r4, r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005f24:	f7ff ffd6 	bl	8005ed4 <HAL_RCC_GetHCLKFreq>
 8005f28:	4604      	mov	r4, r0
 8005f2a:	f7ff f9b2 	bl	8005292 <LL_RCC_GetAPB2Prescaler>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	0adb      	lsrs	r3, r3, #11
 8005f32:	4a03      	ldr	r2, [pc, #12]	; (8005f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f38:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	bd98      	pop	{r3, r4, r7, pc}
 8005f40:	0800a338 	.word	0x0800a338

08005f44 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d038      	beq.n	8005fc6 <HAL_RCC_GetClockConfig+0x82>
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d035      	beq.n	8005fc6 <HAL_RCC_GetClockConfig+0x82>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	224f      	movs	r2, #79	; 0x4f
 8005f5e:	601a      	str	r2, [r3, #0]
                                    | RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_HCLK3);
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f043 0220 	orr.w	r2, r3, #32
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	601a      	str	r2, [r3, #0]
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 8005f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f003 020c 	and.w	r2, r3, #12
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 8005f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005fa4:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	615a      	str	r2, [r3, #20]
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	619a      	str	r2, [r3, #24]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005fba:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <HAL_RCC_GetClockConfig+0x8c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0207 	and.w	r2, r3, #7
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	601a      	str	r2, [r3, #0]
  }
}
 8005fc6:	bf00      	nop
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr
 8005fd0:	58004000 	.word	0x58004000

08005fd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005fd4:	b590      	push	{r4, r7, lr}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	091b      	lsrs	r3, r3, #4
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	4a10      	ldr	r2, [pc, #64]	; (8006028 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fea:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005fec:	f7ff f939 	bl	8005262 <LL_RCC_GetAHB3Prescaler>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	091b      	lsrs	r3, r3, #4
 8005ff4:	f003 030f 	and.w	r3, r3, #15
 8005ff8:	4a0c      	ldr	r2, [pc, #48]	; (800602c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	fbb2 f3f3 	udiv	r3, r2, r3
 8006004:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4a09      	ldr	r2, [pc, #36]	; (8006030 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800600a:	fba2 2303 	umull	r2, r3, r2, r3
 800600e:	0c9c      	lsrs	r4, r3, #18
 8006010:	f7fe ff38 	bl	8004e84 <HAL_PWREx_GetVoltageRange>
 8006014:	4603      	mov	r3, r0
 8006016:	4619      	mov	r1, r3
 8006018:	4620      	mov	r0, r4
 800601a:	f000 f80b 	bl	8006034 <RCC_SetFlashLatency>
 800601e:	4603      	mov	r3, r0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	bd90      	pop	{r4, r7, pc}
 8006028:	0800a358 	.word	0x0800a358
 800602c:	0800a2f8 	.word	0x0800a2f8
 8006030:	431bde83 	.word	0x431bde83

08006034 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b08e      	sub	sp, #56	; 0x38
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800603e:	4a3a      	ldr	r2, [pc, #232]	; (8006128 <RCC_SetFlashLatency+0xf4>)
 8006040:	f107 0320 	add.w	r3, r7, #32
 8006044:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006048:	6018      	str	r0, [r3, #0]
 800604a:	3304      	adds	r3, #4
 800604c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800604e:	4a37      	ldr	r2, [pc, #220]	; (800612c <RCC_SetFlashLatency+0xf8>)
 8006050:	f107 0318 	add.w	r3, r7, #24
 8006054:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006058:	6018      	str	r0, [r3, #0]
 800605a:	3304      	adds	r3, #4
 800605c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800605e:	4a34      	ldr	r2, [pc, #208]	; (8006130 <RCC_SetFlashLatency+0xfc>)
 8006060:	f107 030c 	add.w	r3, r7, #12
 8006064:	ca07      	ldmia	r2, {r0, r1, r2}
 8006066:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800606a:	2300      	movs	r3, #0
 800606c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006074:	d11b      	bne.n	80060ae <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006076:	2300      	movs	r3, #0
 8006078:	633b      	str	r3, [r7, #48]	; 0x30
 800607a:	e014      	b.n	80060a6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	3338      	adds	r3, #56	; 0x38
 8006082:	443b      	add	r3, r7
 8006084:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006088:	461a      	mov	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4293      	cmp	r3, r2
 800608e:	d807      	bhi.n	80060a0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	3338      	adds	r3, #56	; 0x38
 8006096:	443b      	add	r3, r7
 8006098:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800609c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800609e:	e021      	b.n	80060e4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80060a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a2:	3301      	adds	r3, #1
 80060a4:	633b      	str	r3, [r7, #48]	; 0x30
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d9e7      	bls.n	800607c <RCC_SetFlashLatency+0x48>
 80060ac:	e01a      	b.n	80060e4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80060ae:	2300      	movs	r3, #0
 80060b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060b2:	e014      	b.n	80060de <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	3338      	adds	r3, #56	; 0x38
 80060ba:	443b      	add	r3, r7
 80060bc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80060c0:	461a      	mov	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d807      	bhi.n	80060d8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80060c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	3338      	adds	r3, #56	; 0x38
 80060ce:	443b      	add	r3, r7
 80060d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80060d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060d6:	e005      	b.n	80060e4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	3301      	adds	r3, #1
 80060dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d9e7      	bls.n	80060b4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80060e4:	4b13      	ldr	r3, [pc, #76]	; (8006134 <RCC_SetFlashLatency+0x100>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f023 0207 	bic.w	r2, r3, #7
 80060ec:	4911      	ldr	r1, [pc, #68]	; (8006134 <RCC_SetFlashLatency+0x100>)
 80060ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f0:	4313      	orrs	r3, r2
 80060f2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060f4:	f7fc feb2 	bl	8002e5c <HAL_GetTick>
 80060f8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80060fa:	e008      	b.n	800610e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80060fc:	f7fc feae 	bl	8002e5c <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d901      	bls.n	800610e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e007      	b.n	800611e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800610e:	4b09      	ldr	r3, [pc, #36]	; (8006134 <RCC_SetFlashLatency+0x100>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0307 	and.w	r3, r3, #7
 8006116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006118:	429a      	cmp	r2, r3
 800611a:	d1ef      	bne.n	80060fc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3738      	adds	r7, #56	; 0x38
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	0800a2bc 	.word	0x0800a2bc
 800612c:	0800a2c4 	.word	0x0800a2c4
 8006130:	0800a2cc 	.word	0x0800a2cc
 8006134:	58004000 	.word	0x58004000

08006138 <LL_RCC_LSE_IsReady>:
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800613c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b02      	cmp	r3, #2
 800614a:	d101      	bne.n	8006150 <LL_RCC_LSE_IsReady+0x18>
 800614c:	2301      	movs	r3, #1
 800614e:	e000      	b.n	8006152 <LL_RCC_LSE_IsReady+0x1a>
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	46bd      	mov	sp, r7
 8006156:	bc80      	pop	{r7}
 8006158:	4770      	bx	lr

0800615a <LL_RCC_SetUSARTClockSource>:
{
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006166:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	0c1b      	lsrs	r3, r3, #16
 800616e:	43db      	mvns	r3, r3
 8006170:	401a      	ands	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	b29b      	uxth	r3, r3
 8006176:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800617a:	4313      	orrs	r3, r2
 800617c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	bc80      	pop	{r7}
 8006188:	4770      	bx	lr

0800618a <LL_RCC_SetI2SClockSource>:
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800619e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061aa:	bf00      	nop
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bc80      	pop	{r7}
 80061b2:	4770      	bx	lr

080061b4 <LL_RCC_SetLPUARTClockSource>:
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80061bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	bc80      	pop	{r7}
 80061dc:	4770      	bx	lr

080061de <LL_RCC_SetI2CClockSource>:
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80061e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	091b      	lsrs	r3, r3, #4
 80061f2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80061f6:	43db      	mvns	r3, r3
 80061f8:	401a      	ands	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr

08006216 <LL_RCC_SetLPTIMClockSource>:
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800621e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006222:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	0c1b      	lsrs	r3, r3, #16
 800622a:	041b      	lsls	r3, r3, #16
 800622c:	43db      	mvns	r3, r3
 800622e:	401a      	ands	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	041b      	lsls	r3, r3, #16
 8006234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr

08006248 <LL_RCC_SetRNGClockSource>:
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006258:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800625c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4313      	orrs	r3, r2
 8006264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	bc80      	pop	{r7}
 8006270:	4770      	bx	lr

08006272 <LL_RCC_SetADCClockSource>:
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800627a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800627e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006282:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4313      	orrs	r3, r2
 800628e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	bc80      	pop	{r7}
 800629a:	4770      	bx	lr

0800629c <LL_RCC_SetRTCClockSource>:
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80062a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bc80      	pop	{r7}
 80062c4:	4770      	bx	lr

080062c6 <LL_RCC_GetRTCClockSource>:
{
 80062c6:	b480      	push	{r7}
 80062c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80062ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	46bd      	mov	sp, r7
 80062da:	bc80      	pop	{r7}
 80062dc:	4770      	bx	lr

080062de <LL_RCC_ForceBackupDomainReset>:
{
 80062de:	b480      	push	{r7}
 80062e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80062e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80062f6:	bf00      	nop
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	4770      	bx	lr

080062fe <LL_RCC_ReleaseBackupDomainReset>:
{
 80062fe:	b480      	push	{r7}
 8006300:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800630e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006316:	bf00      	nop
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr
	...

08006320 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006328:	2300      	movs	r3, #0
 800632a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800632c:	2300      	movs	r3, #0
 800632e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006330:	2300      	movs	r3, #0
 8006332:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d058      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006340:	f7fe fd92 	bl	8004e68 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006344:	f7fc fd8a 	bl	8002e5c <HAL_GetTick>
 8006348:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800634a:	e009      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800634c:	f7fc fd86 	bl	8002e5c <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	2b02      	cmp	r3, #2
 8006358:	d902      	bls.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	74fb      	strb	r3, [r7, #19]
        break;
 800635e:	e006      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006360:	4b7b      	ldr	r3, [pc, #492]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636c:	d1ee      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800636e:	7cfb      	ldrb	r3, [r7, #19]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d13c      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006374:	f7ff ffa7 	bl	80062c6 <LL_RCC_GetRTCClockSource>
 8006378:	4602      	mov	r2, r0
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637e:	429a      	cmp	r2, r3
 8006380:	d00f      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800638e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006390:	f7ff ffa5 	bl	80062de <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006394:	f7ff ffb3 	bl	80062fe <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f003 0302 	and.w	r3, r3, #2
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d014      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ac:	f7fc fd56 	bl	8002e5c <HAL_GetTick>
 80063b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80063b2:	e00b      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063b4:	f7fc fd52 	bl	8002e5c <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d902      	bls.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	74fb      	strb	r3, [r7, #19]
            break;
 80063ca:	e004      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80063cc:	f7ff feb4 	bl	8006138 <LL_RCC_LSE_IsReady>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d1ee      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80063d6:	7cfb      	ldrb	r3, [r7, #19]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d105      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff ff5b 	bl	800629c <LL_RCC_SetRTCClockSource>
 80063e6:	e004      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063e8:	7cfb      	ldrb	r3, [r7, #19]
 80063ea:	74bb      	strb	r3, [r7, #18]
 80063ec:	e001      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ee:	7cfb      	ldrb	r3, [r7, #19]
 80063f0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d004      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff fea9 	bl	800615a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0302 	and.w	r3, r3, #2
 8006410:	2b00      	cmp	r3, #0
 8006412:	d004      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	4618      	mov	r0, r3
 800641a:	f7ff fe9e 	bl	800615a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b00      	cmp	r3, #0
 8006428:	d004      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff fec0 	bl	80061b4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800643c:	2b00      	cmp	r3, #0
 800643e:	d004      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff fee6 	bl	8006216 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006452:	2b00      	cmp	r3, #0
 8006454:	d004      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff fedb 	bl	8006216 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006468:	2b00      	cmp	r3, #0
 800646a:	d004      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff fed0 	bl	8006216 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647e:	2b00      	cmp	r3, #0
 8006480:	d004      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff fea9 	bl	80061de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	4618      	mov	r0, r3
 800649e:	f7ff fe9e 	bl	80061de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d004      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7ff fe93 	bl	80061de <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0310 	and.w	r3, r3, #16
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d011      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff fe5e 	bl	800618a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064d6:	d107      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80064d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d010      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7ff fea5 	bl	8006248 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	2b00      	cmp	r3, #0
 8006504:	d107      	bne.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006514:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d011      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff fea3 	bl	8006272 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006534:	d107      	bne.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006544:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006546:	7cbb      	ldrb	r3, [r7, #18]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	58000400 	.word	0x58000400

08006554 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800655c:	4b06      	ldr	r3, [pc, #24]	; (8006578 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006564:	4904      	ldr	r1, [pc, #16]	; (8006578 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4313      	orrs	r3, r2
 800656a:	608b      	str	r3, [r1, #8]
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	bc80      	pop	{r7}
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	58000400 	.word	0x58000400

0800657c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006580:	4b05      	ldr	r3, [pc, #20]	; (8006598 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006586:	4a04      	ldr	r2, [pc, #16]	; (8006598 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006590:	bf00      	nop
 8006592:	46bd      	mov	sp, r7
 8006594:	bc80      	pop	{r7}
 8006596:	4770      	bx	lr
 8006598:	58000400 	.word	0x58000400

0800659c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80065a0:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80065a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a6:	4a04      	ldr	r2, [pc, #16]	; (80065b8 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80065a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80065b0:	bf00      	nop
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr
 80065b8:	58000400 	.word	0x58000400

080065bc <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80065c0:	4b03      	ldr	r3, [pc, #12]	; (80065d0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80065c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065c6:	619a      	str	r2, [r3, #24]
}
 80065c8:	bf00      	nop
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr
 80065d0:	58000400 	.word	0x58000400

080065d4 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80065d4:	b480      	push	{r7}
 80065d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80065d8:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d101      	bne.n	80065e8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e000      	b.n	80065ea <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc80      	pop	{r7}
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	58000400 	.word	0x58000400

080065f8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80065fc:	4b06      	ldr	r3, [pc, #24]	; (8006618 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b04      	cmp	r3, #4
 8006606:	d101      	bne.n	800660c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006608:	2301      	movs	r3, #1
 800660a:	e000      	b.n	800660e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	bc80      	pop	{r7}
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	58000400 	.word	0x58000400

0800661c <LL_RCC_RF_DisableReset>:
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006628:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800662c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006630:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006634:	bf00      	nop
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr

0800663c <LL_RCC_IsRFUnderReset>:
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800664c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006650:	d101      	bne.n	8006656 <LL_RCC_IsRFUnderReset+0x1a>
 8006652:	2301      	movs	r3, #1
 8006654:	e000      	b.n	8006658 <LL_RCC_IsRFUnderReset+0x1c>
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	46bd      	mov	sp, r7
 800665c:	bc80      	pop	{r7}
 800665e:	4770      	bx	lr

08006660 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006668:	4b06      	ldr	r3, [pc, #24]	; (8006684 <LL_EXTI_EnableIT_32_63+0x24>)
 800666a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800666e:	4905      	ldr	r1, [pc, #20]	; (8006684 <LL_EXTI_EnableIT_32_63+0x24>)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4313      	orrs	r3, r2
 8006674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	bc80      	pop	{r7}
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	58000800 	.word	0x58000800

08006688 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d103      	bne.n	800669e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	73fb      	strb	r3, [r7, #15]
    return status;
 800669a:	7bfb      	ldrb	r3, [r7, #15]
 800669c:	e052      	b.n	8006744 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	799b      	ldrb	r3, [r3, #6]
 80066a6:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80066a8:	7bbb      	ldrb	r3, [r7, #14]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <HAL_SUBGHZ_Init+0x2c>
 80066ae:	7bbb      	ldrb	r3, [r7, #14]
 80066b0:	2b03      	cmp	r3, #3
 80066b2:	d109      	bne.n	80066c8 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fa fd36 	bl	800112c <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80066c0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80066c4:	f7ff ffcc 	bl	8006660 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80066c8:	7bbb      	ldrb	r3, [r7, #14]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d126      	bne.n	800671c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2202      	movs	r2, #2
 80066d2:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80066d4:	f7ff ffa2 	bl	800661c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80066d8:	4b1c      	ldr	r3, [pc, #112]	; (800674c <HAL_SUBGHZ_Init+0xc4>)
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	4613      	mov	r3, r2
 80066de:	00db      	lsls	r3, r3, #3
 80066e0:	1a9b      	subs	r3, r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	0cdb      	lsrs	r3, r3, #19
 80066e6:	2264      	movs	r2, #100	; 0x64
 80066e8:	fb02 f303 	mul.w	r3, r2, r3
 80066ec:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d105      	bne.n	8006700 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	609a      	str	r2, [r3, #8]
        break;
 80066fe:	e007      	b.n	8006710 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	3b01      	subs	r3, #1
 8006704:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006706:	f7ff ff99 	bl	800663c <LL_RCC_IsRFUnderReset>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1ee      	bne.n	80066ee <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006710:	f7ff ff34 	bl	800657c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006714:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006718:	f7ff ff1c 	bl	8006554 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800671c:	f7ff ff4e 	bl	80065bc <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006720:	7bfb      	ldrb	r3, [r7, #15]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10a      	bne.n	800673c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fab6 	bl	8006c9c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	719a      	strb	r2, [r3, #6]

  return status;
 8006742:	7bfb      	ldrb	r3, [r7, #15]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	20000108 	.word	0x20000108

08006750 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	607a      	str	r2, [r7, #4]
 800675a:	461a      	mov	r2, r3
 800675c:	460b      	mov	r3, r1
 800675e:	817b      	strh	r3, [r7, #10]
 8006760:	4613      	mov	r3, r2
 8006762:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	799b      	ldrb	r3, [r3, #6]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b01      	cmp	r3, #1
 800676c:	d14a      	bne.n	8006804 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	795b      	ldrb	r3, [r3, #5]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006776:	2302      	movs	r3, #2
 8006778:	e045      	b.n	8006806 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2202      	movs	r2, #2
 8006784:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 fb56 	bl	8006e38 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800678c:	f7ff ff06 	bl	800659c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006790:	210d      	movs	r1, #13
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 faa2 	bl	8006cdc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006798:	897b      	ldrh	r3, [r7, #10]
 800679a:	0a1b      	lsrs	r3, r3, #8
 800679c:	b29b      	uxth	r3, r3
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	4619      	mov	r1, r3
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 fa9a 	bl	8006cdc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80067a8:	897b      	ldrh	r3, [r7, #10]
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	4619      	mov	r1, r3
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 fa94 	bl	8006cdc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80067b4:	2300      	movs	r3, #0
 80067b6:	82bb      	strh	r3, [r7, #20]
 80067b8:	e00a      	b.n	80067d0 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80067ba:	8abb      	ldrh	r3, [r7, #20]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	4413      	add	r3, r2
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	4619      	mov	r1, r3
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 fa89 	bl	8006cdc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80067ca:	8abb      	ldrh	r3, [r7, #20]
 80067cc:	3301      	adds	r3, #1
 80067ce:	82bb      	strh	r3, [r7, #20]
 80067d0:	8aba      	ldrh	r2, [r7, #20]
 80067d2:	893b      	ldrh	r3, [r7, #8]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d3f0      	bcc.n	80067ba <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80067d8:	f7ff fed0 	bl	800657c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 fb4f 	bl	8006e80 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	75fb      	strb	r3, [r7, #23]
 80067ee:	e001      	b.n	80067f4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2201      	movs	r2, #1
 80067f8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	715a      	strb	r2, [r3, #5]

    return status;
 8006800:	7dfb      	ldrb	r3, [r7, #23]
 8006802:	e000      	b.n	8006806 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006804:	2302      	movs	r3, #2
  }
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b088      	sub	sp, #32
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	461a      	mov	r2, r3
 800681a:	460b      	mov	r3, r1
 800681c:	817b      	strh	r3, [r7, #10]
 800681e:	4613      	mov	r3, r2
 8006820:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	799b      	ldrb	r3, [r3, #6]
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b01      	cmp	r3, #1
 800682e:	d14a      	bne.n	80068c6 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	795b      	ldrb	r3, [r3, #5]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d101      	bne.n	800683c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006838:	2302      	movs	r3, #2
 800683a:	e045      	b.n	80068c8 <HAL_SUBGHZ_ReadRegisters+0xba>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2201      	movs	r2, #1
 8006840:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 faf8 	bl	8006e38 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006848:	f7ff fea8 	bl	800659c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800684c:	211d      	movs	r1, #29
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 fa44 	bl	8006cdc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006854:	897b      	ldrh	r3, [r7, #10]
 8006856:	0a1b      	lsrs	r3, r3, #8
 8006858:	b29b      	uxth	r3, r3
 800685a:	b2db      	uxtb	r3, r3
 800685c:	4619      	mov	r1, r3
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 fa3c 	bl	8006cdc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006864:	897b      	ldrh	r3, [r7, #10]
 8006866:	b2db      	uxtb	r3, r3
 8006868:	4619      	mov	r1, r3
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 fa36 	bl	8006cdc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006870:	2100      	movs	r1, #0
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f000 fa32 	bl	8006cdc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006878:	2300      	movs	r3, #0
 800687a:	82fb      	strh	r3, [r7, #22]
 800687c:	e009      	b.n	8006892 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800687e:	69b9      	ldr	r1, [r7, #24]
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 fa81 	bl	8006d88 <SUBGHZSPI_Receive>
      pData++;
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	3301      	adds	r3, #1
 800688a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800688c:	8afb      	ldrh	r3, [r7, #22]
 800688e:	3301      	adds	r3, #1
 8006890:	82fb      	strh	r3, [r7, #22]
 8006892:	8afa      	ldrh	r2, [r7, #22]
 8006894:	893b      	ldrh	r3, [r7, #8]
 8006896:	429a      	cmp	r2, r3
 8006898:	d3f1      	bcc.n	800687e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800689a:	f7ff fe6f 	bl	800657c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 faee 	bl	8006e80 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	77fb      	strb	r3, [r7, #31]
 80068b0:	e001      	b.n	80068b6 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2201      	movs	r2, #1
 80068ba:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	715a      	strb	r2, [r3, #5]

    return status;
 80068c2:	7ffb      	ldrb	r3, [r7, #31]
 80068c4:	e000      	b.n	80068c8 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80068c6:	2302      	movs	r3, #2
  }
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3720      	adds	r7, #32
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	607a      	str	r2, [r7, #4]
 80068da:	461a      	mov	r2, r3
 80068dc:	460b      	mov	r3, r1
 80068de:	72fb      	strb	r3, [r7, #11]
 80068e0:	4613      	mov	r3, r2
 80068e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	799b      	ldrb	r3, [r3, #6]
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d14a      	bne.n	8006984 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	795b      	ldrb	r3, [r3, #5]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d101      	bne.n	80068fa <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80068f6:	2302      	movs	r3, #2
 80068f8:	e045      	b.n	8006986 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2201      	movs	r2, #1
 80068fe:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 fa99 	bl	8006e38 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006906:	7afb      	ldrb	r3, [r7, #11]
 8006908:	2b84      	cmp	r3, #132	; 0x84
 800690a:	d002      	beq.n	8006912 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800690c:	7afb      	ldrb	r3, [r7, #11]
 800690e:	2b94      	cmp	r3, #148	; 0x94
 8006910:	d103      	bne.n	800691a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2201      	movs	r2, #1
 8006916:	711a      	strb	r2, [r3, #4]
 8006918:	e002      	b.n	8006920 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006920:	f7ff fe3c 	bl	800659c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006924:	7afb      	ldrb	r3, [r7, #11]
 8006926:	4619      	mov	r1, r3
 8006928:	68f8      	ldr	r0, [r7, #12]
 800692a:	f000 f9d7 	bl	8006cdc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800692e:	2300      	movs	r3, #0
 8006930:	82bb      	strh	r3, [r7, #20]
 8006932:	e00a      	b.n	800694a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006934:	8abb      	ldrh	r3, [r7, #20]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	4413      	add	r3, r2
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	4619      	mov	r1, r3
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 f9cc 	bl	8006cdc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006944:	8abb      	ldrh	r3, [r7, #20]
 8006946:	3301      	adds	r3, #1
 8006948:	82bb      	strh	r3, [r7, #20]
 800694a:	8aba      	ldrh	r2, [r7, #20]
 800694c:	893b      	ldrh	r3, [r7, #8]
 800694e:	429a      	cmp	r2, r3
 8006950:	d3f0      	bcc.n	8006934 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006952:	f7ff fe13 	bl	800657c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006956:	7afb      	ldrb	r3, [r7, #11]
 8006958:	2b84      	cmp	r3, #132	; 0x84
 800695a:	d002      	beq.n	8006962 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 fa8f 	bl	8006e80 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	75fb      	strb	r3, [r7, #23]
 800696e:	e001      	b.n	8006974 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006970:	2300      	movs	r3, #0
 8006972:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2201      	movs	r2, #1
 8006978:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	715a      	strb	r2, [r3, #5]

    return status;
 8006980:	7dfb      	ldrb	r3, [r7, #23]
 8006982:	e000      	b.n	8006986 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006984:	2302      	movs	r3, #2
  }
}
 8006986:	4618      	mov	r0, r3
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b088      	sub	sp, #32
 8006992:	af00      	add	r7, sp, #0
 8006994:	60f8      	str	r0, [r7, #12]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	461a      	mov	r2, r3
 800699a:	460b      	mov	r3, r1
 800699c:	72fb      	strb	r3, [r7, #11]
 800699e:	4613      	mov	r3, r2
 80069a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	799b      	ldrb	r3, [r3, #6]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d13d      	bne.n	8006a2c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	795b      	ldrb	r3, [r3, #5]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e038      	b.n	8006a2e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2201      	movs	r2, #1
 80069c0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 fa38 	bl	8006e38 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80069c8:	f7ff fde8 	bl	800659c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80069cc:	7afb      	ldrb	r3, [r7, #11]
 80069ce:	4619      	mov	r1, r3
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 f983 	bl	8006cdc <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80069d6:	2100      	movs	r1, #0
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 f97f 	bl	8006cdc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80069de:	2300      	movs	r3, #0
 80069e0:	82fb      	strh	r3, [r7, #22]
 80069e2:	e009      	b.n	80069f8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80069e4:	69b9      	ldr	r1, [r7, #24]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 f9ce 	bl	8006d88 <SUBGHZSPI_Receive>
      pData++;
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	3301      	adds	r3, #1
 80069f0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80069f2:	8afb      	ldrh	r3, [r7, #22]
 80069f4:	3301      	adds	r3, #1
 80069f6:	82fb      	strh	r3, [r7, #22]
 80069f8:	8afa      	ldrh	r2, [r7, #22]
 80069fa:	893b      	ldrh	r3, [r7, #8]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d3f1      	bcc.n	80069e4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006a00:	f7ff fdbc 	bl	800657c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 fa3b 	bl	8006e80 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	77fb      	strb	r3, [r7, #31]
 8006a16:	e001      	b.n	8006a1c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	715a      	strb	r2, [r3, #5]

    return status;
 8006a28:	7ffb      	ldrb	r3, [r7, #31]
 8006a2a:	e000      	b.n	8006a2e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006a2c:	2302      	movs	r3, #2
  }
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3720      	adds	r7, #32
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b086      	sub	sp, #24
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	461a      	mov	r2, r3
 8006a42:	460b      	mov	r3, r1
 8006a44:	72fb      	strb	r3, [r7, #11]
 8006a46:	4613      	mov	r3, r2
 8006a48:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	799b      	ldrb	r3, [r3, #6]
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d13e      	bne.n	8006ad2 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	795b      	ldrb	r3, [r3, #5]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d101      	bne.n	8006a60 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	e039      	b.n	8006ad4 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2201      	movs	r2, #1
 8006a64:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 f9e6 	bl	8006e38 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006a6c:	f7ff fd96 	bl	800659c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006a70:	210e      	movs	r1, #14
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f932 	bl	8006cdc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006a78:	7afb      	ldrb	r3, [r7, #11]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f92d 	bl	8006cdc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006a82:	2300      	movs	r3, #0
 8006a84:	82bb      	strh	r3, [r7, #20]
 8006a86:	e00a      	b.n	8006a9e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006a88:	8abb      	ldrh	r3, [r7, #20]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	4619      	mov	r1, r3
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 f922 	bl	8006cdc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006a98:	8abb      	ldrh	r3, [r7, #20]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	82bb      	strh	r3, [r7, #20]
 8006a9e:	8aba      	ldrh	r2, [r7, #20]
 8006aa0:	893b      	ldrh	r3, [r7, #8]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d3f0      	bcc.n	8006a88 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006aa6:	f7ff fd69 	bl	800657c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 f9e8 	bl	8006e80 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	75fb      	strb	r3, [r7, #23]
 8006abc:	e001      	b.n	8006ac2 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	715a      	strb	r2, [r3, #5]

    return status;
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	e000      	b.n	8006ad4 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006ad2:	2302      	movs	r3, #2
  }
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	607a      	str	r2, [r7, #4]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	460b      	mov	r3, r1
 8006aea:	72fb      	strb	r3, [r7, #11]
 8006aec:	4613      	mov	r3, r2
 8006aee:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	799b      	ldrb	r3, [r3, #6]
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d141      	bne.n	8006b82 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	795b      	ldrb	r3, [r3, #5]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d101      	bne.n	8006b0a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8006b06:	2302      	movs	r3, #2
 8006b08:	e03c      	b.n	8006b84 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 f991 	bl	8006e38 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006b16:	f7ff fd41 	bl	800659c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006b1a:	211e      	movs	r1, #30
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 f8dd 	bl	8006cdc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006b22:	7afb      	ldrb	r3, [r7, #11]
 8006b24:	4619      	mov	r1, r3
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 f8d8 	bl	8006cdc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f8d4 	bl	8006cdc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006b34:	2300      	movs	r3, #0
 8006b36:	82fb      	strh	r3, [r7, #22]
 8006b38:	e009      	b.n	8006b4e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006b3a:	69b9      	ldr	r1, [r7, #24]
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 f923 	bl	8006d88 <SUBGHZSPI_Receive>
      pData++;
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	3301      	adds	r3, #1
 8006b46:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006b48:	8afb      	ldrh	r3, [r7, #22]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	82fb      	strh	r3, [r7, #22]
 8006b4e:	8afa      	ldrh	r2, [r7, #22]
 8006b50:	893b      	ldrh	r3, [r7, #8]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d3f1      	bcc.n	8006b3a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006b56:	f7ff fd11 	bl	800657c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f000 f990 	bl	8006e80 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d002      	beq.n	8006b6e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	77fb      	strb	r3, [r7, #31]
 8006b6c:	e001      	b.n	8006b72 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2201      	movs	r2, #1
 8006b76:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	715a      	strb	r2, [r3, #5]

    return status;
 8006b7e:	7ffb      	ldrb	r3, [r7, #31]
 8006b80:	e000      	b.n	8006b84 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006b82:	2302      	movs	r3, #2
  }
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3720      	adds	r7, #32
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8006b94:	2300      	movs	r3, #0
 8006b96:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006b98:	f107 020c 	add.w	r2, r7, #12
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	2112      	movs	r1, #18
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff fef4 	bl	800698e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8006ba6:	7b3b      	ldrb	r3, [r7, #12]
 8006ba8:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8006baa:	89fb      	ldrh	r3, [r7, #14]
 8006bac:	021b      	lsls	r3, r3, #8
 8006bae:	b21a      	sxth	r2, r3
 8006bb0:	7b7b      	ldrb	r3, [r7, #13]
 8006bb2:	b21b      	sxth	r3, r3
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	b21b      	sxth	r3, r3
 8006bb8:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8006bba:	f107 020c 	add.w	r2, r7, #12
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	2102      	movs	r1, #2
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fe84 	bl	80068d0 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006bc8:	89fb      	ldrh	r3, [r7, #14]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fc f84e 	bl	8002c74 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8006bd8:	89fb      	ldrh	r3, [r7, #14]
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7fc f853 	bl	8002c90 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006bea:	89fb      	ldrh	r3, [r7, #14]
 8006bec:	089b      	lsrs	r3, r3, #2
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d002      	beq.n	8006bfc <HAL_SUBGHZ_IRQHandler+0x70>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fc f8a2 	bl	8002d40 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006bfc:	89fb      	ldrh	r3, [r7, #14]
 8006bfe:	08db      	lsrs	r3, r3, #3
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <HAL_SUBGHZ_IRQHandler+0x82>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7fc f8a7 	bl	8002d5c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006c0e:	89fb      	ldrh	r3, [r7, #14]
 8006c10:	091b      	lsrs	r3, r3, #4
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <HAL_SUBGHZ_IRQHandler+0x94>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7fc f8ac 	bl	8002d78 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006c20:	89fb      	ldrh	r3, [r7, #14]
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7fc f879 	bl	8002d24 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006c32:	89fb      	ldrh	r3, [r7, #14]
 8006c34:	099b      	lsrs	r3, r3, #6
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d002      	beq.n	8006c44 <HAL_SUBGHZ_IRQHandler+0xb8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7fc f834 	bl	8002cac <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006c44:	89fb      	ldrh	r3, [r7, #14]
 8006c46:	09db      	lsrs	r3, r3, #7
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00e      	beq.n	8006c6e <HAL_SUBGHZ_IRQHandler+0xe2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006c50:	89fb      	ldrh	r3, [r7, #14]
 8006c52:	0a1b      	lsrs	r3, r3, #8
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d004      	beq.n	8006c66 <HAL_SUBGHZ_IRQHandler+0xda>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fc f832 	bl	8002cc8 <HAL_SUBGHZ_CADStatusCallback>
 8006c64:	e003      	b.n	8006c6e <HAL_SUBGHZ_IRQHandler+0xe2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006c66:	2100      	movs	r1, #0
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7fc f82d 	bl	8002cc8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006c6e:	89fb      	ldrh	r3, [r7, #14]
 8006c70:	0a5b      	lsrs	r3, r3, #9
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <HAL_SUBGHZ_IRQHandler+0xf4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fc f842 	bl	8002d04 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8006c80:	89fb      	ldrh	r3, [r7, #14]
 8006c82:	0b9b      	lsrs	r3, r3, #14
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <HAL_SUBGHZ_IRQHandler+0x106>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fc f881 	bl	8002d94 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8006c92:	bf00      	nop
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
	...

08006c9c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006ca4:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <SUBGHZSPI_Init+0x3c>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a0b      	ldr	r2, [pc, #44]	; (8006cd8 <SUBGHZSPI_Init+0x3c>)
 8006caa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cae:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006cb0:	4a09      	ldr	r2, [pc, #36]	; (8006cd8 <SUBGHZSPI_Init+0x3c>)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8006cb8:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006cba:	4b07      	ldr	r3, [pc, #28]	; (8006cd8 <SUBGHZSPI_Init+0x3c>)
 8006cbc:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8006cc0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006cc2:	4b05      	ldr	r3, [pc, #20]	; (8006cd8 <SUBGHZSPI_Init+0x3c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a04      	ldr	r2, [pc, #16]	; (8006cd8 <SUBGHZSPI_Init+0x3c>)
 8006cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ccc:	6013      	str	r3, [r2, #0]
}
 8006cce:	bf00      	nop
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bc80      	pop	{r7}
 8006cd6:	4770      	bx	lr
 8006cd8:	58010000 	.word	0x58010000

08006cdc <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006cec:	4b23      	ldr	r3, [pc, #140]	; (8006d7c <SUBGHZSPI_Transmit+0xa0>)
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	0cdb      	lsrs	r3, r3, #19
 8006cfa:	2264      	movs	r2, #100	; 0x64
 8006cfc:	fb02 f303 	mul.w	r3, r2, r3
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d105      	bne.n	8006d14 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	609a      	str	r2, [r3, #8]
      break;
 8006d12:	e008      	b.n	8006d26 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006d1a:	4b19      	ldr	r3, [pc, #100]	; (8006d80 <SUBGHZSPI_Transmit+0xa4>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d1ed      	bne.n	8006d02 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006d26:	4b17      	ldr	r3, [pc, #92]	; (8006d84 <SUBGHZSPI_Transmit+0xa8>)
 8006d28:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	78fa      	ldrb	r2, [r7, #3]
 8006d2e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006d30:	4b12      	ldr	r3, [pc, #72]	; (8006d7c <SUBGHZSPI_Transmit+0xa0>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	4613      	mov	r3, r2
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	1a9b      	subs	r3, r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	0cdb      	lsrs	r3, r3, #19
 8006d3e:	2264      	movs	r2, #100	; 0x64
 8006d40:	fb02 f303 	mul.w	r3, r2, r3
 8006d44:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d105      	bne.n	8006d58 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	609a      	str	r2, [r3, #8]
      break;
 8006d56:	e008      	b.n	8006d6a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006d5e:	4b08      	ldr	r3, [pc, #32]	; (8006d80 <SUBGHZSPI_Transmit+0xa4>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d1ed      	bne.n	8006d46 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006d6a:	4b05      	ldr	r3, [pc, #20]	; (8006d80 <SUBGHZSPI_Transmit+0xa4>)
 8006d6c:	68db      	ldr	r3, [r3, #12]

  return status;
 8006d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	371c      	adds	r7, #28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bc80      	pop	{r7}
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	20000108 	.word	0x20000108
 8006d80:	58010000 	.word	0x58010000
 8006d84:	5801000c 	.word	0x5801000c

08006d88 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006d96:	4b25      	ldr	r3, [pc, #148]	; (8006e2c <SUBGHZSPI_Receive+0xa4>)
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	00db      	lsls	r3, r3, #3
 8006d9e:	1a9b      	subs	r3, r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	0cdb      	lsrs	r3, r3, #19
 8006da4:	2264      	movs	r2, #100	; 0x64
 8006da6:	fb02 f303 	mul.w	r3, r2, r3
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d105      	bne.n	8006dbe <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	609a      	str	r2, [r3, #8]
      break;
 8006dbc:	e008      	b.n	8006dd0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006dc4:	4b1a      	ldr	r3, [pc, #104]	; (8006e30 <SUBGHZSPI_Receive+0xa8>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d1ed      	bne.n	8006dac <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006dd0:	4b18      	ldr	r3, [pc, #96]	; (8006e34 <SUBGHZSPI_Receive+0xac>)
 8006dd2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	22ff      	movs	r2, #255	; 0xff
 8006dd8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006dda:	4b14      	ldr	r3, [pc, #80]	; (8006e2c <SUBGHZSPI_Receive+0xa4>)
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4613      	mov	r3, r2
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	1a9b      	subs	r3, r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	0cdb      	lsrs	r3, r3, #19
 8006de8:	2264      	movs	r2, #100	; 0x64
 8006dea:	fb02 f303 	mul.w	r3, r2, r3
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d105      	bne.n	8006e02 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	609a      	str	r2, [r3, #8]
      break;
 8006e00:	e008      	b.n	8006e14 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006e08:	4b09      	ldr	r3, [pc, #36]	; (8006e30 <SUBGHZSPI_Receive+0xa8>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d1ed      	bne.n	8006df0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006e14:	4b06      	ldr	r3, [pc, #24]	; (8006e30 <SUBGHZSPI_Receive+0xa8>)
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	701a      	strb	r2, [r3, #0]

  return status;
 8006e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	371c      	adds	r7, #28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	20000108 	.word	0x20000108
 8006e30:	58010000 	.word	0x58010000
 8006e34:	5801000c 	.word	0x5801000c

08006e38 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	791b      	ldrb	r3, [r3, #4]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d111      	bne.n	8006e6c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006e48:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <SUBGHZ_CheckDeviceReady+0x44>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	4413      	add	r3, r2
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	0c1b      	lsrs	r3, r3, #16
 8006e56:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006e58:	f7ff fba0 	bl	800659c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1f9      	bne.n	8006e5c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006e68:	f7ff fb88 	bl	800657c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f807 	bl	8006e80 <SUBGHZ_WaitOnBusy>
 8006e72:	4603      	mov	r3, r0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	20000108 	.word	0x20000108

08006e80 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006e8c:	4b12      	ldr	r3, [pc, #72]	; (8006ed8 <SUBGHZ_WaitOnBusy+0x58>)
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	4613      	mov	r3, r2
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	4413      	add	r3, r2
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	0d1b      	lsrs	r3, r3, #20
 8006e9a:	2264      	movs	r2, #100	; 0x64
 8006e9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8006ea2:	f7ff fba9 	bl	80065f8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8006ea6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d105      	bne.n	8006eba <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	609a      	str	r2, [r3, #8]
      break;
 8006eb8:	e009      	b.n	8006ece <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006ec0:	f7ff fb88 	bl	80065d4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	4013      	ands	r3, r2
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d0e9      	beq.n	8006ea2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	20000108 	.word	0x20000108

08006edc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e049      	b.n	8006f82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d106      	bne.n	8006f08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f841 	bl	8006f8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	3304      	adds	r3, #4
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	f000 f9ce 	bl	80072bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr

08006f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d001      	beq.n	8006fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e036      	b.n	8007022 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0201 	orr.w	r2, r2, #1
 8006fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a16      	ldr	r2, [pc, #88]	; (800702c <HAL_TIM_Base_Start_IT+0x90>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d004      	beq.n	8006fe0 <HAL_TIM_Base_Start_IT+0x44>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fde:	d115      	bne.n	800700c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	4b12      	ldr	r3, [pc, #72]	; (8007030 <HAL_TIM_Base_Start_IT+0x94>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2b06      	cmp	r3, #6
 8006ff0:	d015      	beq.n	800701e <HAL_TIM_Base_Start_IT+0x82>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff8:	d011      	beq.n	800701e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0201 	orr.w	r2, r2, #1
 8007008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700a:	e008      	b.n	800701e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0201 	orr.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	e000      	b.n	8007020 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	bc80      	pop	{r7}
 800702a:	4770      	bx	lr
 800702c:	40012c00 	.word	0x40012c00
 8007030:	00010007 	.word	0x00010007

08007034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b02      	cmp	r3, #2
 8007048:	d122      	bne.n	8007090 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b02      	cmp	r3, #2
 8007056:	d11b      	bne.n	8007090 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f06f 0202 	mvn.w	r2, #2
 8007060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	f003 0303 	and.w	r3, r3, #3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f904 	bl	8007284 <HAL_TIM_IC_CaptureCallback>
 800707c:	e005      	b.n	800708a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f8f7 	bl	8007272 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f906 	bl	8007296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	f003 0304 	and.w	r3, r3, #4
 800709a:	2b04      	cmp	r3, #4
 800709c:	d122      	bne.n	80070e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d11b      	bne.n	80070e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f06f 0204 	mvn.w	r2, #4
 80070b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2202      	movs	r2, #2
 80070ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	699b      	ldr	r3, [r3, #24]
 80070c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f8da 	bl	8007284 <HAL_TIM_IC_CaptureCallback>
 80070d0:	e005      	b.n	80070de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f8cd 	bl	8007272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f8dc 	bl	8007296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b08      	cmp	r3, #8
 80070f0:	d122      	bne.n	8007138 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f003 0308 	and.w	r3, r3, #8
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d11b      	bne.n	8007138 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f06f 0208 	mvn.w	r2, #8
 8007108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2204      	movs	r2, #4
 800710e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f8b0 	bl	8007284 <HAL_TIM_IC_CaptureCallback>
 8007124:	e005      	b.n	8007132 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f8a3 	bl	8007272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f8b2 	bl	8007296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	f003 0310 	and.w	r3, r3, #16
 8007142:	2b10      	cmp	r3, #16
 8007144:	d122      	bne.n	800718c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f003 0310 	and.w	r3, r3, #16
 8007150:	2b10      	cmp	r3, #16
 8007152:	d11b      	bne.n	800718c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f06f 0210 	mvn.w	r2, #16
 800715c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2208      	movs	r2, #8
 8007162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f886 	bl	8007284 <HAL_TIM_IC_CaptureCallback>
 8007178:	e005      	b.n	8007186 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f879 	bl	8007272 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f888 	bl	8007296 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b01      	cmp	r3, #1
 8007198:	d10e      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d107      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f06f 0201 	mvn.w	r2, #1
 80071b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7f9 fe8e 	bl	8000ed4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c2:	2b80      	cmp	r3, #128	; 0x80
 80071c4:	d10e      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d0:	2b80      	cmp	r3, #128	; 0x80
 80071d2:	d107      	bne.n	80071e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f8d7 	bl	8007392 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f2:	d10e      	bne.n	8007212 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fe:	2b80      	cmp	r3, #128	; 0x80
 8007200:	d107      	bne.n	8007212 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800720a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f8c9 	bl	80073a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721c:	2b40      	cmp	r3, #64	; 0x40
 800721e:	d10e      	bne.n	800723e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722a:	2b40      	cmp	r3, #64	; 0x40
 800722c:	d107      	bne.n	800723e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f835 	bl	80072a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	f003 0320 	and.w	r3, r3, #32
 8007248:	2b20      	cmp	r3, #32
 800724a:	d10e      	bne.n	800726a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	f003 0320 	and.w	r3, r3, #32
 8007256:	2b20      	cmp	r3, #32
 8007258:	d107      	bne.n	800726a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f06f 0220 	mvn.w	r2, #32
 8007262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f88b 	bl	8007380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800726a:	bf00      	nop
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800727a:	bf00      	nop
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	bc80      	pop	{r7}
 8007282:	4770      	bx	lr

08007284 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	bc80      	pop	{r7}
 8007294:	4770      	bx	lr

08007296 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007296:	b480      	push	{r7}
 8007298:	b083      	sub	sp, #12
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800729e:	bf00      	nop
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr

080072a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bc80      	pop	{r7}
 80072b8:	4770      	bx	lr
	...

080072bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072bc:	b480      	push	{r7}
 80072be:	b085      	sub	sp, #20
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a29      	ldr	r2, [pc, #164]	; (8007374 <TIM_Base_SetConfig+0xb8>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d003      	beq.n	80072dc <TIM_Base_SetConfig+0x20>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072da:	d108      	bne.n	80072ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a20      	ldr	r2, [pc, #128]	; (8007374 <TIM_Base_SetConfig+0xb8>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00b      	beq.n	800730e <TIM_Base_SetConfig+0x52>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072fc:	d007      	beq.n	800730e <TIM_Base_SetConfig+0x52>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a1d      	ldr	r2, [pc, #116]	; (8007378 <TIM_Base_SetConfig+0xbc>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d003      	beq.n	800730e <TIM_Base_SetConfig+0x52>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a1c      	ldr	r2, [pc, #112]	; (800737c <TIM_Base_SetConfig+0xc0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d108      	bne.n	8007320 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	4313      	orrs	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	689a      	ldr	r2, [r3, #8]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a0b      	ldr	r2, [pc, #44]	; (8007374 <TIM_Base_SetConfig+0xb8>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d007      	beq.n	800735c <TIM_Base_SetConfig+0xa0>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a0a      	ldr	r2, [pc, #40]	; (8007378 <TIM_Base_SetConfig+0xbc>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d003      	beq.n	800735c <TIM_Base_SetConfig+0xa0>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a09      	ldr	r2, [pc, #36]	; (800737c <TIM_Base_SetConfig+0xc0>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d103      	bne.n	8007364 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	615a      	str	r2, [r3, #20]
}
 800736a:	bf00      	nop
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	bc80      	pop	{r7}
 8007372:	4770      	bx	lr
 8007374:	40012c00 	.word	0x40012c00
 8007378:	40014400 	.word	0x40014400
 800737c:	40014800 	.word	0x40014800

08007380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	bc80      	pop	{r7}
 8007390:	4770      	bx	lr

08007392 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800739a:	bf00      	nop
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	bc80      	pop	{r7}
 80073a2:	4770      	bx	lr

080073a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bc80      	pop	{r7}
 80073b4:	4770      	bx	lr

080073b6 <LL_RCC_GetUSARTClockSource>:
{
 80073b6:	b480      	push	{r7}
 80073b8:	b083      	sub	sp, #12
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80073be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	401a      	ands	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	041b      	lsls	r3, r3, #16
 80073ce:	4313      	orrs	r3, r2
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc80      	pop	{r7}
 80073d8:	4770      	bx	lr

080073da <LL_RCC_GetLPUARTClockSource>:
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80073e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4013      	ands	r3, r2
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bc80      	pop	{r7}
 80073f6:	4770      	bx	lr

080073f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e042      	b.n	8007490 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007410:	2b00      	cmp	r3, #0
 8007412:	d106      	bne.n	8007422 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7fa faf7 	bl	8001a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2224      	movs	r2, #36	; 0x24
 8007426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0201 	bic.w	r2, r2, #1
 8007438:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 fbfa 	bl	8007c34 <UART_SetConfig>
 8007440:	4603      	mov	r3, r0
 8007442:	2b01      	cmp	r3, #1
 8007444:	d101      	bne.n	800744a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e022      	b.n	8007490 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fe62 	bl	800811c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007466:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	689a      	ldr	r2, [r3, #8]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007476:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f042 0201 	orr.w	r2, r2, #1
 8007486:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fee8 	bl	800825e <UART_CheckIdleState>
 800748e:	4603      	mov	r3, r0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08a      	sub	sp, #40	; 0x28
 800749c:	af02      	add	r7, sp, #8
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	603b      	str	r3, [r7, #0]
 80074a4:	4613      	mov	r3, r2
 80074a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ae:	2b20      	cmp	r3, #32
 80074b0:	d173      	bne.n	800759a <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <HAL_UART_Transmit+0x26>
 80074b8:	88fb      	ldrh	r3, [r7, #6]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e06c      	b.n	800759c <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2221      	movs	r2, #33	; 0x21
 80074ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074d2:	f7fb fcc3 	bl	8002e5c <HAL_GetTick>
 80074d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	88fa      	ldrh	r2, [r7, #6]
 80074dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	88fa      	ldrh	r2, [r7, #6]
 80074e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f0:	d108      	bne.n	8007504 <HAL_UART_Transmit+0x6c>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d104      	bne.n	8007504 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	61bb      	str	r3, [r7, #24]
 8007502:	e003      	b.n	800750c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007508:	2300      	movs	r3, #0
 800750a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800750c:	e02c      	b.n	8007568 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2200      	movs	r2, #0
 8007516:	2180      	movs	r1, #128	; 0x80
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f000 feee 	bl	80082fa <UART_WaitOnFlagUntilTimeout>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e039      	b.n	800759c <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10b      	bne.n	8007546 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800753c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	3302      	adds	r3, #2
 8007542:	61bb      	str	r3, [r7, #24]
 8007544:	e007      	b.n	8007556 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	781a      	ldrb	r2, [r3, #0]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	3301      	adds	r3, #1
 8007554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800755c:	b29b      	uxth	r3, r3
 800755e:	3b01      	subs	r3, #1
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800756e:	b29b      	uxth	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1cc      	bne.n	800750e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	2200      	movs	r2, #0
 800757c:	2140      	movs	r1, #64	; 0x40
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 febb 	bl	80082fa <UART_WaitOnFlagUntilTimeout>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e006      	b.n	800759c <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2220      	movs	r2, #32
 8007592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	e000      	b.n	800759c <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800759a:	2302      	movs	r3, #2
  }
}
 800759c:	4618      	mov	r0, r3
 800759e:	3720      	adds	r7, #32
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b0ba      	sub	sp, #232	; 0xe8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80075ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80075d2:	4013      	ands	r3, r2
 80075d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80075d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d11b      	bne.n	8007618 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e4:	f003 0320 	and.w	r3, r3, #32
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d015      	beq.n	8007618 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f0:	f003 0320 	and.w	r3, r3, #32
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d105      	bne.n	8007604 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d009      	beq.n	8007618 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 82e3 	beq.w	8007bd4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	4798      	blx	r3
      }
      return;
 8007616:	e2dd      	b.n	8007bd4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 8123 	beq.w	8007868 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007622:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007626:	4b8d      	ldr	r3, [pc, #564]	; (800785c <HAL_UART_IRQHandler+0x2b8>)
 8007628:	4013      	ands	r3, r2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d106      	bne.n	800763c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800762e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007632:	4b8b      	ldr	r3, [pc, #556]	; (8007860 <HAL_UART_IRQHandler+0x2bc>)
 8007634:	4013      	ands	r3, r2
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 8116 	beq.w	8007868 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800763c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b00      	cmp	r3, #0
 8007646:	d011      	beq.n	800766c <HAL_UART_IRQHandler+0xc8>
 8007648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800764c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00b      	beq.n	800766c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2201      	movs	r2, #1
 800765a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007662:	f043 0201 	orr.w	r2, r3, #1
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800766c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d011      	beq.n	800769c <HAL_UART_IRQHandler+0xf8>
 8007678:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00b      	beq.n	800769c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2202      	movs	r2, #2
 800768a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007692:	f043 0204 	orr.w	r2, r3, #4
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800769c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a0:	f003 0304 	and.w	r3, r3, #4
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d011      	beq.n	80076cc <HAL_UART_IRQHandler+0x128>
 80076a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00b      	beq.n	80076cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2204      	movs	r2, #4
 80076ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c2:	f043 0202 	orr.w	r2, r3, #2
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d017      	beq.n	8007708 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076dc:	f003 0320 	and.w	r3, r3, #32
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d105      	bne.n	80076f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80076e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80076e8:	4b5c      	ldr	r3, [pc, #368]	; (800785c <HAL_UART_IRQHandler+0x2b8>)
 80076ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00b      	beq.n	8007708 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2208      	movs	r2, #8
 80076f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076fe:	f043 0208 	orr.w	r2, r3, #8
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800770c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007710:	2b00      	cmp	r3, #0
 8007712:	d012      	beq.n	800773a <HAL_UART_IRQHandler+0x196>
 8007714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00c      	beq.n	800773a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007728:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007730:	f043 0220 	orr.w	r2, r3, #32
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 8249 	beq.w	8007bd8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800774a:	f003 0320 	and.w	r3, r3, #32
 800774e:	2b00      	cmp	r3, #0
 8007750:	d013      	beq.n	800777a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007756:	f003 0320 	and.w	r3, r3, #32
 800775a:	2b00      	cmp	r3, #0
 800775c:	d105      	bne.n	800776a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800775e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d007      	beq.n	800777a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007780:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778e:	2b40      	cmp	r3, #64	; 0x40
 8007790:	d005      	beq.n	800779e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007792:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007796:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800779a:	2b00      	cmp	r3, #0
 800779c:	d054      	beq.n	8007848 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 ff5a 	bl	8008658 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ae:	2b40      	cmp	r3, #64	; 0x40
 80077b0:	d146      	bne.n	8007840 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3308      	adds	r3, #8
 80077b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80077c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3308      	adds	r3, #8
 80077da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077ee:	e841 2300 	strex	r3, r2, [r1]
 80077f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1d9      	bne.n	80077b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007804:	2b00      	cmp	r3, #0
 8007806:	d017      	beq.n	8007838 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800780e:	4a15      	ldr	r2, [pc, #84]	; (8007864 <HAL_UART_IRQHandler+0x2c0>)
 8007810:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007818:	4618      	mov	r0, r3
 800781a:	f7fc ff97 	bl	800474c <HAL_DMA_Abort_IT>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d019      	beq.n	8007858 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007832:	4610      	mov	r0, r2
 8007834:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007836:	e00f      	b.n	8007858 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f9f2 	bl	8007c22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800783e:	e00b      	b.n	8007858 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f9ee 	bl	8007c22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007846:	e007      	b.n	8007858 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f9ea 	bl	8007c22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007856:	e1bf      	b.n	8007bd8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007858:	bf00      	nop
    return;
 800785a:	e1bd      	b.n	8007bd8 <HAL_UART_IRQHandler+0x634>
 800785c:	10000001 	.word	0x10000001
 8007860:	04000120 	.word	0x04000120
 8007864:	0800890d 	.word	0x0800890d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800786c:	2b01      	cmp	r3, #1
 800786e:	f040 8153 	bne.w	8007b18 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007876:	f003 0310 	and.w	r3, r3, #16
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 814c 	beq.w	8007b18 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007884:	f003 0310 	and.w	r3, r3, #16
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 8145 	beq.w	8007b18 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2210      	movs	r2, #16
 8007894:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a0:	2b40      	cmp	r3, #64	; 0x40
 80078a2:	f040 80bb 	bne.w	8007a1c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 818f 	beq.w	8007bdc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078c8:	429a      	cmp	r2, r3
 80078ca:	f080 8187 	bcs.w	8007bdc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0320 	and.w	r3, r3, #32
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f040 8087 	bne.w	80079fa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007900:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007908:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	461a      	mov	r2, r3
 8007912:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007916:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800791a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007922:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800792e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1da      	bne.n	80078ec <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3308      	adds	r3, #8
 800793c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007948:	f023 0301 	bic.w	r3, r3, #1
 800794c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3308      	adds	r3, #8
 8007956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800795a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800795e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007960:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007962:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007966:	e841 2300 	strex	r3, r2, [r1]
 800796a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800796c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1e1      	bne.n	8007936 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3308      	adds	r3, #8
 8007978:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800797c:	e853 3f00 	ldrex	r3, [r3]
 8007980:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3308      	adds	r3, #8
 8007992:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007996:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007998:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800799c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800799e:	e841 2300 	strex	r3, r2, [r1]
 80079a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80079a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1e3      	bne.n	8007972 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2220      	movs	r2, #32
 80079ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079c8:	f023 0310 	bic.w	r3, r3, #16
 80079cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	461a      	mov	r2, r3
 80079d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079da:	65bb      	str	r3, [r7, #88]	; 0x58
 80079dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079e2:	e841 2300 	strex	r3, r2, [r1]
 80079e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1e4      	bne.n	80079b8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fc fe4b 	bl	8004690 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2202      	movs	r2, #2
 80079fe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7fa f87f 	bl	8001b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a1a:	e0df      	b.n	8007bdc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 80d1 	beq.w	8007be0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007a3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 80cc 	beq.w	8007be0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a50:	e853 3f00 	ldrex	r3, [r3]
 8007a54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	461a      	mov	r2, r3
 8007a66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a72:	e841 2300 	strex	r3, r2, [r1]
 8007a76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1e4      	bne.n	8007a48 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3308      	adds	r3, #8
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	623b      	str	r3, [r7, #32]
   return(result);
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a94:	f023 0301 	bic.w	r3, r3, #1
 8007a98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007aa6:	633a      	str	r2, [r7, #48]	; 0x30
 8007aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e1      	bne.n	8007a7e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0310 	bic.w	r3, r3, #16
 8007ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007af0:	61fb      	str	r3, [r7, #28]
 8007af2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	69b9      	ldr	r1, [r7, #24]
 8007af6:	69fa      	ldr	r2, [r7, #28]
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	617b      	str	r3, [r7, #20]
   return(result);
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e4      	bne.n	8007ace <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7fa f801 	bl	8001b18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b16:	e063      	b.n	8007be0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00e      	beq.n	8007b42 <HAL_UART_IRQHandler+0x59e>
 8007b24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d008      	beq.n	8007b42 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 ff27 	bl	800898e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b40:	e051      	b.n	8007be6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d014      	beq.n	8007b78 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d105      	bne.n	8007b66 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d008      	beq.n	8007b78 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d03a      	beq.n	8007be4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	4798      	blx	r3
    }
    return;
 8007b76:	e035      	b.n	8007be4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d009      	beq.n	8007b98 <HAL_UART_IRQHandler+0x5f4>
 8007b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d003      	beq.n	8007b98 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fed1 	bl	8008938 <UART_EndTransmit_IT>
    return;
 8007b96:	e026      	b.n	8007be6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d009      	beq.n	8007bb8 <HAL_UART_IRQHandler+0x614>
 8007ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ba8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d003      	beq.n	8007bb8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fefe 	bl	80089b2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bb6:	e016      	b.n	8007be6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d010      	beq.n	8007be6 <HAL_UART_IRQHandler+0x642>
 8007bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	da0c      	bge.n	8007be6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fee7 	bl	80089a0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bd2:	e008      	b.n	8007be6 <HAL_UART_IRQHandler+0x642>
      return;
 8007bd4:	bf00      	nop
 8007bd6:	e006      	b.n	8007be6 <HAL_UART_IRQHandler+0x642>
    return;
 8007bd8:	bf00      	nop
 8007bda:	e004      	b.n	8007be6 <HAL_UART_IRQHandler+0x642>
      return;
 8007bdc:	bf00      	nop
 8007bde:	e002      	b.n	8007be6 <HAL_UART_IRQHandler+0x642>
      return;
 8007be0:	bf00      	nop
 8007be2:	e000      	b.n	8007be6 <HAL_UART_IRQHandler+0x642>
    return;
 8007be4:	bf00      	nop
  }
}
 8007be6:	37e8      	adds	r7, #232	; 0xe8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bc80      	pop	{r7}
 8007bfc:	4770      	bx	lr

08007bfe <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b083      	sub	sp, #12
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bc80      	pop	{r7}
 8007c0e:	4770      	bx	lr

08007c10 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bc80      	pop	{r7}
 8007c20:	4770      	bx	lr

08007c22 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b083      	sub	sp, #12
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c2a:	bf00      	nop
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bc80      	pop	{r7}
 8007c32:	4770      	bx	lr

08007c34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c38:	b08c      	sub	sp, #48	; 0x30
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	431a      	orrs	r2, r3
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	4b94      	ldr	r3, [pc, #592]	; (8007eb4 <UART_SetConfig+0x280>)
 8007c64:	4013      	ands	r3, r2
 8007c66:	697a      	ldr	r2, [r7, #20]
 8007c68:	6812      	ldr	r2, [r2, #0]
 8007c6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c6c:	430b      	orrs	r3, r1
 8007c6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	430a      	orrs	r2, r1
 8007c84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a89      	ldr	r2, [pc, #548]	; (8007eb8 <UART_SetConfig+0x284>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d004      	beq.n	8007ca0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007caa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	6812      	ldr	r2, [r2, #0]
 8007cb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbe:	f023 010f 	bic.w	r1, r3, #15
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a7a      	ldr	r2, [pc, #488]	; (8007ebc <UART_SetConfig+0x288>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d127      	bne.n	8007d28 <UART_SetConfig+0xf4>
 8007cd8:	2003      	movs	r0, #3
 8007cda:	f7ff fb6c 	bl	80073b6 <LL_RCC_GetUSARTClockSource>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d81b      	bhi.n	8007d20 <UART_SetConfig+0xec>
 8007ce8:	a201      	add	r2, pc, #4	; (adr r2, 8007cf0 <UART_SetConfig+0xbc>)
 8007cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cee:	bf00      	nop
 8007cf0:	08007d01 	.word	0x08007d01
 8007cf4:	08007d11 	.word	0x08007d11
 8007cf8:	08007d09 	.word	0x08007d09
 8007cfc:	08007d19 	.word	0x08007d19
 8007d00:	2301      	movs	r3, #1
 8007d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d06:	e080      	b.n	8007e0a <UART_SetConfig+0x1d6>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d0e:	e07c      	b.n	8007e0a <UART_SetConfig+0x1d6>
 8007d10:	2304      	movs	r3, #4
 8007d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d16:	e078      	b.n	8007e0a <UART_SetConfig+0x1d6>
 8007d18:	2308      	movs	r3, #8
 8007d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d1e:	e074      	b.n	8007e0a <UART_SetConfig+0x1d6>
 8007d20:	2310      	movs	r3, #16
 8007d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d26:	e070      	b.n	8007e0a <UART_SetConfig+0x1d6>
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a64      	ldr	r2, [pc, #400]	; (8007ec0 <UART_SetConfig+0x28c>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d138      	bne.n	8007da4 <UART_SetConfig+0x170>
 8007d32:	200c      	movs	r0, #12
 8007d34:	f7ff fb3f 	bl	80073b6 <LL_RCC_GetUSARTClockSource>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8007d3e:	2b0c      	cmp	r3, #12
 8007d40:	d82c      	bhi.n	8007d9c <UART_SetConfig+0x168>
 8007d42:	a201      	add	r2, pc, #4	; (adr r2, 8007d48 <UART_SetConfig+0x114>)
 8007d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d48:	08007d7d 	.word	0x08007d7d
 8007d4c:	08007d9d 	.word	0x08007d9d
 8007d50:	08007d9d 	.word	0x08007d9d
 8007d54:	08007d9d 	.word	0x08007d9d
 8007d58:	08007d8d 	.word	0x08007d8d
 8007d5c:	08007d9d 	.word	0x08007d9d
 8007d60:	08007d9d 	.word	0x08007d9d
 8007d64:	08007d9d 	.word	0x08007d9d
 8007d68:	08007d85 	.word	0x08007d85
 8007d6c:	08007d9d 	.word	0x08007d9d
 8007d70:	08007d9d 	.word	0x08007d9d
 8007d74:	08007d9d 	.word	0x08007d9d
 8007d78:	08007d95 	.word	0x08007d95
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d82:	e042      	b.n	8007e0a <UART_SetConfig+0x1d6>
 8007d84:	2302      	movs	r3, #2
 8007d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d8a:	e03e      	b.n	8007e0a <UART_SetConfig+0x1d6>
 8007d8c:	2304      	movs	r3, #4
 8007d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d92:	e03a      	b.n	8007e0a <UART_SetConfig+0x1d6>
 8007d94:	2308      	movs	r3, #8
 8007d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d9a:	e036      	b.n	8007e0a <UART_SetConfig+0x1d6>
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007da2:	e032      	b.n	8007e0a <UART_SetConfig+0x1d6>
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a43      	ldr	r2, [pc, #268]	; (8007eb8 <UART_SetConfig+0x284>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d12a      	bne.n	8007e04 <UART_SetConfig+0x1d0>
 8007dae:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007db2:	f7ff fb12 	bl	80073da <LL_RCC_GetLPUARTClockSource>
 8007db6:	4603      	mov	r3, r0
 8007db8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dbc:	d01a      	beq.n	8007df4 <UART_SetConfig+0x1c0>
 8007dbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007dc2:	d81b      	bhi.n	8007dfc <UART_SetConfig+0x1c8>
 8007dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dc8:	d00c      	beq.n	8007de4 <UART_SetConfig+0x1b0>
 8007dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dce:	d815      	bhi.n	8007dfc <UART_SetConfig+0x1c8>
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d003      	beq.n	8007ddc <UART_SetConfig+0x1a8>
 8007dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd8:	d008      	beq.n	8007dec <UART_SetConfig+0x1b8>
 8007dda:	e00f      	b.n	8007dfc <UART_SetConfig+0x1c8>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007de2:	e012      	b.n	8007e0a <UART_SetConfig+0x1d6>
 8007de4:	2302      	movs	r3, #2
 8007de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dea:	e00e      	b.n	8007e0a <UART_SetConfig+0x1d6>
 8007dec:	2304      	movs	r3, #4
 8007dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007df2:	e00a      	b.n	8007e0a <UART_SetConfig+0x1d6>
 8007df4:	2308      	movs	r3, #8
 8007df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dfa:	e006      	b.n	8007e0a <UART_SetConfig+0x1d6>
 8007dfc:	2310      	movs	r3, #16
 8007dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e02:	e002      	b.n	8007e0a <UART_SetConfig+0x1d6>
 8007e04:	2310      	movs	r3, #16
 8007e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a2a      	ldr	r2, [pc, #168]	; (8007eb8 <UART_SetConfig+0x284>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	f040 80a4 	bne.w	8007f5e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e1a:	2b08      	cmp	r3, #8
 8007e1c:	d823      	bhi.n	8007e66 <UART_SetConfig+0x232>
 8007e1e:	a201      	add	r2, pc, #4	; (adr r2, 8007e24 <UART_SetConfig+0x1f0>)
 8007e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e24:	08007e49 	.word	0x08007e49
 8007e28:	08007e67 	.word	0x08007e67
 8007e2c:	08007e51 	.word	0x08007e51
 8007e30:	08007e67 	.word	0x08007e67
 8007e34:	08007e57 	.word	0x08007e57
 8007e38:	08007e67 	.word	0x08007e67
 8007e3c:	08007e67 	.word	0x08007e67
 8007e40:	08007e67 	.word	0x08007e67
 8007e44:	08007e5f 	.word	0x08007e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e48:	f7fe f858 	bl	8005efc <HAL_RCC_GetPCLK1Freq>
 8007e4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e4e:	e010      	b.n	8007e72 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e50:	4b1c      	ldr	r3, [pc, #112]	; (8007ec4 <UART_SetConfig+0x290>)
 8007e52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e54:	e00d      	b.n	8007e72 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e56:	f7fd ff9d 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8007e5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e5c:	e009      	b.n	8007e72 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e64:	e005      	b.n	8007e72 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 8137 	beq.w	80080e8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	4a12      	ldr	r2, [pc, #72]	; (8007ec8 <UART_SetConfig+0x294>)
 8007e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e84:	461a      	mov	r2, r3
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	4613      	mov	r3, r2
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	4413      	add	r3, r2
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d305      	bcc.n	8007eaa <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d910      	bls.n	8007ecc <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007eb0:	e11a      	b.n	80080e8 <UART_SetConfig+0x4b4>
 8007eb2:	bf00      	nop
 8007eb4:	cfff69f3 	.word	0xcfff69f3
 8007eb8:	40008000 	.word	0x40008000
 8007ebc:	40013800 	.word	0x40013800
 8007ec0:	40004400 	.word	0x40004400
 8007ec4:	00f42400 	.word	0x00f42400
 8007ec8:	0800a398 	.word	0x0800a398
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	2200      	movs	r2, #0
 8007ed0:	60bb      	str	r3, [r7, #8]
 8007ed2:	60fa      	str	r2, [r7, #12]
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	4a8e      	ldr	r2, [pc, #568]	; (8008114 <UART_SetConfig+0x4e0>)
 8007eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	603b      	str	r3, [r7, #0]
 8007ee4:	607a      	str	r2, [r7, #4]
 8007ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007eee:	f7f8 f99f 	bl	8000230 <__aeabi_uldivmod>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4610      	mov	r0, r2
 8007ef8:	4619      	mov	r1, r3
 8007efa:	f04f 0200 	mov.w	r2, #0
 8007efe:	f04f 0300 	mov.w	r3, #0
 8007f02:	020b      	lsls	r3, r1, #8
 8007f04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f08:	0202      	lsls	r2, r0, #8
 8007f0a:	6979      	ldr	r1, [r7, #20]
 8007f0c:	6849      	ldr	r1, [r1, #4]
 8007f0e:	0849      	lsrs	r1, r1, #1
 8007f10:	2000      	movs	r0, #0
 8007f12:	460c      	mov	r4, r1
 8007f14:	4605      	mov	r5, r0
 8007f16:	eb12 0804 	adds.w	r8, r2, r4
 8007f1a:	eb43 0905 	adc.w	r9, r3, r5
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	469a      	mov	sl, r3
 8007f26:	4693      	mov	fp, r2
 8007f28:	4652      	mov	r2, sl
 8007f2a:	465b      	mov	r3, fp
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	4649      	mov	r1, r9
 8007f30:	f7f8 f97e 	bl	8000230 <__aeabi_uldivmod>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	4613      	mov	r3, r2
 8007f3a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f3c:	6a3b      	ldr	r3, [r7, #32]
 8007f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f42:	d308      	bcc.n	8007f56 <UART_SetConfig+0x322>
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f4a:	d204      	bcs.n	8007f56 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6a3a      	ldr	r2, [r7, #32]
 8007f52:	60da      	str	r2, [r3, #12]
 8007f54:	e0c8      	b.n	80080e8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f5c:	e0c4      	b.n	80080e8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f66:	d167      	bne.n	8008038 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8007f68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f6c:	2b08      	cmp	r3, #8
 8007f6e:	d828      	bhi.n	8007fc2 <UART_SetConfig+0x38e>
 8007f70:	a201      	add	r2, pc, #4	; (adr r2, 8007f78 <UART_SetConfig+0x344>)
 8007f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f76:	bf00      	nop
 8007f78:	08007f9d 	.word	0x08007f9d
 8007f7c:	08007fa5 	.word	0x08007fa5
 8007f80:	08007fad 	.word	0x08007fad
 8007f84:	08007fc3 	.word	0x08007fc3
 8007f88:	08007fb3 	.word	0x08007fb3
 8007f8c:	08007fc3 	.word	0x08007fc3
 8007f90:	08007fc3 	.word	0x08007fc3
 8007f94:	08007fc3 	.word	0x08007fc3
 8007f98:	08007fbb 	.word	0x08007fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f9c:	f7fd ffae 	bl	8005efc <HAL_RCC_GetPCLK1Freq>
 8007fa0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fa2:	e014      	b.n	8007fce <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fa4:	f7fd ffbc 	bl	8005f20 <HAL_RCC_GetPCLK2Freq>
 8007fa8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007faa:	e010      	b.n	8007fce <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fac:	4b5a      	ldr	r3, [pc, #360]	; (8008118 <UART_SetConfig+0x4e4>)
 8007fae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fb0:	e00d      	b.n	8007fce <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fb2:	f7fd feef 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8007fb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fb8:	e009      	b.n	8007fce <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fc0:	e005      	b.n	8007fce <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007fcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 8089 	beq.w	80080e8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fda:	4a4e      	ldr	r2, [pc, #312]	; (8008114 <UART_SetConfig+0x4e0>)
 8007fdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fe8:	005a      	lsls	r2, r3, #1
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	085b      	lsrs	r3, r3, #1
 8007ff0:	441a      	add	r2, r3
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ffa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ffc:	6a3b      	ldr	r3, [r7, #32]
 8007ffe:	2b0f      	cmp	r3, #15
 8008000:	d916      	bls.n	8008030 <UART_SetConfig+0x3fc>
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008008:	d212      	bcs.n	8008030 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	b29b      	uxth	r3, r3
 800800e:	f023 030f 	bic.w	r3, r3, #15
 8008012:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	085b      	lsrs	r3, r3, #1
 8008018:	b29b      	uxth	r3, r3
 800801a:	f003 0307 	and.w	r3, r3, #7
 800801e:	b29a      	uxth	r2, r3
 8008020:	8bfb      	ldrh	r3, [r7, #30]
 8008022:	4313      	orrs	r3, r2
 8008024:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	8bfa      	ldrh	r2, [r7, #30]
 800802c:	60da      	str	r2, [r3, #12]
 800802e:	e05b      	b.n	80080e8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008036:	e057      	b.n	80080e8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008038:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800803c:	2b08      	cmp	r3, #8
 800803e:	d828      	bhi.n	8008092 <UART_SetConfig+0x45e>
 8008040:	a201      	add	r2, pc, #4	; (adr r2, 8008048 <UART_SetConfig+0x414>)
 8008042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008046:	bf00      	nop
 8008048:	0800806d 	.word	0x0800806d
 800804c:	08008075 	.word	0x08008075
 8008050:	0800807d 	.word	0x0800807d
 8008054:	08008093 	.word	0x08008093
 8008058:	08008083 	.word	0x08008083
 800805c:	08008093 	.word	0x08008093
 8008060:	08008093 	.word	0x08008093
 8008064:	08008093 	.word	0x08008093
 8008068:	0800808b 	.word	0x0800808b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800806c:	f7fd ff46 	bl	8005efc <HAL_RCC_GetPCLK1Freq>
 8008070:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008072:	e014      	b.n	800809e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008074:	f7fd ff54 	bl	8005f20 <HAL_RCC_GetPCLK2Freq>
 8008078:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800807a:	e010      	b.n	800809e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800807c:	4b26      	ldr	r3, [pc, #152]	; (8008118 <UART_SetConfig+0x4e4>)
 800807e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008080:	e00d      	b.n	800809e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008082:	f7fd fe87 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8008086:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008088:	e009      	b.n	800809e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800808a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800808e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008090:	e005      	b.n	800809e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008092:	2300      	movs	r3, #0
 8008094:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800809c:	bf00      	nop
    }

    if (pclk != 0U)
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d021      	beq.n	80080e8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	4a1a      	ldr	r2, [pc, #104]	; (8008114 <UART_SetConfig+0x4e0>)
 80080aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080ae:	461a      	mov	r2, r3
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	085b      	lsrs	r3, r3, #1
 80080bc:	441a      	add	r2, r3
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	2b0f      	cmp	r3, #15
 80080cc:	d909      	bls.n	80080e2 <UART_SetConfig+0x4ae>
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080d4:	d205      	bcs.n	80080e2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	b29a      	uxth	r2, r3
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60da      	str	r2, [r3, #12]
 80080e0:	e002      	b.n	80080e8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	2200      	movs	r2, #0
 80080fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2200      	movs	r2, #0
 8008102:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008104:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008108:	4618      	mov	r0, r3
 800810a:	3730      	adds	r7, #48	; 0x30
 800810c:	46bd      	mov	sp, r7
 800810e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008112:	bf00      	nop
 8008114:	0800a398 	.word	0x0800a398
 8008118:	00f42400 	.word	0x00f42400

0800811c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00a      	beq.n	8008146 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816c:	f003 0304 	and.w	r3, r3, #4
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00a      	beq.n	800818a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	430a      	orrs	r2, r1
 8008188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818e:	f003 0308 	and.w	r3, r3, #8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	430a      	orrs	r2, r1
 80081aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b0:	f003 0310 	and.w	r3, r3, #16
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00a      	beq.n	80081ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d2:	f003 0320 	and.w	r3, r3, #32
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d01a      	beq.n	8008232 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800821a:	d10a      	bne.n	8008232 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00a      	beq.n	8008254 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	430a      	orrs	r2, r1
 8008252:	605a      	str	r2, [r3, #4]
  }
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	bc80      	pop	{r7}
 800825c:	4770      	bx	lr

0800825e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b086      	sub	sp, #24
 8008262:	af02      	add	r7, sp, #8
 8008264:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800826e:	f7fa fdf5 	bl	8002e5c <HAL_GetTick>
 8008272:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0308 	and.w	r3, r3, #8
 800827e:	2b08      	cmp	r3, #8
 8008280:	d10e      	bne.n	80082a0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008282:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f832 	bl	80082fa <UART_WaitOnFlagUntilTimeout>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d001      	beq.n	80082a0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e028      	b.n	80082f2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	2b04      	cmp	r3, #4
 80082ac:	d10e      	bne.n	80082cc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f81c 	bl	80082fa <UART_WaitOnFlagUntilTimeout>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e012      	b.n	80082f2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b09c      	sub	sp, #112	; 0x70
 80082fe:	af00      	add	r7, sp, #0
 8008300:	60f8      	str	r0, [r7, #12]
 8008302:	60b9      	str	r1, [r7, #8]
 8008304:	603b      	str	r3, [r7, #0]
 8008306:	4613      	mov	r3, r2
 8008308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800830a:	e0a9      	b.n	8008460 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800830c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800830e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008312:	f000 80a5 	beq.w	8008460 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008316:	f7fa fda1 	bl	8002e5c <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008322:	429a      	cmp	r2, r3
 8008324:	d302      	bcc.n	800832c <UART_WaitOnFlagUntilTimeout+0x32>
 8008326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008328:	2b00      	cmp	r3, #0
 800832a:	d140      	bne.n	80083ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008334:	e853 3f00 	ldrex	r3, [r3]
 8008338:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800833a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800833c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008340:	667b      	str	r3, [r7, #100]	; 0x64
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	461a      	mov	r2, r3
 8008348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800834a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800834c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008350:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008352:	e841 2300 	strex	r3, r2, [r1]
 8008356:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1e6      	bne.n	800832c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3308      	adds	r3, #8
 8008364:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800836e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008370:	f023 0301 	bic.w	r3, r3, #1
 8008374:	663b      	str	r3, [r7, #96]	; 0x60
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	3308      	adds	r3, #8
 800837c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800837e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008380:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008386:	e841 2300 	strex	r3, r2, [r1]
 800838a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800838c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1e5      	bne.n	800835e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2220      	movs	r2, #32
 8008396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2220      	movs	r2, #32
 800839e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e069      	b.n	8008482 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0304 	and.w	r3, r3, #4
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d051      	beq.n	8008460 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	69db      	ldr	r3, [r3, #28]
 80083c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ca:	d149      	bne.n	8008460 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083de:	e853 3f00 	ldrex	r3, [r3]
 80083e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	461a      	mov	r2, r3
 80083f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f4:	637b      	str	r3, [r7, #52]	; 0x34
 80083f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083fc:	e841 2300 	strex	r3, r2, [r1]
 8008400:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e6      	bne.n	80083d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3308      	adds	r3, #8
 800840e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	e853 3f00 	ldrex	r3, [r3]
 8008416:	613b      	str	r3, [r7, #16]
   return(result);
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	f023 0301 	bic.w	r3, r3, #1
 800841e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	3308      	adds	r3, #8
 8008426:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008428:	623a      	str	r2, [r7, #32]
 800842a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842c:	69f9      	ldr	r1, [r7, #28]
 800842e:	6a3a      	ldr	r2, [r7, #32]
 8008430:	e841 2300 	strex	r3, r2, [r1]
 8008434:	61bb      	str	r3, [r7, #24]
   return(result);
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1e5      	bne.n	8008408 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2220      	movs	r2, #32
 8008440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2220      	movs	r2, #32
 8008448:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2220      	movs	r2, #32
 8008450:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e010      	b.n	8008482 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	69da      	ldr	r2, [r3, #28]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	4013      	ands	r3, r2
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	429a      	cmp	r2, r3
 800846e:	bf0c      	ite	eq
 8008470:	2301      	moveq	r3, #1
 8008472:	2300      	movne	r3, #0
 8008474:	b2db      	uxtb	r3, r3
 8008476:	461a      	mov	r2, r3
 8008478:	79fb      	ldrb	r3, [r7, #7]
 800847a:	429a      	cmp	r2, r3
 800847c:	f43f af46 	beq.w	800830c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3770      	adds	r7, #112	; 0x70
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b096      	sub	sp, #88	; 0x58
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	4613      	mov	r3, r2
 8008498:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	88fa      	ldrh	r2, [r7, #6]
 80084a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2222      	movs	r2, #34	; 0x22
 80084b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d02d      	beq.n	800851e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084c8:	4a40      	ldr	r2, [pc, #256]	; (80085cc <UART_Start_Receive_DMA+0x140>)
 80084ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084d2:	4a3f      	ldr	r2, [pc, #252]	; (80085d0 <UART_Start_Receive_DMA+0x144>)
 80084d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084dc:	4a3d      	ldr	r2, [pc, #244]	; (80085d4 <UART_Start_Receive_DMA+0x148>)
 80084de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084e6:	2200      	movs	r2, #0
 80084e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3324      	adds	r3, #36	; 0x24
 80084f6:	4619      	mov	r1, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084fc:	461a      	mov	r2, r3
 80084fe:	88fb      	ldrh	r3, [r7, #6]
 8008500:	f7fc f848 	bl	8004594 <HAL_DMA_Start_IT>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d009      	beq.n	800851e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2210      	movs	r2, #16
 800850e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2220      	movs	r2, #32
 8008516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e051      	b.n	80085c2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d018      	beq.n	8008558 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852e:	e853 3f00 	ldrex	r3, [r3]
 8008532:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800853a:	657b      	str	r3, [r7, #84]	; 0x54
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	461a      	mov	r2, r3
 8008542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008544:	64bb      	str	r3, [r7, #72]	; 0x48
 8008546:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008548:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800854a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800854c:	e841 2300 	strex	r3, r2, [r1]
 8008550:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1e6      	bne.n	8008526 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3308      	adds	r3, #8
 800855e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008562:	e853 3f00 	ldrex	r3, [r3]
 8008566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	f043 0301 	orr.w	r3, r3, #1
 800856e:	653b      	str	r3, [r7, #80]	; 0x50
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	3308      	adds	r3, #8
 8008576:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008578:	637a      	str	r2, [r7, #52]	; 0x34
 800857a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800857e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008580:	e841 2300 	strex	r3, r2, [r1]
 8008584:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1e5      	bne.n	8008558 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3308      	adds	r3, #8
 8008592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	e853 3f00 	ldrex	r3, [r3]
 800859a:	613b      	str	r3, [r7, #16]
   return(result);
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3308      	adds	r3, #8
 80085aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085ac:	623a      	str	r2, [r7, #32]
 80085ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b0:	69f9      	ldr	r1, [r7, #28]
 80085b2:	6a3a      	ldr	r2, [r7, #32]
 80085b4:	e841 2300 	strex	r3, r2, [r1]
 80085b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1e5      	bne.n	800858c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3758      	adds	r7, #88	; 0x58
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	08008723 	.word	0x08008723
 80085d0:	0800884f 	.word	0x0800884f
 80085d4:	0800888d 	.word	0x0800888d

080085d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80085d8:	b480      	push	{r7}
 80085da:	b08f      	sub	sp, #60	; 0x3c
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	e853 3f00 	ldrex	r3, [r3]
 80085ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085f4:	637b      	str	r3, [r7, #52]	; 0x34
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	461a      	mov	r2, r3
 80085fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008600:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008602:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008606:	e841 2300 	strex	r3, r2, [r1]
 800860a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1e6      	bne.n	80085e0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3308      	adds	r3, #8
 8008618:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	e853 3f00 	ldrex	r3, [r3]
 8008620:	60bb      	str	r3, [r7, #8]
   return(result);
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008628:	633b      	str	r3, [r7, #48]	; 0x30
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3308      	adds	r3, #8
 8008630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008632:	61ba      	str	r2, [r7, #24]
 8008634:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008636:	6979      	ldr	r1, [r7, #20]
 8008638:	69ba      	ldr	r2, [r7, #24]
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	613b      	str	r3, [r7, #16]
   return(result);
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1e5      	bne.n	8008612 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2220      	movs	r2, #32
 800864a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800864e:	bf00      	nop
 8008650:	373c      	adds	r7, #60	; 0x3c
 8008652:	46bd      	mov	sp, r7
 8008654:	bc80      	pop	{r7}
 8008656:	4770      	bx	lr

08008658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008658:	b480      	push	{r7}
 800865a:	b095      	sub	sp, #84	; 0x54
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800866e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008674:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800867e:	643b      	str	r3, [r7, #64]	; 0x40
 8008680:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008682:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008686:	e841 2300 	strex	r3, r2, [r1]
 800868a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800868c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1e6      	bne.n	8008660 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3308      	adds	r3, #8
 8008698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869a:	6a3b      	ldr	r3, [r7, #32]
 800869c:	e853 3f00 	ldrex	r3, [r3]
 80086a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086a8:	f023 0301 	bic.w	r3, r3, #1
 80086ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3308      	adds	r3, #8
 80086b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086be:	e841 2300 	strex	r3, r2, [r1]
 80086c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1e3      	bne.n	8008692 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d118      	bne.n	8008704 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	e853 3f00 	ldrex	r3, [r3]
 80086de:	60bb      	str	r3, [r7, #8]
   return(result);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	f023 0310 	bic.w	r3, r3, #16
 80086e6:	647b      	str	r3, [r7, #68]	; 0x44
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	461a      	mov	r2, r3
 80086ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086f0:	61bb      	str	r3, [r7, #24]
 80086f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f4:	6979      	ldr	r1, [r7, #20]
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	613b      	str	r3, [r7, #16]
   return(result);
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e6      	bne.n	80086d2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2220      	movs	r2, #32
 8008708:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008718:	bf00      	nop
 800871a:	3754      	adds	r7, #84	; 0x54
 800871c:	46bd      	mov	sp, r7
 800871e:	bc80      	pop	{r7}
 8008720:	4770      	bx	lr

08008722 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b09c      	sub	sp, #112	; 0x70
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0320 	and.w	r3, r3, #32
 800873a:	2b00      	cmp	r3, #0
 800873c:	d171      	bne.n	8008822 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800873e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008740:	2200      	movs	r2, #0
 8008742:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800874e:	e853 3f00 	ldrex	r3, [r3]
 8008752:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800875a:	66bb      	str	r3, [r7, #104]	; 0x68
 800875c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	461a      	mov	r2, r3
 8008762:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008764:	65bb      	str	r3, [r7, #88]	; 0x58
 8008766:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008768:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800876a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800876c:	e841 2300 	strex	r3, r2, [r1]
 8008770:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e6      	bne.n	8008746 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3308      	adds	r3, #8
 800877e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008782:	e853 3f00 	ldrex	r3, [r3]
 8008786:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878a:	f023 0301 	bic.w	r3, r3, #1
 800878e:	667b      	str	r3, [r7, #100]	; 0x64
 8008790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	3308      	adds	r3, #8
 8008796:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008798:	647a      	str	r2, [r7, #68]	; 0x44
 800879a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800879e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e5      	bne.n	8008778 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	3308      	adds	r3, #8
 80087b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	e853 3f00 	ldrex	r3, [r3]
 80087ba:	623b      	str	r3, [r7, #32]
   return(result);
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c2:	663b      	str	r3, [r7, #96]	; 0x60
 80087c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3308      	adds	r3, #8
 80087ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087cc:	633a      	str	r2, [r7, #48]	; 0x30
 80087ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087d4:	e841 2300 	strex	r3, r2, [r1]
 80087d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1e5      	bne.n	80087ac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e2:	2220      	movs	r2, #32
 80087e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d118      	bne.n	8008822 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	e853 3f00 	ldrex	r3, [r3]
 80087fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f023 0310 	bic.w	r3, r3, #16
 8008804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800880e:	61fb      	str	r3, [r7, #28]
 8008810:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	69b9      	ldr	r1, [r7, #24]
 8008814:	69fa      	ldr	r2, [r7, #28]
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	617b      	str	r3, [r7, #20]
   return(result);
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e6      	bne.n	80087f0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008824:	2200      	movs	r2, #0
 8008826:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800882a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800882c:	2b01      	cmp	r3, #1
 800882e:	d107      	bne.n	8008840 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008832:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008836:	4619      	mov	r1, r3
 8008838:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800883a:	f7f9 f96d 	bl	8001b18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800883e:	e002      	b.n	8008846 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008840:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008842:	f7ff f9dc 	bl	8007bfe <HAL_UART_RxCpltCallback>
}
 8008846:	bf00      	nop
 8008848:	3770      	adds	r7, #112	; 0x70
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b084      	sub	sp, #16
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2201      	movs	r2, #1
 8008860:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008866:	2b01      	cmp	r3, #1
 8008868:	d109      	bne.n	800887e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008870:	085b      	lsrs	r3, r3, #1
 8008872:	b29b      	uxth	r3, r3
 8008874:	4619      	mov	r1, r3
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f7f9 f94e 	bl	8001b18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800887c:	e002      	b.n	8008884 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f7ff f9c6 	bl	8007c10 <HAL_UART_RxHalfCpltCallback>
}
 8008884:	bf00      	nop
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008898:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b4:	2b80      	cmp	r3, #128	; 0x80
 80088b6:	d109      	bne.n	80088cc <UART_DMAError+0x40>
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	2b21      	cmp	r3, #33	; 0x21
 80088bc:	d106      	bne.n	80088cc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80088c6:	6978      	ldr	r0, [r7, #20]
 80088c8:	f7ff fe86 	bl	80085d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d6:	2b40      	cmp	r3, #64	; 0x40
 80088d8:	d109      	bne.n	80088ee <UART_DMAError+0x62>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2b22      	cmp	r3, #34	; 0x22
 80088de:	d106      	bne.n	80088ee <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80088e8:	6978      	ldr	r0, [r7, #20]
 80088ea:	f7ff feb5 	bl	8008658 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088f4:	f043 0210 	orr.w	r2, r3, #16
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088fe:	6978      	ldr	r0, [r7, #20]
 8008900:	f7ff f98f 	bl	8007c22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008904:	bf00      	nop
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008918:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f7ff f979 	bl	8007c22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008930:	bf00      	nop
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	60bb      	str	r3, [r7, #8]
   return(result);
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008954:	61fb      	str	r3, [r7, #28]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	61bb      	str	r3, [r7, #24]
 8008960:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008962:	6979      	ldr	r1, [r7, #20]
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	e841 2300 	strex	r3, r2, [r1]
 800896a:	613b      	str	r3, [r7, #16]
   return(result);
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1e6      	bne.n	8008940 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2220      	movs	r2, #32
 8008976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f7ff f933 	bl	8007bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008986:	bf00      	nop
 8008988:	3720      	adds	r7, #32
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800898e:	b480      	push	{r7}
 8008990:	b083      	sub	sp, #12
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008996:	bf00      	nop
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	bc80      	pop	{r7}
 800899e:	4770      	bx	lr

080089a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bc80      	pop	{r7}
 80089b0:	4770      	bx	lr

080089b2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b083      	sub	sp, #12
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80089ba:	bf00      	nop
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	bc80      	pop	{r7}
 80089c2:	4770      	bx	lr

080089c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d101      	bne.n	80089da <HAL_UARTEx_DisableFifoMode+0x16>
 80089d6:	2302      	movs	r3, #2
 80089d8:	e027      	b.n	8008a2a <HAL_UARTEx_DisableFifoMode+0x66>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2224      	movs	r2, #36	; 0x24
 80089e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f022 0201 	bic.w	r2, r2, #1
 8008a00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bc80      	pop	{r7}
 8008a32:	4770      	bx	lr

08008a34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d101      	bne.n	8008a4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a48:	2302      	movs	r3, #2
 8008a4a:	e02d      	b.n	8008aa8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2224      	movs	r2, #36	; 0x24
 8008a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0201 	bic.w	r2, r2, #1
 8008a72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	430a      	orrs	r2, r1
 8008a86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 f8a3 	bl	8008bd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d101      	bne.n	8008ac8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ac4:	2302      	movs	r3, #2
 8008ac6:	e02d      	b.n	8008b24 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2224      	movs	r2, #36	; 0x24
 8008ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f022 0201 	bic.w	r2, r2, #1
 8008aee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	430a      	orrs	r2, r1
 8008b02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f865 	bl	8008bd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2220      	movs	r2, #32
 8008b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b08c      	sub	sp, #48	; 0x30
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	4613      	mov	r3, r2
 8008b38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b40:	2b20      	cmp	r3, #32
 8008b42:	d142      	bne.n	8008bca <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d002      	beq.n	8008b50 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008b4a:	88fb      	ldrh	r3, [r7, #6]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d101      	bne.n	8008b54 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e03b      	b.n	8008bcc <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2201      	movs	r2, #1
 8008b58:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008b60:	88fb      	ldrh	r3, [r7, #6]
 8008b62:	461a      	mov	r2, r3
 8008b64:	68b9      	ldr	r1, [r7, #8]
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f7ff fc90 	bl	800848c <UART_Start_Receive_DMA>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d124      	bne.n	8008bc4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d11d      	bne.n	8008bbe <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2210      	movs	r2, #16
 8008b88:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	e853 3f00 	ldrex	r3, [r3]
 8008b96:	617b      	str	r3, [r7, #20]
   return(result);
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f043 0310 	orr.w	r3, r3, #16
 8008b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8008baa:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bac:	6a39      	ldr	r1, [r7, #32]
 8008bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb0:	e841 2300 	strex	r3, r2, [r1]
 8008bb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1e6      	bne.n	8008b8a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008bbc:	e002      	b.n	8008bc4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008bc8:	e000      	b.n	8008bcc <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008bca:	2302      	movs	r3, #2
  }
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3730      	adds	r7, #48	; 0x30
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d108      	bne.n	8008bf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008bf4:	e031      	b.n	8008c5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008bf6:	2308      	movs	r3, #8
 8008bf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008bfa:	2308      	movs	r3, #8
 8008bfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	0e5b      	lsrs	r3, r3, #25
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	f003 0307 	and.w	r3, r3, #7
 8008c0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	0f5b      	lsrs	r3, r3, #29
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f003 0307 	and.w	r3, r3, #7
 8008c1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
 8008c20:	7b3a      	ldrb	r2, [r7, #12]
 8008c22:	4910      	ldr	r1, [pc, #64]	; (8008c64 <UARTEx_SetNbDataToProcess+0x90>)
 8008c24:	5c8a      	ldrb	r2, [r1, r2]
 8008c26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c2a:	7b3a      	ldrb	r2, [r7, #12]
 8008c2c:	490e      	ldr	r1, [pc, #56]	; (8008c68 <UARTEx_SetNbDataToProcess+0x94>)
 8008c2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c30:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c3c:	7bfb      	ldrb	r3, [r7, #15]
 8008c3e:	7b7a      	ldrb	r2, [r7, #13]
 8008c40:	4908      	ldr	r1, [pc, #32]	; (8008c64 <UARTEx_SetNbDataToProcess+0x90>)
 8008c42:	5c8a      	ldrb	r2, [r1, r2]
 8008c44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c48:	7b7a      	ldrb	r2, [r7, #13]
 8008c4a:	4907      	ldr	r1, [pc, #28]	; (8008c68 <UARTEx_SetNbDataToProcess+0x94>)
 8008c4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c5a:	bf00      	nop
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bc80      	pop	{r7}
 8008c62:	4770      	bx	lr
 8008c64:	0800a3b0 	.word	0x0800a3b0
 8008c68:	0800a3b8 	.word	0x0800a3b8

08008c6c <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	460b      	mov	r3, r1
 8008c76:	70fb      	strb	r3, [r7, #3]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8008c80:	e004      	b.n	8008c8c <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	1c5a      	adds	r2, r3, #1
 8008c86:	60fa      	str	r2, [r7, #12]
 8008c88:	78fa      	ldrb	r2, [r7, #3]
 8008c8a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8008c8c:	883b      	ldrh	r3, [r7, #0]
 8008c8e:	1e5a      	subs	r2, r3, #1
 8008c90:	803a      	strh	r2, [r7, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1f5      	bne.n	8008c82 <UTIL_MEM_set_8+0x16>
  }
}
 8008c96:	bf00      	nop
 8008c98:	bf00      	nop
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bc80      	pop	{r7}
 8008ca0:	4770      	bx	lr
	...

08008ca4 <__errno>:
 8008ca4:	4b01      	ldr	r3, [pc, #4]	; (8008cac <__errno+0x8>)
 8008ca6:	6818      	ldr	r0, [r3, #0]
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	20000114 	.word	0x20000114

08008cb0 <__libc_init_array>:
 8008cb0:	b570      	push	{r4, r5, r6, lr}
 8008cb2:	4d0d      	ldr	r5, [pc, #52]	; (8008ce8 <__libc_init_array+0x38>)
 8008cb4:	4c0d      	ldr	r4, [pc, #52]	; (8008cec <__libc_init_array+0x3c>)
 8008cb6:	1b64      	subs	r4, r4, r5
 8008cb8:	10a4      	asrs	r4, r4, #2
 8008cba:	2600      	movs	r6, #0
 8008cbc:	42a6      	cmp	r6, r4
 8008cbe:	d109      	bne.n	8008cd4 <__libc_init_array+0x24>
 8008cc0:	4d0b      	ldr	r5, [pc, #44]	; (8008cf0 <__libc_init_array+0x40>)
 8008cc2:	4c0c      	ldr	r4, [pc, #48]	; (8008cf4 <__libc_init_array+0x44>)
 8008cc4:	f001 fa1c 	bl	800a100 <_init>
 8008cc8:	1b64      	subs	r4, r4, r5
 8008cca:	10a4      	asrs	r4, r4, #2
 8008ccc:	2600      	movs	r6, #0
 8008cce:	42a6      	cmp	r6, r4
 8008cd0:	d105      	bne.n	8008cde <__libc_init_array+0x2e>
 8008cd2:	bd70      	pop	{r4, r5, r6, pc}
 8008cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd8:	4798      	blx	r3
 8008cda:	3601      	adds	r6, #1
 8008cdc:	e7ee      	b.n	8008cbc <__libc_init_array+0xc>
 8008cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ce2:	4798      	blx	r3
 8008ce4:	3601      	adds	r6, #1
 8008ce6:	e7f2      	b.n	8008cce <__libc_init_array+0x1e>
 8008ce8:	0800a460 	.word	0x0800a460
 8008cec:	0800a460 	.word	0x0800a460
 8008cf0:	0800a460 	.word	0x0800a460
 8008cf4:	0800a464 	.word	0x0800a464

08008cf8 <memcpy>:
 8008cf8:	440a      	add	r2, r1
 8008cfa:	4291      	cmp	r1, r2
 8008cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d00:	d100      	bne.n	8008d04 <memcpy+0xc>
 8008d02:	4770      	bx	lr
 8008d04:	b510      	push	{r4, lr}
 8008d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d0e:	4291      	cmp	r1, r2
 8008d10:	d1f9      	bne.n	8008d06 <memcpy+0xe>
 8008d12:	bd10      	pop	{r4, pc}

08008d14 <memset>:
 8008d14:	4402      	add	r2, r0
 8008d16:	4603      	mov	r3, r0
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d100      	bne.n	8008d1e <memset+0xa>
 8008d1c:	4770      	bx	lr
 8008d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d22:	e7f9      	b.n	8008d18 <memset+0x4>

08008d24 <iprintf>:
 8008d24:	b40f      	push	{r0, r1, r2, r3}
 8008d26:	4b0a      	ldr	r3, [pc, #40]	; (8008d50 <iprintf+0x2c>)
 8008d28:	b513      	push	{r0, r1, r4, lr}
 8008d2a:	681c      	ldr	r4, [r3, #0]
 8008d2c:	b124      	cbz	r4, 8008d38 <iprintf+0x14>
 8008d2e:	69a3      	ldr	r3, [r4, #24]
 8008d30:	b913      	cbnz	r3, 8008d38 <iprintf+0x14>
 8008d32:	4620      	mov	r0, r4
 8008d34:	f000 fa9e 	bl	8009274 <__sinit>
 8008d38:	ab05      	add	r3, sp, #20
 8008d3a:	9a04      	ldr	r2, [sp, #16]
 8008d3c:	68a1      	ldr	r1, [r4, #8]
 8008d3e:	9301      	str	r3, [sp, #4]
 8008d40:	4620      	mov	r0, r4
 8008d42:	f000 fdff 	bl	8009944 <_vfiprintf_r>
 8008d46:	b002      	add	sp, #8
 8008d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d4c:	b004      	add	sp, #16
 8008d4e:	4770      	bx	lr
 8008d50:	20000114 	.word	0x20000114

08008d54 <_puts_r>:
 8008d54:	b570      	push	{r4, r5, r6, lr}
 8008d56:	460e      	mov	r6, r1
 8008d58:	4605      	mov	r5, r0
 8008d5a:	b118      	cbz	r0, 8008d64 <_puts_r+0x10>
 8008d5c:	6983      	ldr	r3, [r0, #24]
 8008d5e:	b90b      	cbnz	r3, 8008d64 <_puts_r+0x10>
 8008d60:	f000 fa88 	bl	8009274 <__sinit>
 8008d64:	69ab      	ldr	r3, [r5, #24]
 8008d66:	68ac      	ldr	r4, [r5, #8]
 8008d68:	b913      	cbnz	r3, 8008d70 <_puts_r+0x1c>
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	f000 fa82 	bl	8009274 <__sinit>
 8008d70:	4b2c      	ldr	r3, [pc, #176]	; (8008e24 <_puts_r+0xd0>)
 8008d72:	429c      	cmp	r4, r3
 8008d74:	d120      	bne.n	8008db8 <_puts_r+0x64>
 8008d76:	686c      	ldr	r4, [r5, #4]
 8008d78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d7a:	07db      	lsls	r3, r3, #31
 8008d7c:	d405      	bmi.n	8008d8a <_puts_r+0x36>
 8008d7e:	89a3      	ldrh	r3, [r4, #12]
 8008d80:	0598      	lsls	r0, r3, #22
 8008d82:	d402      	bmi.n	8008d8a <_puts_r+0x36>
 8008d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d86:	f000 fb13 	bl	80093b0 <__retarget_lock_acquire_recursive>
 8008d8a:	89a3      	ldrh	r3, [r4, #12]
 8008d8c:	0719      	lsls	r1, r3, #28
 8008d8e:	d51d      	bpl.n	8008dcc <_puts_r+0x78>
 8008d90:	6923      	ldr	r3, [r4, #16]
 8008d92:	b1db      	cbz	r3, 8008dcc <_puts_r+0x78>
 8008d94:	3e01      	subs	r6, #1
 8008d96:	68a3      	ldr	r3, [r4, #8]
 8008d98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	60a3      	str	r3, [r4, #8]
 8008da0:	bb39      	cbnz	r1, 8008df2 <_puts_r+0x9e>
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	da38      	bge.n	8008e18 <_puts_r+0xc4>
 8008da6:	4622      	mov	r2, r4
 8008da8:	210a      	movs	r1, #10
 8008daa:	4628      	mov	r0, r5
 8008dac:	f000 f88c 	bl	8008ec8 <__swbuf_r>
 8008db0:	3001      	adds	r0, #1
 8008db2:	d011      	beq.n	8008dd8 <_puts_r+0x84>
 8008db4:	250a      	movs	r5, #10
 8008db6:	e011      	b.n	8008ddc <_puts_r+0x88>
 8008db8:	4b1b      	ldr	r3, [pc, #108]	; (8008e28 <_puts_r+0xd4>)
 8008dba:	429c      	cmp	r4, r3
 8008dbc:	d101      	bne.n	8008dc2 <_puts_r+0x6e>
 8008dbe:	68ac      	ldr	r4, [r5, #8]
 8008dc0:	e7da      	b.n	8008d78 <_puts_r+0x24>
 8008dc2:	4b1a      	ldr	r3, [pc, #104]	; (8008e2c <_puts_r+0xd8>)
 8008dc4:	429c      	cmp	r4, r3
 8008dc6:	bf08      	it	eq
 8008dc8:	68ec      	ldreq	r4, [r5, #12]
 8008dca:	e7d5      	b.n	8008d78 <_puts_r+0x24>
 8008dcc:	4621      	mov	r1, r4
 8008dce:	4628      	mov	r0, r5
 8008dd0:	f000 f8cc 	bl	8008f6c <__swsetup_r>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d0dd      	beq.n	8008d94 <_puts_r+0x40>
 8008dd8:	f04f 35ff 	mov.w	r5, #4294967295
 8008ddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008dde:	07da      	lsls	r2, r3, #31
 8008de0:	d405      	bmi.n	8008dee <_puts_r+0x9a>
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	059b      	lsls	r3, r3, #22
 8008de6:	d402      	bmi.n	8008dee <_puts_r+0x9a>
 8008de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008dea:	f000 fae2 	bl	80093b2 <__retarget_lock_release_recursive>
 8008dee:	4628      	mov	r0, r5
 8008df0:	bd70      	pop	{r4, r5, r6, pc}
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	da04      	bge.n	8008e00 <_puts_r+0xac>
 8008df6:	69a2      	ldr	r2, [r4, #24]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	dc06      	bgt.n	8008e0a <_puts_r+0xb6>
 8008dfc:	290a      	cmp	r1, #10
 8008dfe:	d004      	beq.n	8008e0a <_puts_r+0xb6>
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	1c5a      	adds	r2, r3, #1
 8008e04:	6022      	str	r2, [r4, #0]
 8008e06:	7019      	strb	r1, [r3, #0]
 8008e08:	e7c5      	b.n	8008d96 <_puts_r+0x42>
 8008e0a:	4622      	mov	r2, r4
 8008e0c:	4628      	mov	r0, r5
 8008e0e:	f000 f85b 	bl	8008ec8 <__swbuf_r>
 8008e12:	3001      	adds	r0, #1
 8008e14:	d1bf      	bne.n	8008d96 <_puts_r+0x42>
 8008e16:	e7df      	b.n	8008dd8 <_puts_r+0x84>
 8008e18:	6823      	ldr	r3, [r4, #0]
 8008e1a:	250a      	movs	r5, #10
 8008e1c:	1c5a      	adds	r2, r3, #1
 8008e1e:	6022      	str	r2, [r4, #0]
 8008e20:	701d      	strb	r5, [r3, #0]
 8008e22:	e7db      	b.n	8008ddc <_puts_r+0x88>
 8008e24:	0800a3e4 	.word	0x0800a3e4
 8008e28:	0800a404 	.word	0x0800a404
 8008e2c:	0800a3c4 	.word	0x0800a3c4

08008e30 <puts>:
 8008e30:	4b02      	ldr	r3, [pc, #8]	; (8008e3c <puts+0xc>)
 8008e32:	4601      	mov	r1, r0
 8008e34:	6818      	ldr	r0, [r3, #0]
 8008e36:	f7ff bf8d 	b.w	8008d54 <_puts_r>
 8008e3a:	bf00      	nop
 8008e3c:	20000114 	.word	0x20000114

08008e40 <siprintf>:
 8008e40:	b40e      	push	{r1, r2, r3}
 8008e42:	b500      	push	{lr}
 8008e44:	b09c      	sub	sp, #112	; 0x70
 8008e46:	ab1d      	add	r3, sp, #116	; 0x74
 8008e48:	9002      	str	r0, [sp, #8]
 8008e4a:	9006      	str	r0, [sp, #24]
 8008e4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e50:	4809      	ldr	r0, [pc, #36]	; (8008e78 <siprintf+0x38>)
 8008e52:	9107      	str	r1, [sp, #28]
 8008e54:	9104      	str	r1, [sp, #16]
 8008e56:	4909      	ldr	r1, [pc, #36]	; (8008e7c <siprintf+0x3c>)
 8008e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e5c:	9105      	str	r1, [sp, #20]
 8008e5e:	6800      	ldr	r0, [r0, #0]
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	a902      	add	r1, sp, #8
 8008e64:	f000 fc46 	bl	80096f4 <_svfiprintf_r>
 8008e68:	9b02      	ldr	r3, [sp, #8]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	701a      	strb	r2, [r3, #0]
 8008e6e:	b01c      	add	sp, #112	; 0x70
 8008e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e74:	b003      	add	sp, #12
 8008e76:	4770      	bx	lr
 8008e78:	20000114 	.word	0x20000114
 8008e7c:	ffff0208 	.word	0xffff0208

08008e80 <strcat>:
 8008e80:	b510      	push	{r4, lr}
 8008e82:	4602      	mov	r2, r0
 8008e84:	7814      	ldrb	r4, [r2, #0]
 8008e86:	4613      	mov	r3, r2
 8008e88:	3201      	adds	r2, #1
 8008e8a:	2c00      	cmp	r4, #0
 8008e8c:	d1fa      	bne.n	8008e84 <strcat+0x4>
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e94:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e98:	2a00      	cmp	r2, #0
 8008e9a:	d1f9      	bne.n	8008e90 <strcat+0x10>
 8008e9c:	bd10      	pop	{r4, pc}

08008e9e <strncmp>:
 8008e9e:	b510      	push	{r4, lr}
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	b172      	cbz	r2, 8008ec2 <strncmp+0x24>
 8008ea4:	3901      	subs	r1, #1
 8008ea6:	1884      	adds	r4, r0, r2
 8008ea8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008eac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008eb0:	4290      	cmp	r0, r2
 8008eb2:	d101      	bne.n	8008eb8 <strncmp+0x1a>
 8008eb4:	42a3      	cmp	r3, r4
 8008eb6:	d101      	bne.n	8008ebc <strncmp+0x1e>
 8008eb8:	1a80      	subs	r0, r0, r2
 8008eba:	bd10      	pop	{r4, pc}
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d1f3      	bne.n	8008ea8 <strncmp+0xa>
 8008ec0:	e7fa      	b.n	8008eb8 <strncmp+0x1a>
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	e7f9      	b.n	8008eba <strncmp+0x1c>
	...

08008ec8 <__swbuf_r>:
 8008ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eca:	460e      	mov	r6, r1
 8008ecc:	4614      	mov	r4, r2
 8008ece:	4605      	mov	r5, r0
 8008ed0:	b118      	cbz	r0, 8008eda <__swbuf_r+0x12>
 8008ed2:	6983      	ldr	r3, [r0, #24]
 8008ed4:	b90b      	cbnz	r3, 8008eda <__swbuf_r+0x12>
 8008ed6:	f000 f9cd 	bl	8009274 <__sinit>
 8008eda:	4b21      	ldr	r3, [pc, #132]	; (8008f60 <__swbuf_r+0x98>)
 8008edc:	429c      	cmp	r4, r3
 8008ede:	d12b      	bne.n	8008f38 <__swbuf_r+0x70>
 8008ee0:	686c      	ldr	r4, [r5, #4]
 8008ee2:	69a3      	ldr	r3, [r4, #24]
 8008ee4:	60a3      	str	r3, [r4, #8]
 8008ee6:	89a3      	ldrh	r3, [r4, #12]
 8008ee8:	071a      	lsls	r2, r3, #28
 8008eea:	d52f      	bpl.n	8008f4c <__swbuf_r+0x84>
 8008eec:	6923      	ldr	r3, [r4, #16]
 8008eee:	b36b      	cbz	r3, 8008f4c <__swbuf_r+0x84>
 8008ef0:	6923      	ldr	r3, [r4, #16]
 8008ef2:	6820      	ldr	r0, [r4, #0]
 8008ef4:	1ac0      	subs	r0, r0, r3
 8008ef6:	6963      	ldr	r3, [r4, #20]
 8008ef8:	b2f6      	uxtb	r6, r6
 8008efa:	4283      	cmp	r3, r0
 8008efc:	4637      	mov	r7, r6
 8008efe:	dc04      	bgt.n	8008f0a <__swbuf_r+0x42>
 8008f00:	4621      	mov	r1, r4
 8008f02:	4628      	mov	r0, r5
 8008f04:	f000 f922 	bl	800914c <_fflush_r>
 8008f08:	bb30      	cbnz	r0, 8008f58 <__swbuf_r+0x90>
 8008f0a:	68a3      	ldr	r3, [r4, #8]
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	60a3      	str	r3, [r4, #8]
 8008f10:	6823      	ldr	r3, [r4, #0]
 8008f12:	1c5a      	adds	r2, r3, #1
 8008f14:	6022      	str	r2, [r4, #0]
 8008f16:	701e      	strb	r6, [r3, #0]
 8008f18:	6963      	ldr	r3, [r4, #20]
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	4283      	cmp	r3, r0
 8008f1e:	d004      	beq.n	8008f2a <__swbuf_r+0x62>
 8008f20:	89a3      	ldrh	r3, [r4, #12]
 8008f22:	07db      	lsls	r3, r3, #31
 8008f24:	d506      	bpl.n	8008f34 <__swbuf_r+0x6c>
 8008f26:	2e0a      	cmp	r6, #10
 8008f28:	d104      	bne.n	8008f34 <__swbuf_r+0x6c>
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	f000 f90d 	bl	800914c <_fflush_r>
 8008f32:	b988      	cbnz	r0, 8008f58 <__swbuf_r+0x90>
 8008f34:	4638      	mov	r0, r7
 8008f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f38:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <__swbuf_r+0x9c>)
 8008f3a:	429c      	cmp	r4, r3
 8008f3c:	d101      	bne.n	8008f42 <__swbuf_r+0x7a>
 8008f3e:	68ac      	ldr	r4, [r5, #8]
 8008f40:	e7cf      	b.n	8008ee2 <__swbuf_r+0x1a>
 8008f42:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <__swbuf_r+0xa0>)
 8008f44:	429c      	cmp	r4, r3
 8008f46:	bf08      	it	eq
 8008f48:	68ec      	ldreq	r4, [r5, #12]
 8008f4a:	e7ca      	b.n	8008ee2 <__swbuf_r+0x1a>
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	4628      	mov	r0, r5
 8008f50:	f000 f80c 	bl	8008f6c <__swsetup_r>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d0cb      	beq.n	8008ef0 <__swbuf_r+0x28>
 8008f58:	f04f 37ff 	mov.w	r7, #4294967295
 8008f5c:	e7ea      	b.n	8008f34 <__swbuf_r+0x6c>
 8008f5e:	bf00      	nop
 8008f60:	0800a3e4 	.word	0x0800a3e4
 8008f64:	0800a404 	.word	0x0800a404
 8008f68:	0800a3c4 	.word	0x0800a3c4

08008f6c <__swsetup_r>:
 8008f6c:	4b32      	ldr	r3, [pc, #200]	; (8009038 <__swsetup_r+0xcc>)
 8008f6e:	b570      	push	{r4, r5, r6, lr}
 8008f70:	681d      	ldr	r5, [r3, #0]
 8008f72:	4606      	mov	r6, r0
 8008f74:	460c      	mov	r4, r1
 8008f76:	b125      	cbz	r5, 8008f82 <__swsetup_r+0x16>
 8008f78:	69ab      	ldr	r3, [r5, #24]
 8008f7a:	b913      	cbnz	r3, 8008f82 <__swsetup_r+0x16>
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	f000 f979 	bl	8009274 <__sinit>
 8008f82:	4b2e      	ldr	r3, [pc, #184]	; (800903c <__swsetup_r+0xd0>)
 8008f84:	429c      	cmp	r4, r3
 8008f86:	d10f      	bne.n	8008fa8 <__swsetup_r+0x3c>
 8008f88:	686c      	ldr	r4, [r5, #4]
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f90:	0719      	lsls	r1, r3, #28
 8008f92:	d42c      	bmi.n	8008fee <__swsetup_r+0x82>
 8008f94:	06dd      	lsls	r5, r3, #27
 8008f96:	d411      	bmi.n	8008fbc <__swsetup_r+0x50>
 8008f98:	2309      	movs	r3, #9
 8008f9a:	6033      	str	r3, [r6, #0]
 8008f9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fa0:	81a3      	strh	r3, [r4, #12]
 8008fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa6:	e03e      	b.n	8009026 <__swsetup_r+0xba>
 8008fa8:	4b25      	ldr	r3, [pc, #148]	; (8009040 <__swsetup_r+0xd4>)
 8008faa:	429c      	cmp	r4, r3
 8008fac:	d101      	bne.n	8008fb2 <__swsetup_r+0x46>
 8008fae:	68ac      	ldr	r4, [r5, #8]
 8008fb0:	e7eb      	b.n	8008f8a <__swsetup_r+0x1e>
 8008fb2:	4b24      	ldr	r3, [pc, #144]	; (8009044 <__swsetup_r+0xd8>)
 8008fb4:	429c      	cmp	r4, r3
 8008fb6:	bf08      	it	eq
 8008fb8:	68ec      	ldreq	r4, [r5, #12]
 8008fba:	e7e6      	b.n	8008f8a <__swsetup_r+0x1e>
 8008fbc:	0758      	lsls	r0, r3, #29
 8008fbe:	d512      	bpl.n	8008fe6 <__swsetup_r+0x7a>
 8008fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fc2:	b141      	cbz	r1, 8008fd6 <__swsetup_r+0x6a>
 8008fc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fc8:	4299      	cmp	r1, r3
 8008fca:	d002      	beq.n	8008fd2 <__swsetup_r+0x66>
 8008fcc:	4630      	mov	r0, r6
 8008fce:	f000 fa57 	bl	8009480 <_free_r>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	6363      	str	r3, [r4, #52]	; 0x34
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fdc:	81a3      	strh	r3, [r4, #12]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	6063      	str	r3, [r4, #4]
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	f043 0308 	orr.w	r3, r3, #8
 8008fec:	81a3      	strh	r3, [r4, #12]
 8008fee:	6923      	ldr	r3, [r4, #16]
 8008ff0:	b94b      	cbnz	r3, 8009006 <__swsetup_r+0x9a>
 8008ff2:	89a3      	ldrh	r3, [r4, #12]
 8008ff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ffc:	d003      	beq.n	8009006 <__swsetup_r+0x9a>
 8008ffe:	4621      	mov	r1, r4
 8009000:	4630      	mov	r0, r6
 8009002:	f000 f9fd 	bl	8009400 <__smakebuf_r>
 8009006:	89a0      	ldrh	r0, [r4, #12]
 8009008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800900c:	f010 0301 	ands.w	r3, r0, #1
 8009010:	d00a      	beq.n	8009028 <__swsetup_r+0xbc>
 8009012:	2300      	movs	r3, #0
 8009014:	60a3      	str	r3, [r4, #8]
 8009016:	6963      	ldr	r3, [r4, #20]
 8009018:	425b      	negs	r3, r3
 800901a:	61a3      	str	r3, [r4, #24]
 800901c:	6923      	ldr	r3, [r4, #16]
 800901e:	b943      	cbnz	r3, 8009032 <__swsetup_r+0xc6>
 8009020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009024:	d1ba      	bne.n	8008f9c <__swsetup_r+0x30>
 8009026:	bd70      	pop	{r4, r5, r6, pc}
 8009028:	0781      	lsls	r1, r0, #30
 800902a:	bf58      	it	pl
 800902c:	6963      	ldrpl	r3, [r4, #20]
 800902e:	60a3      	str	r3, [r4, #8]
 8009030:	e7f4      	b.n	800901c <__swsetup_r+0xb0>
 8009032:	2000      	movs	r0, #0
 8009034:	e7f7      	b.n	8009026 <__swsetup_r+0xba>
 8009036:	bf00      	nop
 8009038:	20000114 	.word	0x20000114
 800903c:	0800a3e4 	.word	0x0800a3e4
 8009040:	0800a404 	.word	0x0800a404
 8009044:	0800a3c4 	.word	0x0800a3c4

08009048 <__sflush_r>:
 8009048:	898a      	ldrh	r2, [r1, #12]
 800904a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904c:	4605      	mov	r5, r0
 800904e:	0710      	lsls	r0, r2, #28
 8009050:	460c      	mov	r4, r1
 8009052:	d457      	bmi.n	8009104 <__sflush_r+0xbc>
 8009054:	684b      	ldr	r3, [r1, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	dc04      	bgt.n	8009064 <__sflush_r+0x1c>
 800905a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800905c:	2b00      	cmp	r3, #0
 800905e:	dc01      	bgt.n	8009064 <__sflush_r+0x1c>
 8009060:	2000      	movs	r0, #0
 8009062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009066:	2e00      	cmp	r6, #0
 8009068:	d0fa      	beq.n	8009060 <__sflush_r+0x18>
 800906a:	2300      	movs	r3, #0
 800906c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009070:	682f      	ldr	r7, [r5, #0]
 8009072:	602b      	str	r3, [r5, #0]
 8009074:	d032      	beq.n	80090dc <__sflush_r+0x94>
 8009076:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	075a      	lsls	r2, r3, #29
 800907c:	d505      	bpl.n	800908a <__sflush_r+0x42>
 800907e:	6863      	ldr	r3, [r4, #4]
 8009080:	1ac0      	subs	r0, r0, r3
 8009082:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009084:	b10b      	cbz	r3, 800908a <__sflush_r+0x42>
 8009086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009088:	1ac0      	subs	r0, r0, r3
 800908a:	2300      	movs	r3, #0
 800908c:	4602      	mov	r2, r0
 800908e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009090:	6a21      	ldr	r1, [r4, #32]
 8009092:	4628      	mov	r0, r5
 8009094:	47b0      	blx	r6
 8009096:	1c43      	adds	r3, r0, #1
 8009098:	89a3      	ldrh	r3, [r4, #12]
 800909a:	d106      	bne.n	80090aa <__sflush_r+0x62>
 800909c:	6829      	ldr	r1, [r5, #0]
 800909e:	291d      	cmp	r1, #29
 80090a0:	d82c      	bhi.n	80090fc <__sflush_r+0xb4>
 80090a2:	4a29      	ldr	r2, [pc, #164]	; (8009148 <__sflush_r+0x100>)
 80090a4:	40ca      	lsrs	r2, r1
 80090a6:	07d6      	lsls	r6, r2, #31
 80090a8:	d528      	bpl.n	80090fc <__sflush_r+0xb4>
 80090aa:	2200      	movs	r2, #0
 80090ac:	6062      	str	r2, [r4, #4]
 80090ae:	04d9      	lsls	r1, r3, #19
 80090b0:	6922      	ldr	r2, [r4, #16]
 80090b2:	6022      	str	r2, [r4, #0]
 80090b4:	d504      	bpl.n	80090c0 <__sflush_r+0x78>
 80090b6:	1c42      	adds	r2, r0, #1
 80090b8:	d101      	bne.n	80090be <__sflush_r+0x76>
 80090ba:	682b      	ldr	r3, [r5, #0]
 80090bc:	b903      	cbnz	r3, 80090c0 <__sflush_r+0x78>
 80090be:	6560      	str	r0, [r4, #84]	; 0x54
 80090c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090c2:	602f      	str	r7, [r5, #0]
 80090c4:	2900      	cmp	r1, #0
 80090c6:	d0cb      	beq.n	8009060 <__sflush_r+0x18>
 80090c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090cc:	4299      	cmp	r1, r3
 80090ce:	d002      	beq.n	80090d6 <__sflush_r+0x8e>
 80090d0:	4628      	mov	r0, r5
 80090d2:	f000 f9d5 	bl	8009480 <_free_r>
 80090d6:	2000      	movs	r0, #0
 80090d8:	6360      	str	r0, [r4, #52]	; 0x34
 80090da:	e7c2      	b.n	8009062 <__sflush_r+0x1a>
 80090dc:	6a21      	ldr	r1, [r4, #32]
 80090de:	2301      	movs	r3, #1
 80090e0:	4628      	mov	r0, r5
 80090e2:	47b0      	blx	r6
 80090e4:	1c41      	adds	r1, r0, #1
 80090e6:	d1c7      	bne.n	8009078 <__sflush_r+0x30>
 80090e8:	682b      	ldr	r3, [r5, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0c4      	beq.n	8009078 <__sflush_r+0x30>
 80090ee:	2b1d      	cmp	r3, #29
 80090f0:	d001      	beq.n	80090f6 <__sflush_r+0xae>
 80090f2:	2b16      	cmp	r3, #22
 80090f4:	d101      	bne.n	80090fa <__sflush_r+0xb2>
 80090f6:	602f      	str	r7, [r5, #0]
 80090f8:	e7b2      	b.n	8009060 <__sflush_r+0x18>
 80090fa:	89a3      	ldrh	r3, [r4, #12]
 80090fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009100:	81a3      	strh	r3, [r4, #12]
 8009102:	e7ae      	b.n	8009062 <__sflush_r+0x1a>
 8009104:	690f      	ldr	r7, [r1, #16]
 8009106:	2f00      	cmp	r7, #0
 8009108:	d0aa      	beq.n	8009060 <__sflush_r+0x18>
 800910a:	0793      	lsls	r3, r2, #30
 800910c:	680e      	ldr	r6, [r1, #0]
 800910e:	bf08      	it	eq
 8009110:	694b      	ldreq	r3, [r1, #20]
 8009112:	600f      	str	r7, [r1, #0]
 8009114:	bf18      	it	ne
 8009116:	2300      	movne	r3, #0
 8009118:	1bf6      	subs	r6, r6, r7
 800911a:	608b      	str	r3, [r1, #8]
 800911c:	2e00      	cmp	r6, #0
 800911e:	dd9f      	ble.n	8009060 <__sflush_r+0x18>
 8009120:	6a21      	ldr	r1, [r4, #32]
 8009122:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009126:	4633      	mov	r3, r6
 8009128:	463a      	mov	r2, r7
 800912a:	4628      	mov	r0, r5
 800912c:	47e0      	blx	ip
 800912e:	2800      	cmp	r0, #0
 8009130:	dc06      	bgt.n	8009140 <__sflush_r+0xf8>
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009138:	81a3      	strh	r3, [r4, #12]
 800913a:	f04f 30ff 	mov.w	r0, #4294967295
 800913e:	e790      	b.n	8009062 <__sflush_r+0x1a>
 8009140:	4407      	add	r7, r0
 8009142:	1a36      	subs	r6, r6, r0
 8009144:	e7ea      	b.n	800911c <__sflush_r+0xd4>
 8009146:	bf00      	nop
 8009148:	20400001 	.word	0x20400001

0800914c <_fflush_r>:
 800914c:	b538      	push	{r3, r4, r5, lr}
 800914e:	690b      	ldr	r3, [r1, #16]
 8009150:	4605      	mov	r5, r0
 8009152:	460c      	mov	r4, r1
 8009154:	b913      	cbnz	r3, 800915c <_fflush_r+0x10>
 8009156:	2500      	movs	r5, #0
 8009158:	4628      	mov	r0, r5
 800915a:	bd38      	pop	{r3, r4, r5, pc}
 800915c:	b118      	cbz	r0, 8009166 <_fflush_r+0x1a>
 800915e:	6983      	ldr	r3, [r0, #24]
 8009160:	b90b      	cbnz	r3, 8009166 <_fflush_r+0x1a>
 8009162:	f000 f887 	bl	8009274 <__sinit>
 8009166:	4b14      	ldr	r3, [pc, #80]	; (80091b8 <_fflush_r+0x6c>)
 8009168:	429c      	cmp	r4, r3
 800916a:	d11b      	bne.n	80091a4 <_fflush_r+0x58>
 800916c:	686c      	ldr	r4, [r5, #4]
 800916e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0ef      	beq.n	8009156 <_fflush_r+0xa>
 8009176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009178:	07d0      	lsls	r0, r2, #31
 800917a:	d404      	bmi.n	8009186 <_fflush_r+0x3a>
 800917c:	0599      	lsls	r1, r3, #22
 800917e:	d402      	bmi.n	8009186 <_fflush_r+0x3a>
 8009180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009182:	f000 f915 	bl	80093b0 <__retarget_lock_acquire_recursive>
 8009186:	4628      	mov	r0, r5
 8009188:	4621      	mov	r1, r4
 800918a:	f7ff ff5d 	bl	8009048 <__sflush_r>
 800918e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009190:	07da      	lsls	r2, r3, #31
 8009192:	4605      	mov	r5, r0
 8009194:	d4e0      	bmi.n	8009158 <_fflush_r+0xc>
 8009196:	89a3      	ldrh	r3, [r4, #12]
 8009198:	059b      	lsls	r3, r3, #22
 800919a:	d4dd      	bmi.n	8009158 <_fflush_r+0xc>
 800919c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800919e:	f000 f908 	bl	80093b2 <__retarget_lock_release_recursive>
 80091a2:	e7d9      	b.n	8009158 <_fflush_r+0xc>
 80091a4:	4b05      	ldr	r3, [pc, #20]	; (80091bc <_fflush_r+0x70>)
 80091a6:	429c      	cmp	r4, r3
 80091a8:	d101      	bne.n	80091ae <_fflush_r+0x62>
 80091aa:	68ac      	ldr	r4, [r5, #8]
 80091ac:	e7df      	b.n	800916e <_fflush_r+0x22>
 80091ae:	4b04      	ldr	r3, [pc, #16]	; (80091c0 <_fflush_r+0x74>)
 80091b0:	429c      	cmp	r4, r3
 80091b2:	bf08      	it	eq
 80091b4:	68ec      	ldreq	r4, [r5, #12]
 80091b6:	e7da      	b.n	800916e <_fflush_r+0x22>
 80091b8:	0800a3e4 	.word	0x0800a3e4
 80091bc:	0800a404 	.word	0x0800a404
 80091c0:	0800a3c4 	.word	0x0800a3c4

080091c4 <std>:
 80091c4:	2300      	movs	r3, #0
 80091c6:	b510      	push	{r4, lr}
 80091c8:	4604      	mov	r4, r0
 80091ca:	e9c0 3300 	strd	r3, r3, [r0]
 80091ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091d2:	6083      	str	r3, [r0, #8]
 80091d4:	8181      	strh	r1, [r0, #12]
 80091d6:	6643      	str	r3, [r0, #100]	; 0x64
 80091d8:	81c2      	strh	r2, [r0, #14]
 80091da:	6183      	str	r3, [r0, #24]
 80091dc:	4619      	mov	r1, r3
 80091de:	2208      	movs	r2, #8
 80091e0:	305c      	adds	r0, #92	; 0x5c
 80091e2:	f7ff fd97 	bl	8008d14 <memset>
 80091e6:	4b05      	ldr	r3, [pc, #20]	; (80091fc <std+0x38>)
 80091e8:	6263      	str	r3, [r4, #36]	; 0x24
 80091ea:	4b05      	ldr	r3, [pc, #20]	; (8009200 <std+0x3c>)
 80091ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80091ee:	4b05      	ldr	r3, [pc, #20]	; (8009204 <std+0x40>)
 80091f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091f2:	4b05      	ldr	r3, [pc, #20]	; (8009208 <std+0x44>)
 80091f4:	6224      	str	r4, [r4, #32]
 80091f6:	6323      	str	r3, [r4, #48]	; 0x30
 80091f8:	bd10      	pop	{r4, pc}
 80091fa:	bf00      	nop
 80091fc:	08009eed 	.word	0x08009eed
 8009200:	08009f0f 	.word	0x08009f0f
 8009204:	08009f47 	.word	0x08009f47
 8009208:	08009f6b 	.word	0x08009f6b

0800920c <_cleanup_r>:
 800920c:	4901      	ldr	r1, [pc, #4]	; (8009214 <_cleanup_r+0x8>)
 800920e:	f000 b8af 	b.w	8009370 <_fwalk_reent>
 8009212:	bf00      	nop
 8009214:	0800914d 	.word	0x0800914d

08009218 <__sfmoreglue>:
 8009218:	b570      	push	{r4, r5, r6, lr}
 800921a:	2268      	movs	r2, #104	; 0x68
 800921c:	1e4d      	subs	r5, r1, #1
 800921e:	4355      	muls	r5, r2
 8009220:	460e      	mov	r6, r1
 8009222:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009226:	f000 f995 	bl	8009554 <_malloc_r>
 800922a:	4604      	mov	r4, r0
 800922c:	b140      	cbz	r0, 8009240 <__sfmoreglue+0x28>
 800922e:	2100      	movs	r1, #0
 8009230:	e9c0 1600 	strd	r1, r6, [r0]
 8009234:	300c      	adds	r0, #12
 8009236:	60a0      	str	r0, [r4, #8]
 8009238:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800923c:	f7ff fd6a 	bl	8008d14 <memset>
 8009240:	4620      	mov	r0, r4
 8009242:	bd70      	pop	{r4, r5, r6, pc}

08009244 <__sfp_lock_acquire>:
 8009244:	4801      	ldr	r0, [pc, #4]	; (800924c <__sfp_lock_acquire+0x8>)
 8009246:	f000 b8b3 	b.w	80093b0 <__retarget_lock_acquire_recursive>
 800924a:	bf00      	nop
 800924c:	20000861 	.word	0x20000861

08009250 <__sfp_lock_release>:
 8009250:	4801      	ldr	r0, [pc, #4]	; (8009258 <__sfp_lock_release+0x8>)
 8009252:	f000 b8ae 	b.w	80093b2 <__retarget_lock_release_recursive>
 8009256:	bf00      	nop
 8009258:	20000861 	.word	0x20000861

0800925c <__sinit_lock_acquire>:
 800925c:	4801      	ldr	r0, [pc, #4]	; (8009264 <__sinit_lock_acquire+0x8>)
 800925e:	f000 b8a7 	b.w	80093b0 <__retarget_lock_acquire_recursive>
 8009262:	bf00      	nop
 8009264:	20000862 	.word	0x20000862

08009268 <__sinit_lock_release>:
 8009268:	4801      	ldr	r0, [pc, #4]	; (8009270 <__sinit_lock_release+0x8>)
 800926a:	f000 b8a2 	b.w	80093b2 <__retarget_lock_release_recursive>
 800926e:	bf00      	nop
 8009270:	20000862 	.word	0x20000862

08009274 <__sinit>:
 8009274:	b510      	push	{r4, lr}
 8009276:	4604      	mov	r4, r0
 8009278:	f7ff fff0 	bl	800925c <__sinit_lock_acquire>
 800927c:	69a3      	ldr	r3, [r4, #24]
 800927e:	b11b      	cbz	r3, 8009288 <__sinit+0x14>
 8009280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009284:	f7ff bff0 	b.w	8009268 <__sinit_lock_release>
 8009288:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800928c:	6523      	str	r3, [r4, #80]	; 0x50
 800928e:	4b13      	ldr	r3, [pc, #76]	; (80092dc <__sinit+0x68>)
 8009290:	4a13      	ldr	r2, [pc, #76]	; (80092e0 <__sinit+0x6c>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	62a2      	str	r2, [r4, #40]	; 0x28
 8009296:	42a3      	cmp	r3, r4
 8009298:	bf04      	itt	eq
 800929a:	2301      	moveq	r3, #1
 800929c:	61a3      	streq	r3, [r4, #24]
 800929e:	4620      	mov	r0, r4
 80092a0:	f000 f820 	bl	80092e4 <__sfp>
 80092a4:	6060      	str	r0, [r4, #4]
 80092a6:	4620      	mov	r0, r4
 80092a8:	f000 f81c 	bl	80092e4 <__sfp>
 80092ac:	60a0      	str	r0, [r4, #8]
 80092ae:	4620      	mov	r0, r4
 80092b0:	f000 f818 	bl	80092e4 <__sfp>
 80092b4:	2200      	movs	r2, #0
 80092b6:	60e0      	str	r0, [r4, #12]
 80092b8:	2104      	movs	r1, #4
 80092ba:	6860      	ldr	r0, [r4, #4]
 80092bc:	f7ff ff82 	bl	80091c4 <std>
 80092c0:	68a0      	ldr	r0, [r4, #8]
 80092c2:	2201      	movs	r2, #1
 80092c4:	2109      	movs	r1, #9
 80092c6:	f7ff ff7d 	bl	80091c4 <std>
 80092ca:	68e0      	ldr	r0, [r4, #12]
 80092cc:	2202      	movs	r2, #2
 80092ce:	2112      	movs	r1, #18
 80092d0:	f7ff ff78 	bl	80091c4 <std>
 80092d4:	2301      	movs	r3, #1
 80092d6:	61a3      	str	r3, [r4, #24]
 80092d8:	e7d2      	b.n	8009280 <__sinit+0xc>
 80092da:	bf00      	nop
 80092dc:	0800a3c0 	.word	0x0800a3c0
 80092e0:	0800920d 	.word	0x0800920d

080092e4 <__sfp>:
 80092e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e6:	4607      	mov	r7, r0
 80092e8:	f7ff ffac 	bl	8009244 <__sfp_lock_acquire>
 80092ec:	4b1e      	ldr	r3, [pc, #120]	; (8009368 <__sfp+0x84>)
 80092ee:	681e      	ldr	r6, [r3, #0]
 80092f0:	69b3      	ldr	r3, [r6, #24]
 80092f2:	b913      	cbnz	r3, 80092fa <__sfp+0x16>
 80092f4:	4630      	mov	r0, r6
 80092f6:	f7ff ffbd 	bl	8009274 <__sinit>
 80092fa:	3648      	adds	r6, #72	; 0x48
 80092fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009300:	3b01      	subs	r3, #1
 8009302:	d503      	bpl.n	800930c <__sfp+0x28>
 8009304:	6833      	ldr	r3, [r6, #0]
 8009306:	b30b      	cbz	r3, 800934c <__sfp+0x68>
 8009308:	6836      	ldr	r6, [r6, #0]
 800930a:	e7f7      	b.n	80092fc <__sfp+0x18>
 800930c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009310:	b9d5      	cbnz	r5, 8009348 <__sfp+0x64>
 8009312:	4b16      	ldr	r3, [pc, #88]	; (800936c <__sfp+0x88>)
 8009314:	60e3      	str	r3, [r4, #12]
 8009316:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800931a:	6665      	str	r5, [r4, #100]	; 0x64
 800931c:	f000 f847 	bl	80093ae <__retarget_lock_init_recursive>
 8009320:	f7ff ff96 	bl	8009250 <__sfp_lock_release>
 8009324:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009328:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800932c:	6025      	str	r5, [r4, #0]
 800932e:	61a5      	str	r5, [r4, #24]
 8009330:	2208      	movs	r2, #8
 8009332:	4629      	mov	r1, r5
 8009334:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009338:	f7ff fcec 	bl	8008d14 <memset>
 800933c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009340:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009344:	4620      	mov	r0, r4
 8009346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009348:	3468      	adds	r4, #104	; 0x68
 800934a:	e7d9      	b.n	8009300 <__sfp+0x1c>
 800934c:	2104      	movs	r1, #4
 800934e:	4638      	mov	r0, r7
 8009350:	f7ff ff62 	bl	8009218 <__sfmoreglue>
 8009354:	4604      	mov	r4, r0
 8009356:	6030      	str	r0, [r6, #0]
 8009358:	2800      	cmp	r0, #0
 800935a:	d1d5      	bne.n	8009308 <__sfp+0x24>
 800935c:	f7ff ff78 	bl	8009250 <__sfp_lock_release>
 8009360:	230c      	movs	r3, #12
 8009362:	603b      	str	r3, [r7, #0]
 8009364:	e7ee      	b.n	8009344 <__sfp+0x60>
 8009366:	bf00      	nop
 8009368:	0800a3c0 	.word	0x0800a3c0
 800936c:	ffff0001 	.word	0xffff0001

08009370 <_fwalk_reent>:
 8009370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009374:	4606      	mov	r6, r0
 8009376:	4688      	mov	r8, r1
 8009378:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800937c:	2700      	movs	r7, #0
 800937e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009382:	f1b9 0901 	subs.w	r9, r9, #1
 8009386:	d505      	bpl.n	8009394 <_fwalk_reent+0x24>
 8009388:	6824      	ldr	r4, [r4, #0]
 800938a:	2c00      	cmp	r4, #0
 800938c:	d1f7      	bne.n	800937e <_fwalk_reent+0xe>
 800938e:	4638      	mov	r0, r7
 8009390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009394:	89ab      	ldrh	r3, [r5, #12]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d907      	bls.n	80093aa <_fwalk_reent+0x3a>
 800939a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800939e:	3301      	adds	r3, #1
 80093a0:	d003      	beq.n	80093aa <_fwalk_reent+0x3a>
 80093a2:	4629      	mov	r1, r5
 80093a4:	4630      	mov	r0, r6
 80093a6:	47c0      	blx	r8
 80093a8:	4307      	orrs	r7, r0
 80093aa:	3568      	adds	r5, #104	; 0x68
 80093ac:	e7e9      	b.n	8009382 <_fwalk_reent+0x12>

080093ae <__retarget_lock_init_recursive>:
 80093ae:	4770      	bx	lr

080093b0 <__retarget_lock_acquire_recursive>:
 80093b0:	4770      	bx	lr

080093b2 <__retarget_lock_release_recursive>:
 80093b2:	4770      	bx	lr

080093b4 <__swhatbuf_r>:
 80093b4:	b570      	push	{r4, r5, r6, lr}
 80093b6:	460e      	mov	r6, r1
 80093b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093bc:	2900      	cmp	r1, #0
 80093be:	b096      	sub	sp, #88	; 0x58
 80093c0:	4614      	mov	r4, r2
 80093c2:	461d      	mov	r5, r3
 80093c4:	da08      	bge.n	80093d8 <__swhatbuf_r+0x24>
 80093c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80093ca:	2200      	movs	r2, #0
 80093cc:	602a      	str	r2, [r5, #0]
 80093ce:	061a      	lsls	r2, r3, #24
 80093d0:	d410      	bmi.n	80093f4 <__swhatbuf_r+0x40>
 80093d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093d6:	e00e      	b.n	80093f6 <__swhatbuf_r+0x42>
 80093d8:	466a      	mov	r2, sp
 80093da:	f000 fded 	bl	8009fb8 <_fstat_r>
 80093de:	2800      	cmp	r0, #0
 80093e0:	dbf1      	blt.n	80093c6 <__swhatbuf_r+0x12>
 80093e2:	9a01      	ldr	r2, [sp, #4]
 80093e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093ec:	425a      	negs	r2, r3
 80093ee:	415a      	adcs	r2, r3
 80093f0:	602a      	str	r2, [r5, #0]
 80093f2:	e7ee      	b.n	80093d2 <__swhatbuf_r+0x1e>
 80093f4:	2340      	movs	r3, #64	; 0x40
 80093f6:	2000      	movs	r0, #0
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	b016      	add	sp, #88	; 0x58
 80093fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009400 <__smakebuf_r>:
 8009400:	898b      	ldrh	r3, [r1, #12]
 8009402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009404:	079d      	lsls	r5, r3, #30
 8009406:	4606      	mov	r6, r0
 8009408:	460c      	mov	r4, r1
 800940a:	d507      	bpl.n	800941c <__smakebuf_r+0x1c>
 800940c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009410:	6023      	str	r3, [r4, #0]
 8009412:	6123      	str	r3, [r4, #16]
 8009414:	2301      	movs	r3, #1
 8009416:	6163      	str	r3, [r4, #20]
 8009418:	b002      	add	sp, #8
 800941a:	bd70      	pop	{r4, r5, r6, pc}
 800941c:	ab01      	add	r3, sp, #4
 800941e:	466a      	mov	r2, sp
 8009420:	f7ff ffc8 	bl	80093b4 <__swhatbuf_r>
 8009424:	9900      	ldr	r1, [sp, #0]
 8009426:	4605      	mov	r5, r0
 8009428:	4630      	mov	r0, r6
 800942a:	f000 f893 	bl	8009554 <_malloc_r>
 800942e:	b948      	cbnz	r0, 8009444 <__smakebuf_r+0x44>
 8009430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009434:	059a      	lsls	r2, r3, #22
 8009436:	d4ef      	bmi.n	8009418 <__smakebuf_r+0x18>
 8009438:	f023 0303 	bic.w	r3, r3, #3
 800943c:	f043 0302 	orr.w	r3, r3, #2
 8009440:	81a3      	strh	r3, [r4, #12]
 8009442:	e7e3      	b.n	800940c <__smakebuf_r+0xc>
 8009444:	4b0d      	ldr	r3, [pc, #52]	; (800947c <__smakebuf_r+0x7c>)
 8009446:	62b3      	str	r3, [r6, #40]	; 0x28
 8009448:	89a3      	ldrh	r3, [r4, #12]
 800944a:	6020      	str	r0, [r4, #0]
 800944c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009450:	81a3      	strh	r3, [r4, #12]
 8009452:	9b00      	ldr	r3, [sp, #0]
 8009454:	6163      	str	r3, [r4, #20]
 8009456:	9b01      	ldr	r3, [sp, #4]
 8009458:	6120      	str	r0, [r4, #16]
 800945a:	b15b      	cbz	r3, 8009474 <__smakebuf_r+0x74>
 800945c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009460:	4630      	mov	r0, r6
 8009462:	f000 fdbb 	bl	8009fdc <_isatty_r>
 8009466:	b128      	cbz	r0, 8009474 <__smakebuf_r+0x74>
 8009468:	89a3      	ldrh	r3, [r4, #12]
 800946a:	f023 0303 	bic.w	r3, r3, #3
 800946e:	f043 0301 	orr.w	r3, r3, #1
 8009472:	81a3      	strh	r3, [r4, #12]
 8009474:	89a0      	ldrh	r0, [r4, #12]
 8009476:	4305      	orrs	r5, r0
 8009478:	81a5      	strh	r5, [r4, #12]
 800947a:	e7cd      	b.n	8009418 <__smakebuf_r+0x18>
 800947c:	0800920d 	.word	0x0800920d

08009480 <_free_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4605      	mov	r5, r0
 8009484:	2900      	cmp	r1, #0
 8009486:	d041      	beq.n	800950c <_free_r+0x8c>
 8009488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800948c:	1f0c      	subs	r4, r1, #4
 800948e:	2b00      	cmp	r3, #0
 8009490:	bfb8      	it	lt
 8009492:	18e4      	addlt	r4, r4, r3
 8009494:	f000 fdde 	bl	800a054 <__malloc_lock>
 8009498:	4a1d      	ldr	r2, [pc, #116]	; (8009510 <_free_r+0x90>)
 800949a:	6813      	ldr	r3, [r2, #0]
 800949c:	b933      	cbnz	r3, 80094ac <_free_r+0x2c>
 800949e:	6063      	str	r3, [r4, #4]
 80094a0:	6014      	str	r4, [r2, #0]
 80094a2:	4628      	mov	r0, r5
 80094a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094a8:	f000 bdda 	b.w	800a060 <__malloc_unlock>
 80094ac:	42a3      	cmp	r3, r4
 80094ae:	d908      	bls.n	80094c2 <_free_r+0x42>
 80094b0:	6820      	ldr	r0, [r4, #0]
 80094b2:	1821      	adds	r1, r4, r0
 80094b4:	428b      	cmp	r3, r1
 80094b6:	bf01      	itttt	eq
 80094b8:	6819      	ldreq	r1, [r3, #0]
 80094ba:	685b      	ldreq	r3, [r3, #4]
 80094bc:	1809      	addeq	r1, r1, r0
 80094be:	6021      	streq	r1, [r4, #0]
 80094c0:	e7ed      	b.n	800949e <_free_r+0x1e>
 80094c2:	461a      	mov	r2, r3
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	b10b      	cbz	r3, 80094cc <_free_r+0x4c>
 80094c8:	42a3      	cmp	r3, r4
 80094ca:	d9fa      	bls.n	80094c2 <_free_r+0x42>
 80094cc:	6811      	ldr	r1, [r2, #0]
 80094ce:	1850      	adds	r0, r2, r1
 80094d0:	42a0      	cmp	r0, r4
 80094d2:	d10b      	bne.n	80094ec <_free_r+0x6c>
 80094d4:	6820      	ldr	r0, [r4, #0]
 80094d6:	4401      	add	r1, r0
 80094d8:	1850      	adds	r0, r2, r1
 80094da:	4283      	cmp	r3, r0
 80094dc:	6011      	str	r1, [r2, #0]
 80094de:	d1e0      	bne.n	80094a2 <_free_r+0x22>
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	6053      	str	r3, [r2, #4]
 80094e6:	4401      	add	r1, r0
 80094e8:	6011      	str	r1, [r2, #0]
 80094ea:	e7da      	b.n	80094a2 <_free_r+0x22>
 80094ec:	d902      	bls.n	80094f4 <_free_r+0x74>
 80094ee:	230c      	movs	r3, #12
 80094f0:	602b      	str	r3, [r5, #0]
 80094f2:	e7d6      	b.n	80094a2 <_free_r+0x22>
 80094f4:	6820      	ldr	r0, [r4, #0]
 80094f6:	1821      	adds	r1, r4, r0
 80094f8:	428b      	cmp	r3, r1
 80094fa:	bf04      	itt	eq
 80094fc:	6819      	ldreq	r1, [r3, #0]
 80094fe:	685b      	ldreq	r3, [r3, #4]
 8009500:	6063      	str	r3, [r4, #4]
 8009502:	bf04      	itt	eq
 8009504:	1809      	addeq	r1, r1, r0
 8009506:	6021      	streq	r1, [r4, #0]
 8009508:	6054      	str	r4, [r2, #4]
 800950a:	e7ca      	b.n	80094a2 <_free_r+0x22>
 800950c:	bd38      	pop	{r3, r4, r5, pc}
 800950e:	bf00      	nop
 8009510:	20000864 	.word	0x20000864

08009514 <sbrk_aligned>:
 8009514:	b570      	push	{r4, r5, r6, lr}
 8009516:	4e0e      	ldr	r6, [pc, #56]	; (8009550 <sbrk_aligned+0x3c>)
 8009518:	460c      	mov	r4, r1
 800951a:	6831      	ldr	r1, [r6, #0]
 800951c:	4605      	mov	r5, r0
 800951e:	b911      	cbnz	r1, 8009526 <sbrk_aligned+0x12>
 8009520:	f000 fcd4 	bl	8009ecc <_sbrk_r>
 8009524:	6030      	str	r0, [r6, #0]
 8009526:	4621      	mov	r1, r4
 8009528:	4628      	mov	r0, r5
 800952a:	f000 fccf 	bl	8009ecc <_sbrk_r>
 800952e:	1c43      	adds	r3, r0, #1
 8009530:	d00a      	beq.n	8009548 <sbrk_aligned+0x34>
 8009532:	1cc4      	adds	r4, r0, #3
 8009534:	f024 0403 	bic.w	r4, r4, #3
 8009538:	42a0      	cmp	r0, r4
 800953a:	d007      	beq.n	800954c <sbrk_aligned+0x38>
 800953c:	1a21      	subs	r1, r4, r0
 800953e:	4628      	mov	r0, r5
 8009540:	f000 fcc4 	bl	8009ecc <_sbrk_r>
 8009544:	3001      	adds	r0, #1
 8009546:	d101      	bne.n	800954c <sbrk_aligned+0x38>
 8009548:	f04f 34ff 	mov.w	r4, #4294967295
 800954c:	4620      	mov	r0, r4
 800954e:	bd70      	pop	{r4, r5, r6, pc}
 8009550:	20000868 	.word	0x20000868

08009554 <_malloc_r>:
 8009554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009558:	1ccd      	adds	r5, r1, #3
 800955a:	f025 0503 	bic.w	r5, r5, #3
 800955e:	3508      	adds	r5, #8
 8009560:	2d0c      	cmp	r5, #12
 8009562:	bf38      	it	cc
 8009564:	250c      	movcc	r5, #12
 8009566:	2d00      	cmp	r5, #0
 8009568:	4607      	mov	r7, r0
 800956a:	db01      	blt.n	8009570 <_malloc_r+0x1c>
 800956c:	42a9      	cmp	r1, r5
 800956e:	d905      	bls.n	800957c <_malloc_r+0x28>
 8009570:	230c      	movs	r3, #12
 8009572:	603b      	str	r3, [r7, #0]
 8009574:	2600      	movs	r6, #0
 8009576:	4630      	mov	r0, r6
 8009578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800957c:	4e2e      	ldr	r6, [pc, #184]	; (8009638 <_malloc_r+0xe4>)
 800957e:	f000 fd69 	bl	800a054 <__malloc_lock>
 8009582:	6833      	ldr	r3, [r6, #0]
 8009584:	461c      	mov	r4, r3
 8009586:	bb34      	cbnz	r4, 80095d6 <_malloc_r+0x82>
 8009588:	4629      	mov	r1, r5
 800958a:	4638      	mov	r0, r7
 800958c:	f7ff ffc2 	bl	8009514 <sbrk_aligned>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	4604      	mov	r4, r0
 8009594:	d14d      	bne.n	8009632 <_malloc_r+0xde>
 8009596:	6834      	ldr	r4, [r6, #0]
 8009598:	4626      	mov	r6, r4
 800959a:	2e00      	cmp	r6, #0
 800959c:	d140      	bne.n	8009620 <_malloc_r+0xcc>
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	4631      	mov	r1, r6
 80095a2:	4638      	mov	r0, r7
 80095a4:	eb04 0803 	add.w	r8, r4, r3
 80095a8:	f000 fc90 	bl	8009ecc <_sbrk_r>
 80095ac:	4580      	cmp	r8, r0
 80095ae:	d13a      	bne.n	8009626 <_malloc_r+0xd2>
 80095b0:	6821      	ldr	r1, [r4, #0]
 80095b2:	3503      	adds	r5, #3
 80095b4:	1a6d      	subs	r5, r5, r1
 80095b6:	f025 0503 	bic.w	r5, r5, #3
 80095ba:	3508      	adds	r5, #8
 80095bc:	2d0c      	cmp	r5, #12
 80095be:	bf38      	it	cc
 80095c0:	250c      	movcc	r5, #12
 80095c2:	4629      	mov	r1, r5
 80095c4:	4638      	mov	r0, r7
 80095c6:	f7ff ffa5 	bl	8009514 <sbrk_aligned>
 80095ca:	3001      	adds	r0, #1
 80095cc:	d02b      	beq.n	8009626 <_malloc_r+0xd2>
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	442b      	add	r3, r5
 80095d2:	6023      	str	r3, [r4, #0]
 80095d4:	e00e      	b.n	80095f4 <_malloc_r+0xa0>
 80095d6:	6822      	ldr	r2, [r4, #0]
 80095d8:	1b52      	subs	r2, r2, r5
 80095da:	d41e      	bmi.n	800961a <_malloc_r+0xc6>
 80095dc:	2a0b      	cmp	r2, #11
 80095de:	d916      	bls.n	800960e <_malloc_r+0xba>
 80095e0:	1961      	adds	r1, r4, r5
 80095e2:	42a3      	cmp	r3, r4
 80095e4:	6025      	str	r5, [r4, #0]
 80095e6:	bf18      	it	ne
 80095e8:	6059      	strne	r1, [r3, #4]
 80095ea:	6863      	ldr	r3, [r4, #4]
 80095ec:	bf08      	it	eq
 80095ee:	6031      	streq	r1, [r6, #0]
 80095f0:	5162      	str	r2, [r4, r5]
 80095f2:	604b      	str	r3, [r1, #4]
 80095f4:	4638      	mov	r0, r7
 80095f6:	f104 060b 	add.w	r6, r4, #11
 80095fa:	f000 fd31 	bl	800a060 <__malloc_unlock>
 80095fe:	f026 0607 	bic.w	r6, r6, #7
 8009602:	1d23      	adds	r3, r4, #4
 8009604:	1af2      	subs	r2, r6, r3
 8009606:	d0b6      	beq.n	8009576 <_malloc_r+0x22>
 8009608:	1b9b      	subs	r3, r3, r6
 800960a:	50a3      	str	r3, [r4, r2]
 800960c:	e7b3      	b.n	8009576 <_malloc_r+0x22>
 800960e:	6862      	ldr	r2, [r4, #4]
 8009610:	42a3      	cmp	r3, r4
 8009612:	bf0c      	ite	eq
 8009614:	6032      	streq	r2, [r6, #0]
 8009616:	605a      	strne	r2, [r3, #4]
 8009618:	e7ec      	b.n	80095f4 <_malloc_r+0xa0>
 800961a:	4623      	mov	r3, r4
 800961c:	6864      	ldr	r4, [r4, #4]
 800961e:	e7b2      	b.n	8009586 <_malloc_r+0x32>
 8009620:	4634      	mov	r4, r6
 8009622:	6876      	ldr	r6, [r6, #4]
 8009624:	e7b9      	b.n	800959a <_malloc_r+0x46>
 8009626:	230c      	movs	r3, #12
 8009628:	603b      	str	r3, [r7, #0]
 800962a:	4638      	mov	r0, r7
 800962c:	f000 fd18 	bl	800a060 <__malloc_unlock>
 8009630:	e7a1      	b.n	8009576 <_malloc_r+0x22>
 8009632:	6025      	str	r5, [r4, #0]
 8009634:	e7de      	b.n	80095f4 <_malloc_r+0xa0>
 8009636:	bf00      	nop
 8009638:	20000864 	.word	0x20000864

0800963c <__ssputs_r>:
 800963c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009640:	688e      	ldr	r6, [r1, #8]
 8009642:	429e      	cmp	r6, r3
 8009644:	4682      	mov	sl, r0
 8009646:	460c      	mov	r4, r1
 8009648:	4690      	mov	r8, r2
 800964a:	461f      	mov	r7, r3
 800964c:	d838      	bhi.n	80096c0 <__ssputs_r+0x84>
 800964e:	898a      	ldrh	r2, [r1, #12]
 8009650:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009654:	d032      	beq.n	80096bc <__ssputs_r+0x80>
 8009656:	6825      	ldr	r5, [r4, #0]
 8009658:	6909      	ldr	r1, [r1, #16]
 800965a:	eba5 0901 	sub.w	r9, r5, r1
 800965e:	6965      	ldr	r5, [r4, #20]
 8009660:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009664:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009668:	3301      	adds	r3, #1
 800966a:	444b      	add	r3, r9
 800966c:	106d      	asrs	r5, r5, #1
 800966e:	429d      	cmp	r5, r3
 8009670:	bf38      	it	cc
 8009672:	461d      	movcc	r5, r3
 8009674:	0553      	lsls	r3, r2, #21
 8009676:	d531      	bpl.n	80096dc <__ssputs_r+0xa0>
 8009678:	4629      	mov	r1, r5
 800967a:	f7ff ff6b 	bl	8009554 <_malloc_r>
 800967e:	4606      	mov	r6, r0
 8009680:	b950      	cbnz	r0, 8009698 <__ssputs_r+0x5c>
 8009682:	230c      	movs	r3, #12
 8009684:	f8ca 3000 	str.w	r3, [sl]
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	f04f 30ff 	mov.w	r0, #4294967295
 8009694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009698:	6921      	ldr	r1, [r4, #16]
 800969a:	464a      	mov	r2, r9
 800969c:	f7ff fb2c 	bl	8008cf8 <memcpy>
 80096a0:	89a3      	ldrh	r3, [r4, #12]
 80096a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096aa:	81a3      	strh	r3, [r4, #12]
 80096ac:	6126      	str	r6, [r4, #16]
 80096ae:	6165      	str	r5, [r4, #20]
 80096b0:	444e      	add	r6, r9
 80096b2:	eba5 0509 	sub.w	r5, r5, r9
 80096b6:	6026      	str	r6, [r4, #0]
 80096b8:	60a5      	str	r5, [r4, #8]
 80096ba:	463e      	mov	r6, r7
 80096bc:	42be      	cmp	r6, r7
 80096be:	d900      	bls.n	80096c2 <__ssputs_r+0x86>
 80096c0:	463e      	mov	r6, r7
 80096c2:	6820      	ldr	r0, [r4, #0]
 80096c4:	4632      	mov	r2, r6
 80096c6:	4641      	mov	r1, r8
 80096c8:	f000 fcaa 	bl	800a020 <memmove>
 80096cc:	68a3      	ldr	r3, [r4, #8]
 80096ce:	1b9b      	subs	r3, r3, r6
 80096d0:	60a3      	str	r3, [r4, #8]
 80096d2:	6823      	ldr	r3, [r4, #0]
 80096d4:	4433      	add	r3, r6
 80096d6:	6023      	str	r3, [r4, #0]
 80096d8:	2000      	movs	r0, #0
 80096da:	e7db      	b.n	8009694 <__ssputs_r+0x58>
 80096dc:	462a      	mov	r2, r5
 80096de:	f000 fcc5 	bl	800a06c <_realloc_r>
 80096e2:	4606      	mov	r6, r0
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d1e1      	bne.n	80096ac <__ssputs_r+0x70>
 80096e8:	6921      	ldr	r1, [r4, #16]
 80096ea:	4650      	mov	r0, sl
 80096ec:	f7ff fec8 	bl	8009480 <_free_r>
 80096f0:	e7c7      	b.n	8009682 <__ssputs_r+0x46>
	...

080096f4 <_svfiprintf_r>:
 80096f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f8:	4698      	mov	r8, r3
 80096fa:	898b      	ldrh	r3, [r1, #12]
 80096fc:	061b      	lsls	r3, r3, #24
 80096fe:	b09d      	sub	sp, #116	; 0x74
 8009700:	4607      	mov	r7, r0
 8009702:	460d      	mov	r5, r1
 8009704:	4614      	mov	r4, r2
 8009706:	d50e      	bpl.n	8009726 <_svfiprintf_r+0x32>
 8009708:	690b      	ldr	r3, [r1, #16]
 800970a:	b963      	cbnz	r3, 8009726 <_svfiprintf_r+0x32>
 800970c:	2140      	movs	r1, #64	; 0x40
 800970e:	f7ff ff21 	bl	8009554 <_malloc_r>
 8009712:	6028      	str	r0, [r5, #0]
 8009714:	6128      	str	r0, [r5, #16]
 8009716:	b920      	cbnz	r0, 8009722 <_svfiprintf_r+0x2e>
 8009718:	230c      	movs	r3, #12
 800971a:	603b      	str	r3, [r7, #0]
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	e0d1      	b.n	80098c6 <_svfiprintf_r+0x1d2>
 8009722:	2340      	movs	r3, #64	; 0x40
 8009724:	616b      	str	r3, [r5, #20]
 8009726:	2300      	movs	r3, #0
 8009728:	9309      	str	r3, [sp, #36]	; 0x24
 800972a:	2320      	movs	r3, #32
 800972c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009730:	f8cd 800c 	str.w	r8, [sp, #12]
 8009734:	2330      	movs	r3, #48	; 0x30
 8009736:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80098e0 <_svfiprintf_r+0x1ec>
 800973a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800973e:	f04f 0901 	mov.w	r9, #1
 8009742:	4623      	mov	r3, r4
 8009744:	469a      	mov	sl, r3
 8009746:	f813 2b01 	ldrb.w	r2, [r3], #1
 800974a:	b10a      	cbz	r2, 8009750 <_svfiprintf_r+0x5c>
 800974c:	2a25      	cmp	r2, #37	; 0x25
 800974e:	d1f9      	bne.n	8009744 <_svfiprintf_r+0x50>
 8009750:	ebba 0b04 	subs.w	fp, sl, r4
 8009754:	d00b      	beq.n	800976e <_svfiprintf_r+0x7a>
 8009756:	465b      	mov	r3, fp
 8009758:	4622      	mov	r2, r4
 800975a:	4629      	mov	r1, r5
 800975c:	4638      	mov	r0, r7
 800975e:	f7ff ff6d 	bl	800963c <__ssputs_r>
 8009762:	3001      	adds	r0, #1
 8009764:	f000 80aa 	beq.w	80098bc <_svfiprintf_r+0x1c8>
 8009768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800976a:	445a      	add	r2, fp
 800976c:	9209      	str	r2, [sp, #36]	; 0x24
 800976e:	f89a 3000 	ldrb.w	r3, [sl]
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 80a2 	beq.w	80098bc <_svfiprintf_r+0x1c8>
 8009778:	2300      	movs	r3, #0
 800977a:	f04f 32ff 	mov.w	r2, #4294967295
 800977e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009782:	f10a 0a01 	add.w	sl, sl, #1
 8009786:	9304      	str	r3, [sp, #16]
 8009788:	9307      	str	r3, [sp, #28]
 800978a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800978e:	931a      	str	r3, [sp, #104]	; 0x68
 8009790:	4654      	mov	r4, sl
 8009792:	2205      	movs	r2, #5
 8009794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009798:	4851      	ldr	r0, [pc, #324]	; (80098e0 <_svfiprintf_r+0x1ec>)
 800979a:	f7f6 fcf9 	bl	8000190 <memchr>
 800979e:	9a04      	ldr	r2, [sp, #16]
 80097a0:	b9d8      	cbnz	r0, 80097da <_svfiprintf_r+0xe6>
 80097a2:	06d0      	lsls	r0, r2, #27
 80097a4:	bf44      	itt	mi
 80097a6:	2320      	movmi	r3, #32
 80097a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ac:	0711      	lsls	r1, r2, #28
 80097ae:	bf44      	itt	mi
 80097b0:	232b      	movmi	r3, #43	; 0x2b
 80097b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097b6:	f89a 3000 	ldrb.w	r3, [sl]
 80097ba:	2b2a      	cmp	r3, #42	; 0x2a
 80097bc:	d015      	beq.n	80097ea <_svfiprintf_r+0xf6>
 80097be:	9a07      	ldr	r2, [sp, #28]
 80097c0:	4654      	mov	r4, sl
 80097c2:	2000      	movs	r0, #0
 80097c4:	f04f 0c0a 	mov.w	ip, #10
 80097c8:	4621      	mov	r1, r4
 80097ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097ce:	3b30      	subs	r3, #48	; 0x30
 80097d0:	2b09      	cmp	r3, #9
 80097d2:	d94e      	bls.n	8009872 <_svfiprintf_r+0x17e>
 80097d4:	b1b0      	cbz	r0, 8009804 <_svfiprintf_r+0x110>
 80097d6:	9207      	str	r2, [sp, #28]
 80097d8:	e014      	b.n	8009804 <_svfiprintf_r+0x110>
 80097da:	eba0 0308 	sub.w	r3, r0, r8
 80097de:	fa09 f303 	lsl.w	r3, r9, r3
 80097e2:	4313      	orrs	r3, r2
 80097e4:	9304      	str	r3, [sp, #16]
 80097e6:	46a2      	mov	sl, r4
 80097e8:	e7d2      	b.n	8009790 <_svfiprintf_r+0x9c>
 80097ea:	9b03      	ldr	r3, [sp, #12]
 80097ec:	1d19      	adds	r1, r3, #4
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	9103      	str	r1, [sp, #12]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	bfbb      	ittet	lt
 80097f6:	425b      	neglt	r3, r3
 80097f8:	f042 0202 	orrlt.w	r2, r2, #2
 80097fc:	9307      	strge	r3, [sp, #28]
 80097fe:	9307      	strlt	r3, [sp, #28]
 8009800:	bfb8      	it	lt
 8009802:	9204      	strlt	r2, [sp, #16]
 8009804:	7823      	ldrb	r3, [r4, #0]
 8009806:	2b2e      	cmp	r3, #46	; 0x2e
 8009808:	d10c      	bne.n	8009824 <_svfiprintf_r+0x130>
 800980a:	7863      	ldrb	r3, [r4, #1]
 800980c:	2b2a      	cmp	r3, #42	; 0x2a
 800980e:	d135      	bne.n	800987c <_svfiprintf_r+0x188>
 8009810:	9b03      	ldr	r3, [sp, #12]
 8009812:	1d1a      	adds	r2, r3, #4
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	9203      	str	r2, [sp, #12]
 8009818:	2b00      	cmp	r3, #0
 800981a:	bfb8      	it	lt
 800981c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009820:	3402      	adds	r4, #2
 8009822:	9305      	str	r3, [sp, #20]
 8009824:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80098e4 <_svfiprintf_r+0x1f0>
 8009828:	7821      	ldrb	r1, [r4, #0]
 800982a:	2203      	movs	r2, #3
 800982c:	4650      	mov	r0, sl
 800982e:	f7f6 fcaf 	bl	8000190 <memchr>
 8009832:	b140      	cbz	r0, 8009846 <_svfiprintf_r+0x152>
 8009834:	2340      	movs	r3, #64	; 0x40
 8009836:	eba0 000a 	sub.w	r0, r0, sl
 800983a:	fa03 f000 	lsl.w	r0, r3, r0
 800983e:	9b04      	ldr	r3, [sp, #16]
 8009840:	4303      	orrs	r3, r0
 8009842:	3401      	adds	r4, #1
 8009844:	9304      	str	r3, [sp, #16]
 8009846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800984a:	4827      	ldr	r0, [pc, #156]	; (80098e8 <_svfiprintf_r+0x1f4>)
 800984c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009850:	2206      	movs	r2, #6
 8009852:	f7f6 fc9d 	bl	8000190 <memchr>
 8009856:	2800      	cmp	r0, #0
 8009858:	d038      	beq.n	80098cc <_svfiprintf_r+0x1d8>
 800985a:	4b24      	ldr	r3, [pc, #144]	; (80098ec <_svfiprintf_r+0x1f8>)
 800985c:	bb1b      	cbnz	r3, 80098a6 <_svfiprintf_r+0x1b2>
 800985e:	9b03      	ldr	r3, [sp, #12]
 8009860:	3307      	adds	r3, #7
 8009862:	f023 0307 	bic.w	r3, r3, #7
 8009866:	3308      	adds	r3, #8
 8009868:	9303      	str	r3, [sp, #12]
 800986a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986c:	4433      	add	r3, r6
 800986e:	9309      	str	r3, [sp, #36]	; 0x24
 8009870:	e767      	b.n	8009742 <_svfiprintf_r+0x4e>
 8009872:	fb0c 3202 	mla	r2, ip, r2, r3
 8009876:	460c      	mov	r4, r1
 8009878:	2001      	movs	r0, #1
 800987a:	e7a5      	b.n	80097c8 <_svfiprintf_r+0xd4>
 800987c:	2300      	movs	r3, #0
 800987e:	3401      	adds	r4, #1
 8009880:	9305      	str	r3, [sp, #20]
 8009882:	4619      	mov	r1, r3
 8009884:	f04f 0c0a 	mov.w	ip, #10
 8009888:	4620      	mov	r0, r4
 800988a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800988e:	3a30      	subs	r2, #48	; 0x30
 8009890:	2a09      	cmp	r2, #9
 8009892:	d903      	bls.n	800989c <_svfiprintf_r+0x1a8>
 8009894:	2b00      	cmp	r3, #0
 8009896:	d0c5      	beq.n	8009824 <_svfiprintf_r+0x130>
 8009898:	9105      	str	r1, [sp, #20]
 800989a:	e7c3      	b.n	8009824 <_svfiprintf_r+0x130>
 800989c:	fb0c 2101 	mla	r1, ip, r1, r2
 80098a0:	4604      	mov	r4, r0
 80098a2:	2301      	movs	r3, #1
 80098a4:	e7f0      	b.n	8009888 <_svfiprintf_r+0x194>
 80098a6:	ab03      	add	r3, sp, #12
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	462a      	mov	r2, r5
 80098ac:	4b10      	ldr	r3, [pc, #64]	; (80098f0 <_svfiprintf_r+0x1fc>)
 80098ae:	a904      	add	r1, sp, #16
 80098b0:	4638      	mov	r0, r7
 80098b2:	f3af 8000 	nop.w
 80098b6:	1c42      	adds	r2, r0, #1
 80098b8:	4606      	mov	r6, r0
 80098ba:	d1d6      	bne.n	800986a <_svfiprintf_r+0x176>
 80098bc:	89ab      	ldrh	r3, [r5, #12]
 80098be:	065b      	lsls	r3, r3, #25
 80098c0:	f53f af2c 	bmi.w	800971c <_svfiprintf_r+0x28>
 80098c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098c6:	b01d      	add	sp, #116	; 0x74
 80098c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098cc:	ab03      	add	r3, sp, #12
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	462a      	mov	r2, r5
 80098d2:	4b07      	ldr	r3, [pc, #28]	; (80098f0 <_svfiprintf_r+0x1fc>)
 80098d4:	a904      	add	r1, sp, #16
 80098d6:	4638      	mov	r0, r7
 80098d8:	f000 f9d2 	bl	8009c80 <_printf_i>
 80098dc:	e7eb      	b.n	80098b6 <_svfiprintf_r+0x1c2>
 80098de:	bf00      	nop
 80098e0:	0800a424 	.word	0x0800a424
 80098e4:	0800a42a 	.word	0x0800a42a
 80098e8:	0800a42e 	.word	0x0800a42e
 80098ec:	00000000 	.word	0x00000000
 80098f0:	0800963d 	.word	0x0800963d

080098f4 <__sfputc_r>:
 80098f4:	6893      	ldr	r3, [r2, #8]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	b410      	push	{r4}
 80098fc:	6093      	str	r3, [r2, #8]
 80098fe:	da07      	bge.n	8009910 <__sfputc_r+0x1c>
 8009900:	6994      	ldr	r4, [r2, #24]
 8009902:	42a3      	cmp	r3, r4
 8009904:	db01      	blt.n	800990a <__sfputc_r+0x16>
 8009906:	290a      	cmp	r1, #10
 8009908:	d102      	bne.n	8009910 <__sfputc_r+0x1c>
 800990a:	bc10      	pop	{r4}
 800990c:	f7ff badc 	b.w	8008ec8 <__swbuf_r>
 8009910:	6813      	ldr	r3, [r2, #0]
 8009912:	1c58      	adds	r0, r3, #1
 8009914:	6010      	str	r0, [r2, #0]
 8009916:	7019      	strb	r1, [r3, #0]
 8009918:	4608      	mov	r0, r1
 800991a:	bc10      	pop	{r4}
 800991c:	4770      	bx	lr

0800991e <__sfputs_r>:
 800991e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009920:	4606      	mov	r6, r0
 8009922:	460f      	mov	r7, r1
 8009924:	4614      	mov	r4, r2
 8009926:	18d5      	adds	r5, r2, r3
 8009928:	42ac      	cmp	r4, r5
 800992a:	d101      	bne.n	8009930 <__sfputs_r+0x12>
 800992c:	2000      	movs	r0, #0
 800992e:	e007      	b.n	8009940 <__sfputs_r+0x22>
 8009930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009934:	463a      	mov	r2, r7
 8009936:	4630      	mov	r0, r6
 8009938:	f7ff ffdc 	bl	80098f4 <__sfputc_r>
 800993c:	1c43      	adds	r3, r0, #1
 800993e:	d1f3      	bne.n	8009928 <__sfputs_r+0xa>
 8009940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009944 <_vfiprintf_r>:
 8009944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	460d      	mov	r5, r1
 800994a:	b09d      	sub	sp, #116	; 0x74
 800994c:	4614      	mov	r4, r2
 800994e:	4698      	mov	r8, r3
 8009950:	4606      	mov	r6, r0
 8009952:	b118      	cbz	r0, 800995c <_vfiprintf_r+0x18>
 8009954:	6983      	ldr	r3, [r0, #24]
 8009956:	b90b      	cbnz	r3, 800995c <_vfiprintf_r+0x18>
 8009958:	f7ff fc8c 	bl	8009274 <__sinit>
 800995c:	4b89      	ldr	r3, [pc, #548]	; (8009b84 <_vfiprintf_r+0x240>)
 800995e:	429d      	cmp	r5, r3
 8009960:	d11b      	bne.n	800999a <_vfiprintf_r+0x56>
 8009962:	6875      	ldr	r5, [r6, #4]
 8009964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009966:	07d9      	lsls	r1, r3, #31
 8009968:	d405      	bmi.n	8009976 <_vfiprintf_r+0x32>
 800996a:	89ab      	ldrh	r3, [r5, #12]
 800996c:	059a      	lsls	r2, r3, #22
 800996e:	d402      	bmi.n	8009976 <_vfiprintf_r+0x32>
 8009970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009972:	f7ff fd1d 	bl	80093b0 <__retarget_lock_acquire_recursive>
 8009976:	89ab      	ldrh	r3, [r5, #12]
 8009978:	071b      	lsls	r3, r3, #28
 800997a:	d501      	bpl.n	8009980 <_vfiprintf_r+0x3c>
 800997c:	692b      	ldr	r3, [r5, #16]
 800997e:	b9eb      	cbnz	r3, 80099bc <_vfiprintf_r+0x78>
 8009980:	4629      	mov	r1, r5
 8009982:	4630      	mov	r0, r6
 8009984:	f7ff faf2 	bl	8008f6c <__swsetup_r>
 8009988:	b1c0      	cbz	r0, 80099bc <_vfiprintf_r+0x78>
 800998a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800998c:	07dc      	lsls	r4, r3, #31
 800998e:	d50e      	bpl.n	80099ae <_vfiprintf_r+0x6a>
 8009990:	f04f 30ff 	mov.w	r0, #4294967295
 8009994:	b01d      	add	sp, #116	; 0x74
 8009996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999a:	4b7b      	ldr	r3, [pc, #492]	; (8009b88 <_vfiprintf_r+0x244>)
 800999c:	429d      	cmp	r5, r3
 800999e:	d101      	bne.n	80099a4 <_vfiprintf_r+0x60>
 80099a0:	68b5      	ldr	r5, [r6, #8]
 80099a2:	e7df      	b.n	8009964 <_vfiprintf_r+0x20>
 80099a4:	4b79      	ldr	r3, [pc, #484]	; (8009b8c <_vfiprintf_r+0x248>)
 80099a6:	429d      	cmp	r5, r3
 80099a8:	bf08      	it	eq
 80099aa:	68f5      	ldreq	r5, [r6, #12]
 80099ac:	e7da      	b.n	8009964 <_vfiprintf_r+0x20>
 80099ae:	89ab      	ldrh	r3, [r5, #12]
 80099b0:	0598      	lsls	r0, r3, #22
 80099b2:	d4ed      	bmi.n	8009990 <_vfiprintf_r+0x4c>
 80099b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099b6:	f7ff fcfc 	bl	80093b2 <__retarget_lock_release_recursive>
 80099ba:	e7e9      	b.n	8009990 <_vfiprintf_r+0x4c>
 80099bc:	2300      	movs	r3, #0
 80099be:	9309      	str	r3, [sp, #36]	; 0x24
 80099c0:	2320      	movs	r3, #32
 80099c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80099ca:	2330      	movs	r3, #48	; 0x30
 80099cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b90 <_vfiprintf_r+0x24c>
 80099d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099d4:	f04f 0901 	mov.w	r9, #1
 80099d8:	4623      	mov	r3, r4
 80099da:	469a      	mov	sl, r3
 80099dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099e0:	b10a      	cbz	r2, 80099e6 <_vfiprintf_r+0xa2>
 80099e2:	2a25      	cmp	r2, #37	; 0x25
 80099e4:	d1f9      	bne.n	80099da <_vfiprintf_r+0x96>
 80099e6:	ebba 0b04 	subs.w	fp, sl, r4
 80099ea:	d00b      	beq.n	8009a04 <_vfiprintf_r+0xc0>
 80099ec:	465b      	mov	r3, fp
 80099ee:	4622      	mov	r2, r4
 80099f0:	4629      	mov	r1, r5
 80099f2:	4630      	mov	r0, r6
 80099f4:	f7ff ff93 	bl	800991e <__sfputs_r>
 80099f8:	3001      	adds	r0, #1
 80099fa:	f000 80aa 	beq.w	8009b52 <_vfiprintf_r+0x20e>
 80099fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a00:	445a      	add	r2, fp
 8009a02:	9209      	str	r2, [sp, #36]	; 0x24
 8009a04:	f89a 3000 	ldrb.w	r3, [sl]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 80a2 	beq.w	8009b52 <_vfiprintf_r+0x20e>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	f04f 32ff 	mov.w	r2, #4294967295
 8009a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a18:	f10a 0a01 	add.w	sl, sl, #1
 8009a1c:	9304      	str	r3, [sp, #16]
 8009a1e:	9307      	str	r3, [sp, #28]
 8009a20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a24:	931a      	str	r3, [sp, #104]	; 0x68
 8009a26:	4654      	mov	r4, sl
 8009a28:	2205      	movs	r2, #5
 8009a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a2e:	4858      	ldr	r0, [pc, #352]	; (8009b90 <_vfiprintf_r+0x24c>)
 8009a30:	f7f6 fbae 	bl	8000190 <memchr>
 8009a34:	9a04      	ldr	r2, [sp, #16]
 8009a36:	b9d8      	cbnz	r0, 8009a70 <_vfiprintf_r+0x12c>
 8009a38:	06d1      	lsls	r1, r2, #27
 8009a3a:	bf44      	itt	mi
 8009a3c:	2320      	movmi	r3, #32
 8009a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a42:	0713      	lsls	r3, r2, #28
 8009a44:	bf44      	itt	mi
 8009a46:	232b      	movmi	r3, #43	; 0x2b
 8009a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a50:	2b2a      	cmp	r3, #42	; 0x2a
 8009a52:	d015      	beq.n	8009a80 <_vfiprintf_r+0x13c>
 8009a54:	9a07      	ldr	r2, [sp, #28]
 8009a56:	4654      	mov	r4, sl
 8009a58:	2000      	movs	r0, #0
 8009a5a:	f04f 0c0a 	mov.w	ip, #10
 8009a5e:	4621      	mov	r1, r4
 8009a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a64:	3b30      	subs	r3, #48	; 0x30
 8009a66:	2b09      	cmp	r3, #9
 8009a68:	d94e      	bls.n	8009b08 <_vfiprintf_r+0x1c4>
 8009a6a:	b1b0      	cbz	r0, 8009a9a <_vfiprintf_r+0x156>
 8009a6c:	9207      	str	r2, [sp, #28]
 8009a6e:	e014      	b.n	8009a9a <_vfiprintf_r+0x156>
 8009a70:	eba0 0308 	sub.w	r3, r0, r8
 8009a74:	fa09 f303 	lsl.w	r3, r9, r3
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	9304      	str	r3, [sp, #16]
 8009a7c:	46a2      	mov	sl, r4
 8009a7e:	e7d2      	b.n	8009a26 <_vfiprintf_r+0xe2>
 8009a80:	9b03      	ldr	r3, [sp, #12]
 8009a82:	1d19      	adds	r1, r3, #4
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	9103      	str	r1, [sp, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	bfbb      	ittet	lt
 8009a8c:	425b      	neglt	r3, r3
 8009a8e:	f042 0202 	orrlt.w	r2, r2, #2
 8009a92:	9307      	strge	r3, [sp, #28]
 8009a94:	9307      	strlt	r3, [sp, #28]
 8009a96:	bfb8      	it	lt
 8009a98:	9204      	strlt	r2, [sp, #16]
 8009a9a:	7823      	ldrb	r3, [r4, #0]
 8009a9c:	2b2e      	cmp	r3, #46	; 0x2e
 8009a9e:	d10c      	bne.n	8009aba <_vfiprintf_r+0x176>
 8009aa0:	7863      	ldrb	r3, [r4, #1]
 8009aa2:	2b2a      	cmp	r3, #42	; 0x2a
 8009aa4:	d135      	bne.n	8009b12 <_vfiprintf_r+0x1ce>
 8009aa6:	9b03      	ldr	r3, [sp, #12]
 8009aa8:	1d1a      	adds	r2, r3, #4
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	9203      	str	r2, [sp, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	bfb8      	it	lt
 8009ab2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ab6:	3402      	adds	r4, #2
 8009ab8:	9305      	str	r3, [sp, #20]
 8009aba:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009b94 <_vfiprintf_r+0x250>
 8009abe:	7821      	ldrb	r1, [r4, #0]
 8009ac0:	2203      	movs	r2, #3
 8009ac2:	4650      	mov	r0, sl
 8009ac4:	f7f6 fb64 	bl	8000190 <memchr>
 8009ac8:	b140      	cbz	r0, 8009adc <_vfiprintf_r+0x198>
 8009aca:	2340      	movs	r3, #64	; 0x40
 8009acc:	eba0 000a 	sub.w	r0, r0, sl
 8009ad0:	fa03 f000 	lsl.w	r0, r3, r0
 8009ad4:	9b04      	ldr	r3, [sp, #16]
 8009ad6:	4303      	orrs	r3, r0
 8009ad8:	3401      	adds	r4, #1
 8009ada:	9304      	str	r3, [sp, #16]
 8009adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ae0:	482d      	ldr	r0, [pc, #180]	; (8009b98 <_vfiprintf_r+0x254>)
 8009ae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ae6:	2206      	movs	r2, #6
 8009ae8:	f7f6 fb52 	bl	8000190 <memchr>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d03f      	beq.n	8009b70 <_vfiprintf_r+0x22c>
 8009af0:	4b2a      	ldr	r3, [pc, #168]	; (8009b9c <_vfiprintf_r+0x258>)
 8009af2:	bb1b      	cbnz	r3, 8009b3c <_vfiprintf_r+0x1f8>
 8009af4:	9b03      	ldr	r3, [sp, #12]
 8009af6:	3307      	adds	r3, #7
 8009af8:	f023 0307 	bic.w	r3, r3, #7
 8009afc:	3308      	adds	r3, #8
 8009afe:	9303      	str	r3, [sp, #12]
 8009b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b02:	443b      	add	r3, r7
 8009b04:	9309      	str	r3, [sp, #36]	; 0x24
 8009b06:	e767      	b.n	80099d8 <_vfiprintf_r+0x94>
 8009b08:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	2001      	movs	r0, #1
 8009b10:	e7a5      	b.n	8009a5e <_vfiprintf_r+0x11a>
 8009b12:	2300      	movs	r3, #0
 8009b14:	3401      	adds	r4, #1
 8009b16:	9305      	str	r3, [sp, #20]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	f04f 0c0a 	mov.w	ip, #10
 8009b1e:	4620      	mov	r0, r4
 8009b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b24:	3a30      	subs	r2, #48	; 0x30
 8009b26:	2a09      	cmp	r2, #9
 8009b28:	d903      	bls.n	8009b32 <_vfiprintf_r+0x1ee>
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d0c5      	beq.n	8009aba <_vfiprintf_r+0x176>
 8009b2e:	9105      	str	r1, [sp, #20]
 8009b30:	e7c3      	b.n	8009aba <_vfiprintf_r+0x176>
 8009b32:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b36:	4604      	mov	r4, r0
 8009b38:	2301      	movs	r3, #1
 8009b3a:	e7f0      	b.n	8009b1e <_vfiprintf_r+0x1da>
 8009b3c:	ab03      	add	r3, sp, #12
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	462a      	mov	r2, r5
 8009b42:	4b17      	ldr	r3, [pc, #92]	; (8009ba0 <_vfiprintf_r+0x25c>)
 8009b44:	a904      	add	r1, sp, #16
 8009b46:	4630      	mov	r0, r6
 8009b48:	f3af 8000 	nop.w
 8009b4c:	4607      	mov	r7, r0
 8009b4e:	1c78      	adds	r0, r7, #1
 8009b50:	d1d6      	bne.n	8009b00 <_vfiprintf_r+0x1bc>
 8009b52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b54:	07d9      	lsls	r1, r3, #31
 8009b56:	d405      	bmi.n	8009b64 <_vfiprintf_r+0x220>
 8009b58:	89ab      	ldrh	r3, [r5, #12]
 8009b5a:	059a      	lsls	r2, r3, #22
 8009b5c:	d402      	bmi.n	8009b64 <_vfiprintf_r+0x220>
 8009b5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b60:	f7ff fc27 	bl	80093b2 <__retarget_lock_release_recursive>
 8009b64:	89ab      	ldrh	r3, [r5, #12]
 8009b66:	065b      	lsls	r3, r3, #25
 8009b68:	f53f af12 	bmi.w	8009990 <_vfiprintf_r+0x4c>
 8009b6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b6e:	e711      	b.n	8009994 <_vfiprintf_r+0x50>
 8009b70:	ab03      	add	r3, sp, #12
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	462a      	mov	r2, r5
 8009b76:	4b0a      	ldr	r3, [pc, #40]	; (8009ba0 <_vfiprintf_r+0x25c>)
 8009b78:	a904      	add	r1, sp, #16
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	f000 f880 	bl	8009c80 <_printf_i>
 8009b80:	e7e4      	b.n	8009b4c <_vfiprintf_r+0x208>
 8009b82:	bf00      	nop
 8009b84:	0800a3e4 	.word	0x0800a3e4
 8009b88:	0800a404 	.word	0x0800a404
 8009b8c:	0800a3c4 	.word	0x0800a3c4
 8009b90:	0800a424 	.word	0x0800a424
 8009b94:	0800a42a 	.word	0x0800a42a
 8009b98:	0800a42e 	.word	0x0800a42e
 8009b9c:	00000000 	.word	0x00000000
 8009ba0:	0800991f 	.word	0x0800991f

08009ba4 <_printf_common>:
 8009ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba8:	4616      	mov	r6, r2
 8009baa:	4699      	mov	r9, r3
 8009bac:	688a      	ldr	r2, [r1, #8]
 8009bae:	690b      	ldr	r3, [r1, #16]
 8009bb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	bfb8      	it	lt
 8009bb8:	4613      	movlt	r3, r2
 8009bba:	6033      	str	r3, [r6, #0]
 8009bbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bc0:	4607      	mov	r7, r0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	b10a      	cbz	r2, 8009bca <_printf_common+0x26>
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	6033      	str	r3, [r6, #0]
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	0699      	lsls	r1, r3, #26
 8009bce:	bf42      	ittt	mi
 8009bd0:	6833      	ldrmi	r3, [r6, #0]
 8009bd2:	3302      	addmi	r3, #2
 8009bd4:	6033      	strmi	r3, [r6, #0]
 8009bd6:	6825      	ldr	r5, [r4, #0]
 8009bd8:	f015 0506 	ands.w	r5, r5, #6
 8009bdc:	d106      	bne.n	8009bec <_printf_common+0x48>
 8009bde:	f104 0a19 	add.w	sl, r4, #25
 8009be2:	68e3      	ldr	r3, [r4, #12]
 8009be4:	6832      	ldr	r2, [r6, #0]
 8009be6:	1a9b      	subs	r3, r3, r2
 8009be8:	42ab      	cmp	r3, r5
 8009bea:	dc26      	bgt.n	8009c3a <_printf_common+0x96>
 8009bec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bf0:	1e13      	subs	r3, r2, #0
 8009bf2:	6822      	ldr	r2, [r4, #0]
 8009bf4:	bf18      	it	ne
 8009bf6:	2301      	movne	r3, #1
 8009bf8:	0692      	lsls	r2, r2, #26
 8009bfa:	d42b      	bmi.n	8009c54 <_printf_common+0xb0>
 8009bfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c00:	4649      	mov	r1, r9
 8009c02:	4638      	mov	r0, r7
 8009c04:	47c0      	blx	r8
 8009c06:	3001      	adds	r0, #1
 8009c08:	d01e      	beq.n	8009c48 <_printf_common+0xa4>
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	68e5      	ldr	r5, [r4, #12]
 8009c0e:	6832      	ldr	r2, [r6, #0]
 8009c10:	f003 0306 	and.w	r3, r3, #6
 8009c14:	2b04      	cmp	r3, #4
 8009c16:	bf08      	it	eq
 8009c18:	1aad      	subeq	r5, r5, r2
 8009c1a:	68a3      	ldr	r3, [r4, #8]
 8009c1c:	6922      	ldr	r2, [r4, #16]
 8009c1e:	bf0c      	ite	eq
 8009c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c24:	2500      	movne	r5, #0
 8009c26:	4293      	cmp	r3, r2
 8009c28:	bfc4      	itt	gt
 8009c2a:	1a9b      	subgt	r3, r3, r2
 8009c2c:	18ed      	addgt	r5, r5, r3
 8009c2e:	2600      	movs	r6, #0
 8009c30:	341a      	adds	r4, #26
 8009c32:	42b5      	cmp	r5, r6
 8009c34:	d11a      	bne.n	8009c6c <_printf_common+0xc8>
 8009c36:	2000      	movs	r0, #0
 8009c38:	e008      	b.n	8009c4c <_printf_common+0xa8>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	4652      	mov	r2, sl
 8009c3e:	4649      	mov	r1, r9
 8009c40:	4638      	mov	r0, r7
 8009c42:	47c0      	blx	r8
 8009c44:	3001      	adds	r0, #1
 8009c46:	d103      	bne.n	8009c50 <_printf_common+0xac>
 8009c48:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c50:	3501      	adds	r5, #1
 8009c52:	e7c6      	b.n	8009be2 <_printf_common+0x3e>
 8009c54:	18e1      	adds	r1, r4, r3
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	2030      	movs	r0, #48	; 0x30
 8009c5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c5e:	4422      	add	r2, r4
 8009c60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c68:	3302      	adds	r3, #2
 8009c6a:	e7c7      	b.n	8009bfc <_printf_common+0x58>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	4622      	mov	r2, r4
 8009c70:	4649      	mov	r1, r9
 8009c72:	4638      	mov	r0, r7
 8009c74:	47c0      	blx	r8
 8009c76:	3001      	adds	r0, #1
 8009c78:	d0e6      	beq.n	8009c48 <_printf_common+0xa4>
 8009c7a:	3601      	adds	r6, #1
 8009c7c:	e7d9      	b.n	8009c32 <_printf_common+0x8e>
	...

08009c80 <_printf_i>:
 8009c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c84:	7e0f      	ldrb	r7, [r1, #24]
 8009c86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c88:	2f78      	cmp	r7, #120	; 0x78
 8009c8a:	4691      	mov	r9, r2
 8009c8c:	4680      	mov	r8, r0
 8009c8e:	460c      	mov	r4, r1
 8009c90:	469a      	mov	sl, r3
 8009c92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c96:	d807      	bhi.n	8009ca8 <_printf_i+0x28>
 8009c98:	2f62      	cmp	r7, #98	; 0x62
 8009c9a:	d80a      	bhi.n	8009cb2 <_printf_i+0x32>
 8009c9c:	2f00      	cmp	r7, #0
 8009c9e:	f000 80d8 	beq.w	8009e52 <_printf_i+0x1d2>
 8009ca2:	2f58      	cmp	r7, #88	; 0x58
 8009ca4:	f000 80a3 	beq.w	8009dee <_printf_i+0x16e>
 8009ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009cb0:	e03a      	b.n	8009d28 <_printf_i+0xa8>
 8009cb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cb6:	2b15      	cmp	r3, #21
 8009cb8:	d8f6      	bhi.n	8009ca8 <_printf_i+0x28>
 8009cba:	a101      	add	r1, pc, #4	; (adr r1, 8009cc0 <_printf_i+0x40>)
 8009cbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cc0:	08009d19 	.word	0x08009d19
 8009cc4:	08009d2d 	.word	0x08009d2d
 8009cc8:	08009ca9 	.word	0x08009ca9
 8009ccc:	08009ca9 	.word	0x08009ca9
 8009cd0:	08009ca9 	.word	0x08009ca9
 8009cd4:	08009ca9 	.word	0x08009ca9
 8009cd8:	08009d2d 	.word	0x08009d2d
 8009cdc:	08009ca9 	.word	0x08009ca9
 8009ce0:	08009ca9 	.word	0x08009ca9
 8009ce4:	08009ca9 	.word	0x08009ca9
 8009ce8:	08009ca9 	.word	0x08009ca9
 8009cec:	08009e39 	.word	0x08009e39
 8009cf0:	08009d5d 	.word	0x08009d5d
 8009cf4:	08009e1b 	.word	0x08009e1b
 8009cf8:	08009ca9 	.word	0x08009ca9
 8009cfc:	08009ca9 	.word	0x08009ca9
 8009d00:	08009e5b 	.word	0x08009e5b
 8009d04:	08009ca9 	.word	0x08009ca9
 8009d08:	08009d5d 	.word	0x08009d5d
 8009d0c:	08009ca9 	.word	0x08009ca9
 8009d10:	08009ca9 	.word	0x08009ca9
 8009d14:	08009e23 	.word	0x08009e23
 8009d18:	682b      	ldr	r3, [r5, #0]
 8009d1a:	1d1a      	adds	r2, r3, #4
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	602a      	str	r2, [r5, #0]
 8009d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e0a3      	b.n	8009e74 <_printf_i+0x1f4>
 8009d2c:	6820      	ldr	r0, [r4, #0]
 8009d2e:	6829      	ldr	r1, [r5, #0]
 8009d30:	0606      	lsls	r6, r0, #24
 8009d32:	f101 0304 	add.w	r3, r1, #4
 8009d36:	d50a      	bpl.n	8009d4e <_printf_i+0xce>
 8009d38:	680e      	ldr	r6, [r1, #0]
 8009d3a:	602b      	str	r3, [r5, #0]
 8009d3c:	2e00      	cmp	r6, #0
 8009d3e:	da03      	bge.n	8009d48 <_printf_i+0xc8>
 8009d40:	232d      	movs	r3, #45	; 0x2d
 8009d42:	4276      	negs	r6, r6
 8009d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d48:	485e      	ldr	r0, [pc, #376]	; (8009ec4 <_printf_i+0x244>)
 8009d4a:	230a      	movs	r3, #10
 8009d4c:	e019      	b.n	8009d82 <_printf_i+0x102>
 8009d4e:	680e      	ldr	r6, [r1, #0]
 8009d50:	602b      	str	r3, [r5, #0]
 8009d52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d56:	bf18      	it	ne
 8009d58:	b236      	sxthne	r6, r6
 8009d5a:	e7ef      	b.n	8009d3c <_printf_i+0xbc>
 8009d5c:	682b      	ldr	r3, [r5, #0]
 8009d5e:	6820      	ldr	r0, [r4, #0]
 8009d60:	1d19      	adds	r1, r3, #4
 8009d62:	6029      	str	r1, [r5, #0]
 8009d64:	0601      	lsls	r1, r0, #24
 8009d66:	d501      	bpl.n	8009d6c <_printf_i+0xec>
 8009d68:	681e      	ldr	r6, [r3, #0]
 8009d6a:	e002      	b.n	8009d72 <_printf_i+0xf2>
 8009d6c:	0646      	lsls	r6, r0, #25
 8009d6e:	d5fb      	bpl.n	8009d68 <_printf_i+0xe8>
 8009d70:	881e      	ldrh	r6, [r3, #0]
 8009d72:	4854      	ldr	r0, [pc, #336]	; (8009ec4 <_printf_i+0x244>)
 8009d74:	2f6f      	cmp	r7, #111	; 0x6f
 8009d76:	bf0c      	ite	eq
 8009d78:	2308      	moveq	r3, #8
 8009d7a:	230a      	movne	r3, #10
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d82:	6865      	ldr	r5, [r4, #4]
 8009d84:	60a5      	str	r5, [r4, #8]
 8009d86:	2d00      	cmp	r5, #0
 8009d88:	bfa2      	ittt	ge
 8009d8a:	6821      	ldrge	r1, [r4, #0]
 8009d8c:	f021 0104 	bicge.w	r1, r1, #4
 8009d90:	6021      	strge	r1, [r4, #0]
 8009d92:	b90e      	cbnz	r6, 8009d98 <_printf_i+0x118>
 8009d94:	2d00      	cmp	r5, #0
 8009d96:	d04d      	beq.n	8009e34 <_printf_i+0x1b4>
 8009d98:	4615      	mov	r5, r2
 8009d9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d9e:	fb03 6711 	mls	r7, r3, r1, r6
 8009da2:	5dc7      	ldrb	r7, [r0, r7]
 8009da4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009da8:	4637      	mov	r7, r6
 8009daa:	42bb      	cmp	r3, r7
 8009dac:	460e      	mov	r6, r1
 8009dae:	d9f4      	bls.n	8009d9a <_printf_i+0x11a>
 8009db0:	2b08      	cmp	r3, #8
 8009db2:	d10b      	bne.n	8009dcc <_printf_i+0x14c>
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	07de      	lsls	r6, r3, #31
 8009db8:	d508      	bpl.n	8009dcc <_printf_i+0x14c>
 8009dba:	6923      	ldr	r3, [r4, #16]
 8009dbc:	6861      	ldr	r1, [r4, #4]
 8009dbe:	4299      	cmp	r1, r3
 8009dc0:	bfde      	ittt	le
 8009dc2:	2330      	movle	r3, #48	; 0x30
 8009dc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009dcc:	1b52      	subs	r2, r2, r5
 8009dce:	6122      	str	r2, [r4, #16]
 8009dd0:	f8cd a000 	str.w	sl, [sp]
 8009dd4:	464b      	mov	r3, r9
 8009dd6:	aa03      	add	r2, sp, #12
 8009dd8:	4621      	mov	r1, r4
 8009dda:	4640      	mov	r0, r8
 8009ddc:	f7ff fee2 	bl	8009ba4 <_printf_common>
 8009de0:	3001      	adds	r0, #1
 8009de2:	d14c      	bne.n	8009e7e <_printf_i+0x1fe>
 8009de4:	f04f 30ff 	mov.w	r0, #4294967295
 8009de8:	b004      	add	sp, #16
 8009dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dee:	4835      	ldr	r0, [pc, #212]	; (8009ec4 <_printf_i+0x244>)
 8009df0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009df4:	6829      	ldr	r1, [r5, #0]
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009dfc:	6029      	str	r1, [r5, #0]
 8009dfe:	061d      	lsls	r5, r3, #24
 8009e00:	d514      	bpl.n	8009e2c <_printf_i+0x1ac>
 8009e02:	07df      	lsls	r7, r3, #31
 8009e04:	bf44      	itt	mi
 8009e06:	f043 0320 	orrmi.w	r3, r3, #32
 8009e0a:	6023      	strmi	r3, [r4, #0]
 8009e0c:	b91e      	cbnz	r6, 8009e16 <_printf_i+0x196>
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	f023 0320 	bic.w	r3, r3, #32
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	2310      	movs	r3, #16
 8009e18:	e7b0      	b.n	8009d7c <_printf_i+0xfc>
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	f043 0320 	orr.w	r3, r3, #32
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	2378      	movs	r3, #120	; 0x78
 8009e24:	4828      	ldr	r0, [pc, #160]	; (8009ec8 <_printf_i+0x248>)
 8009e26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e2a:	e7e3      	b.n	8009df4 <_printf_i+0x174>
 8009e2c:	0659      	lsls	r1, r3, #25
 8009e2e:	bf48      	it	mi
 8009e30:	b2b6      	uxthmi	r6, r6
 8009e32:	e7e6      	b.n	8009e02 <_printf_i+0x182>
 8009e34:	4615      	mov	r5, r2
 8009e36:	e7bb      	b.n	8009db0 <_printf_i+0x130>
 8009e38:	682b      	ldr	r3, [r5, #0]
 8009e3a:	6826      	ldr	r6, [r4, #0]
 8009e3c:	6961      	ldr	r1, [r4, #20]
 8009e3e:	1d18      	adds	r0, r3, #4
 8009e40:	6028      	str	r0, [r5, #0]
 8009e42:	0635      	lsls	r5, r6, #24
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	d501      	bpl.n	8009e4c <_printf_i+0x1cc>
 8009e48:	6019      	str	r1, [r3, #0]
 8009e4a:	e002      	b.n	8009e52 <_printf_i+0x1d2>
 8009e4c:	0670      	lsls	r0, r6, #25
 8009e4e:	d5fb      	bpl.n	8009e48 <_printf_i+0x1c8>
 8009e50:	8019      	strh	r1, [r3, #0]
 8009e52:	2300      	movs	r3, #0
 8009e54:	6123      	str	r3, [r4, #16]
 8009e56:	4615      	mov	r5, r2
 8009e58:	e7ba      	b.n	8009dd0 <_printf_i+0x150>
 8009e5a:	682b      	ldr	r3, [r5, #0]
 8009e5c:	1d1a      	adds	r2, r3, #4
 8009e5e:	602a      	str	r2, [r5, #0]
 8009e60:	681d      	ldr	r5, [r3, #0]
 8009e62:	6862      	ldr	r2, [r4, #4]
 8009e64:	2100      	movs	r1, #0
 8009e66:	4628      	mov	r0, r5
 8009e68:	f7f6 f992 	bl	8000190 <memchr>
 8009e6c:	b108      	cbz	r0, 8009e72 <_printf_i+0x1f2>
 8009e6e:	1b40      	subs	r0, r0, r5
 8009e70:	6060      	str	r0, [r4, #4]
 8009e72:	6863      	ldr	r3, [r4, #4]
 8009e74:	6123      	str	r3, [r4, #16]
 8009e76:	2300      	movs	r3, #0
 8009e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e7c:	e7a8      	b.n	8009dd0 <_printf_i+0x150>
 8009e7e:	6923      	ldr	r3, [r4, #16]
 8009e80:	462a      	mov	r2, r5
 8009e82:	4649      	mov	r1, r9
 8009e84:	4640      	mov	r0, r8
 8009e86:	47d0      	blx	sl
 8009e88:	3001      	adds	r0, #1
 8009e8a:	d0ab      	beq.n	8009de4 <_printf_i+0x164>
 8009e8c:	6823      	ldr	r3, [r4, #0]
 8009e8e:	079b      	lsls	r3, r3, #30
 8009e90:	d413      	bmi.n	8009eba <_printf_i+0x23a>
 8009e92:	68e0      	ldr	r0, [r4, #12]
 8009e94:	9b03      	ldr	r3, [sp, #12]
 8009e96:	4298      	cmp	r0, r3
 8009e98:	bfb8      	it	lt
 8009e9a:	4618      	movlt	r0, r3
 8009e9c:	e7a4      	b.n	8009de8 <_printf_i+0x168>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	4632      	mov	r2, r6
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	47d0      	blx	sl
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	d09b      	beq.n	8009de4 <_printf_i+0x164>
 8009eac:	3501      	adds	r5, #1
 8009eae:	68e3      	ldr	r3, [r4, #12]
 8009eb0:	9903      	ldr	r1, [sp, #12]
 8009eb2:	1a5b      	subs	r3, r3, r1
 8009eb4:	42ab      	cmp	r3, r5
 8009eb6:	dcf2      	bgt.n	8009e9e <_printf_i+0x21e>
 8009eb8:	e7eb      	b.n	8009e92 <_printf_i+0x212>
 8009eba:	2500      	movs	r5, #0
 8009ebc:	f104 0619 	add.w	r6, r4, #25
 8009ec0:	e7f5      	b.n	8009eae <_printf_i+0x22e>
 8009ec2:	bf00      	nop
 8009ec4:	0800a435 	.word	0x0800a435
 8009ec8:	0800a446 	.word	0x0800a446

08009ecc <_sbrk_r>:
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	4d06      	ldr	r5, [pc, #24]	; (8009ee8 <_sbrk_r+0x1c>)
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	4608      	mov	r0, r1
 8009ed6:	602b      	str	r3, [r5, #0]
 8009ed8:	f7f7 fce2 	bl	80018a0 <_sbrk>
 8009edc:	1c43      	adds	r3, r0, #1
 8009ede:	d102      	bne.n	8009ee6 <_sbrk_r+0x1a>
 8009ee0:	682b      	ldr	r3, [r5, #0]
 8009ee2:	b103      	cbz	r3, 8009ee6 <_sbrk_r+0x1a>
 8009ee4:	6023      	str	r3, [r4, #0]
 8009ee6:	bd38      	pop	{r3, r4, r5, pc}
 8009ee8:	2000086c 	.word	0x2000086c

08009eec <__sread>:
 8009eec:	b510      	push	{r4, lr}
 8009eee:	460c      	mov	r4, r1
 8009ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef4:	f000 f8ea 	bl	800a0cc <_read_r>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	bfab      	itete	ge
 8009efc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009efe:	89a3      	ldrhlt	r3, [r4, #12]
 8009f00:	181b      	addge	r3, r3, r0
 8009f02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f06:	bfac      	ite	ge
 8009f08:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f0a:	81a3      	strhlt	r3, [r4, #12]
 8009f0c:	bd10      	pop	{r4, pc}

08009f0e <__swrite>:
 8009f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f12:	461f      	mov	r7, r3
 8009f14:	898b      	ldrh	r3, [r1, #12]
 8009f16:	05db      	lsls	r3, r3, #23
 8009f18:	4605      	mov	r5, r0
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	4616      	mov	r6, r2
 8009f1e:	d505      	bpl.n	8009f2c <__swrite+0x1e>
 8009f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f24:	2302      	movs	r3, #2
 8009f26:	2200      	movs	r2, #0
 8009f28:	f000 f868 	bl	8009ffc <_lseek_r>
 8009f2c:	89a3      	ldrh	r3, [r4, #12]
 8009f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f36:	81a3      	strh	r3, [r4, #12]
 8009f38:	4632      	mov	r2, r6
 8009f3a:	463b      	mov	r3, r7
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f42:	f000 b817 	b.w	8009f74 <_write_r>

08009f46 <__sseek>:
 8009f46:	b510      	push	{r4, lr}
 8009f48:	460c      	mov	r4, r1
 8009f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f4e:	f000 f855 	bl	8009ffc <_lseek_r>
 8009f52:	1c43      	adds	r3, r0, #1
 8009f54:	89a3      	ldrh	r3, [r4, #12]
 8009f56:	bf15      	itete	ne
 8009f58:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f62:	81a3      	strheq	r3, [r4, #12]
 8009f64:	bf18      	it	ne
 8009f66:	81a3      	strhne	r3, [r4, #12]
 8009f68:	bd10      	pop	{r4, pc}

08009f6a <__sclose>:
 8009f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f6e:	f000 b813 	b.w	8009f98 <_close_r>
	...

08009f74 <_write_r>:
 8009f74:	b538      	push	{r3, r4, r5, lr}
 8009f76:	4d07      	ldr	r5, [pc, #28]	; (8009f94 <_write_r+0x20>)
 8009f78:	4604      	mov	r4, r0
 8009f7a:	4608      	mov	r0, r1
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	2200      	movs	r2, #0
 8009f80:	602a      	str	r2, [r5, #0]
 8009f82:	461a      	mov	r2, r3
 8009f84:	f7f6 fb00 	bl	8000588 <_write>
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	d102      	bne.n	8009f92 <_write_r+0x1e>
 8009f8c:	682b      	ldr	r3, [r5, #0]
 8009f8e:	b103      	cbz	r3, 8009f92 <_write_r+0x1e>
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	bd38      	pop	{r3, r4, r5, pc}
 8009f94:	2000086c 	.word	0x2000086c

08009f98 <_close_r>:
 8009f98:	b538      	push	{r3, r4, r5, lr}
 8009f9a:	4d06      	ldr	r5, [pc, #24]	; (8009fb4 <_close_r+0x1c>)
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	4608      	mov	r0, r1
 8009fa2:	602b      	str	r3, [r5, #0]
 8009fa4:	f7f7 fc4b 	bl	800183e <_close>
 8009fa8:	1c43      	adds	r3, r0, #1
 8009faa:	d102      	bne.n	8009fb2 <_close_r+0x1a>
 8009fac:	682b      	ldr	r3, [r5, #0]
 8009fae:	b103      	cbz	r3, 8009fb2 <_close_r+0x1a>
 8009fb0:	6023      	str	r3, [r4, #0]
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	2000086c 	.word	0x2000086c

08009fb8 <_fstat_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4d07      	ldr	r5, [pc, #28]	; (8009fd8 <_fstat_r+0x20>)
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	4608      	mov	r0, r1
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	602b      	str	r3, [r5, #0]
 8009fc6:	f7f7 fc45 	bl	8001854 <_fstat>
 8009fca:	1c43      	adds	r3, r0, #1
 8009fcc:	d102      	bne.n	8009fd4 <_fstat_r+0x1c>
 8009fce:	682b      	ldr	r3, [r5, #0]
 8009fd0:	b103      	cbz	r3, 8009fd4 <_fstat_r+0x1c>
 8009fd2:	6023      	str	r3, [r4, #0]
 8009fd4:	bd38      	pop	{r3, r4, r5, pc}
 8009fd6:	bf00      	nop
 8009fd8:	2000086c 	.word	0x2000086c

08009fdc <_isatty_r>:
 8009fdc:	b538      	push	{r3, r4, r5, lr}
 8009fde:	4d06      	ldr	r5, [pc, #24]	; (8009ff8 <_isatty_r+0x1c>)
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	4608      	mov	r0, r1
 8009fe6:	602b      	str	r3, [r5, #0]
 8009fe8:	f7f7 fc43 	bl	8001872 <_isatty>
 8009fec:	1c43      	adds	r3, r0, #1
 8009fee:	d102      	bne.n	8009ff6 <_isatty_r+0x1a>
 8009ff0:	682b      	ldr	r3, [r5, #0]
 8009ff2:	b103      	cbz	r3, 8009ff6 <_isatty_r+0x1a>
 8009ff4:	6023      	str	r3, [r4, #0]
 8009ff6:	bd38      	pop	{r3, r4, r5, pc}
 8009ff8:	2000086c 	.word	0x2000086c

08009ffc <_lseek_r>:
 8009ffc:	b538      	push	{r3, r4, r5, lr}
 8009ffe:	4d07      	ldr	r5, [pc, #28]	; (800a01c <_lseek_r+0x20>)
 800a000:	4604      	mov	r4, r0
 800a002:	4608      	mov	r0, r1
 800a004:	4611      	mov	r1, r2
 800a006:	2200      	movs	r2, #0
 800a008:	602a      	str	r2, [r5, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	f7f7 fc3b 	bl	8001886 <_lseek>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d102      	bne.n	800a01a <_lseek_r+0x1e>
 800a014:	682b      	ldr	r3, [r5, #0]
 800a016:	b103      	cbz	r3, 800a01a <_lseek_r+0x1e>
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	bd38      	pop	{r3, r4, r5, pc}
 800a01c:	2000086c 	.word	0x2000086c

0800a020 <memmove>:
 800a020:	4288      	cmp	r0, r1
 800a022:	b510      	push	{r4, lr}
 800a024:	eb01 0402 	add.w	r4, r1, r2
 800a028:	d902      	bls.n	800a030 <memmove+0x10>
 800a02a:	4284      	cmp	r4, r0
 800a02c:	4623      	mov	r3, r4
 800a02e:	d807      	bhi.n	800a040 <memmove+0x20>
 800a030:	1e43      	subs	r3, r0, #1
 800a032:	42a1      	cmp	r1, r4
 800a034:	d008      	beq.n	800a048 <memmove+0x28>
 800a036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a03a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a03e:	e7f8      	b.n	800a032 <memmove+0x12>
 800a040:	4402      	add	r2, r0
 800a042:	4601      	mov	r1, r0
 800a044:	428a      	cmp	r2, r1
 800a046:	d100      	bne.n	800a04a <memmove+0x2a>
 800a048:	bd10      	pop	{r4, pc}
 800a04a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a04e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a052:	e7f7      	b.n	800a044 <memmove+0x24>

0800a054 <__malloc_lock>:
 800a054:	4801      	ldr	r0, [pc, #4]	; (800a05c <__malloc_lock+0x8>)
 800a056:	f7ff b9ab 	b.w	80093b0 <__retarget_lock_acquire_recursive>
 800a05a:	bf00      	nop
 800a05c:	20000860 	.word	0x20000860

0800a060 <__malloc_unlock>:
 800a060:	4801      	ldr	r0, [pc, #4]	; (800a068 <__malloc_unlock+0x8>)
 800a062:	f7ff b9a6 	b.w	80093b2 <__retarget_lock_release_recursive>
 800a066:	bf00      	nop
 800a068:	20000860 	.word	0x20000860

0800a06c <_realloc_r>:
 800a06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a070:	4680      	mov	r8, r0
 800a072:	4614      	mov	r4, r2
 800a074:	460e      	mov	r6, r1
 800a076:	b921      	cbnz	r1, 800a082 <_realloc_r+0x16>
 800a078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a07c:	4611      	mov	r1, r2
 800a07e:	f7ff ba69 	b.w	8009554 <_malloc_r>
 800a082:	b92a      	cbnz	r2, 800a090 <_realloc_r+0x24>
 800a084:	f7ff f9fc 	bl	8009480 <_free_r>
 800a088:	4625      	mov	r5, r4
 800a08a:	4628      	mov	r0, r5
 800a08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a090:	f000 f82e 	bl	800a0f0 <_malloc_usable_size_r>
 800a094:	4284      	cmp	r4, r0
 800a096:	4607      	mov	r7, r0
 800a098:	d802      	bhi.n	800a0a0 <_realloc_r+0x34>
 800a09a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a09e:	d812      	bhi.n	800a0c6 <_realloc_r+0x5a>
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	4640      	mov	r0, r8
 800a0a4:	f7ff fa56 	bl	8009554 <_malloc_r>
 800a0a8:	4605      	mov	r5, r0
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d0ed      	beq.n	800a08a <_realloc_r+0x1e>
 800a0ae:	42bc      	cmp	r4, r7
 800a0b0:	4622      	mov	r2, r4
 800a0b2:	4631      	mov	r1, r6
 800a0b4:	bf28      	it	cs
 800a0b6:	463a      	movcs	r2, r7
 800a0b8:	f7fe fe1e 	bl	8008cf8 <memcpy>
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4640      	mov	r0, r8
 800a0c0:	f7ff f9de 	bl	8009480 <_free_r>
 800a0c4:	e7e1      	b.n	800a08a <_realloc_r+0x1e>
 800a0c6:	4635      	mov	r5, r6
 800a0c8:	e7df      	b.n	800a08a <_realloc_r+0x1e>
	...

0800a0cc <_read_r>:
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	4d07      	ldr	r5, [pc, #28]	; (800a0ec <_read_r+0x20>)
 800a0d0:	4604      	mov	r4, r0
 800a0d2:	4608      	mov	r0, r1
 800a0d4:	4611      	mov	r1, r2
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	602a      	str	r2, [r5, #0]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	f7f7 fb92 	bl	8001804 <_read>
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	d102      	bne.n	800a0ea <_read_r+0x1e>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	b103      	cbz	r3, 800a0ea <_read_r+0x1e>
 800a0e8:	6023      	str	r3, [r4, #0]
 800a0ea:	bd38      	pop	{r3, r4, r5, pc}
 800a0ec:	2000086c 	.word	0x2000086c

0800a0f0 <_malloc_usable_size_r>:
 800a0f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0f4:	1f18      	subs	r0, r3, #4
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	bfbc      	itt	lt
 800a0fa:	580b      	ldrlt	r3, [r1, r0]
 800a0fc:	18c0      	addlt	r0, r0, r3
 800a0fe:	4770      	bx	lr

0800a100 <_init>:
 800a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a102:	bf00      	nop
 800a104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a106:	bc08      	pop	{r3}
 800a108:	469e      	mov	lr, r3
 800a10a:	4770      	bx	lr

0800a10c <_fini>:
 800a10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10e:	bf00      	nop
 800a110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a112:	bc08      	pop	{r3}
 800a114:	469e      	mov	lr, r3
 800a116:	4770      	bx	lr
