
Lora_pingpong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aed0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800b010  0800b010  0001b010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3a8  0800b3a8  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3a8  0800b3a8  0001b3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3b0  0800b3b0  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3b0  0800b3b0  0001b3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3b4  0800b3b4  0001b3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800b3b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003200  20000184  0800b53c  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003384  0800b53c  00023384  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027a4a  00000000  00000000  000201ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005516  00000000  00000000  00047bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002360  00000000  00000000  0004d110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002138  00000000  00000000  0004f470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024db0  00000000  00000000  000515a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b229  00000000  00000000  00076358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccf9c  00000000  00000000  000a1581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e51d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d44  00000000  00000000  0016e570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000184 	.word	0x20000184
 800015c:	00000000 	.word	0x00000000
 8000160:	0800aff8 	.word	0x0800aff8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000188 	.word	0x20000188
 800017c:	0800aff8 	.word	0x0800aff8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	fbb8 fef5 	udiv	lr, r8, r5
 800029c:	fa1f f78c 	uxth.w	r7, ip
 80002a0:	fb05 831e 	mls	r3, r5, lr, r8
 80002a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a8:	fb0e f107 	mul.w	r1, lr, r7
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d90b      	bls.n	80002c8 <__udivmoddi4+0x68>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4299      	cmp	r1, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002d0:	fb05 3310 	mls	r3, r5, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x96>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e8:	f080 8108 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8105 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 050c 	sub.w	r5, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb5 f3f7 	udiv	r3, r5, r7
 8000368:	fb07 5013 	mls	r0, r7, r3, r5
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0f7 	udiv	r0, r5, r7
 8000394:	fb07 5510 	mls	r5, r7, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa05 f301 	lsl.w	r3, r5, r1
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40fd      	lsrs	r5, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 5518 	mls	r5, r9, r8, r5
 80003f0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0505 	adds.w	r5, ip, r5
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a8      	cmp	r0, r5
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4465      	add	r5, ip
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000420:	fb09 5510 	mls	r5, r9, r0, r5
 8000424:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	45ae      	cmp	lr, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45ae      	cmp	lr, r5
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba5 050e 	sub.w	r5, r5, lr
 800044e:	42a5      	cmp	r5, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb65 050e 	sbc.w	r5, r5, lr
 8000462:	fa05 f707 	lsl.w	r7, r5, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	40cd      	lsrs	r5, r1
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c6 7500 	strd	r7, r5, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa25 f303 	lsr.w	r3, r5, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	430d      	orrs	r5, r1
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3011 	mls	r0, r7, r1, r3
 800049c:	0c2b      	lsrs	r3, r5, #16
 800049e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004a2:	fb01 f00e 	mul.w	r0, r1, lr
 80004a6:	4298      	cmp	r0, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c8:	fb07 3310 	mls	r3, r7, r0, r3
 80004cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d0:	fb00 f30e 	mul.w	r3, r0, lr
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1aed      	subs	r5, r5, r3
 80004ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	4686      	mov	lr, r0
 80004fa:	e6e5      	b.n	80002c8 <__udivmoddi4+0x68>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fa      	b.n	80002f6 <__udivmoddi4+0x96>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4640      	mov	r0, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4465      	add	r5, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4608      	mov	r0, r1
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000550:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4013      	ands	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000558:	68fb      	ldr	r3, [r7, #12]
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <LL_AHB3_GRP1_DisableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_DisableClock(uint32_t Periphs)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 800056c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000570:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	43db      	mvns	r3, r3
 8000576:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800057a:	4013      	ands	r3, r2
 800057c:	650b      	str	r3, [r1, #80]	; 0x50
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <_write>:
extern uint8_t rxBuffer_encypt[RX_SIZE];
extern uint8_t rxBuffer_decypt[RX_SIZE];
extern uint8_t size;

#if defined(__GNUC__)
int _write(int fd, char * ptr, int len) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit( & huart2, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	b29a      	uxth	r2, r3
 8000598:	f04f 33ff 	mov.w	r3, #4294967295
 800059c:	68b9      	ldr	r1, [r7, #8]
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <_write+0x28>)
 80005a0:	f006 fcae 	bl	8006f00 <HAL_UART_Transmit>
  return len;
 80005a4:	687b      	ldr	r3, [r7, #4]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000df8 	.word	0x20000df8

080005b4 <MX_AES_Init>:
__ALIGN_BEGIN static const uint32_t pKeyAES[8] __ALIGN_END = {
                            0x603DEB10,0x15CA71BE,0x2B73AEF0,0x857D7781,0x1F352C07,0x3B6108D7,0x2D9810A3,0x0914DFF4};

/* AES init function */
void MX_AES_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_AES_Init+0x4c>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <MX_AES_Init+0x50>)
 80005bc:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_DATATYPE_32B;
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <MX_AES_Init+0x4c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_256B;
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_AES_Init+0x4c>)
 80005c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80005ca:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_AES_Init+0x4c>)
 80005ce:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <MX_AES_Init+0x54>)
 80005d0:	60da      	str	r2, [r3, #12]
  hcryp.Init.Algorithm = CRYP_AES_ECB;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_AES_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_AES_Init+0x4c>)
 80005da:	2201      	movs	r2, #1
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_BYTE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_AES_Init+0x4c>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	629a      	str	r2, [r3, #40]	; 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_AES_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_AES_Init+0x4c>)
 80005ec:	f002 fc47 	bl	8002e7e <HAL_CRYP_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_AES_Init+0x46>
  {
    Error_Handler();
 80005f6:	f000 faab 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200001a0 	.word	0x200001a0
 8000604:	58001800 	.word	0x58001800
 8000608:	0800b220 	.word	0x0800b220

0800060c <HAL_CRYP_MspInit>:

void HAL_CRYP_MspInit(CRYP_HandleTypeDef* crypHandle)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

  if(crypHandle->Instance==AES)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a05      	ldr	r2, [pc, #20]	; (8000630 <HAL_CRYP_MspInit+0x24>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d103      	bne.n	8000626 <HAL_CRYP_MspInit+0x1a>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* AES clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 800061e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000622:	f7ff ff87 	bl	8000534 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	58001800 	.word	0x58001800

08000634 <HAL_CRYP_MspDeInit>:

void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef* crypHandle)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]

  if(crypHandle->Instance==AES)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a05      	ldr	r2, [pc, #20]	; (8000658 <HAL_CRYP_MspDeInit+0x24>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d103      	bne.n	800064e <HAL_CRYP_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN AES_MspDeInit 0 */

  /* USER CODE END AES_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_AES_CLK_DISABLE();
 8000646:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800064a:	f7ff ff8b 	bl	8000564 <LL_AHB3_GRP1_DisableClock>
  /* USER CODE BEGIN AES_MspDeInit 1 */

  /* USER CODE END AES_MspDeInit 1 */
  }
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	58001800 	.word	0x58001800

0800065c <AES_start>:

/* USER CODE BEGIN 1 */
void AES_start(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0


	/* Mã hóa dữ liệu */
	if(rxBuffer[0]=='\0')
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <AES_start+0x3c>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d105      	bne.n	8000674 <AES_start+0x18>
	{
		memset(rxBuffer_encypt,0,sizeof(rxBuffer_encypt));
 8000668:	22ff      	movs	r2, #255	; 0xff
 800066a:	2100      	movs	r1, #0
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <AES_start+0x40>)
 800066e:	f009 fb84 	bl	8009d7a <memset>
 8000672:	e004      	b.n	800067e <AES_start+0x22>
	}
	else
		AES_Encrypt(rxBuffer,rxBuffer_encypt,sizeof(rxBuffer));
 8000674:	22ff      	movs	r2, #255	; 0xff
 8000676:	4909      	ldr	r1, [pc, #36]	; (800069c <AES_start+0x40>)
 8000678:	4807      	ldr	r0, [pc, #28]	; (8000698 <AES_start+0x3c>)
 800067a:	f000 f833 	bl	80006e4 <AES_Encrypt>

	printf("Encrypted data: ");
 800067e:	4808      	ldr	r0, [pc, #32]	; (80006a0 <AES_start+0x44>)
 8000680:	f009 fc18 	bl	8009eb4 <iprintf>
	print_array(rxBuffer_encypt, strlen(rxBuffer_encypt));
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <AES_start+0x40>)
 8000686:	f7ff fd7b 	bl	8000180 <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	4619      	mov	r1, r3
 800068e:	4803      	ldr	r0, [pc, #12]	; (800069c <AES_start+0x40>)
 8000690:	f000 f808 	bl	80006a4 <print_array>





}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000008 	.word	0x20000008
 800069c:	200008f8 	.word	0x200008f8
 80006a0:	0800b010 	.word	0x0800b010

080006a4 <print_array>:



void print_array(uint8_t *array, uint32_t size) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < size; i++) {
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	e00a      	b.n	80006ca <print_array+0x26>
        printf("%02x ", array[i]);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	4808      	ldr	r0, [pc, #32]	; (80006e0 <print_array+0x3c>)
 80006c0:	f009 fbf8 	bl	8009eb4 <iprintf>
    for (int i = 0; i < size; i++) {
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	3301      	adds	r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d8f0      	bhi.n	80006b4 <print_array+0x10>

    }
    printf("\n");
 80006d2:	200a      	movs	r0, #10
 80006d4:	f009 fc06 	bl	8009ee4 <putchar>

}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	0800b024 	.word	0x0800b024

080006e4 <AES_Encrypt>:
void AES_Encrypt(uint8_t *input_data, uint8_t *output_data, uint32_t data_size) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af02      	add	r7, sp, #8
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
	MX_AES_Init();
 80006f0:	f7ff ff60 	bl	80005b4 <MX_AES_Init>
    uint8_t *input_block = input_data;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	61fb      	str	r3, [r7, #28]
    uint8_t *output_block = output_data;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	61bb      	str	r3, [r7, #24]
    uint32_t remaining_data = data_size;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	617b      	str	r3, [r7, #20]

    while (remaining_data >= BLOCK_SIZE) {
 8000700:	e014      	b.n	800072c <AES_Encrypt+0x48>
        if (HAL_CRYP_Encrypt(&hcryp, input_block, BLOCK_SIZE, output_block, 1000) != HAL_OK) {
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	2220      	movs	r2, #32
 800070c:	69f9      	ldr	r1, [r7, #28]
 800070e:	4816      	ldr	r0, [pc, #88]	; (8000768 <AES_Encrypt+0x84>)
 8000710:	f002 fc1e 	bl	8002f50 <HAL_CRYP_Encrypt>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d11f      	bne.n	800075a <AES_Encrypt+0x76>
            // Xử lý lỗi khi mã hóa AES
            return;
        }
        input_block += BLOCK_SIZE;
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3320      	adds	r3, #32
 800071e:	61fb      	str	r3, [r7, #28]
        output_block += BLOCK_SIZE;
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	3320      	adds	r3, #32
 8000724:	61bb      	str	r3, [r7, #24]
        remaining_data -= BLOCK_SIZE;
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	3b20      	subs	r3, #32
 800072a:	617b      	str	r3, [r7, #20]
    while (remaining_data >= BLOCK_SIZE) {
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	2b1f      	cmp	r3, #31
 8000730:	d8e7      	bhi.n	8000702 <AES_Encrypt+0x1e>
    }

    // Mã hóa block cuối cùng
    if (remaining_data > 0) {
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d00c      	beq.n	8000752 <AES_Encrypt+0x6e>
        if (HAL_CRYP_Encrypt(&hcryp, input_block, remaining_data, output_block, 1000) != HAL_OK) {
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	b29a      	uxth	r2, r3
 800073c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	69bb      	ldr	r3, [r7, #24]
 8000744:	69f9      	ldr	r1, [r7, #28]
 8000746:	4808      	ldr	r0, [pc, #32]	; (8000768 <AES_Encrypt+0x84>)
 8000748:	f002 fc02 	bl	8002f50 <HAL_CRYP_Encrypt>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d105      	bne.n	800075e <AES_Encrypt+0x7a>
            // Xử lý lỗi khi mã hóa AES
            return;
        }
    }

    HAL_CRYP_DeInit(&hcryp);
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <AES_Encrypt+0x84>)
 8000754:	f002 fbce 	bl	8002ef4 <HAL_CRYP_DeInit>
 8000758:	e002      	b.n	8000760 <AES_Encrypt+0x7c>
            return;
 800075a:	bf00      	nop
 800075c:	e000      	b.n	8000760 <AES_Encrypt+0x7c>
            return;
 800075e:	bf00      	nop
}
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200001a0 	.word	0x200001a0

0800076c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4a07      	ldr	r2, [pc, #28]	; (8000798 <vApplicationGetIdleTaskMemory+0x2c>)
 800077c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	4a06      	ldr	r2, [pc, #24]	; (800079c <vApplicationGetIdleTaskMemory+0x30>)
 8000782:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800078a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	200002b4 	.word	0x200002b4
 800079c:	20000368 	.word	0x20000368

080007a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b08e      	sub	sp, #56	; 0x38
 80007a4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LoraTask */
  osThreadDef(LoraTask, StartLoraTask, osPriorityNormal, 0, 512);
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_FREERTOS_Init+0x58>)
 80007a8:	f107 041c 	add.w	r4, r7, #28
 80007ac:	461d      	mov	r5, r3
 80007ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LoraTaskHandle = osThreadCreate(osThread(LoraTask), NULL);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f007 ffa5 	bl	8008710 <osThreadCreate>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <MX_FREERTOS_Init+0x5c>)
 80007ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPIOTask */
  osThreadDef(GPIOTask, StartGPIOTask, osPriorityHigh, 0, 1536);
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_FREERTOS_Init+0x60>)
 80007ce:	463c      	mov	r4, r7
 80007d0:	461d      	mov	r5, r3
 80007d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPIOTaskHandle = osThreadCreate(osThread(GPIOTask), NULL);
 80007de:	463b      	mov	r3, r7
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f007 ff94 	bl	8008710 <osThreadCreate>
 80007e8:	4603      	mov	r3, r0
 80007ea:	4a06      	ldr	r2, [pc, #24]	; (8000804 <MX_FREERTOS_Init+0x64>)
 80007ec:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80007ee:	bf00      	nop
 80007f0:	3738      	adds	r7, #56	; 0x38
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bdb0      	pop	{r4, r5, r7, pc}
 80007f6:	bf00      	nop
 80007f8:	0800b044 	.word	0x0800b044
 80007fc:	200002ac 	.word	0x200002ac
 8000800:	0800b060 	.word	0x0800b060
 8000804:	200002b0 	.word	0x200002b0

08000808 <StartLoraTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLoraTask */
void StartLoraTask(void const * argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLoraTask */
  /* Infinite loop */
	//SUBGHZ();
	while (1)
	  {
		  SUBGHZ();
 8000810:	f000 feb4 	bl	800157c <SUBGHZ>
		  //osDelay(1000);
		//BSP_LED_Toggle(LED_BLUE);
		osDelay(100);
 8000814:	2064      	movs	r0, #100	; 0x64
 8000816:	f007 ffc7 	bl	80087a8 <osDelay>
		  SUBGHZ();
 800081a:	e7f9      	b.n	8000810 <StartLoraTask+0x8>

0800081c <StartGPIOTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPIOTask */
void StartGPIOTask(void const * argument)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
		  {
			  //SUBGHZ();
			  //osDelay(1000);
			//printf("debug1\n");

		    AES_start();
 8000824:	f7ff ff1a 	bl	800065c <AES_start>
		   // printf("debug2\n");
			BSP_LED_Toggle(LED_RED);
 8000828:	2002      	movs	r0, #2
 800082a:	f001 f8bd 	bl	80019a8 <BSP_LED_Toggle>
			osDelay(3000);
 800082e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000832:	f007 ffb9 	bl	80087a8 <osDelay>
		  {
 8000836:	e7f5      	b.n	8000824 <StartGPIOTask+0x8>

08000838 <LL_AHB1_GRP1_EnableClock>:
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000844:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000846:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4313      	orrs	r3, r2
 800084e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000854:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4013      	ands	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800085c:	68fb      	ldr	r3, [r7, #12]
}
 800085e:	bf00      	nop
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800086c:	2004      	movs	r0, #4
 800086e:	f7ff ffe3 	bl	8000838 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000872:	2001      	movs	r0, #1
 8000874:	f7ff ffe0 	bl	8000838 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2105      	movs	r1, #5
 800087c:	200b      	movs	r0, #11
 800087e:	f002 fad6 	bl	8002e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000882:	200b      	movs	r0, #11
 8000884:	f002 faed 	bl	8002e62 <HAL_NVIC_EnableIRQ>

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <LL_AHB2_GRP1_EnableClock>:
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000898:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800089a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008b0:	68fb      	ldr	r3, [r7, #12]
}
 80008b2:	bf00      	nop
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr

080008bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d0:	2001      	movs	r0, #1
 80008d2:	f7ff ffdb 	bl	800088c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2002      	movs	r0, #2
 80008d8:	f7ff ffd8 	bl	800088c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008dc:	2004      	movs	r0, #4
 80008de:	f7ff ffd5 	bl	800088c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 80008e8:	482b      	ldr	r0, [pc, #172]	; (8000998 <MX_GPIO_Init+0xdc>)
 80008ea:	f003 ffa9 	bl	8004840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2138      	movs	r1, #56	; 0x38
 80008f2:	482a      	ldr	r0, [pc, #168]	; (800099c <MX_GPIO_Init+0xe0>)
 80008f4:	f003 ffa4 	bl	8004840 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80008f8:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80008fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000906:	2302      	movs	r3, #2
 8000908:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	4619      	mov	r1, r3
 800090e:	4822      	ldr	r0, [pc, #136]	; (8000998 <MX_GPIO_Init+0xdc>)
 8000910:	f003 fe36 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000914:	2338      	movs	r3, #56	; 0x38
 8000916:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000920:	2303      	movs	r3, #3
 8000922:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	4619      	mov	r1, r3
 8000928:	481c      	ldr	r0, [pc, #112]	; (800099c <MX_GPIO_Init+0xe0>)
 800092a:	f003 fe29 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 800092e:	2303      	movs	r3, #3
 8000930:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000932:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000936:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000938:	2301      	movs	r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4619      	mov	r1, r3
 8000940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000944:	f003 fe1c 	bl	8004580 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000948:	2340      	movs	r3, #64	; 0x40
 800094a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800094c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000950:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000952:	2301      	movs	r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4619      	mov	r1, r3
 800095a:	4810      	ldr	r0, [pc, #64]	; (800099c <MX_GPIO_Init+0xe0>)
 800095c:	f003 fe10 	bl	8004580 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2105      	movs	r1, #5
 8000964:	2006      	movs	r0, #6
 8000966:	f002 fa62 	bl	8002e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800096a:	2006      	movs	r0, #6
 800096c:	f002 fa79 	bl	8002e62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2105      	movs	r1, #5
 8000974:	2007      	movs	r0, #7
 8000976:	f002 fa5a 	bl	8002e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800097a:	2007      	movs	r0, #7
 800097c:	f002 fa71 	bl	8002e62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2105      	movs	r1, #5
 8000984:	2016      	movs	r0, #22
 8000986:	f002 fa52 	bl	8002e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800098a:	2016      	movs	r0, #22
 800098c:	f002 fa69 	bl	8002e62 <HAL_NVIC_EnableIRQ>

}
 8000990:	bf00      	nop
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	48000400 	.word	0x48000400
 800099c:	48000800 	.word	0x48000800

080009a0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80009a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009b0:	f023 0218 	bic.w	r2, r3, #24
 80009b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr

080009ca <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ce:	f002 f919 	bl	8002c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d2:	f000 f815 	bl	8000a00 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d6:	f7ff ff71 	bl	80008bc <MX_GPIO_Init>
  MX_DMA_Init();
 80009da:	f7ff ff45 	bl	8000868 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009de:	f000 fe9d 	bl	800171c <MX_USART2_UART_Init>
  MX_SUBGHZ_Init();
 80009e2:	f000 f9af 	bl	8000d44 <MX_SUBGHZ_Init>
  MX_AES_Init();
 80009e6:	f7ff fde5 	bl	80005b4 <MX_AES_Init>
  /* USER CODE BEGIN 2 */
  radioInit();
 80009ea:	f000 f9d1 	bl	8000d90 <radioInit>
  fsmInit();
 80009ee:	f000 fd73 	bl	80014d8 <fsmInit>
  UartDmaStart();
 80009f2:	f000 ff7d 	bl	80018f0 <UartDmaStart>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80009f6:	f7ff fed3 	bl	80007a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009fa:	f007 fe82 	bl	8008702 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80009fe:	e7fe      	b.n	80009fe <main+0x34>

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b09a      	sub	sp, #104	; 0x68
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 0320 	add.w	r3, r7, #32
 8000a0a:	2248      	movs	r2, #72	; 0x48
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f009 f9b3 	bl	8009d7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]
 8000a22:	615a      	str	r2, [r3, #20]
 8000a24:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a26:	f003 ff53 	bl	80048d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff ffb8 	bl	80009a0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <SystemClock_Config+0xac>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a38:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <SystemClock_Config+0xac>)
 8000a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <SystemClock_Config+0xac>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a4c:	2324      	movs	r3, #36	; 0x24
 8000a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a50:	2381      	movs	r3, #129	; 0x81
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a54:	2301      	movs	r3, #1
 8000a56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000a5c:	23b0      	movs	r3, #176	; 0xb0
 8000a5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a64:	f107 0320 	add.w	r3, r7, #32
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f004 fa03 	bl	8004e74 <HAL_RCC_OscConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a74:	f000 f86c 	bl	8000b50 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000a78:	234f      	movs	r3, #79	; 0x4f
 8000a7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2102      	movs	r1, #2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f004 fd6f 	bl	8005578 <HAL_RCC_ClockConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000aa0:	f000 f856 	bl	8000b50 <Error_Handler>
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3768      	adds	r7, #104	; 0x68
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	58000400 	.word	0x58000400

08000ab0 <HAL_GPIO_EXTI_Callback>:
  * @param  radioIrq  interrupt pending status information
  * @retval None
  */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	80fb      	strh	r3, [r7, #6]

  if(GPIO_Pin == GPIO_PIN_0)
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d10c      	bne.n	8000ada <HAL_GPIO_EXTI_Callback+0x2a>
  {
	  BSP_LED_Off(LED_GREEN);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f000 ff57 	bl	8001974 <BSP_LED_Off>
	  BSP_LED_Off(LED_RED);
 8000ac6:	2002      	movs	r0, #2
 8000ac8:	f000 ff54 	bl	8001974 <BSP_LED_Off>
	  BSP_LED_Toggle(LED_BLUE);
 8000acc:	2000      	movs	r0, #0
 8000ace:	f000 ff6b 	bl	80019a8 <BSP_LED_Toggle>
	  RF_FREQUENCY = 470000000;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000ad4:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x70>)
 8000ad6:	601a      	str	r2, [r3, #0]
	  BSP_LED_Toggle(LED_RED);
	  RF_FREQUENCY = 520000000;

  }

}
 8000ad8:	e01b      	b.n	8000b12 <HAL_GPIO_EXTI_Callback+0x62>
  else if (GPIO_Pin == GPIO_PIN_1)
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d109      	bne.n	8000af4 <HAL_GPIO_EXTI_Callback+0x44>
	  BSP_LED_Off(LED_BLUE);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f000 ff47 	bl	8001974 <BSP_LED_Off>
	  BSP_LED_Off(LED_RED);
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	f000 ff44 	bl	8001974 <BSP_LED_Off>
	  RF_FREQUENCY = 433000000;
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000aee:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x74>)
 8000af0:	601a      	str	r2, [r3, #0]
}
 8000af2:	e00e      	b.n	8000b12 <HAL_GPIO_EXTI_Callback+0x62>
  else if (GPIO_Pin == GPIO_PIN_6)
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	2b40      	cmp	r3, #64	; 0x40
 8000af8:	d10b      	bne.n	8000b12 <HAL_GPIO_EXTI_Callback+0x62>
	  BSP_LED_Off(LED_GREEN);
 8000afa:	2001      	movs	r0, #1
 8000afc:	f000 ff3a 	bl	8001974 <BSP_LED_Off>
	  BSP_LED_Off(LED_BLUE);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 ff37 	bl	8001974 <BSP_LED_Off>
	  BSP_LED_Toggle(LED_RED);
 8000b06:	2002      	movs	r0, #2
 8000b08:	f000 ff4e 	bl	80019a8 <BSP_LED_Toggle>
	  RF_FREQUENCY = 520000000;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000b0e:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x78>)
 8000b10:	601a      	str	r2, [r3, #0]
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	1c03a180 	.word	0x1c03a180
 8000b24:	19cf0e40 	.word	0x19cf0e40
 8000b28:	1efe9200 	.word	0x1efe9200

08000b2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d101      	bne.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b3e:	f002 f881 	bl	8002c44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40014800 	.word	0x40014800

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>

08000b5a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	210f      	movs	r1, #15
 8000b62:	f06f 0001 	mvn.w	r0, #1
 8000b66:	f002 f962 	bl	8002e2e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b085      	sub	sp, #20
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
	...

08000ba0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000bb6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000bba:	f7ff ffd8 	bl	8000b6e <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bbe:	f107 020c 	add.w	r2, r7, #12
 8000bc2:	f107 0310 	add.w	r3, r7, #16
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f004 feef 	bl	80059ac <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bce:	f004 fedb 	bl	8005988 <HAL_RCC_GetPCLK2Freq>
 8000bd2:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd6:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <HAL_InitTick+0xbc>)
 8000bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bdc:	0c9b      	lsrs	r3, r3, #18
 8000bde:	3b01      	subs	r3, #1
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000be2:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <HAL_InitTick+0xc0>)
 8000be4:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <HAL_InitTick+0xc4>)
 8000be6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000be8:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <HAL_InitTick+0xc0>)
 8000bea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bee:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <HAL_InitTick+0xc0>)
 8000bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf4:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <HAL_InitTick+0xc0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_InitTick+0xc0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8000c02:	4817      	ldr	r0, [pc, #92]	; (8000c60 <HAL_InitTick+0xc0>)
 8000c04:	f005 fe9e 	bl	8006944 <HAL_TIM_Base_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8000c0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d11b      	bne.n	8000c4e <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000c16:	4812      	ldr	r0, [pc, #72]	; (8000c60 <HAL_InitTick+0xc0>)
 8000c18:	f005 fef4 	bl	8006a04 <HAL_TIM_Base_Start_IT>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8000c22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d111      	bne.n	8000c4e <HAL_InitTick+0xae>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000c2a:	201d      	movs	r0, #29
 8000c2c:	f002 f919 	bl	8002e62 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b0f      	cmp	r3, #15
 8000c34:	d808      	bhi.n	8000c48 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8000c36:	2200      	movs	r2, #0
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	201d      	movs	r0, #29
 8000c3c:	f002 f8f7 	bl	8002e2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c40:	4a09      	ldr	r2, [pc, #36]	; (8000c68 <HAL_InitTick+0xc8>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e002      	b.n	8000c4e <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

 /* Return function status */
  return status;
 8000c4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3738      	adds	r7, #56	; 0x38
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	431bde83 	.word	0x431bde83
 8000c60:	20000768 	.word	0x20000768
 8000c64:	40014800 	.word	0x40014800
 8000c68:	20000114 	.word	0x20000114

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <NMI_Handler+0x4>

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f003 fe00 	bl	80048a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8000ca8:	2002      	movs	r0, #2
 8000caa:	f003 fdf9 	bl	80048a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <DMA1_Channel1_IRQHandler+0x10>)
 8000cba:	f003 fac3 	bl	8004244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000e8c 	.word	0x20000e8c

08000cc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8000ccc:	2040      	movs	r0, #64	; 0x40
 8000cce:	f003 fde7 	bl	80048a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <TIM17_IRQHandler+0x10>)
 8000cde:	f005 fedd 	bl	8006a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000768 	.word	0x20000768

08000cec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <USART2_IRQHandler+0x10>)
 8000cf2:	f006 f98b 	bl	800700c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000df8 	.word	0x20000df8

08000d00 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000d06:	f005 fc75 	bl	80065f4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200008e8 	.word	0x200008e8

08000d14 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000d22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d38:	68fb      	ldr	r3, [r7, #12]
}
 8000d3a:	bf00      	nop
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_SUBGHZ_Init+0x20>)
 8000d4a:	2208      	movs	r2, #8
 8000d4c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_SUBGHZ_Init+0x20>)
 8000d50:	f005 f9ce 	bl	80060f0 <HAL_SUBGHZ_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000d5a:	f7ff fef9 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200008e8 	.word	0x200008e8

08000d68 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff ffcf 	bl	8000d14 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 5, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2105      	movs	r1, #5
 8000d7a:	2032      	movs	r0, #50	; 0x32
 8000d7c:	f002 f857 	bl	8002e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000d80:	2032      	movs	r0, #50	; 0x32
 8000d82:	f002 f86e 	bl	8002e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <radioInit>:
  /* USER CODE END SUBGHZ_MspDeInit 1 */
}

/* USER CODE BEGIN 1 */
void radioInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b088      	sub	sp, #32
 8000d94:	af00      	add	r7, sp, #0
  // Initialize the hardware (SPI bus, TCXO control, RF switch)
  SUBGRF_Init(RadioOnDioIrq);
 8000d96:	4831      	ldr	r0, [pc, #196]	; (8000e5c <radioInit+0xcc>)
 8000d98:	f000 ff32 	bl	8001c00 <SUBGRF_Init>

  // Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
  // "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
  SUBGRF_WriteRegister(SUBGHZ_SMPSC0R, (SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 8000d9c:	f640 1016 	movw	r0, #2326	; 0x916
 8000da0:	f001 fd32 	bl	8002808 <SUBGRF_ReadRegister>
 8000da4:	4603      	mov	r3, r0
 8000da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	4619      	mov	r1, r3
 8000dae:	f640 1016 	movw	r0, #2326	; 0x916
 8000db2:	f001 fd15 	bl	80027e0 <SUBGRF_WriteRegister>
  SUBGRF_SetRegulatorMode();
 8000db6:	f001 f8ac 	bl	8001f12 <SUBGRF_SetRegulatorMode>

  // Use the whole 256-byte buffer for both TX and RX
  SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f001 fc79 	bl	80026b4 <SUBGRF_SetBufferBaseAddress>

  SUBGRF_SetRfFrequency(RF_FREQUENCY);
 8000dc2:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <radioInit+0xd0>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 f9c8 	bl	800215c <SUBGRF_SetRfFrequency>
  SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 8000dcc:	200e      	movs	r0, #14
 8000dce:	f001 fe23 	bl	8002a18 <SUBGRF_SetRfTxPower>
  SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f001 f88e 	bl	8001ef4 <SUBGRF_SetStopRxTimerOnPreambleDetect>

  SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f001 fa05 	bl	80021e8 <SUBGRF_SetPacketType>

  SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8000dde:	2114      	movs	r1, #20
 8000de0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8000de4:	f001 fcfc 	bl	80027e0 <SUBGRF_WriteRegister>
  SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8000de8:	2124      	movs	r1, #36	; 0x24
 8000dea:	f240 7041 	movw	r0, #1857	; 0x741
 8000dee:	f001 fcf7 	bl	80027e0 <SUBGRF_WriteRegister>

  ModulationParams_t modulationParams;
  modulationParams.PacketType = PACKET_TYPE_LORA;
 8000df2:	2301      	movs	r3, #1
 8000df4:	713b      	strb	r3, [r7, #4]
  modulationParams.Params.LoRa.Bandwidth = Bandwidths[LORA_BANDWIDTH];
 8000df6:	2304      	movs	r3, #4
 8000df8:	777b      	strb	r3, [r7, #29]
  modulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)LORA_CODINGRATE;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	77bb      	strb	r3, [r7, #30]
  modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	77fb      	strb	r3, [r7, #31]
  modulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)LORA_SPREADING_FACTOR;
 8000e02:	2307      	movs	r3, #7
 8000e04:	773b      	strb	r3, [r7, #28]
  SUBGRF_SetModulationParams(&modulationParams);
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 fae1 	bl	80023d0 <SUBGRF_SetModulationParams>

  packetParams.PacketType = PACKET_TYPE_LORA;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <radioInit+0xd4>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
  packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <radioInit+0xd4>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	761a      	strb	r2, [r3, #24]
  packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <radioInit+0xd4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	749a      	strb	r2, [r3, #18]
  packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8000e20:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <radioInit+0xd4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	765a      	strb	r2, [r3, #25]
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <radioInit+0xd4>)
 8000e28:	22ff      	movs	r2, #255	; 0xff
 8000e2a:	615a      	str	r2, [r3, #20]


  packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <radioInit+0xd4>)
 8000e2e:	2208      	movs	r2, #8
 8000e30:	821a      	strh	r2, [r3, #16]
  SUBGRF_SetPacketParams(&packetParams);
 8000e32:	480c      	ldr	r0, [pc, #48]	; (8000e64 <radioInit+0xd4>)
 8000e34:	f001 fb9e 	bl	8002574 <SUBGRF_SetPacketParams>

  //SUBGRF_SetLoRaSymbNumTimeout(LORA_SYMBOL_TIMEOUT);

  // WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
  // RegIqPolaritySetup @address 0x0736
  SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8000e38:	f240 7036 	movw	r0, #1846	; 0x736
 8000e3c:	f001 fce4 	bl	8002808 <SUBGRF_ReadRegister>
 8000e40:	4603      	mov	r3, r0
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f240 7036 	movw	r0, #1846	; 0x736
 8000e4e:	f001 fcc7 	bl	80027e0 <SUBGRF_WriteRegister>
}
 8000e52:	bf00      	nop
 8000e54:	3720      	adds	r7, #32
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	08000e69 	.word	0x08000e69
 8000e60:	20000000 	.word	0x20000000
 8000e64:	200008c8 	.word	0x200008c8

08000e68 <RadioOnDioIrq>:
void RadioOnDioIrq(RadioIrqMasks_t radioIrq)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	80fb      	strh	r3, [r7, #6]
  switch (radioIrq)
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e78:	d013      	beq.n	8000ea2 <RadioOnDioIrq+0x3a>
 8000e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e7e:	dc26      	bgt.n	8000ece <RadioOnDioIrq+0x66>
 8000e80:	2b40      	cmp	r3, #64	; 0x40
 8000e82:	d020      	beq.n	8000ec6 <RadioOnDioIrq+0x5e>
 8000e84:	2b40      	cmp	r3, #64	; 0x40
 8000e86:	dc22      	bgt.n	8000ece <RadioOnDioIrq+0x66>
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d002      	beq.n	8000e92 <RadioOnDioIrq+0x2a>
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d004      	beq.n	8000e9a <RadioOnDioIrq+0x32>
      break;
    case IRQ_CRC_ERROR:
      eventReceptor = eventRxError;
      break;
    default:
      break;
 8000e90:	e01d      	b.n	8000ece <RadioOnDioIrq+0x66>
      eventReceptor = eventTxDone;
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <RadioOnDioIrq+0x74>)
 8000e94:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <RadioOnDioIrq+0x78>)
 8000e96:	601a      	str	r2, [r3, #0]
      break;
 8000e98:	e01c      	b.n	8000ed4 <RadioOnDioIrq+0x6c>
      eventReceptor = eventRxDone;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <RadioOnDioIrq+0x74>)
 8000e9c:	4a11      	ldr	r2, [pc, #68]	; (8000ee4 <RadioOnDioIrq+0x7c>)
 8000e9e:	601a      	str	r2, [r3, #0]
      break;
 8000ea0:	e018      	b.n	8000ed4 <RadioOnDioIrq+0x6c>
      if (SUBGRF_GetOperatingMode() == MODE_TX)
 8000ea2:	f000 fef5 	bl	8001c90 <SUBGRF_GetOperatingMode>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b04      	cmp	r3, #4
 8000eaa:	d103      	bne.n	8000eb4 <RadioOnDioIrq+0x4c>
        eventReceptor = eventTxTimeout;
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <RadioOnDioIrq+0x74>)
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <RadioOnDioIrq+0x80>)
 8000eb0:	601a      	str	r2, [r3, #0]
      break;
 8000eb2:	e00e      	b.n	8000ed2 <RadioOnDioIrq+0x6a>
      else if (SUBGRF_GetOperatingMode() == MODE_RX)
 8000eb4:	f000 feec 	bl	8001c90 <SUBGRF_GetOperatingMode>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b05      	cmp	r3, #5
 8000ebc:	d109      	bne.n	8000ed2 <RadioOnDioIrq+0x6a>
        eventReceptor = eventRxTimeout;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <RadioOnDioIrq+0x74>)
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <RadioOnDioIrq+0x84>)
 8000ec2:	601a      	str	r2, [r3, #0]
      break;
 8000ec4:	e005      	b.n	8000ed2 <RadioOnDioIrq+0x6a>
      eventReceptor = eventRxError;
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <RadioOnDioIrq+0x74>)
 8000ec8:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <RadioOnDioIrq+0x88>)
 8000eca:	601a      	str	r2, [r3, #0]
      break;
 8000ecc:	e002      	b.n	8000ed4 <RadioOnDioIrq+0x6c>
      break;
 8000ece:	bf00      	nop
 8000ed0:	e000      	b.n	8000ed4 <RadioOnDioIrq+0x6c>
      break;
 8000ed2:	bf00      	nop
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200008e4 	.word	0x200008e4
 8000ee0:	08000ef5 	.word	0x08000ef5
 8000ee4:	08000f5d 	.word	0x08000f5d
 8000ee8:	08001131 	.word	0x08001131
 8000eec:	08001199 	.word	0x08001199
 8000ef0:	08001205 	.word	0x08001205

08000ef4 <eventTxDone>:
  * @brief  Process the TX Done event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventTxDone(pingPongFSM_t *const fsm)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event TX Done\r\n", 15, HAL_MAX_DELAY);
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295
 8000f00:	220f      	movs	r2, #15
 8000f02:	4914      	ldr	r1, [pc, #80]	; (8000f54 <eventTxDone+0x60>)
 8000f04:	4814      	ldr	r0, [pc, #80]	; (8000f58 <eventTxDone+0x64>)
 8000f06:	f005 fffb 	bl	8006f00 <HAL_UART_Transmit>
  switch (fsm->state)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d002      	beq.n	8000f18 <eventTxDone+0x24>
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d00d      	beq.n	8000f32 <eventTxDone+0x3e>
        default:
          break;
      }
      break;
    default:
      break;
 8000f16:	e019      	b.n	8000f4c <eventTxDone+0x58>
      switch (fsm->subState)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	785b      	ldrb	r3, [r3, #1]
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d106      	bne.n	8000f2e <eventTxDone+0x3a>
          enterMasterRx(fsm);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f9a5 	bl	8001270 <enterMasterRx>
          fsm->subState = SSTATE_RX;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	705a      	strb	r2, [r3, #1]
          break;
 8000f2c:	e000      	b.n	8000f30 <eventTxDone+0x3c>
          break;
 8000f2e:	bf00      	nop
      break;
 8000f30:	e00c      	b.n	8000f4c <eventTxDone+0x58>
      switch (fsm->subState)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	785b      	ldrb	r3, [r3, #1]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d106      	bne.n	8000f48 <eventTxDone+0x54>
          enterSlaveRx(fsm);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 f9c6 	bl	80012cc <enterSlaveRx>
          fsm->subState = SSTATE_RX;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	705a      	strb	r2, [r3, #1]
          break;
 8000f46:	e000      	b.n	8000f4a <eventTxDone+0x56>
          break;
 8000f48:	bf00      	nop
      break;
 8000f4a:	bf00      	nop
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	0800b07c 	.word	0x0800b07c
 8000f58:	20000df8 	.word	0x20000df8

08000f5c <eventRxDone>:
  * @brief  Process the RX Done event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventRxDone(pingPongFSM_t *const fsm)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000f68:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000f6c:	6018      	str	r0, [r3, #0]
  char DataREC[1023];
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event RX Done\r\n", 15, HAL_MAX_DELAY);
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	220f      	movs	r2, #15
 8000f74:	4968      	ldr	r1, [pc, #416]	; (8001118 <eventRxDone+0x1bc>)
 8000f76:	4869      	ldr	r0, [pc, #420]	; (800111c <eventRxDone+0x1c0>)
 8000f78:	f005 ffc2 	bl	8006f00 <HAL_UART_Transmit>
  switch(fsm->state)
 8000f7c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000f80:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d002      	beq.n	8000f92 <eventRxDone+0x36>
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d07d      	beq.n	800108c <eventRxDone+0x130>
        default:
          break;
      }
      break;
    default:
      break;
 8000f90:	e0bc      	b.n	800110c <eventRxDone+0x1b0>
      switch (fsm->subState)
 8000f92:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000f96:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	785b      	ldrb	r3, [r3, #1]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d172      	bne.n	8001088 <eventRxDone+0x12c>
          transitionRxDone(fsm);
 8000fa2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000fa6:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000faa:	6818      	ldr	r0, [r3, #0]
 8000fac:	f000 fa4e 	bl	800144c <transitionRxDone>
          memcpy(rxBuffer_encypt,fsm->rxBuffer,sizeof(fsm->rxBuffer));
 8000fb0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000fb4:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	3310      	adds	r3, #16
 8000fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4857      	ldr	r0, [pc, #348]	; (8001120 <eventRxDone+0x1c4>)
 8000fc4:	f008 fecb 	bl	8009d5e <memcpy>
          if (strncmp(fsm->rxBuffer, "PONG", 4) == 0)
 8000fc8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000fcc:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	3310      	adds	r3, #16
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	4953      	ldr	r1, [pc, #332]	; (8001124 <eventRxDone+0x1c8>)
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f009 f874 	bl	800a0c6 <strncmp>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d12c      	bne.n	800103e <eventRxDone+0xe2>
        	sprintf(DataREC, "\n\rData rec: %s\r\n",fsm->rxBuffer);
 8000fe4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000fe8:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f103 0210 	add.w	r2, r3, #16
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	494c      	ldr	r1, [pc, #304]	; (8001128 <eventRxDone+0x1cc>)
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f009 f801 	bl	800a000 <siprintf>
        	HAL_UART_Transmit(&huart2, (uint8_t *)DataREC, strlen(DataREC), HAL_MAX_DELAY);
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff f8bc 	bl	8000180 <strlen>
 8001008:	4603      	mov	r3, r0
 800100a:	b29a      	uxth	r2, r3
 800100c:	f107 0108 	add.w	r1, r7, #8
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	4841      	ldr	r0, [pc, #260]	; (800111c <eventRxDone+0x1c0>)
 8001016:	f005 ff73 	bl	8006f00 <HAL_UART_Transmit>
        	 BSP_LED_Toggle(LED_GREEN);
 800101a:	2001      	movs	r0, #1
 800101c:	f000 fcc4 	bl	80019a8 <BSP_LED_Toggle>
            enterMasterTx(fsm);
 8001020:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001024:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	f000 f97d 	bl	8001328 <enterMasterTx>
            fsm->subState = SSTATE_TX;
 800102e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001032:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2202      	movs	r2, #2
 800103a:	705a      	strb	r2, [r3, #1]
          break;
 800103c:	e025      	b.n	800108a <eventRxDone+0x12e>
          else if (strncmp(fsm->rxBuffer, "PING", 4) == 0)
 800103e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001042:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	3310      	adds	r3, #16
 800104a:	2204      	movs	r2, #4
 800104c:	4937      	ldr	r1, [pc, #220]	; (800112c <eventRxDone+0x1d0>)
 800104e:	4618      	mov	r0, r3
 8001050:	f009 f839 	bl	800a0c6 <strncmp>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10e      	bne.n	8001078 <eventRxDone+0x11c>
            enterSlaveRx(fsm);
 800105a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800105e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	f000 f932 	bl	80012cc <enterSlaveRx>
            fsm->state = STATE_SLAVE;
 8001068:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800106c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2202      	movs	r2, #2
 8001074:	701a      	strb	r2, [r3, #0]
          break;
 8001076:	e008      	b.n	800108a <eventRxDone+0x12e>
            enterMasterRx(fsm);
 8001078:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800107c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	f000 f8f5 	bl	8001270 <enterMasterRx>
          break;
 8001086:	e000      	b.n	800108a <eventRxDone+0x12e>
          break;
 8001088:	bf00      	nop
      break;
 800108a:	e03f      	b.n	800110c <eventRxDone+0x1b0>
      switch (fsm->subState)
 800108c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001090:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	785b      	ldrb	r3, [r3, #1]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d135      	bne.n	8001108 <eventRxDone+0x1ac>
          transitionRxDone(fsm);
 800109c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80010a0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	f000 f9d1 	bl	800144c <transitionRxDone>
          if (strncmp(fsm->rxBuffer, "PING", 4) == 0)
 80010aa:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80010ae:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3310      	adds	r3, #16
 80010b6:	2204      	movs	r2, #4
 80010b8:	491c      	ldr	r1, [pc, #112]	; (800112c <eventRxDone+0x1d0>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f009 f803 	bl	800a0c6 <strncmp>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d111      	bne.n	80010ea <eventRxDone+0x18e>
        	  BSP_LED_Toggle(LED_GREEN);
 80010c6:	2001      	movs	r0, #1
 80010c8:	f000 fc6e 	bl	80019a8 <BSP_LED_Toggle>
            enterSlaveTx(fsm);
 80010cc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80010d0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	f000 f96d 	bl	80013b4 <enterSlaveTx>
            fsm->subState = SSTATE_TX;
 80010da:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80010de:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2202      	movs	r2, #2
 80010e6:	705a      	strb	r2, [r3, #1]
          break;
 80010e8:	e00f      	b.n	800110a <eventRxDone+0x1ae>
            enterMasterRx(fsm);
 80010ea:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80010ee:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	f000 f8bc 	bl	8001270 <enterMasterRx>
            fsm->state = STATE_MASTER;
 80010f8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80010fc:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2201      	movs	r2, #1
 8001104:	701a      	strb	r2, [r3, #0]
          break;
 8001106:	e000      	b.n	800110a <eventRxDone+0x1ae>
          break;
 8001108:	bf00      	nop
      break;
 800110a:	bf00      	nop
  }
}
 800110c:	bf00      	nop
 800110e:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	0800b08c 	.word	0x0800b08c
 800111c:	20000df8 	.word	0x20000df8
 8001120:	200008f8 	.word	0x200008f8
 8001124:	0800b09c 	.word	0x0800b09c
 8001128:	0800b0a4 	.word	0x0800b0a4
 800112c:	0800b0b8 	.word	0x0800b0b8

08001130 <eventTxTimeout>:
  * @brief  Process the TX Timeout event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventTxTimeout(pingPongFSM_t *const fsm)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event TX Timeout\r\n", 18, HAL_MAX_DELAY);
 8001138:	f04f 33ff 	mov.w	r3, #4294967295
 800113c:	2212      	movs	r2, #18
 800113e:	4914      	ldr	r1, [pc, #80]	; (8001190 <eventTxTimeout+0x60>)
 8001140:	4814      	ldr	r0, [pc, #80]	; (8001194 <eventTxTimeout+0x64>)
 8001142:	f005 fedd 	bl	8006f00 <HAL_UART_Transmit>
  switch (fsm->state)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d002      	beq.n	8001154 <eventTxTimeout+0x24>
 800114e:	2b02      	cmp	r3, #2
 8001150:	d00d      	beq.n	800116e <eventTxTimeout+0x3e>
        default:
          break;
      }
      break;
    default:
      break;
 8001152:	e019      	b.n	8001188 <eventTxTimeout+0x58>
      switch (fsm->subState)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	785b      	ldrb	r3, [r3, #1]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d106      	bne.n	800116a <eventTxTimeout+0x3a>
          enterMasterRx(fsm);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f887 	bl	8001270 <enterMasterRx>
          fsm->subState = SSTATE_RX;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	705a      	strb	r2, [r3, #1]
          break;
 8001168:	e000      	b.n	800116c <eventTxTimeout+0x3c>
          break;
 800116a:	bf00      	nop
      break;
 800116c:	e00c      	b.n	8001188 <eventTxTimeout+0x58>
      switch (fsm->subState)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	785b      	ldrb	r3, [r3, #1]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d106      	bne.n	8001184 <eventTxTimeout+0x54>
          enterSlaveRx(fsm);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f8a8 	bl	80012cc <enterSlaveRx>
          fsm->subState = SSTATE_RX;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	705a      	strb	r2, [r3, #1]
          break;
 8001182:	e000      	b.n	8001186 <eventTxTimeout+0x56>
          break;
 8001184:	bf00      	nop
      break;
 8001186:	bf00      	nop
  }
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	0800b0c0 	.word	0x0800b0c0
 8001194:	20000df8 	.word	0x20000df8

08001198 <eventRxTimeout>:
  * @brief  Process the RX Timeout event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventRxTimeout(pingPongFSM_t *const fsm)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event RX Timeout\r\n", 18, HAL_MAX_DELAY);
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	2212      	movs	r2, #18
 80011a6:	4915      	ldr	r1, [pc, #84]	; (80011fc <eventRxTimeout+0x64>)
 80011a8:	4815      	ldr	r0, [pc, #84]	; (8001200 <eventRxTimeout+0x68>)
 80011aa:	f005 fea9 	bl	8006f00 <HAL_UART_Transmit>
  switch (fsm->state)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d002      	beq.n	80011bc <eventRxTimeout+0x24>
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d012      	beq.n	80011e0 <eventRxTimeout+0x48>
        default:
          break;
      }
      break;
    default:
      break;
 80011ba:	e01b      	b.n	80011f4 <eventRxTimeout+0x5c>
      switch (fsm->subState)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	785b      	ldrb	r3, [r3, #1]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d10b      	bne.n	80011dc <eventRxTimeout+0x44>
          HAL_Delay(fsm->randomDelay);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 fd57 	bl	8002c7c <HAL_Delay>
          enterMasterTx(fsm);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f8aa 	bl	8001328 <enterMasterTx>
          fsm->subState = SSTATE_TX;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2202      	movs	r2, #2
 80011d8:	705a      	strb	r2, [r3, #1]
          break;
 80011da:	e000      	b.n	80011de <eventRxTimeout+0x46>
          break;
 80011dc:	bf00      	nop
      break;
 80011de:	e009      	b.n	80011f4 <eventRxTimeout+0x5c>
      switch (fsm->subState)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	785b      	ldrb	r3, [r3, #1]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d103      	bne.n	80011f0 <eventRxTimeout+0x58>
          enterSlaveRx(fsm);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f86f 	bl	80012cc <enterSlaveRx>
          break;
 80011ee:	e000      	b.n	80011f2 <eventRxTimeout+0x5a>
          break;
 80011f0:	bf00      	nop
      break;
 80011f2:	bf00      	nop
  }
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	0800b0d4 	.word	0x0800b0d4
 8001200:	20000df8 	.word	0x20000df8

08001204 <eventRxError>:
  * @brief  Process the RX Error event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventRxError(pingPongFSM_t *const fsm)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event Rx Error\r\n", 16, HAL_MAX_DELAY);
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	2210      	movs	r2, #16
 8001212:	4915      	ldr	r1, [pc, #84]	; (8001268 <eventRxError+0x64>)
 8001214:	4815      	ldr	r0, [pc, #84]	; (800126c <eventRxError+0x68>)
 8001216:	f005 fe73 	bl	8006f00 <HAL_UART_Transmit>
  switch (fsm->state)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d002      	beq.n	8001228 <eventRxError+0x24>
 8001222:	2b02      	cmp	r3, #2
 8001224:	d012      	beq.n	800124c <eventRxError+0x48>
        default:
          break;
      }
      break;
    default:
      break;
 8001226:	e01b      	b.n	8001260 <eventRxError+0x5c>
      switch (fsm->subState)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	785b      	ldrb	r3, [r3, #1]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d10b      	bne.n	8001248 <eventRxError+0x44>
          HAL_Delay(fsm->randomDelay);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	4618      	mov	r0, r3
 8001236:	f001 fd21 	bl	8002c7c <HAL_Delay>
          enterMasterTx(fsm);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f874 	bl	8001328 <enterMasterTx>
          fsm->subState = SSTATE_TX;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2202      	movs	r2, #2
 8001244:	705a      	strb	r2, [r3, #1]
          break;
 8001246:	e000      	b.n	800124a <eventRxError+0x46>
          break;
 8001248:	bf00      	nop
      break;
 800124a:	e009      	b.n	8001260 <eventRxError+0x5c>
      switch (fsm->subState)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	785b      	ldrb	r3, [r3, #1]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d103      	bne.n	800125c <eventRxError+0x58>
          enterSlaveRx(fsm);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f839 	bl	80012cc <enterSlaveRx>
          break;
 800125a:	e000      	b.n	800125e <eventRxError+0x5a>
          break;
 800125c:	bf00      	nop
      break;
 800125e:	bf00      	nop
  }
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	0800b0e8 	.word	0x0800b0e8
 800126c:	20000df8 	.word	0x20000df8

08001270 <enterMasterRx>:
  * @brief  Entry actions for the RX sub-state of the Master state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterMasterRx(pingPongFSM_t *const fsm)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Master Rx start\r\n", 17, HAL_MAX_DELAY);
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	2211      	movs	r2, #17
 800127e:	4910      	ldr	r1, [pc, #64]	; (80012c0 <enterMasterRx+0x50>)
 8001280:	4810      	ldr	r0, [pc, #64]	; (80012c4 <enterMasterRx+0x54>)
 8001282:	f005 fe3d 	bl	8006f00 <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
 8001286:	2300      	movs	r3, #0
 8001288:	2200      	movs	r2, #0
 800128a:	f240 2162 	movw	r1, #610	; 0x262
 800128e:	f240 2062 	movw	r0, #610	; 0x262
 8001292:	f000 ff07 	bl	80020a4 <SUBGRF_SetDioIrqParams>
                          IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8001296:	2100      	movs	r1, #0
 8001298:	2001      	movs	r0, #1
 800129a:	f001 fb95 	bl	80029c8 <SUBGRF_SetSwitch>
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <enterMasterRx+0x58>)
 80012a0:	22ff      	movs	r2, #255	; 0xff
 80012a2:	615a      	str	r2, [r3, #20]
  SUBGRF_SetPacketParams(&packetParams);
 80012a4:	4808      	ldr	r0, [pc, #32]	; (80012c8 <enterMasterRx+0x58>)
 80012a6:	f001 f965 	bl	8002574 <SUBGRF_SetPacketParams>
  SUBGRF_SetRx(fsm->rxTimeout << 6);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	019b      	lsls	r3, r3, #6
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fdff 	bl	8001eb4 <SUBGRF_SetRx>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	0800b0fc 	.word	0x0800b0fc
 80012c4:	20000df8 	.word	0x20000df8
 80012c8:	200008c8 	.word	0x200008c8

080012cc <enterSlaveRx>:
  * @brief  Entry actions for the RX sub-state of the Slave state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterSlaveRx(pingPongFSM_t *const fsm)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Slave Rx start\r\n", 16, HAL_MAX_DELAY);
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	2210      	movs	r2, #16
 80012da:	4910      	ldr	r1, [pc, #64]	; (800131c <enterSlaveRx+0x50>)
 80012dc:	4810      	ldr	r0, [pc, #64]	; (8001320 <enterSlaveRx+0x54>)
 80012de:	f005 fe0f 	bl	8006f00 <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
 80012e2:	2300      	movs	r3, #0
 80012e4:	2200      	movs	r2, #0
 80012e6:	f240 2162 	movw	r1, #610	; 0x262
 80012ea:	f240 2062 	movw	r0, #610	; 0x262
 80012ee:	f000 fed9 	bl	80020a4 <SUBGRF_SetDioIrqParams>
                          IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 80012f2:	2100      	movs	r1, #0
 80012f4:	2001      	movs	r0, #1
 80012f6:	f001 fb67 	bl	80029c8 <SUBGRF_SetSwitch>
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <enterSlaveRx+0x58>)
 80012fc:	22ff      	movs	r2, #255	; 0xff
 80012fe:	615a      	str	r2, [r3, #20]
  SUBGRF_SetPacketParams(&packetParams);
 8001300:	4808      	ldr	r0, [pc, #32]	; (8001324 <enterSlaveRx+0x58>)
 8001302:	f001 f937 	bl	8002574 <SUBGRF_SetPacketParams>
  SUBGRF_SetRx(fsm->rxTimeout << 6);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	019b      	lsls	r3, r3, #6
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fdd1 	bl	8001eb4 <SUBGRF_SetRx>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	0800b110 	.word	0x0800b110
 8001320:	20000df8 	.word	0x20000df8
 8001324:	200008c8 	.word	0x200008c8

08001328 <enterMasterTx>:
  * @brief  Entry actions for the TX sub-state of the Master state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterMasterTx(pingPongFSM_t *const fsm)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  HAL_Delay(fsm->rxMargin);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	4618      	mov	r0, r3
 8001336:	f001 fca1 	bl	8002c7c <HAL_Delay>

  HAL_UART_Transmit(&huart2, (uint8_t *)"...PING\r\n", 9, HAL_MAX_DELAY);
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	2209      	movs	r2, #9
 8001340:	4917      	ldr	r1, [pc, #92]	; (80013a0 <enterMasterTx+0x78>)
 8001342:	4818      	ldr	r0, [pc, #96]	; (80013a4 <enterMasterTx+0x7c>)
 8001344:	f005 fddc 	bl	8006f00 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t *)"Master Tx start\r\n", 17, HAL_MAX_DELAY);
 8001348:	f04f 33ff 	mov.w	r3, #4294967295
 800134c:	2211      	movs	r2, #17
 800134e:	4916      	ldr	r1, [pc, #88]	; (80013a8 <enterMasterTx+0x80>)
 8001350:	4814      	ldr	r0, [pc, #80]	; (80013a4 <enterMasterTx+0x7c>)
 8001352:	f005 fdd5 	bl	8006f00 <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8001356:	2300      	movs	r3, #0
 8001358:	2200      	movs	r2, #0
 800135a:	f240 2101 	movw	r1, #513	; 0x201
 800135e:	f240 2001 	movw	r0, #513	; 0x201
 8001362:	f000 fe9f 	bl	80020a4 <SUBGRF_SetDioIrqParams>
                          IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8001366:	2101      	movs	r1, #1
 8001368:	2001      	movs	r0, #1
 800136a:	f001 fb2d 	bl	80029c8 <SUBGRF_SetSwitch>
  // Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
  SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 255));
 800136e:	f640 0089 	movw	r0, #2185	; 0x889
 8001372:	f001 fa49 	bl	8002808 <SUBGRF_ReadRegister>
 8001376:	21ff      	movs	r1, #255	; 0xff
 8001378:	f640 0089 	movw	r0, #2185	; 0x889
 800137c:	f001 fa30 	bl	80027e0 <SUBGRF_WriteRegister>
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <enterMasterTx+0x84>)
 8001382:	22ff      	movs	r2, #255	; 0xff
 8001384:	615a      	str	r2, [r3, #20]
  SUBGRF_SetPacketParams(&packetParams);
 8001386:	4809      	ldr	r0, [pc, #36]	; (80013ac <enterMasterTx+0x84>)
 8001388:	f001 f8f4 	bl	8002574 <SUBGRF_SetPacketParams>
  SUBGRF_SendPayload((uint8_t *)"PINGpppppppppppppppppppppppppppppppppppppppp", 255, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	21ff      	movs	r1, #255	; 0xff
 8001390:	4807      	ldr	r0, [pc, #28]	; (80013b0 <enterMasterTx+0x88>)
 8001392:	f000 fcb9 	bl	8001d08 <SUBGRF_SendPayload>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	0800b124 	.word	0x0800b124
 80013a4:	20000df8 	.word	0x20000df8
 80013a8:	0800b130 	.word	0x0800b130
 80013ac:	200008c8 	.word	0x200008c8
 80013b0:	0800b144 	.word	0x0800b144

080013b4 <enterSlaveTx>:
  * @brief  Entry actions for the TX sub-state of the Slave state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterSlaveTx(pingPongFSM_t *const fsm)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  HAL_Delay(fsm->rxMargin);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 fc5b 	bl	8002c7c <HAL_Delay>

  HAL_UART_Transmit(&huart2, (uint8_t *)"...PONG\r\n", 9, HAL_MAX_DELAY);
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ca:	2209      	movs	r2, #9
 80013cc:	4919      	ldr	r1, [pc, #100]	; (8001434 <enterSlaveTx+0x80>)
 80013ce:	481a      	ldr	r0, [pc, #104]	; (8001438 <enterSlaveTx+0x84>)
 80013d0:	f005 fd96 	bl	8006f00 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t *)"Slave Tx start\r\n", 16, HAL_MAX_DELAY);
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	2210      	movs	r2, #16
 80013da:	4918      	ldr	r1, [pc, #96]	; (800143c <enterSlaveTx+0x88>)
 80013dc:	4816      	ldr	r0, [pc, #88]	; (8001438 <enterSlaveTx+0x84>)
 80013de:	f005 fd8f 	bl	8006f00 <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 80013e2:	2300      	movs	r3, #0
 80013e4:	2200      	movs	r2, #0
 80013e6:	f240 2101 	movw	r1, #513	; 0x201
 80013ea:	f240 2001 	movw	r0, #513	; 0x201
 80013ee:	f000 fe59 	bl	80020a4 <SUBGRF_SetDioIrqParams>
                          IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 80013f2:	2101      	movs	r1, #1
 80013f4:	2001      	movs	r0, #1
 80013f6:	f001 fae7 	bl	80029c8 <SUBGRF_SetSwitch>
  // Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
  SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0xFF));
 80013fa:	f640 0089 	movw	r0, #2185	; 0x889
 80013fe:	f001 fa03 	bl	8002808 <SUBGRF_ReadRegister>
 8001402:	21ff      	movs	r1, #255	; 0xff
 8001404:	f640 0089 	movw	r0, #2185	; 0x889
 8001408:	f001 f9ea 	bl	80027e0 <SUBGRF_WriteRegister>
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <enterSlaveTx+0x8c>)
 800140e:	22ff      	movs	r2, #255	; 0xff
 8001410:	615a      	str	r2, [r3, #20]
  SUBGRF_SetPacketParams(&packetParams);
 8001412:	480b      	ldr	r0, [pc, #44]	; (8001440 <enterSlaveTx+0x8c>)
 8001414:	f001 f8ae 	bl	8002574 <SUBGRF_SetPacketParams>
  //SUBGRF_SendPayload((uint8_t *)"PONGdsaaahhhhhhaaaaamnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\r\n", 255, 0);
  //SUBGRF_SendPayload(rxBuffer, 255, 0);
  //memset(rxBuffer,' ',sizeof(rxBuffer));
   SUBGRF_SendPayload(rxBuffer_encypt, 255, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	21ff      	movs	r1, #255	; 0xff
 800141c:	4809      	ldr	r0, [pc, #36]	; (8001444 <enterSlaveTx+0x90>)
 800141e:	f000 fc73 	bl	8001d08 <SUBGRF_SendPayload>
   //memset(rxBuffer_encypt,' ',sizeof(rxBuffer_encypt));
  //strcpy(rxBuffer,"PONGnoLoad");
  memset(rxBuffer,0,sizeof(rxBuffer));
 8001422:	22ff      	movs	r2, #255	; 0xff
 8001424:	2100      	movs	r1, #0
 8001426:	4808      	ldr	r0, [pc, #32]	; (8001448 <enterSlaveTx+0x94>)
 8001428:	f008 fca7 	bl	8009d7a <memset>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	0800b174 	.word	0x0800b174
 8001438:	20000df8 	.word	0x20000df8
 800143c:	0800b180 	.word	0x0800b180
 8001440:	200008c8 	.word	0x200008c8
 8001444:	200008f8 	.word	0x200008f8
 8001448:	20000008 	.word	0x20000008

0800144c <transitionRxDone>:
  * @brief  Transition actions executed on every RX Done event (helper function)
  * @param  fsm pointer to FSM context
  * @retval None
  */
void transitionRxDone(pingPongFSM_t *const fsm)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b094      	sub	sp, #80	; 0x50
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  PacketStatus_t packetStatus;
  char uartBuff[50];

  // Workaround 15.3 in DS.SX1261-2.W.APP (because following RX w/ timeout sequence)
  SUBGRF_WriteRegister(0x0920, 0x00);
 8001454:	2100      	movs	r1, #0
 8001456:	f44f 6012 	mov.w	r0, #2336	; 0x920
 800145a:	f001 f9c1 	bl	80027e0 <SUBGRF_WriteRegister>
  SUBGRF_WriteRegister(0x0944, (SUBGRF_ReadRegister(0x0944) | 0x02));
 800145e:	f640 1044 	movw	r0, #2372	; 0x944
 8001462:	f001 f9d1 	bl	8002808 <SUBGRF_ReadRegister>
 8001466:	4603      	mov	r3, r0
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4619      	mov	r1, r3
 8001470:	f640 1044 	movw	r0, #2372	; 0x944
 8001474:	f001 f9b4 	bl	80027e0 <SUBGRF_WriteRegister>

  SUBGRF_GetPayload((uint8_t *)fsm->rxBuffer, &fsm->rxSize, 0xFF);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f103 0010 	add.w	r0, r3, #16
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001484:	22ff      	movs	r2, #255	; 0xff
 8001486:	4619      	mov	r1, r3
 8001488:	f000 fc1c 	bl	8001cc4 <SUBGRF_GetPayload>
  SUBGRF_GetPacketStatus(&packetStatus);
 800148c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001490:	4618      	mov	r0, r3
 8001492:	f001 f953 	bl	800273c <SUBGRF_GetPacketStatus>

  sprintf(uartBuff, "RssiValue=%d dBm, SnrValue=%d Hz\r\n", packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt);
 8001496:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 800149a:	461a      	mov	r2, r3
 800149c:	f997 3049 	ldrsb.w	r3, [r7, #73]	; 0x49
 80014a0:	f107 0008 	add.w	r0, r7, #8
 80014a4:	490a      	ldr	r1, [pc, #40]	; (80014d0 <transitionRxDone+0x84>)
 80014a6:	f008 fdab 	bl	800a000 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe fe66 	bl	8000180 <strlen>
 80014b4:	4603      	mov	r3, r0
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	f107 0108 	add.w	r1, r7, #8
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <transitionRxDone+0x88>)
 80014c2:	f005 fd1d 	bl	8006f00 <HAL_UART_Transmit>
}
 80014c6:	bf00      	nop
 80014c8:	3750      	adds	r7, #80	; 0x50
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	0800b194 	.word	0x0800b194
 80014d4:	20000df8 	.word	0x20000df8

080014d8 <fsmInit>:
void fsmInit(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0

	// get random number
	  uint32_t rnd = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
	  SUBGRF_SetDioIrqParams(IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
 80014e2:	2300      	movs	r3, #0
 80014e4:	2200      	movs	r2, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	2000      	movs	r0, #0
 80014ea:	f000 fddb 	bl	80020a4 <SUBGRF_SetDioIrqParams>
	  rnd = SUBGRF_GetRandom();
 80014ee:	f000 fc5e 	bl	8001dae <SUBGRF_GetRandom>
 80014f2:	6078      	str	r0, [r7, #4]

	  fsm.state = STATE_NULL;
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <fsmInit+0x98>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
	  fsm.subState = SSTATE_NULL;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <fsmInit+0x98>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	705a      	strb	r2, [r3, #1]
	  fsm.rxTimeout = 3000; // 3000 ms
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <fsmInit+0x98>)
 8001502:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001506:	605a      	str	r2, [r3, #4]
	  fsm.rxMargin = 200;   // 200 ms
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <fsmInit+0x98>)
 800150a:	22c8      	movs	r2, #200	; 0xc8
 800150c:	609a      	str	r2, [r3, #8]
	  fsm.randomDelay = rnd >> 22; // [0, 1023] ms
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	0d9b      	lsrs	r3, r3, #22
 8001512:	4a17      	ldr	r2, [pc, #92]	; (8001570 <fsmInit+0x98>)
 8001514:	60d3      	str	r3, [r2, #12]
	  //sprintf(uartBuff, "rand=%lu\r\n", fsm.randomDelay);
	  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 8001516:	4817      	ldr	r0, [pc, #92]	; (8001574 <fsmInit+0x9c>)
 8001518:	f7fe fe32 	bl	8000180 <strlen>
 800151c:	4603      	mov	r3, r0
 800151e:	b29a      	uxth	r2, r3
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
 8001524:	4913      	ldr	r1, [pc, #76]	; (8001574 <fsmInit+0x9c>)
 8001526:	4814      	ldr	r0, [pc, #80]	; (8001578 <fsmInit+0xa0>)
 8001528:	f005 fcea 	bl	8006f00 <HAL_UART_Transmit>

	  HAL_Delay(fsm.randomDelay);
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <fsmInit+0x98>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4618      	mov	r0, r3
 8001532:	f001 fba3 	bl	8002c7c <HAL_Delay>
	  SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
 8001536:	2300      	movs	r3, #0
 8001538:	2200      	movs	r2, #0
 800153a:	f240 2142 	movw	r1, #578	; 0x242
 800153e:	f240 2042 	movw	r0, #578	; 0x242
 8001542:	f000 fdaf 	bl	80020a4 <SUBGRF_SetDioIrqParams>
	                          IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
	                          IRQ_RADIO_NONE,
	                          IRQ_RADIO_NONE );
	  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8001546:	2100      	movs	r1, #0
 8001548:	2001      	movs	r0, #1
 800154a:	f001 fa3d 	bl	80029c8 <SUBGRF_SetSwitch>
	  SUBGRF_SetRx(fsm.rxTimeout << 6);
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <fsmInit+0x98>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	019b      	lsls	r3, r3, #6
 8001554:	4618      	mov	r0, r3
 8001556:	f000 fcad 	bl	8001eb4 <SUBGRF_SetRx>
	  fsm.state = STATE_SLAVE;
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <fsmInit+0x98>)
 800155c:	2202      	movs	r2, #2
 800155e:	701a      	strb	r2, [r3, #0]
	  //fsm.subState = SSTATE_RX;
	  //fsm.state = STATE_MASTER;
	  fsm.subState = SSTATE_RX;
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <fsmInit+0x98>)
 8001562:	2201      	movs	r2, #1
 8001564:	705a      	strb	r2, [r3, #1]
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200007b4 	.word	0x200007b4
 8001574:	200009f8 	.word	0x200009f8
 8001578:	20000df8 	.word	0x20000df8

0800157c <SUBGHZ>:
	  // RF_{IRQ0, IRQ1, IRQ2} pins
	  GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8;
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
void SUBGHZ(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	    eventReceptor = NULL;
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <SUBGHZ+0x24>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
	    while (eventReceptor == NULL);
 8001586:	bf00      	nop
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <SUBGHZ+0x24>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0fb      	beq.n	8001588 <SUBGHZ+0xc>
	    {
	    radioInit();
 8001590:	f7ff fbfe 	bl	8000d90 <radioInit>
	    eventReceptor(&fsm);
 8001594:	4b02      	ldr	r3, [pc, #8]	; (80015a0 <SUBGHZ+0x24>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <SUBGHZ+0x28>)
 800159a:	4798      	blx	r3
	    }
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200008e4 	.word	0x200008e4
 80015a4:	200007b4 	.word	0x200007b4

080015a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	e00a      	b.n	80015d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ba:	f3af 8000 	nop.w
 80015be:	4601      	mov	r1, r0
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	60ba      	str	r2, [r7, #8]
 80015c6:	b2ca      	uxtb	r2, r1
 80015c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	3301      	adds	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697a      	ldr	r2, [r7, #20]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	dbf0      	blt.n	80015ba <_read+0x12>
  }

  return len;
 80015d8:	687b      	ldr	r3, [r7, #4]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001608:	605a      	str	r2, [r3, #4]
  return 0;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <_isatty>:

int _isatty(int file)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800162a:	b480      	push	{r7}
 800162c:	b085      	sub	sp, #20
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
	...

08001644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800164c:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <_sbrk+0x5c>)
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <_sbrk+0x60>)
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <_sbrk+0x64>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <_sbrk+0x64>)
 8001662:	4a12      	ldr	r2, [pc, #72]	; (80016ac <_sbrk+0x68>)
 8001664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	429a      	cmp	r2, r3
 8001672:	d207      	bcs.n	8001684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001674:	f008 fa50 	bl	8009b18 <__errno>
 8001678:	4603      	mov	r3, r0
 800167a:	220c      	movs	r2, #12
 800167c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
 8001682:	e009      	b.n	8001698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <_sbrk+0x64>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	4a05      	ldr	r2, [pc, #20]	; (80016a8 <_sbrk+0x64>)
 8001694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001696:	68fb      	ldr	r3, [r7, #12]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20010000 	.word	0x20010000
 80016a4:	00000400 	.word	0x00000400
 80016a8:	200008f4 	.word	0x200008f4
 80016ac:	20003388 	.word	0x20003388

080016b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <LL_AHB2_GRP1_EnableClock>:
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4013      	ands	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016e0:	68fb      	ldr	r3, [r7, #12]
}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr

080016ec <LL_APB1_GRP1_EnableClock>:
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4313      	orrs	r3, r2
 8001702:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001708:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4013      	ands	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001710:	68fb      	ldr	r3, [r7, #12]
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <MX_USART2_UART_Init+0x90>)
 8001722:	4a23      	ldr	r2, [pc, #140]	; (80017b0 <MX_USART2_UART_Init+0x94>)
 8001724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001726:	4b21      	ldr	r3, [pc, #132]	; (80017ac <MX_USART2_UART_Init+0x90>)
 8001728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800172c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800172e:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <MX_USART2_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <MX_USART2_UART_Init+0x90>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <MX_USART2_UART_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <MX_USART2_UART_Init+0x90>)
 8001742:	220c      	movs	r2, #12
 8001744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <MX_USART2_UART_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800174c:	4b17      	ldr	r3, [pc, #92]	; (80017ac <MX_USART2_UART_Init+0x90>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <MX_USART2_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <MX_USART2_UART_Init+0x90>)
 800175a:	2200      	movs	r2, #0
 800175c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <MX_USART2_UART_Init+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001764:	4811      	ldr	r0, [pc, #68]	; (80017ac <MX_USART2_UART_Init+0x90>)
 8001766:	f005 fb7b 	bl	8006e60 <HAL_UART_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001770:	f7ff f9ee 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001774:	2100      	movs	r1, #0
 8001776:	480d      	ldr	r0, [pc, #52]	; (80017ac <MX_USART2_UART_Init+0x90>)
 8001778:	f006 fe90 	bl	800849c <HAL_UARTEx_SetTxFifoThreshold>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001782:	f7ff f9e5 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001786:	2100      	movs	r1, #0
 8001788:	4808      	ldr	r0, [pc, #32]	; (80017ac <MX_USART2_UART_Init+0x90>)
 800178a:	f006 fec5 	bl	8008518 <HAL_UARTEx_SetRxFifoThreshold>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001794:	f7ff f9dc 	bl	8000b50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001798:	4804      	ldr	r0, [pc, #16]	; (80017ac <MX_USART2_UART_Init+0x90>)
 800179a:	f006 fe47 	bl	800842c <HAL_UARTEx_DisableFifoMode>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80017a4:	f7ff f9d4 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000df8 	.word	0x20000df8
 80017b0:	40004400 	.word	0x40004400

080017b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b096      	sub	sp, #88	; 0x58
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2238      	movs	r2, #56	; 0x38
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f008 fad0 	bl	8009d7a <memset>
  if(uartHandle->Instance==USART2)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a34      	ldr	r2, [pc, #208]	; (80018b0 <HAL_UART_MspInit+0xfc>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d161      	bne.n	80018a8 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017e4:	2302      	movs	r3, #2
 80017e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017e8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80017ec:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ee:	f107 030c 	add.w	r3, r7, #12
 80017f2:	4618      	mov	r0, r3
 80017f4:	f004 fac8 	bl	8005d88 <HAL_RCCEx_PeriphCLKConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80017fe:	f7ff f9a7 	bl	8000b50 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001802:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001806:	f7ff ff71 	bl	80016ec <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2001      	movs	r0, #1
 800180c:	f7ff ff56 	bl	80016bc <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001810:	230c      	movs	r3, #12
 8001812:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001820:	2307      	movs	r3, #7
 8001822:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001828:	4619      	mov	r1, r3
 800182a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182e:	f002 fea7 	bl	8004580 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001832:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <HAL_UART_MspInit+0x100>)
 8001834:	4a20      	ldr	r2, [pc, #128]	; (80018b8 <HAL_UART_MspInit+0x104>)
 8001836:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <HAL_UART_MspInit+0x100>)
 800183a:	2213      	movs	r2, #19
 800183c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183e:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <HAL_UART_MspInit+0x100>)
 8001840:	2200      	movs	r2, #0
 8001842:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001844:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_UART_MspInit+0x100>)
 8001846:	2200      	movs	r2, #0
 8001848:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800184a:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <HAL_UART_MspInit+0x100>)
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001850:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <HAL_UART_MspInit+0x100>)
 8001852:	2200      	movs	r2, #0
 8001854:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <HAL_UART_MspInit+0x100>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <HAL_UART_MspInit+0x100>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <HAL_UART_MspInit+0x100>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001868:	4812      	ldr	r0, [pc, #72]	; (80018b4 <HAL_UART_MspInit+0x100>)
 800186a:	f002 fb07 	bl	8003e7c <HAL_DMA_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001874:	f7ff f96c 	bl	8000b50 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001878:	2110      	movs	r1, #16
 800187a:	480e      	ldr	r0, [pc, #56]	; (80018b4 <HAL_UART_MspInit+0x100>)
 800187c:	f002 fda8 	bl	80043d0 <HAL_DMA_ConfigChannelAttributes>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_UART_MspInit+0xd6>
    {
      Error_Handler();
 8001886:	f7ff f963 	bl	8000b50 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_UART_MspInit+0x100>)
 800188e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001892:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <HAL_UART_MspInit+0x100>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	2105      	movs	r1, #5
 800189c:	2025      	movs	r0, #37	; 0x25
 800189e:	f001 fac6 	bl	8002e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018a2:	2025      	movs	r0, #37	; 0x25
 80018a4:	f001 fadd 	bl	8002e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018a8:	bf00      	nop
 80018aa:	3758      	adds	r7, #88	; 0x58
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40004400 	.word	0x40004400
 80018b4:	20000e8c 	.word	0x20000e8c
 80018b8:	40020008 	.word	0x40020008

080018bc <HAL_UARTEx_RxEventCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, RX_SIZE);
 80018c8:	22ff      	movs	r2, #255	; 0xff
 80018ca:	4906      	ldr	r1, [pc, #24]	; (80018e4 <HAL_UARTEx_RxEventCallback+0x28>)
 80018cc:	4806      	ldr	r0, [pc, #24]	; (80018e8 <HAL_UARTEx_RxEventCallback+0x2c>)
 80018ce:	f006 fe61 	bl	8008594 <HAL_UARTEx_ReceiveToIdle_DMA>
    size = Size;
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_UARTEx_RxEventCallback+0x30>)
 80018d8:	701a      	strb	r2, [r3, #0]
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000008 	.word	0x20000008
 80018e8:	20000df8 	.word	0x20000df8
 80018ec:	200009f7 	.word	0x200009f7

080018f0 <UartDmaStart>:
void UartDmaStart(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, RX_SIZE);
 80018f4:	22ff      	movs	r2, #255	; 0xff
 80018f6:	4907      	ldr	r1, [pc, #28]	; (8001914 <UartDmaStart+0x24>)
 80018f8:	4807      	ldr	r0, [pc, #28]	; (8001918 <UartDmaStart+0x28>)
 80018fa:	f006 fe4b 	bl	8008594 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <UartDmaStart+0x2c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <UartDmaStart+0x2c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0204 	bic.w	r2, r2, #4
 800190c:	601a      	str	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000008 	.word	0x20000008
 8001918:	20000df8 	.word	0x20000df8
 800191c:	20000e8c 	.word	0x20000e8c

08001920 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001920:	480d      	ldr	r0, [pc, #52]	; (8001958 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001922:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001924:	f7ff fec4 	bl	80016b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <LoopForever+0x6>)
  ldr r1, =_edata
 800192a:	490d      	ldr	r1, [pc, #52]	; (8001960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <LoopForever+0xe>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001930:	e002      	b.n	8001938 <LoopCopyDataInit>

08001932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001936:	3304      	adds	r3, #4

08001938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800193c:	d3f9      	bcc.n	8001932 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001940:	4c0a      	ldr	r4, [pc, #40]	; (800196c <LoopForever+0x16>)
  movs r3, #0
 8001942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001944:	e001      	b.n	800194a <LoopFillZerobss>

08001946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001948:	3204      	adds	r2, #4

0800194a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800194c:	d3fb      	bcc.n	8001946 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800194e:	f008 f9df 	bl	8009d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001952:	f7ff f83a 	bl	80009ca <main>

08001956 <LoopForever>:

LoopForever:
    b LoopForever
 8001956:	e7fe      	b.n	8001956 <LoopForever>
  ldr   r0, =_estack
 8001958:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001960:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001964:	0800b3b8 	.word	0x0800b3b8
  ldr r2, =_sbss
 8001968:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 800196c:	20003384 	.word	0x20003384

08001970 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC_IRQHandler>
	...

08001974 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <BSP_LED_Off+0x2c>)
 8001982:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <BSP_LED_Off+0x30>)
 800198a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800198e:	2200      	movs	r2, #0
 8001990:	4619      	mov	r1, r3
 8001992:	f002 ff55 	bl	8004840 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000108 	.word	0x20000108
 80019a4:	0800b2e0 	.word	0x0800b2e0

080019a8 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <BSP_LED_Toggle+0x2c>)
 80019b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	4906      	ldr	r1, [pc, #24]	; (80019d8 <BSP_LED_Toggle+0x30>)
 80019be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80019c2:	4619      	mov	r1, r3
 80019c4:	4610      	mov	r0, r2
 80019c6:	f002 ff52 	bl	800486e <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000108 	.word	0x20000108
 80019d8:	0800b2e0 	.word	0x0800b2e0

080019dc <LL_AHB2_GRP1_EnableClock>:
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4013      	ands	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a00:	68fb      	ldr	r3, [r7, #12]
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001a20:	2004      	movs	r0, #4
 8001a22:	f7ff ffdb 	bl	80019dc <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001a26:	2310      	movs	r3, #16
 8001a28:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4812      	ldr	r0, [pc, #72]	; (8001a84 <BSP_RADIO_Init+0x78>)
 8001a3c:	f002 fda0 	bl	8004580 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001a40:	2320      	movs	r3, #32
 8001a42:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	4619      	mov	r1, r3
 8001a48:	480e      	ldr	r0, [pc, #56]	; (8001a84 <BSP_RADIO_Init+0x78>)
 8001a4a:	f002 fd99 	bl	8004580 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001a4e:	2308      	movs	r3, #8
 8001a50:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	480b      	ldr	r0, [pc, #44]	; (8001a84 <BSP_RADIO_Init+0x78>)
 8001a58:	f002 fd92 	bl	8004580 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2120      	movs	r1, #32
 8001a60:	4808      	ldr	r0, [pc, #32]	; (8001a84 <BSP_RADIO_Init+0x78>)
 8001a62:	f002 feed 	bl	8004840 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001a66:	2200      	movs	r2, #0
 8001a68:	2110      	movs	r1, #16
 8001a6a:	4806      	ldr	r0, [pc, #24]	; (8001a84 <BSP_RADIO_Init+0x78>)
 8001a6c:	f002 fee8 	bl	8004840 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001a70:	2200      	movs	r2, #0
 8001a72:	2108      	movs	r1, #8
 8001a74:	4803      	ldr	r0, [pc, #12]	; (8001a84 <BSP_RADIO_Init+0x78>)
 8001a76:	f002 fee3 	bl	8004840 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	48000800 	.word	0x48000800

08001a88 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d84b      	bhi.n	8001b30 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8001a98:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9e:	bf00      	nop
 8001aa0:	08001ab1 	.word	0x08001ab1
 8001aa4:	08001ad1 	.word	0x08001ad1
 8001aa8:	08001af1 	.word	0x08001af1
 8001aac:	08001b11 	.word	0x08001b11
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2108      	movs	r1, #8
 8001ab4:	4821      	ldr	r0, [pc, #132]	; (8001b3c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ab6:	f002 fec3 	bl	8004840 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2110      	movs	r1, #16
 8001abe:	481f      	ldr	r0, [pc, #124]	; (8001b3c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ac0:	f002 febe 	bl	8004840 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2120      	movs	r1, #32
 8001ac8:	481c      	ldr	r0, [pc, #112]	; (8001b3c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001aca:	f002 feb9 	bl	8004840 <HAL_GPIO_WritePin>
      break;      
 8001ace:	e030      	b.n	8001b32 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	2108      	movs	r1, #8
 8001ad4:	4819      	ldr	r0, [pc, #100]	; (8001b3c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ad6:	f002 feb3 	bl	8004840 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001ada:	2201      	movs	r2, #1
 8001adc:	2110      	movs	r1, #16
 8001ade:	4817      	ldr	r0, [pc, #92]	; (8001b3c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ae0:	f002 feae 	bl	8004840 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2120      	movs	r1, #32
 8001ae8:	4814      	ldr	r0, [pc, #80]	; (8001b3c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001aea:	f002 fea9 	bl	8004840 <HAL_GPIO_WritePin>
      break;
 8001aee:	e020      	b.n	8001b32 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	2108      	movs	r1, #8
 8001af4:	4811      	ldr	r0, [pc, #68]	; (8001b3c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001af6:	f002 fea3 	bl	8004840 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001afa:	2201      	movs	r2, #1
 8001afc:	2110      	movs	r1, #16
 8001afe:	480f      	ldr	r0, [pc, #60]	; (8001b3c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001b00:	f002 fe9e 	bl	8004840 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001b04:	2201      	movs	r2, #1
 8001b06:	2120      	movs	r1, #32
 8001b08:	480c      	ldr	r0, [pc, #48]	; (8001b3c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001b0a:	f002 fe99 	bl	8004840 <HAL_GPIO_WritePin>
      break;
 8001b0e:	e010      	b.n	8001b32 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	2108      	movs	r1, #8
 8001b14:	4809      	ldr	r0, [pc, #36]	; (8001b3c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001b16:	f002 fe93 	bl	8004840 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2110      	movs	r1, #16
 8001b1e:	4807      	ldr	r0, [pc, #28]	; (8001b3c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001b20:	f002 fe8e 	bl	8004840 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001b24:	2201      	movs	r2, #1
 8001b26:	2120      	movs	r1, #32
 8001b28:	4804      	ldr	r0, [pc, #16]	; (8001b3c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001b2a:	f002 fe89 	bl	8004840 <HAL_GPIO_WritePin>
      break;
 8001b2e:	e000      	b.n	8001b32 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8001b30:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	48000800 	.word	0x48000800

08001b40 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr

08001b4e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001b60:	2301      	movs	r3, #1
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d102      	bne.n	8001b80 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8001b7a:	230f      	movs	r3, #15
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	e001      	b.n	8001b84 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001b80:	2316      	movs	r3, #22
 8001b82:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001b84:	68fb      	ldr	r3, [r7, #12]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8001b94:	f7ff ff3a 	bl	8001a0c <BSP_RADIO_Init>
 8001b98:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff6c 	bl	8001a88 <BSP_RADIO_ConfigRFSwitch>
 8001bb0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8001bbe:	f7ff ffbf 	bl	8001b40 <BSP_RADIO_GetTxConfig>
 8001bc2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8001bcc:	f7ff ffbf 	bl	8001b4e <BSP_RADIO_IsTCXO>
 8001bd0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8001bda:	f7ff ffbf 	bl	8001b5c <BSP_RADIO_IsDCDC>
 8001bde:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ffba 	bl	8001b6a <BSP_RADIO_GetRFOMaxPowerConfig>
 8001bf6:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8001c0e:	4a1d      	ldr	r2, [pc, #116]	; (8001c84 <SUBGRF_Init+0x84>)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8001c14:	f7ff f896 	bl	8000d44 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f000 ffd1 	bl	8002bc0 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <SUBGRF_Init+0x88>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8001c24:	2000      	movs	r0, #0
 8001c26:	f000 f909 	bl	8001e3c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8001c2a:	f7ff ffcd 	bl	8001bc8 <RBI_IsTCXO>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d10e      	bne.n	8001c52 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8001c34:	2140      	movs	r1, #64	; 0x40
 8001c36:	2001      	movs	r0, #1
 8001c38:	f000 fa6e 	bl	8002118 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	f640 1011 	movw	r0, #2321	; 0x911
 8001c42:	f000 fdcd 	bl	80027e0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8001c46:	237f      	movs	r3, #127	; 0x7f
 8001c48:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8001c4a:	7b38      	ldrb	r0, [r7, #12]
 8001c4c:	f000 f978 	bl	8001f40 <SUBGRF_Calibrate>
 8001c50:	e009      	b.n	8001c66 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8001c52:	2120      	movs	r1, #32
 8001c54:	f640 1011 	movw	r0, #2321	; 0x911
 8001c58:	f000 fdc2 	bl	80027e0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8001c5c:	2120      	movs	r1, #32
 8001c5e:	f640 1012 	movw	r0, #2322	; 0x912
 8001c62:	f000 fdbd 	bl	80027e0 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8001c66:	210e      	movs	r1, #14
 8001c68:	f640 101f 	movw	r0, #2335	; 0x91f
 8001c6c:	f000 fdb8 	bl	80027e0 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8001c70:	f7ff ff8e 	bl	8001b90 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <SUBGRF_Init+0x8c>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000ef8 	.word	0x20000ef8
 8001c88:	20000ef4 	.word	0x20000ef4
 8001c8c:	20000eec 	.word	0x20000eec

08001c90 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
    return OperatingMode;
 8001c94:	4b02      	ldr	r3, [pc, #8]	; (8001ca0 <SUBGRF_GetOperatingMode+0x10>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	20000eec 	.word	0x20000eec

08001ca4 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f000 fdfe 	bl	80028b8 <SUBGRF_WriteBuffer>
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8001cd6:	f107 0317 	add.w	r3, r7, #23
 8001cda:	4619      	mov	r1, r3
 8001cdc:	68b8      	ldr	r0, [r7, #8]
 8001cde:	f000 fd01 	bl	80026e4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	79fa      	ldrb	r2, [r7, #7]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d201      	bcs.n	8001cf0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e007      	b.n	8001d00 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8001cf0:	7df8      	ldrb	r0, [r7, #23]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	68f9      	ldr	r1, [r7, #12]
 8001cfa:	f000 fdff 	bl	80028fc <SUBGRF_ReadBuffer>

    return 0;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	460b      	mov	r3, r1
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8001d16:	7afb      	ldrb	r3, [r7, #11]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f7ff ffc2 	bl	8001ca4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f8a7 	bl	8001e74 <SUBGRF_SetTx>
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8001d48:	f000 fa6a 	bl	8002220 <SUBGRF_GetPacketType>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d108      	bne.n	8001d64 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	2202      	movs	r2, #2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8001d5e:	f000 fd67 	bl	8002830 <SUBGRF_WriteRegisters>
            break;
 8001d62:	e000      	b.n	8001d66 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8001d64:	bf00      	nop
    }
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	0a1b      	lsrs	r3, r3, #8
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8001d88:	f000 fa4a 	bl	8002220 <SUBGRF_GetPacketType>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d108      	bne.n	8001da4 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	2202      	movs	r2, #2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f240 60be 	movw	r0, #1726	; 0x6be
 8001d9e:	f000 fd47 	bl	8002830 <SUBGRF_WriteRegisters>
            break;
 8001da2:	e000      	b.n	8001da6 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8001da4:	bf00      	nop
    }
}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <SUBGRF_GetRandom>:
            break;
    }
}

uint32_t SUBGRF_GetRandom( void )
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8001db4:	2300      	movs	r3, #0
 8001db6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8001db8:	2300      	movs	r3, #0
 8001dba:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8001dc0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8001dc4:	f000 fd20 	bl	8002808 <SUBGRF_ReadRegister>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	f023 0301 	bic.w	r3, r3, #1
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8001dda:	f000 fd01 	bl	80027e0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8001dde:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8001de2:	f000 fd11 	bl	8002808 <SUBGRF_ReadRegister>
 8001de6:	4603      	mov	r3, r0
 8001de8:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8001dea:	79bb      	ldrb	r3, [r7, #6]
 8001dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4619      	mov	r1, r3
 8001df4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8001df8:	f000 fcf2 	bl	80027e0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8001dfc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001e00:	f000 f858 	bl	8001eb4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8001e04:	463b      	mov	r3, r7
 8001e06:	2204      	movs	r2, #4
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f640 0019 	movw	r0, #2073	; 0x819
 8001e0e:	f000 fd31 	bl	8002874 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8001e12:	2000      	movs	r0, #0
 8001e14:	f000 f812 	bl	8001e3c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8001e20:	f000 fcde 	bl	80027e0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8001e24:	79bb      	ldrb	r3, [r7, #6]
 8001e26:	4619      	mov	r1, r3
 8001e28:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8001e2c:	f000 fcd8 	bl	80027e0 <SUBGRF_WriteRegister>

    return number;
 8001e30:	683b      	ldr	r3, [r7, #0]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8001e46:	1dfb      	adds	r3, r7, #7
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	2080      	movs	r0, #128	; 0x80
 8001e4e:	f000 fd77 	bl	8002940 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d103      	bne.n	8001e60 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <SUBGRF_SetStandby+0x34>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8001e5e:	e002      	b.n	8001e66 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <SUBGRF_SetStandby+0x34>)
 8001e62:	2202      	movs	r2, #2
 8001e64:	701a      	strb	r2, [r3, #0]
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000eec 	.word	0x20000eec

08001e74 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <SUBGRF_SetTx+0x3c>)
 8001e7e:	2204      	movs	r2, #4
 8001e80:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	0c1b      	lsrs	r3, r3, #16
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	2083      	movs	r0, #131	; 0x83
 8001ea2:	f000 fd4d 	bl	8002940 <SUBGRF_WriteCommand>
}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000eec 	.word	0x20000eec

08001eb4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <SUBGRF_SetRx+0x3c>)
 8001ebe:	2205      	movs	r2, #5
 8001ec0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	0c1b      	lsrs	r3, r3, #16
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8001ed8:	f107 030c 	add.w	r3, r7, #12
 8001edc:	2203      	movs	r2, #3
 8001ede:	4619      	mov	r1, r3
 8001ee0:	2082      	movs	r0, #130	; 0x82
 8001ee2:	f000 fd2d 	bl	8002940 <SUBGRF_WriteCommand>
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000eec 	.word	0x20000eec

08001ef4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8001efe:	1dfb      	adds	r3, r7, #7
 8001f00:	2201      	movs	r2, #1
 8001f02:	4619      	mov	r1, r3
 8001f04:	209f      	movs	r0, #159	; 0x9f
 8001f06:	f000 fd1b 	bl	8002940 <SUBGRF_WriteCommand>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8001f18:	f7ff fe5d 	bl	8001bd6 <RBI_IsDCDC>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d102      	bne.n	8001f28 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8001f22:	2301      	movs	r3, #1
 8001f24:	71fb      	strb	r3, [r7, #7]
 8001f26:	e001      	b.n	8001f2c <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8001f2c:	1dfb      	adds	r3, r7, #7
 8001f2e:	2201      	movs	r2, #1
 8001f30:	4619      	mov	r1, r3
 8001f32:	2096      	movs	r0, #150	; 0x96
 8001f34:	f000 fd04 	bl	8002940 <SUBGRF_WriteCommand>
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001f48:	793b      	ldrb	r3, [r7, #4]
 8001f4a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	019b      	lsls	r3, r3, #6
 8001f52:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8001f54:	793b      	ldrb	r3, [r7, #4]
 8001f56:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001f5e:	b25b      	sxtb	r3, r3
 8001f60:	4313      	orrs	r3, r2
 8001f62:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8001f64:	793b      	ldrb	r3, [r7, #4]
 8001f66:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8001f6e:	b25b      	sxtb	r3, r3
 8001f70:	4313      	orrs	r3, r2
 8001f72:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8001f74:	793b      	ldrb	r3, [r7, #4]
 8001f76:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8001f7e:	b25b      	sxtb	r3, r3
 8001f80:	4313      	orrs	r3, r2
 8001f82:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8001f84:	793b      	ldrb	r3, [r7, #4]
 8001f86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8001f8e:	b25b      	sxtb	r3, r3
 8001f90:	4313      	orrs	r3, r2
 8001f92:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8001f94:	793b      	ldrb	r3, [r7, #4]
 8001f96:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8001f9e:	b25b      	sxtb	r3, r3
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8001fa4:	793b      	ldrb	r3, [r7, #4]
 8001fa6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001fb4:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8001fb6:	f107 030f 	add.w	r3, r7, #15
 8001fba:	2201      	movs	r2, #1
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	2089      	movs	r0, #137	; 0x89
 8001fc0:	f000 fcbe 	bl	8002940 <SUBGRF_WriteCommand>
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a1d      	ldr	r2, [pc, #116]	; (800204c <SUBGRF_CalibrateImage+0x80>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d904      	bls.n	8001fe6 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8001fdc:	23e1      	movs	r3, #225	; 0xe1
 8001fde:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8001fe0:	23e9      	movs	r3, #233	; 0xe9
 8001fe2:	737b      	strb	r3, [r7, #13]
 8001fe4:	e027      	b.n	8002036 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a19      	ldr	r2, [pc, #100]	; (8002050 <SUBGRF_CalibrateImage+0x84>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d904      	bls.n	8001ff8 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8001fee:	23d7      	movs	r3, #215	; 0xd7
 8001ff0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8001ff2:	23db      	movs	r3, #219	; 0xdb
 8001ff4:	737b      	strb	r3, [r7, #13]
 8001ff6:	e01e      	b.n	8002036 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a16      	ldr	r2, [pc, #88]	; (8002054 <SUBGRF_CalibrateImage+0x88>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d904      	bls.n	800200a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8002000:	23c1      	movs	r3, #193	; 0xc1
 8002002:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8002004:	23c5      	movs	r3, #197	; 0xc5
 8002006:	737b      	strb	r3, [r7, #13]
 8002008:	e015      	b.n	8002036 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a12      	ldr	r2, [pc, #72]	; (8002058 <SUBGRF_CalibrateImage+0x8c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d904      	bls.n	800201c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8002012:	2375      	movs	r3, #117	; 0x75
 8002014:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8002016:	2381      	movs	r3, #129	; 0x81
 8002018:	737b      	strb	r3, [r7, #13]
 800201a:	e00c      	b.n	8002036 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a0f      	ldr	r2, [pc, #60]	; (800205c <SUBGRF_CalibrateImage+0x90>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d904      	bls.n	800202e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8002024:	236b      	movs	r3, #107	; 0x6b
 8002026:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8002028:	236f      	movs	r3, #111	; 0x6f
 800202a:	737b      	strb	r3, [r7, #13]
 800202c:	e003      	b.n	8002036 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800202e:	2329      	movs	r3, #41	; 0x29
 8002030:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8002032:	232b      	movs	r3, #43	; 0x2b
 8002034:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8002036:	f107 030c 	add.w	r3, r7, #12
 800203a:	2202      	movs	r2, #2
 800203c:	4619      	mov	r1, r3
 800203e:	2098      	movs	r0, #152	; 0x98
 8002040:	f000 fc7e 	bl	8002940 <SUBGRF_WriteCommand>
}
 8002044:	bf00      	nop
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	35a4e900 	.word	0x35a4e900
 8002050:	32a9f880 	.word	0x32a9f880
 8002054:	2de54480 	.word	0x2de54480
 8002058:	1b6b0b00 	.word	0x1b6b0b00
 800205c:	1954fc40 	.word	0x1954fc40

08002060 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	4604      	mov	r4, r0
 8002068:	4608      	mov	r0, r1
 800206a:	4611      	mov	r1, r2
 800206c:	461a      	mov	r2, r3
 800206e:	4623      	mov	r3, r4
 8002070:	71fb      	strb	r3, [r7, #7]
 8002072:	4603      	mov	r3, r0
 8002074:	71bb      	strb	r3, [r7, #6]
 8002076:	460b      	mov	r3, r1
 8002078:	717b      	strb	r3, [r7, #5]
 800207a:	4613      	mov	r3, r2
 800207c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8002082:	79bb      	ldrb	r3, [r7, #6]
 8002084:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8002086:	797b      	ldrb	r3, [r7, #5]
 8002088:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800208a:	793b      	ldrb	r3, [r7, #4]
 800208c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	2204      	movs	r2, #4
 8002094:	4619      	mov	r1, r3
 8002096:	2095      	movs	r0, #149	; 0x95
 8002098:	f000 fc52 	bl	8002940 <SUBGRF_WriteCommand>
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd90      	pop	{r4, r7, pc}

080020a4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4604      	mov	r4, r0
 80020ac:	4608      	mov	r0, r1
 80020ae:	4611      	mov	r1, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	4623      	mov	r3, r4
 80020b4:	80fb      	strh	r3, [r7, #6]
 80020b6:	4603      	mov	r3, r0
 80020b8:	80bb      	strh	r3, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	807b      	strh	r3, [r7, #2]
 80020be:	4613      	mov	r3, r2
 80020c0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80020d2:	88bb      	ldrh	r3, [r7, #4]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80020dc:	88bb      	ldrh	r3, [r7, #4]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80020e2:	887b      	ldrh	r3, [r7, #2]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80020ec:	887b      	ldrh	r3, [r7, #2]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80020f2:	883b      	ldrh	r3, [r7, #0]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80020fc:	883b      	ldrh	r3, [r7, #0]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8002102:	f107 0308 	add.w	r3, r7, #8
 8002106:	2208      	movs	r2, #8
 8002108:	4619      	mov	r1, r3
 800210a:	2008      	movs	r0, #8
 800210c:	f000 fc18 	bl	8002940 <SUBGRF_WriteCommand>
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bd90      	pop	{r4, r7, pc}

08002118 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	b2db      	uxtb	r3, r3
 800212c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	b2db      	uxtb	r3, r3
 8002134:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	0a1b      	lsrs	r3, r3, #8
 800213a:	b2db      	uxtb	r3, r3
 800213c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	2204      	movs	r2, #4
 800214a:	4619      	mov	r1, r3
 800214c:	2097      	movs	r0, #151	; 0x97
 800214e:	f000 fbf7 	bl	8002940 <SUBGRF_WriteCommand>
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800215c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <SUBGRF_SetRfFrequency+0x84>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	f083 0301 	eor.w	r3, r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff27 	bl	8001fcc <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800217e:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <SUBGRF_SetRfFrequency+0x84>)
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	461c      	mov	r4, r3
 800218a:	4615      	mov	r5, r2
 800218c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8002190:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8002194:	4a13      	ldr	r2, [pc, #76]	; (80021e4 <SUBGRF_SetRfFrequency+0x88>)
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	4640      	mov	r0, r8
 800219c:	4649      	mov	r1, r9
 800219e:	f7fe f847 	bl	8000230 <__aeabi_uldivmod>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4613      	mov	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	0e1b      	lsrs	r3, r3, #24
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	0c1b      	lsrs	r3, r3, #16
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80021c8:	f107 0308 	add.w	r3, r7, #8
 80021cc:	2204      	movs	r2, #4
 80021ce:	4619      	mov	r1, r3
 80021d0:	2086      	movs	r0, #134	; 0x86
 80021d2:	f000 fbb5 	bl	8002940 <SUBGRF_WriteCommand>
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021e0:	20000ef4 	.word	0x20000ef4
 80021e4:	01e84800 	.word	0x01e84800

080021e8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80021f2:	79fa      	ldrb	r2, [r7, #7]
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <SUBGRF_SetPacketType+0x34>)
 80021f6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d104      	bne.n	8002208 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80021fe:	2100      	movs	r1, #0
 8002200:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8002204:	f000 faec 	bl	80027e0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8002208:	1dfb      	adds	r3, r7, #7
 800220a:	2201      	movs	r2, #1
 800220c:	4619      	mov	r1, r3
 800220e:	208a      	movs	r0, #138	; 0x8a
 8002210:	f000 fb96 	bl	8002940 <SUBGRF_WriteCommand>
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000eed 	.word	0x20000eed

08002220 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
    return PacketType;
 8002224:	4b02      	ldr	r3, [pc, #8]	; (8002230 <SUBGRF_GetPacketType+0x10>)
 8002226:	781b      	ldrb	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	20000eed 	.word	0x20000eed

08002234 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
 800223e:	460b      	mov	r3, r1
 8002240:	71bb      	strb	r3, [r7, #6]
 8002242:	4613      	mov	r3, r2
 8002244:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d149      	bne.n	80022e0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800224c:	2000      	movs	r0, #0
 800224e:	f7ff fcc9 	bl	8001be4 <RBI_GetRFOMaxPowerConfig>
 8002252:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8002254:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	429a      	cmp	r2, r3
 800225c:	da01      	bge.n	8002262 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b0e      	cmp	r3, #14
 8002266:	d10e      	bne.n	8002286 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8002268:	2301      	movs	r3, #1
 800226a:	2201      	movs	r2, #1
 800226c:	2100      	movs	r1, #0
 800226e:	2004      	movs	r0, #4
 8002270:	f7ff fef6 	bl	8002060 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8002274:	79ba      	ldrb	r2, [r7, #6]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	330e      	adds	r3, #14
 8002280:	b2db      	uxtb	r3, r3
 8002282:	71bb      	strb	r3, [r7, #6]
 8002284:	e01f      	b.n	80022c6 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b0a      	cmp	r3, #10
 800228a:	d10e      	bne.n	80022aa <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800228c:	2301      	movs	r3, #1
 800228e:	2201      	movs	r2, #1
 8002290:	2100      	movs	r1, #0
 8002292:	2001      	movs	r0, #1
 8002294:	f7ff fee4 	bl	8002060 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8002298:	79ba      	ldrb	r2, [r7, #6]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	330d      	adds	r3, #13
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	71bb      	strb	r3, [r7, #6]
 80022a8:	e00d      	b.n	80022c6 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 80022aa:	2301      	movs	r3, #1
 80022ac:	2201      	movs	r2, #1
 80022ae:	2100      	movs	r1, #0
 80022b0:	2007      	movs	r0, #7
 80022b2:	f7ff fed5 	bl	8002060 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80022b6:	79ba      	ldrb	r2, [r7, #6]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	330e      	adds	r3, #14
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 80022c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80022ca:	f113 0f11 	cmn.w	r3, #17
 80022ce:	da01      	bge.n	80022d4 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80022d0:	23ef      	movs	r3, #239	; 0xef
 80022d2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80022d4:	2118      	movs	r1, #24
 80022d6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80022da:	f000 fa81 	bl	80027e0 <SUBGRF_WriteRegister>
 80022de:	e067      	b.n	80023b0 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80022e0:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80022e4:	f000 fa90 	bl	8002808 <SUBGRF_ReadRegister>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f043 031e 	orr.w	r3, r3, #30
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	4619      	mov	r1, r3
 80022f2:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80022f6:	f000 fa73 	bl	80027e0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80022fa:	2001      	movs	r0, #1
 80022fc:	f7ff fc72 	bl	8001be4 <RBI_GetRFOMaxPowerConfig>
 8002300:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8002302:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	429a      	cmp	r2, r3
 800230a:	da01      	bge.n	8002310 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b14      	cmp	r3, #20
 8002314:	d10e      	bne.n	8002334 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8002316:	2301      	movs	r3, #1
 8002318:	2200      	movs	r2, #0
 800231a:	2105      	movs	r1, #5
 800231c:	2003      	movs	r0, #3
 800231e:	f7ff fe9f 	bl	8002060 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8002322:	79ba      	ldrb	r2, [r7, #6]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	b2db      	uxtb	r3, r3
 800232c:	3316      	adds	r3, #22
 800232e:	b2db      	uxtb	r3, r3
 8002330:	71bb      	strb	r3, [r7, #6]
 8002332:	e031      	b.n	8002398 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b11      	cmp	r3, #17
 8002338:	d10e      	bne.n	8002358 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800233a:	2301      	movs	r3, #1
 800233c:	2200      	movs	r2, #0
 800233e:	2103      	movs	r1, #3
 8002340:	2002      	movs	r0, #2
 8002342:	f7ff fe8d 	bl	8002060 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8002346:	79ba      	ldrb	r2, [r7, #6]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	3316      	adds	r3, #22
 8002352:	b2db      	uxtb	r3, r3
 8002354:	71bb      	strb	r3, [r7, #6]
 8002356:	e01f      	b.n	8002398 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b0e      	cmp	r3, #14
 800235c:	d10e      	bne.n	800237c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800235e:	2301      	movs	r3, #1
 8002360:	2200      	movs	r2, #0
 8002362:	2102      	movs	r1, #2
 8002364:	2002      	movs	r0, #2
 8002366:	f7ff fe7b 	bl	8002060 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800236a:	79ba      	ldrb	r2, [r7, #6]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	330e      	adds	r3, #14
 8002376:	b2db      	uxtb	r3, r3
 8002378:	71bb      	strb	r3, [r7, #6]
 800237a:	e00d      	b.n	8002398 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800237c:	2301      	movs	r3, #1
 800237e:	2200      	movs	r2, #0
 8002380:	2107      	movs	r1, #7
 8002382:	2004      	movs	r0, #4
 8002384:	f7ff fe6c 	bl	8002060 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8002388:	79ba      	ldrb	r2, [r7, #6]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	3316      	adds	r3, #22
 8002394:	b2db      	uxtb	r3, r3
 8002396:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8002398:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800239c:	f113 0f09 	cmn.w	r3, #9
 80023a0:	da01      	bge.n	80023a6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 80023a2:	23f7      	movs	r3, #247	; 0xf7
 80023a4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80023a6:	2138      	movs	r1, #56	; 0x38
 80023a8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80023ac:	f000 fa18 	bl	80027e0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80023b0:	79bb      	ldrb	r3, [r7, #6]
 80023b2:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 80023b4:	797b      	ldrb	r3, [r7, #5]
 80023b6:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80023b8:	f107 0308 	add.w	r3, r7, #8
 80023bc:	2202      	movs	r2, #2
 80023be:	4619      	mov	r1, r3
 80023c0:	208e      	movs	r0, #142	; 0x8e
 80023c2:	f000 fabd 	bl	8002940 <SUBGRF_WriteCommand>
}
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80023d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023d4:	b086      	sub	sp, #24
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80023de:	4a61      	ldr	r2, [pc, #388]	; (8002564 <SUBGRF_SetModulationParams+0x194>)
 80023e0:	f107 0308 	add.w	r3, r7, #8
 80023e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023e8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	781a      	ldrb	r2, [r3, #0]
 80023f0:	4b5d      	ldr	r3, [pc, #372]	; (8002568 <SUBGRF_SetModulationParams+0x198>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d004      	beq.n	8002402 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fef3 	bl	80021e8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b03      	cmp	r3, #3
 8002408:	f200 80a5 	bhi.w	8002556 <SUBGRF_SetModulationParams+0x186>
 800240c:	a201      	add	r2, pc, #4	; (adr r2, 8002414 <SUBGRF_SetModulationParams+0x44>)
 800240e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002412:	bf00      	nop
 8002414:	08002425 	.word	0x08002425
 8002418:	080024e5 	.word	0x080024e5
 800241c:	080024a7 	.word	0x080024a7
 8002420:	08002513 	.word	0x08002513
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8002424:	2308      	movs	r3, #8
 8002426:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a4f      	ldr	r2, [pc, #316]	; (800256c <SUBGRF_SetModulationParams+0x19c>)
 800242e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002432:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	0c1b      	lsrs	r3, r3, #16
 8002438:	b2db      	uxtb	r3, r3
 800243a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	b2db      	uxtb	r3, r3
 8002442:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	b2db      	uxtb	r3, r3
 8002448:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	7b1b      	ldrb	r3, [r3, #12]
 800244e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7b5b      	ldrb	r3, [r3, #13]
 8002454:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2200      	movs	r2, #0
 800245c:	461c      	mov	r4, r3
 800245e:	4615      	mov	r5, r2
 8002460:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8002464:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8002468:	4a41      	ldr	r2, [pc, #260]	; (8002570 <SUBGRF_SetModulationParams+0x1a0>)
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	4640      	mov	r0, r8
 8002470:	4649      	mov	r1, r9
 8002472:	f7fd fedd 	bl	8000230 <__aeabi_uldivmod>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4613      	mov	r3, r2
 800247c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	0c1b      	lsrs	r3, r3, #16
 8002482:	b2db      	uxtb	r3, r3
 8002484:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	b2db      	uxtb	r3, r3
 800248c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8002494:	7cfb      	ldrb	r3, [r7, #19]
 8002496:	b29a      	uxth	r2, r3
 8002498:	f107 0308 	add.w	r3, r7, #8
 800249c:	4619      	mov	r1, r3
 800249e:	208b      	movs	r0, #139	; 0x8b
 80024a0:	f000 fa4e 	bl	8002940 <SUBGRF_WriteCommand>
        break;
 80024a4:	e058      	b.n	8002558 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 80024a6:	2304      	movs	r3, #4
 80024a8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	4a2f      	ldr	r2, [pc, #188]	; (800256c <SUBGRF_SetModulationParams+0x19c>)
 80024b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	0c1b      	lsrs	r3, r3, #16
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	0a1b      	lsrs	r3, r3, #8
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7d1b      	ldrb	r3, [r3, #20]
 80024d0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80024d2:	7cfb      	ldrb	r3, [r7, #19]
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	f107 0308 	add.w	r3, r7, #8
 80024da:	4619      	mov	r1, r3
 80024dc:	208b      	movs	r0, #139	; 0x8b
 80024de:	f000 fa2f 	bl	8002940 <SUBGRF_WriteCommand>
        break;
 80024e2:	e039      	b.n	8002558 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 80024e4:	2304      	movs	r3, #4
 80024e6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7e1b      	ldrb	r3, [r3, #24]
 80024ec:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7e5b      	ldrb	r3, [r3, #25]
 80024f2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7e9b      	ldrb	r3, [r3, #26]
 80024f8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	7edb      	ldrb	r3, [r3, #27]
 80024fe:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	b29a      	uxth	r2, r3
 8002504:	f107 0308 	add.w	r3, r7, #8
 8002508:	4619      	mov	r1, r3
 800250a:	208b      	movs	r0, #139	; 0x8b
 800250c:	f000 fa18 	bl	8002940 <SUBGRF_WriteCommand>

        break;
 8002510:	e022      	b.n	8002558 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8002512:	2305      	movs	r3, #5
 8002514:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	4a14      	ldr	r2, [pc, #80]	; (800256c <SUBGRF_SetModulationParams+0x19c>)
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	0c1b      	lsrs	r3, r3, #16
 8002526:	b2db      	uxtb	r3, r3
 8002528:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	b2db      	uxtb	r3, r3
 8002530:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	7b1b      	ldrb	r3, [r3, #12]
 800253c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	7b5b      	ldrb	r3, [r3, #13]
 8002542:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8002544:	7cfb      	ldrb	r3, [r7, #19]
 8002546:	b29a      	uxth	r2, r3
 8002548:	f107 0308 	add.w	r3, r7, #8
 800254c:	4619      	mov	r1, r3
 800254e:	208b      	movs	r0, #139	; 0x8b
 8002550:	f000 f9f6 	bl	8002940 <SUBGRF_WriteCommand>
        break;
 8002554:	e000      	b.n	8002558 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8002556:	bf00      	nop
    }
}
 8002558:	bf00      	nop
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002562:	bf00      	nop
 8002564:	0800b1b8 	.word	0x0800b1b8
 8002568:	20000eed 	.word	0x20000eed
 800256c:	3d090000 	.word	0x3d090000
 8002570:	01e84800 	.word	0x01e84800

08002574 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8002580:	4a49      	ldr	r2, [pc, #292]	; (80026a8 <SUBGRF_SetPacketParams+0x134>)
 8002582:	f107 030c 	add.w	r3, r7, #12
 8002586:	ca07      	ldmia	r2, {r0, r1, r2}
 8002588:	c303      	stmia	r3!, {r0, r1}
 800258a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	4b46      	ldr	r3, [pc, #280]	; (80026ac <SUBGRF_SetPacketParams+0x138>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d004      	beq.n	80025a2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fe23 	bl	80021e8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d879      	bhi.n	800269e <SUBGRF_SetPacketParams+0x12a>
 80025aa:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <SUBGRF_SetPacketParams+0x3c>)
 80025ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b0:	080025c1 	.word	0x080025c1
 80025b4:	08002651 	.word	0x08002651
 80025b8:	08002645 	.word	0x08002645
 80025bc:	080025c1 	.word	0x080025c1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7adb      	ldrb	r3, [r3, #11]
 80025c4:	2bf1      	cmp	r3, #241	; 0xf1
 80025c6:	d10a      	bne.n	80025de <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80025c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025cc:	f7ff fbaf 	bl	8001d2e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80025d0:	f248 0005 	movw	r0, #32773	; 0x8005
 80025d4:	f7ff fbcb 	bl	8001d6e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80025d8:	2302      	movs	r3, #2
 80025da:	75bb      	strb	r3, [r7, #22]
 80025dc:	e011      	b.n	8002602 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	7adb      	ldrb	r3, [r3, #11]
 80025e2:	2bf2      	cmp	r3, #242	; 0xf2
 80025e4:	d10a      	bne.n	80025fc <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80025e6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80025ea:	f7ff fba0 	bl	8001d2e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80025ee:	f241 0021 	movw	r0, #4129	; 0x1021
 80025f2:	f7ff fbbc 	bl	8001d6e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80025f6:	2306      	movs	r3, #6
 80025f8:	75bb      	strb	r3, [r7, #22]
 80025fa:	e002      	b.n	8002602 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7adb      	ldrb	r3, [r3, #11]
 8002600:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8002602:	2309      	movs	r3, #9
 8002604:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	889b      	ldrh	r3, [r3, #4]
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	b29b      	uxth	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	889b      	ldrh	r3, [r3, #4]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	799b      	ldrb	r3, [r3, #6]
 800261e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	79db      	ldrb	r3, [r3, #7]
 8002624:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7a1b      	ldrb	r3, [r3, #8]
 800262a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7a5b      	ldrb	r3, [r3, #9]
 8002630:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	7a9b      	ldrb	r3, [r3, #10]
 8002636:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8002638:	7dbb      	ldrb	r3, [r7, #22]
 800263a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7b1b      	ldrb	r3, [r3, #12]
 8002640:	753b      	strb	r3, [r7, #20]
        break;
 8002642:	e023      	b.n	800268c <SUBGRF_SetPacketParams+0x118>
    case PACKET_TYPE_BPSK:
        n = 1;
 8002644:	2301      	movs	r3, #1
 8002646:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	7b9b      	ldrb	r3, [r3, #14]
 800264c:	733b      	strb	r3, [r7, #12]
        break;
 800264e:	e01d      	b.n	800268c <SUBGRF_SetPacketParams+0x118>
    case PACKET_TYPE_LORA:
        n = 6;
 8002650:	2306      	movs	r3, #6
 8002652:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	8a1b      	ldrh	r3, [r3, #16]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	b29b      	uxth	r3, r3
 800265c:	b2db      	uxtb	r3, r3
 800265e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	8a1b      	ldrh	r3, [r3, #16]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	7c9a      	ldrb	r2, [r3, #18]
 800266c:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <SUBGRF_SetPacketParams+0x13c>)
 800266e:	4611      	mov	r1, r2
 8002670:	7019      	strb	r1, [r3, #0]
 8002672:	4613      	mov	r3, r2
 8002674:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	7e1b      	ldrb	r3, [r3, #24]
 8002682:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	7e5b      	ldrb	r3, [r3, #25]
 8002688:	747b      	strb	r3, [r7, #17]
        break;
 800268a:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	b29a      	uxth	r2, r3
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	4619      	mov	r1, r3
 8002696:	208c      	movs	r0, #140	; 0x8c
 8002698:	f000 f952 	bl	8002940 <SUBGRF_WriteCommand>
 800269c:	e000      	b.n	80026a0 <SUBGRF_SetPacketParams+0x12c>
        return;
 800269e:	bf00      	nop
}
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	0800b1c0 	.word	0x0800b1c0
 80026ac:	20000eed 	.word	0x20000eed
 80026b0:	20000eee 	.word	0x20000eee

080026b4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	460a      	mov	r2, r1
 80026be:	71fb      	strb	r3, [r7, #7]
 80026c0:	4613      	mov	r3, r2
 80026c2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80026c8:	79bb      	ldrb	r3, [r7, #6]
 80026ca:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80026cc:	f107 030c 	add.w	r3, r7, #12
 80026d0:	2202      	movs	r2, #2
 80026d2:	4619      	mov	r1, r3
 80026d4:	208f      	movs	r0, #143	; 0x8f
 80026d6:	f000 f933 	bl	8002940 <SUBGRF_WriteCommand>
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80026ee:	f107 030c 	add.w	r3, r7, #12
 80026f2:	2202      	movs	r2, #2
 80026f4:	4619      	mov	r1, r3
 80026f6:	2013      	movs	r0, #19
 80026f8:	f000 f944 	bl	8002984 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80026fc:	f7ff fd90 	bl	8002220 <SUBGRF_GetPacketType>
 8002700:	4603      	mov	r3, r0
 8002702:	2b01      	cmp	r3, #1
 8002704:	d10d      	bne.n	8002722 <SUBGRF_GetRxBufferStatus+0x3e>
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <SUBGRF_GetRxBufferStatus+0x54>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b01      	cmp	r3, #1
 800270e:	d108      	bne.n	8002722 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8002710:	f240 7002 	movw	r0, #1794	; 0x702
 8002714:	f000 f878 	bl	8002808 <SUBGRF_ReadRegister>
 8002718:	4603      	mov	r3, r0
 800271a:	461a      	mov	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	e002      	b.n	8002728 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8002722:	7b3a      	ldrb	r2, [r7, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8002728:	7b7a      	ldrb	r2, [r7, #13]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	701a      	strb	r2, [r3, #0]
}
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000eee 	.word	0x20000eee

0800273c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	2203      	movs	r2, #3
 800274a:	4619      	mov	r1, r3
 800274c:	2014      	movs	r0, #20
 800274e:	f000 f919 	bl	8002984 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8002752:	f7ff fd65 	bl	8002220 <SUBGRF_GetPacketType>
 8002756:	4603      	mov	r3, r0
 8002758:	461a      	mov	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <SUBGRF_GetPacketStatus+0x30>
 8002766:	2b01      	cmp	r3, #1
 8002768:	d013      	beq.n	8002792 <SUBGRF_GetPacketStatus+0x56>
 800276a:	e02a      	b.n	80027c2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800276c:	7b3a      	ldrb	r2, [r7, #12]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8002772:	7b7b      	ldrb	r3, [r7, #13]
 8002774:	425b      	negs	r3, r3
 8002776:	105b      	asrs	r3, r3, #1
 8002778:	b25a      	sxtb	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800277e:	7bbb      	ldrb	r3, [r7, #14]
 8002780:	425b      	negs	r3, r3
 8002782:	105b      	asrs	r3, r3, #1
 8002784:	b25a      	sxtb	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
            break;
 8002790:	e020      	b.n	80027d4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8002792:	7b3b      	ldrb	r3, [r7, #12]
 8002794:	425b      	negs	r3, r3
 8002796:	105b      	asrs	r3, r3, #1
 8002798:	b25a      	sxtb	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800279e:	7b7b      	ldrb	r3, [r7, #13]
 80027a0:	b25b      	sxtb	r3, r3
 80027a2:	3302      	adds	r3, #2
 80027a4:	109b      	asrs	r3, r3, #2
 80027a6:	b25a      	sxtb	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80027ac:	7bbb      	ldrb	r3, [r7, #14]
 80027ae:	425b      	negs	r3, r3
 80027b0:	105b      	asrs	r3, r3, #1
 80027b2:	b25a      	sxtb	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <SUBGRF_GetPacketStatus+0xa0>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	611a      	str	r2, [r3, #16]
            break;
 80027c0:	e008      	b.n	80027d4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80027c2:	2214      	movs	r2, #20
 80027c4:	2100      	movs	r1, #0
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f007 f98a 	bl	8009ae0 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	220f      	movs	r2, #15
 80027d0:	701a      	strb	r2, [r3, #0]
            break;
 80027d2:	bf00      	nop
    }
}
 80027d4:	bf00      	nop
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000ef0 	.word	0x20000ef0

080027e0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	460a      	mov	r2, r1
 80027ea:	80fb      	strh	r3, [r7, #6]
 80027ec:	4613      	mov	r3, r2
 80027ee:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80027f0:	1d7a      	adds	r2, r7, #5
 80027f2:	88f9      	ldrh	r1, [r7, #6]
 80027f4:	2301      	movs	r3, #1
 80027f6:	4803      	ldr	r0, [pc, #12]	; (8002804 <SUBGRF_WriteRegister+0x24>)
 80027f8:	f003 fcde 	bl	80061b8 <HAL_SUBGHZ_WriteRegisters>
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200008e8 	.word	0x200008e8

08002808 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8002812:	f107 020f 	add.w	r2, r7, #15
 8002816:	88f9      	ldrh	r1, [r7, #6]
 8002818:	2301      	movs	r3, #1
 800281a:	4804      	ldr	r0, [pc, #16]	; (800282c <SUBGRF_ReadRegister+0x24>)
 800281c:	f003 fd2b 	bl	8006276 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8002820:	7bfb      	ldrb	r3, [r7, #15]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200008e8 	.word	0x200008e8

08002830 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	80fb      	strh	r3, [r7, #6]
 800283c:	4613      	mov	r3, r2
 800283e:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002840:	f3ef 8310 	mrs	r3, PRIMASK
 8002844:	60fb      	str	r3, [r7, #12]
  return(result);
 8002846:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002848:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800284a:	b672      	cpsid	i
}
 800284c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800284e:	88bb      	ldrh	r3, [r7, #4]
 8002850:	88f9      	ldrh	r1, [r7, #6]
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	4806      	ldr	r0, [pc, #24]	; (8002870 <SUBGRF_WriteRegisters+0x40>)
 8002856:	f003 fcaf 	bl	80061b8 <HAL_SUBGHZ_WriteRegisters>
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f383 8810 	msr	PRIMASK, r3
}
 8002864:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002866:	bf00      	nop
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200008e8 	.word	0x200008e8

08002874 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	6039      	str	r1, [r7, #0]
 800287e:	80fb      	strh	r3, [r7, #6]
 8002880:	4613      	mov	r3, r2
 8002882:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002884:	f3ef 8310 	mrs	r3, PRIMASK
 8002888:	60fb      	str	r3, [r7, #12]
  return(result);
 800288a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800288c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800288e:	b672      	cpsid	i
}
 8002890:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8002892:	88bb      	ldrh	r3, [r7, #4]
 8002894:	88f9      	ldrh	r1, [r7, #6]
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	4806      	ldr	r0, [pc, #24]	; (80028b4 <SUBGRF_ReadRegisters+0x40>)
 800289a:	f003 fcec 	bl	8006276 <HAL_SUBGHZ_ReadRegisters>
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f383 8810 	msr	PRIMASK, r3
}
 80028a8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80028aa:	bf00      	nop
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	200008e8 	.word	0x200008e8

080028b8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	6039      	str	r1, [r7, #0]
 80028c2:	71fb      	strb	r3, [r7, #7]
 80028c4:	4613      	mov	r3, r2
 80028c6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c8:	f3ef 8310 	mrs	r3, PRIMASK
 80028cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80028ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80028d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80028d2:	b672      	cpsid	i
}
 80028d4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80028d6:	79bb      	ldrb	r3, [r7, #6]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	79f9      	ldrb	r1, [r7, #7]
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	4806      	ldr	r0, [pc, #24]	; (80028f8 <SUBGRF_WriteBuffer+0x40>)
 80028e0:	f003 fddd 	bl	800649e <HAL_SUBGHZ_WriteBuffer>
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f383 8810 	msr	PRIMASK, r3
}
 80028ee:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80028f0:	bf00      	nop
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200008e8 	.word	0x200008e8

080028fc <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	6039      	str	r1, [r7, #0]
 8002906:	71fb      	strb	r3, [r7, #7]
 8002908:	4613      	mov	r3, r2
 800290a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800290c:	f3ef 8310 	mrs	r3, PRIMASK
 8002910:	60fb      	str	r3, [r7, #12]
  return(result);
 8002912:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002914:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002916:	b672      	cpsid	i
}
 8002918:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800291a:	79bb      	ldrb	r3, [r7, #6]
 800291c:	b29b      	uxth	r3, r3
 800291e:	79f9      	ldrb	r1, [r7, #7]
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	4806      	ldr	r0, [pc, #24]	; (800293c <SUBGRF_ReadBuffer+0x40>)
 8002924:	f003 fe0e 	bl	8006544 <HAL_SUBGHZ_ReadBuffer>
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	f383 8810 	msr	PRIMASK, r3
}
 8002932:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002934:	bf00      	nop
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	200008e8 	.word	0x200008e8

08002940 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	6039      	str	r1, [r7, #0]
 800294a:	71fb      	strb	r3, [r7, #7]
 800294c:	4613      	mov	r3, r2
 800294e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002950:	f3ef 8310 	mrs	r3, PRIMASK
 8002954:	60fb      	str	r3, [r7, #12]
  return(result);
 8002956:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002958:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800295a:	b672      	cpsid	i
}
 800295c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800295e:	88bb      	ldrh	r3, [r7, #4]
 8002960:	79f9      	ldrb	r1, [r7, #7]
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	4806      	ldr	r0, [pc, #24]	; (8002980 <SUBGRF_WriteCommand+0x40>)
 8002966:	f003 fce7 	bl	8006338 <HAL_SUBGHZ_ExecSetCmd>
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	f383 8810 	msr	PRIMASK, r3
}
 8002974:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	200008e8 	.word	0x200008e8

08002984 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	71fb      	strb	r3, [r7, #7]
 8002990:	4613      	mov	r3, r2
 8002992:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002994:	f3ef 8310 	mrs	r3, PRIMASK
 8002998:	60fb      	str	r3, [r7, #12]
  return(result);
 800299a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800299c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800299e:	b672      	cpsid	i
}
 80029a0:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80029a2:	88bb      	ldrh	r3, [r7, #4]
 80029a4:	79f9      	ldrb	r1, [r7, #7]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	4806      	ldr	r0, [pc, #24]	; (80029c4 <SUBGRF_ReadCommand+0x40>)
 80029aa:	f003 fd24 	bl	80063f6 <HAL_SUBGHZ_ExecGetCmd>
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f383 8810 	msr	PRIMASK, r3
}
 80029b8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80029ba:	bf00      	nop
 80029bc:	3718      	adds	r7, #24
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	200008e8 	.word	0x200008e8

080029c8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	460a      	mov	r2, r1
 80029d2:	71fb      	strb	r3, [r7, #7]
 80029d4:	4613      	mov	r3, r2
 80029d6:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 80029dc:	79bb      	ldrb	r3, [r7, #6]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d10d      	bne.n	80029fe <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d104      	bne.n	80029f2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 80029e8:	2302      	movs	r3, #2
 80029ea:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80029ec:	2004      	movs	r0, #4
 80029ee:	f000 f8e7 	bl	8002bc0 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d107      	bne.n	8002a08 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80029f8:	2303      	movs	r3, #3
 80029fa:	73fb      	strb	r3, [r7, #15]
 80029fc:	e004      	b.n	8002a08 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80029fe:	79bb      	ldrb	r3, [r7, #6]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8002a04:	2301      	movs	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff f8c7 	bl	8001b9e <RBI_ConfigRFSwitch>
}
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8002a26:	f7ff f8c8 	bl	8001bba <RBI_GetTxConfig>
 8002a2a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d016      	beq.n	8002a60 <SUBGRF_SetRfTxPower+0x48>
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	dc16      	bgt.n	8002a66 <SUBGRF_SetRfTxPower+0x4e>
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <SUBGRF_SetRfTxPower+0x2e>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d00a      	beq.n	8002a5a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8002a44:	e00f      	b.n	8002a66 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	2b0f      	cmp	r3, #15
 8002a4c:	dd02      	ble.n	8002a54 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	73fb      	strb	r3, [r7, #15]
            break;
 8002a52:	e009      	b.n	8002a68 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
            break;
 8002a58:	e006      	b.n	8002a68 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
            break;
 8002a5e:	e003      	b.n	8002a68 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	73fb      	strb	r3, [r7, #15]
            break;
 8002a64:	e000      	b.n	8002a68 <SUBGRF_SetRfTxPower+0x50>
            break;
 8002a66:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8002a68:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fbdf 	bl	8002234 <SUBGRF_SetTxParams>
    //SUBGRF_SetTxParams( RFO_HP, power, RADIO_RAMP_40_US );
    return paSelect;
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2001      	movs	r0, #1
 8002a8e:	4798      	blx	r3
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000ef8 	.word	0x20000ef8

08002a9c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2002      	movs	r0, #2
 8002aaa:	4798      	blx	r3
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000ef8 	.word	0x20000ef8

08002ab8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8002ac0:	4b03      	ldr	r3, [pc, #12]	; (8002ad0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2040      	movs	r0, #64	; 0x40
 8002ac6:	4798      	blx	r3
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000ef8 	.word	0x20000ef8

08002ad4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HAL_SUBGHZ_CADStatusCallback+0x18>
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d005      	beq.n	8002af6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8002aea:	e00a      	b.n	8002b02 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2080      	movs	r0, #128	; 0x80
 8002af2:	4798      	blx	r3
            break;
 8002af4:	e005      	b.n	8002b02 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002afe:	4798      	blx	r3
            break;
 8002b00:	bf00      	nop
    }
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000ef8 	.word	0x20000ef8

08002b10 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b20:	4798      	blx	r3
}
 8002b22:	bf00      	nop
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000ef8 	.word	0x20000ef8

08002b30 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8002b38:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2020      	movs	r0, #32
 8002b3e:	4798      	blx	r3
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000ef8 	.word	0x20000ef8

08002b4c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2004      	movs	r0, #4
 8002b5a:	4798      	blx	r3
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000ef8 	.word	0x20000ef8

08002b68 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2008      	movs	r0, #8
 8002b76:	4798      	blx	r3
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20000ef8 	.word	0x20000ef8

08002b84 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2010      	movs	r0, #16
 8002b92:	4798      	blx	r3
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000ef8 	.word	0x20000ef8

08002ba0 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002bb0:	4798      	blx	r3
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000ef8 	.word	0x20000ef8

08002bc0 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8002bca:	f7ff f804 	bl	8001bd6 <RBI_IsDCDC>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d112      	bne.n	8002bfa <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8002bd4:	f640 1023 	movw	r0, #2339	; 0x923
 8002bd8:	f7ff fe16 	bl	8002808 <SUBGRF_ReadRegister>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	f023 0306 	bic.w	r3, r3, #6
 8002be6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f640 1023 	movw	r0, #2339	; 0x923
 8002bf6:	f7ff fdf3 	bl	80027e0 <SUBGRF_WriteRegister>
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c0e:	2003      	movs	r0, #3
 8002c10:	f000 f902 	bl	8002e18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c14:	f002 fe92 	bl	800593c <HAL_RCC_GetHCLKFreq>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	4a09      	ldr	r2, [pc, #36]	; (8002c40 <HAL_Init+0x3c>)
 8002c1c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c1e:	200f      	movs	r0, #15
 8002c20:	f7fd ffbe 	bl	8000ba0 <HAL_InitTick>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	71fb      	strb	r3, [r7, #7]
 8002c2e:	e001      	b.n	8002c34 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c30:	f7fd ff93 	bl	8000b5a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c34:	79fb      	ldrb	r3, [r7, #7]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000004 	.word	0x20000004

08002c44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c48:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_IncTick+0x1c>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_IncTick+0x20>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4413      	add	r3, r2
 8002c54:	4a03      	ldr	r2, [pc, #12]	; (8002c64 <HAL_IncTick+0x20>)
 8002c56:	6013      	str	r3, [r2, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	20000118 	.word	0x20000118
 8002c64:	20000efc 	.word	0x20000efc

08002c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c6c:	4b02      	ldr	r3, [pc, #8]	; (8002c78 <HAL_GetTick+0x10>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	20000efc 	.word	0x20000efc

08002c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c84:	f7ff fff0 	bl	8002c68 <HAL_GetTick>
 8002c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d005      	beq.n	8002ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <HAL_Delay+0x44>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ca2:	bf00      	nop
 8002ca4:	f7ff ffe0 	bl	8002c68 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d8f7      	bhi.n	8002ca4 <HAL_Delay+0x28>
  {
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000118 	.word	0x20000118

08002cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf6:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	60d3      	str	r3, [r2, #12]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <__NVIC_GetPriorityGrouping+0x18>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	f003 0307 	and.w	r3, r3, #7
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	db0b      	blt.n	8002d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4906      	ldr	r1, [pc, #24]	; (8002d5c <__NVIC_EnableIRQ+0x34>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2001      	movs	r0, #1
 8002d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	e000e100 	.word	0xe000e100

08002d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	6039      	str	r1, [r7, #0]
 8002d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	db0a      	blt.n	8002d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	490c      	ldr	r1, [pc, #48]	; (8002dac <__NVIC_SetPriority+0x4c>)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	0112      	lsls	r2, r2, #4
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	440b      	add	r3, r1
 8002d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d88:	e00a      	b.n	8002da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	4908      	ldr	r1, [pc, #32]	; (8002db0 <__NVIC_SetPriority+0x50>)
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	3b04      	subs	r3, #4
 8002d98:	0112      	lsls	r2, r2, #4
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	761a      	strb	r2, [r3, #24]
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	e000e100 	.word	0xe000e100
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b089      	sub	sp, #36	; 0x24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f1c3 0307 	rsb	r3, r3, #7
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	bf28      	it	cs
 8002dd2:	2304      	movcs	r3, #4
 8002dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d902      	bls.n	8002de4 <NVIC_EncodePriority+0x30>
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3b03      	subs	r3, #3
 8002de2:	e000      	b.n	8002de6 <NVIC_EncodePriority+0x32>
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43da      	mvns	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	401a      	ands	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	fa01 f303 	lsl.w	r3, r1, r3
 8002e06:	43d9      	mvns	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e0c:	4313      	orrs	r3, r2
         );
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3724      	adds	r7, #36	; 0x24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff ff4f 	bl	8002cc4 <__NVIC_SetPriorityGrouping>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b086      	sub	sp, #24
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e3c:	f7ff ff66 	bl	8002d0c <__NVIC_GetPriorityGrouping>
 8002e40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	6978      	ldr	r0, [r7, #20]
 8002e48:	f7ff ffb4 	bl	8002db4 <NVIC_EncodePriority>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff83 	bl	8002d60 <__NVIC_SetPriority>
}
 8002e5a:	bf00      	nop
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	4603      	mov	r3, r0
 8002e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ff59 	bl	8002d28 <__NVIC_EnableIRQ>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e02d      	b.n	8002eec <HAL_CRYP_Init+0x6e>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d106      	bne.n	8002eaa <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7fd fbb1 	bl	800060c <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size (This bit field is do not care in the DES or TDES modes), data type and Algorithm */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 8002eb4:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6851      	ldr	r1, [r2, #4]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6892      	ldr	r2, [r2, #8]
 8002ec0:	4311      	orrs	r1, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6952      	ldr	r2, [r2, #20]
 8002ec6:	4311      	orrs	r1, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	6013      	str	r3, [r2, #0]

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_CRYP_DeInit>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_CRYP_DeInit(CRYP_HandleTypeDef *hcryp)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_CRYP_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e020      	b.n	8002f48 <HAL_CRYP_DeInit+0x54>
  }

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset CrypInCount and CrypOutCount */
  hcryp->CrypInCount = 0;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->CrypOutCount = 0;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  hcryp->CrypHeaderCount = 0;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /* Disable the CRYP peripheral clock */
  __HAL_CRYP_DISABLE(hcryp);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
  hcryp->MspDeInitCallback(hcryp);

#else

  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_CRYP_MspDeInit(hcryp);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7fd fb7f 	bl	8000634 <HAL_CRYP_MspDeInit>

#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_RESET;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hcryp);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_CRYP_Encrypt>:
  * @param  Output Pointer to the output buffer(ciphertext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d17c      	bne.n	8003066 <HAL_CRYP_Encrypt+0x116>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process locked */
    __HAL_LOCK(hcryp);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_CRYP_Encrypt+0x32>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e07a      	b.n	8003078 <HAL_CRYP_Encrypt+0x128>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/
    hcryp->CrypInCount = 0U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hcryp->pCrypInBuffPtr = Input;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	68ba      	ldr	r2, [r7, #8]
 8002f9c:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d106      	bne.n	8002fba <HAL_CRYP_Encrypt+0x6a>
    {
      hcryp->Size = Size * 4U;
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8002fb8:	e003      	b.n	8002fc2 <HAL_CRYP_Encrypt+0x72>
    }
    else
    {
      hcryp->Size = Size;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	88fa      	ldrh	r2, [r7, #6]
 8002fbe:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }

    /* Set the operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0218 	bic.w	r2, r2, #24
 8002fd0:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	4b29      	ldr	r3, [pc, #164]	; (8003080 <HAL_CRYP_Encrypt+0x130>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]

    switch (algo)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe4:	d023      	beq.n	800302e <HAL_CRYP_Encrypt+0xde>
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fec:	d826      	bhi.n	800303c <HAL_CRYP_Encrypt+0xec>
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b60      	cmp	r3, #96	; 0x60
 8002ff2:	d015      	beq.n	8003020 <HAL_CRYP_Encrypt+0xd0>
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b60      	cmp	r3, #96	; 0x60
 8002ff8:	d820      	bhi.n	800303c <HAL_CRYP_Encrypt+0xec>
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b40      	cmp	r3, #64	; 0x40
 8002ffe:	d008      	beq.n	8003012 <HAL_CRYP_Encrypt+0xc2>
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	d81a      	bhi.n	800303c <HAL_CRYP_Encrypt+0xec>
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <HAL_CRYP_Encrypt+0xc2>
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b20      	cmp	r3, #32
 8003010:	d114      	bne.n	800303c <HAL_CRYP_Encrypt+0xec>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 8003012:	6a39      	ldr	r1, [r7, #32]
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f83e 	bl	8003096 <CRYP_AES_Encrypt>
 800301a:	4603      	mov	r3, r0
 800301c:	75fb      	strb	r3, [r7, #23]
        break;
 800301e:	e016      	b.n	800304e <HAL_CRYP_Encrypt+0xfe>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 8003020:	6a39      	ldr	r1, [r7, #32]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f9d9 	bl	80033da <CRYP_AESGCM_Process>
 8003028:	4603      	mov	r3, r0
 800302a:	75fb      	strb	r3, [r7, #23]
        break;
 800302c:	e00f      	b.n	800304e <HAL_CRYP_Encrypt+0xfe>

      case CRYP_AES_CCM:

        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 800302e:	6a39      	ldr	r1, [r7, #32]
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 fb7a 	bl	800372a <CRYP_AESCCM_Process>
 8003036:	4603      	mov	r3, r0
 8003038:	75fb      	strb	r3, [r7, #23]
        break;
 800303a:	e008      	b.n	800304e <HAL_CRYP_Encrypt+0xfe>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003040:	f043 0220 	orr.w	r2, r3, #32
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	75fb      	strb	r3, [r7, #23]
        break;
 800304c:	bf00      	nop
    }

    if (status == HAL_OK)
 800304e:	7dfb      	ldrb	r3, [r7, #23]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d110      	bne.n	8003076 <HAL_CRYP_Encrypt+0x126>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003064:	e007      	b.n	8003076 <HAL_CRYP_Encrypt+0x126>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	f043 0208 	orr.w	r2, r3, #8
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003076:	7dfb      	ldrb	r3, [r7, #23]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	00010060 	.word	0x00010060

08003084 <HAL_CRYP_ErrorCallback>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CRYP_ErrorCallback can be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <CRYP_AES_Encrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 80030a0:	2301      	movs	r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)|| (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d003      	beq.n	80030b4 <CRYP_AES_Encrypt+0x1e>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d109      	bne.n	80030c8 <CRYP_AES_Encrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d102      	bne.n	80030c2 <CRYP_AES_Encrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	e002      	b.n	80030c8 <CRYP_AES_Encrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d122      	bne.n	8003114 <CRYP_AES_Encrypt+0x7e>
  {
    /*  Set the Key*/
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	4619      	mov	r1, r3
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f91e 	bl	8003316 <CRYP_SetKey>

    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d022      	beq.n	8003128 <CRYP_AES_Encrypt+0x92>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691a      	ldr	r2, [r3, #16]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6852      	ldr	r2, [r2, #4]
 80030f8:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6892      	ldr	r2, [r2, #8]
 8003104:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68d2      	ldr	r2, [r2, #12]
 8003110:	621a      	str	r2, [r3, #32]
 8003112:	e009      	b.n	8003128 <CRYP_AES_Encrypt+0x92>
    }
  } /* if (DoKeyIVConfig == 1U) */
  else
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	2b04      	cmp	r3, #4
 800311a:	d105      	bne.n	8003128 <CRYP_AES_Encrypt+0x92>
    {
      /* Set the Key */
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	4619      	mov	r1, r3
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f8f7 	bl	8003316 <CRYP_SetKey>
    }
  }
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0201 	orr.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003142:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800314a:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 800314c:	e00a      	b.n	8003164 <CRYP_AES_Encrypt+0xce>
  {
    /* Write plain Ddta and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 800314e:	6839      	ldr	r1, [r7, #0]
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f828 	bl	80031a6 <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800315a:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003162:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	b29b      	uxth	r3, r3
 800316e:	89fa      	ldrh	r2, [r7, #14]
 8003170:	429a      	cmp	r2, r3
 8003172:	d207      	bcs.n	8003184 <CRYP_AES_Encrypt+0xee>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	b29b      	uxth	r3, r3
 800317e:	89ba      	ldrh	r2, [r7, #12]
 8003180:	429a      	cmp	r2, r3
 8003182:	d3e4      	bcc.n	800314e <CRYP_AES_Encrypt+0xb8>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Return function status */
  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b088      	sub	sp, #32
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]

  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t i;

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	441a      	add	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3301      	adds	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031dc:	b29b      	uxth	r3, r3
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	441a      	add	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3301      	adds	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003200:	b29b      	uxth	r3, r3
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	441a      	add	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003212:	b29b      	uxth	r3, r3
 8003214:	3301      	adds	r3, #1
 8003216:	b29a      	uxth	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003224:	b29b      	uxth	r3, r3
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	441a      	add	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003236:	b29b      	uxth	r3, r3
 8003238:	3301      	adds	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003240:	6839      	ldr	r1, [r7, #0]
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fdf4 	bl	8003e30 <CRYP_WaitOnCCFlag>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d018      	beq.n	8003280 <CRYP_AES_ProcessData+0xda>
  {
    /* Disable the CRYP peripheral clock */
    __HAL_CRYP_DISABLE(hcryp);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

    /* Change state */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	f043 0210 	orr.w	r2, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	655a      	str	r2, [r3, #84]	; 0x54
    hcryp->State = HAL_CRYP_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /*Call registered error callback*/
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff ff02 	bl	8003084 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800328e:	601a      	str	r2, [r3, #0]

  /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 8003290:	2300      	movs	r3, #0
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	e00b      	b.n	80032ae <CRYP_AES_ProcessData+0x108>
  {
    temp[i] = hcryp->Instance->DOUTR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	3320      	adds	r3, #32
 80032a2:	443b      	add	r3, r7
 80032a4:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < 4U; i++)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	3301      	adds	r3, #1
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d9f0      	bls.n	8003296 <CRYP_AES_ProcessData+0xf0>
  }
  i= 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 80032b8:	e01a      	b.n	80032f0 <CRYP_AES_ProcessData+0x14a>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	441a      	add	r2, r3
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	3320      	adds	r3, #32
 80032d0:	443b      	add	r3, r7
 80032d2:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80032d6:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3301      	adds	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    i++;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3301      	adds	r3, #1
 80032ee:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003300:	3303      	adds	r3, #3
 8003302:	089b      	lsrs	r3, r3, #2
 8003304:	429a      	cmp	r2, r3
 8003306:	d202      	bcs.n	800330e <CRYP_AES_ProcessData+0x168>
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	2b03      	cmp	r3, #3
 800330c:	d9d5      	bls.n	80032ba <CRYP_AES_ProcessData+0x114>
  }
}
 800330e:	bf00      	nop
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <CRYP_SetKey>:
  * @note   If pKey is NULL, the Key registers are not written. This configuration
  *         occurs when the key is written out of HAL scope.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	6039      	str	r1, [r7, #0]
  if (hcryp->Init.pKey != NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d050      	beq.n	80033ca <CRYP_SetKey+0xb4>
  {
    switch (KeySize)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d034      	beq.n	8003398 <CRYP_SetKey+0x82>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003334:	d14b      	bne.n	80033ce <CRYP_SetKey+0xb8>
    {
      case CRYP_KEYSIZE_256B:
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	63da      	str	r2, [r3, #60]	; 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6852      	ldr	r2, [r2, #4]
 800334c:	639a      	str	r2, [r3, #56]	; 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6892      	ldr	r2, [r2, #8]
 8003358:	635a      	str	r2, [r3, #52]	; 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68d2      	ldr	r2, [r2, #12]
 8003364:	631a      	str	r2, [r3, #48]	; 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6912      	ldr	r2, [r2, #16]
 8003370:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6952      	ldr	r2, [r2, #20]
 800337c:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6992      	ldr	r2, [r2, #24]
 8003388:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69d2      	ldr	r2, [r2, #28]
 8003394:	611a      	str	r2, [r3, #16]
        break;
 8003396:	e01b      	b.n	80033d0 <CRYP_SetKey+0xba>
      case CRYP_KEYSIZE_128B:
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6852      	ldr	r2, [r2, #4]
 80033ae:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6892      	ldr	r2, [r2, #8]
 80033ba:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68d2      	ldr	r2, [r2, #12]
 80033c6:	611a      	str	r2, [r3, #16]

        break;
 80033c8:	e002      	b.n	80033d0 <CRYP_SetKey+0xba>
      default:
        break;
    }
  }
 80033ca:	bf00      	nop
 80033cc:	e000      	b.n	80033d0 <CRYP_SetKey+0xba>
        break;
 80033ce:	bf00      	nop
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr

080033da <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b08e      	sub	sp, #56	; 0x38
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80033ea:	089b      	lsrs	r3, r3, #2
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 80033f0:	2301      	movs	r3, #1
 80033f2:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d118      	bne.n	800342e <CRYP_AESGCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003400:	2b01      	cmp	r3, #1
 8003402:	d10a      	bne.n	800341a <CRYP_AESGCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8003412:	441a      	add	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	65da      	str	r2, [r3, #92]	; 0x5c
 8003418:	e00f      	b.n	800343a <CRYP_AESGCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003426:	461a      	mov	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	65da      	str	r2, [r3, #92]	; 0x5c
 800342c:	e005      	b.n	800343a <CRYP_AESGCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003434:	461a      	mov	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d16d      	bne.n	800351c <CRYP_AESGCM_Process+0x142>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	879a      	strh	r2, [r3, #60]	; 0x3c

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8003454:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	4619      	mov	r1, r3
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ff5a 	bl	8003316 <CRYP_SetKey>

    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6852      	ldr	r2, [r2, #4]
 8003478:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6892      	ldr	r2, [r2, #8]
 8003484:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68d2      	ldr	r2, [r2, #12]
 8003490:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0201 	orr.w	r2, r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80034a2:	6839      	ldr	r1, [r7, #0]
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fcc3 	bl	8003e30 <CRYP_WaitOnCCFlag>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00f      	beq.n	80034d0 <CRYP_AESGCM_Process+0xf6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	f043 0210 	orr.w	r2, r3, #16
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e128      	b.n	8003722 <CRYP_AESGCM_Process+0x348>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034de:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 80034e0:	6839      	ldr	r1, [r7, #0]
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 face 	bl	8003a84 <CRYP_GCMCCM_SetHeaderPhase>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <CRYP_AESGCM_Process+0x118>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e117      	b.n	8003722 <CRYP_AESGCM_Process+0x348>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2202      	movs	r2, #2
 80034f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800350a:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800351a:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	b29b      	uxth	r3, r3
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <CRYP_AESGCM_Process+0x15a>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 800352c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352e:	f023 0303 	bic.w	r3, r3, #3
 8003532:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003534:	f7ff fb98 	bl	8002c68 <HAL_GetTick>
 8003538:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output Data */
  incount = hcryp->CrypInCount;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800353e:	b29b      	uxth	r3, r3
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003548:	b29b      	uxth	r3, r3
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 800354c:	e033      	b.n	80035b6 <CRYP_AESGCM_Process+0x1dc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 800354e:	6839      	ldr	r1, [r7, #0]
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff fe28 	bl	80031a6 <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d022      	beq.n	80035a4 <CRYP_AESGCM_Process+0x1ca>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800355e:	f7ff fb83 	bl	8002c68 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d302      	bcc.n	8003574 <CRYP_AESGCM_Process+0x19a>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d117      	bne.n	80035a4 <CRYP_AESGCM_Process+0x1ca>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f043 0210 	orr.w	r2, r3, #16
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0be      	b.n	8003722 <CRYP_AESGCM_Process+0x348>
      }
    }
    incount = hcryp->CrypInCount;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 80035b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d203      	bcs.n	80035c6 <CRYP_AESGCM_Process+0x1ec>
 80035be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d3c3      	bcc.n	800354e <CRYP_AESGCM_Process+0x174>
  }

  if ((hcryp->Size % 16U) != 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 80a4 	beq.w	8003720 <CRYP_AESGCM_Process+0x346>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3301      	adds	r3, #1
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]

    /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0318 	and.w	r3, r3, #24
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <CRYP_AESGCM_Process+0x23a>
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	051a      	lsls	r2, r3, #20
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	601a      	str	r2, [r3, #0]
    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d105      	bne.n	800362a <CRYP_AESGCM_Process+0x250>
    {
      lastwordsize = (16U - npblb) / 4U;
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	f1c3 0310 	rsb	r3, r3, #16
 8003624:	089b      	lsrs	r3, r3, #2
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003628:	e005      	b.n	8003636 <CRYP_AESGCM_Process+0x25c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	f1c3 0310 	rsb	r3, r3, #16
 8003630:	089b      	lsrs	r3, r3, #2
 8003632:	3301      	adds	r3, #1
 8003634:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /*  last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 8003636:	2300      	movs	r3, #0
 8003638:	633b      	str	r3, [r7, #48]	; 0x30
 800363a:	e014      	b.n	8003666 <CRYP_AESGCM_Process+0x28c>
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003644:	b29b      	uxth	r3, r3
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	441a      	add	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003656:	b29b      	uxth	r3, r3
 8003658:	3301      	adds	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (index = 0U; index < lastwordsize; index ++)
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003662:	3301      	adds	r3, #1
 8003664:	633b      	str	r3, [r7, #48]	; 0x30
 8003666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	429a      	cmp	r2, r3
 800366c:	d3e6      	bcc.n	800363c <CRYP_AESGCM_Process+0x262>
    }
    while (index < 4U)
 800366e:	e006      	b.n	800367e <CRYP_AESGCM_Process+0x2a4>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR  = 0U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
      index++;
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	3301      	adds	r3, #1
 800367c:	633b      	str	r3, [r7, #48]	; 0x30
    while (index < 4U)
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	2b03      	cmp	r3, #3
 8003682:	d9f5      	bls.n	8003670 <CRYP_AESGCM_Process+0x296>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003684:	6839      	ldr	r1, [r7, #0]
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fbd2 	bl	8003e30 <CRYP_WaitOnCCFlag>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <CRYP_AESGCM_Process+0x2ce>
    {
      hcryp->State = HAL_CRYP_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff fcee 	bl	8003084 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036b6:	601a      	str	r2, [r3, #0]

    /*Read the output block from the output FIFO */
    for (index = 0U; index < 4U; index++)
 80036b8:	2300      	movs	r3, #0
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
 80036bc:	e00b      	b.n	80036d6 <CRYP_AESGCM_Process+0x2fc>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[index] = hcryp->Instance->DOUTR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	3338      	adds	r3, #56	; 0x38
 80036ca:	443b      	add	r3, r7
 80036cc:	f843 2c30 	str.w	r2, [r3, #-48]
    for (index = 0U; index < 4U; index++)
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	3301      	adds	r3, #1
 80036d4:	633b      	str	r3, [r7, #48]	; 0x30
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d9f0      	bls.n	80036be <CRYP_AESGCM_Process+0x2e4>
    }
    for (index = 0U; index < lastwordsize; index++)
 80036dc:	2300      	movs	r3, #0
 80036de:	633b      	str	r3, [r7, #48]	; 0x30
 80036e0:	e01a      	b.n	8003718 <CRYP_AESGCM_Process+0x33e>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	441a      	add	r2, r3
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	3338      	adds	r3, #56	; 0x38
 80036f8:	443b      	add	r3, r7
 80036fa:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80036fe:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003706:	b29b      	uxth	r3, r3
 8003708:	3301      	adds	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (index = 0U; index < lastwordsize; index++)
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	3301      	adds	r3, #1
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
 8003718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	429a      	cmp	r2, r3
 800371e:	d3e0      	bcc.n	80036e2 <CRYP_AESGCM_Process+0x308>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3738      	adds	r7, #56	; 0x38
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b08e      	sub	sp, #56	; 0x38
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800373a:	089b      	lsrs	r3, r3, #2
 800373c:	b29b      	uxth	r3, r3
 800373e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t npblb;
  uint32_t lastwordsize;
  uint32_t temp[4] ;  /* Temporary CrypOutBuff */
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8003740:	2301      	movs	r3, #1
 8003742:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	2b01      	cmp	r3, #1
 800374a:	d118      	bne.n	800377e <CRYP_AESCCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	2b01      	cmp	r3, #1
 8003752:	d10a      	bne.n	800376a <CRYP_AESCCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8003762:	441a      	add	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	65da      	str	r2, [r3, #92]	; 0x5c
 8003768:	e00f      	b.n	800378a <CRYP_AESCCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003776:	461a      	mov	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	65da      	str	r2, [r3, #92]	; 0x5c
 800377c:	e005      	b.n	800378a <CRYP_AESCCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d16d      	bne.n	800386c <CRYP_AESCCM_Process+0x142>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	879a      	strh	r2, [r3, #60]	; 0x3c

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80037a4:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	4619      	mov	r1, r3
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff fdb2 	bl	8003316 <CRYP_SetKey>

    /* Set the initialization vector (IV) with B0 */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1a      	ldr	r2, [r3, #32]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1a      	ldr	r2, [r3, #32]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6852      	ldr	r2, [r2, #4]
 80037c8:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1a      	ldr	r2, [r3, #32]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6892      	ldr	r2, [r2, #8]
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1a      	ldr	r2, [r3, #32]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68d2      	ldr	r2, [r2, #12]
 80037e0:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0201 	orr.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80037f2:	6839      	ldr	r1, [r7, #0]
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fb1b 	bl	8003e30 <CRYP_WaitOnCCFlag>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00f      	beq.n	8003820 <CRYP_AESCCM_Process+0xf6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	f043 0210 	orr.w	r2, r3, #16
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e12d      	b.n	8003a7c <CRYP_AESCCM_Process+0x352>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800382e:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8003830:	6839      	ldr	r1, [r7, #0]
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f926 	bl	8003a84 <CRYP_GCMCCM_SetHeaderPhase>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <CRYP_AESCCM_Process+0x118>
    {
      return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e11c      	b.n	8003a7c <CRYP_AESCCM_Process+0x352>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2202      	movs	r2, #2
 8003846:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800385a:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800386a:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <CRYP_AESCCM_Process+0x15a>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 800387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387e:	f023 0303 	bic.w	r3, r3, #3
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003884:	f7ff f9f0 	bl	8002c68 <HAL_GetTick>
 8003888:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output data */
  incount = hcryp->CrypInCount;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800388e:	b29b      	uxth	r3, r3
 8003890:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003898:	b29b      	uxth	r3, r3
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 800389c:	e033      	b.n	8003906 <CRYP_AESCCM_Process+0x1dc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 800389e:	6839      	ldr	r1, [r7, #0]
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff fc80 	bl	80031a6 <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d022      	beq.n	80038f4 <CRYP_AESCCM_Process+0x1ca>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) ||(Timeout == 0U))
 80038ae:	f7ff f9db 	bl	8002c68 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d302      	bcc.n	80038c4 <CRYP_AESCCM_Process+0x19a>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d117      	bne.n	80038f4 <CRYP_AESCCM_Process+0x1ca>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0201 	bic.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d8:	f043 0210 	orr.w	r2, r3, #16
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0c3      	b.n	8003a7c <CRYP_AESCCM_Process+0x352>
      }
    }
    incount = hcryp->CrypInCount;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003902:	b29b      	uxth	r3, r3
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8003906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390a:	429a      	cmp	r2, r3
 800390c:	d203      	bcs.n	8003916 <CRYP_AESCCM_Process+0x1ec>
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003912:	429a      	cmp	r2, r3
 8003914:	d3c3      	bcc.n	800389e <CRYP_AESCCM_Process+0x174>
  }

  if ((hcryp->Size % 16U) != 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80a9 	beq.w	8003a7a <CRYP_AESCCM_Process+0x350>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800392e:	091b      	lsrs	r3, r3, #4
 8003930:	b29b      	uxth	r3, r3
 8003932:	3301      	adds	r3, #1
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	61bb      	str	r3, [r7, #24]

    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0318 	and.w	r3, r3, #24
 800394a:	2b10      	cmp	r3, #16
 800394c:	d10a      	bne.n	8003964 <CRYP_AESCCM_Process+0x23a>
    {
      /* Set Npblb in case of AES CCM payload decryption to get right tag  */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	051a      	lsls	r2, r3, #20
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	601a      	str	r2, [r3, #0]

    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d105      	bne.n	800397a <CRYP_AESCCM_Process+0x250>
    {
      lastwordsize = (16U - npblb) / 4U;
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f1c3 0310 	rsb	r3, r3, #16
 8003974:	089b      	lsrs	r3, r3, #2
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003978:	e005      	b.n	8003986 <CRYP_AESCCM_Process+0x25c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f1c3 0310 	rsb	r3, r3, #16
 8003980:	089b      	lsrs	r3, r3, #2
 8003982:	3301      	adds	r3, #1
 8003984:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Write the last input block in the IN FIFO */
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8003986:	2300      	movs	r3, #0
 8003988:	633b      	str	r3, [r7, #48]	; 0x30
 800398a:	e014      	b.n	80039b6 <CRYP_AESCCM_Process+0x28c>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003994:	b29b      	uxth	r3, r3
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	441a      	add	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	3301      	adds	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 80039b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b2:	3301      	adds	r3, #1
 80039b4:	633b      	str	r3, [r7, #48]	; 0x30
 80039b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d3e6      	bcc.n	800398c <CRYP_AESCCM_Process+0x262>
    }

    /* Pad the data with zeros to have a complete block */
    while (loopcounter < 4U)
 80039be:	e006      	b.n	80039ce <CRYP_AESCCM_Process+0x2a4>
    {
      hcryp->Instance->DINR  = 0U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2200      	movs	r2, #0
 80039c6:	609a      	str	r2, [r3, #8]
      loopcounter++;
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	3301      	adds	r3, #1
 80039cc:	633b      	str	r3, [r7, #48]	; 0x30
    while (loopcounter < 4U)
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d9f5      	bls.n	80039c0 <CRYP_AESCCM_Process+0x296>
    }
    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80039d4:	6839      	ldr	r1, [r7, #0]
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fa2a 	bl	8003e30 <CRYP_WaitOnCCFlag>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00f      	beq.n	8003a02 <CRYP_AESCCM_Process+0x2d8>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	f043 0210 	orr.w	r2, r3, #16
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e03c      	b.n	8003a7c <CRYP_AESCCM_Process+0x352>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a10:	601a      	str	r2, [r3, #0]

    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8003a12:	2300      	movs	r3, #0
 8003a14:	633b      	str	r3, [r7, #48]	; 0x30
 8003a16:	e00b      	b.n	8003a30 <CRYP_AESCCM_Process+0x306>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[loopcounter] = hcryp->Instance->DOUTR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	3338      	adds	r3, #56	; 0x38
 8003a24:	443b      	add	r3, r7
 8003a26:	f843 2c30 	str.w	r2, [r3, #-48]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d9f0      	bls.n	8003a18 <CRYP_AESCCM_Process+0x2ee>
    }
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	633b      	str	r3, [r7, #48]	; 0x30
 8003a3a:	e01a      	b.n	8003a72 <CRYP_AESCCM_Process+0x348>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	441a      	add	r2, r3
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	3338      	adds	r3, #56	; 0x38
 8003a52:	443b      	add	r3, r7
 8003a54:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8003a58:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3301      	adds	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6e:	3301      	adds	r3, #1
 8003a70:	633b      	str	r3, [r7, #48]	; 0x30
 8003a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d3e0      	bcc.n	8003a3c <CRYP_AESCCM_Process+0x312>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3738      	adds	r7, #56	; 0x38
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003a84:	b5b0      	push	{r4, r5, r7, lr}
 8003a86:	b092      	sub	sp, #72	; 0x48
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 8003a8e:	4b8c      	ldr	r3, [pc, #560]	; (8003cc0 <CRYP_GCMCCM_SetHeaderPhase+0x23c>)
 8003a90:	f107 040c 	add.w	r4, r7, #12
 8003a94:	461d      	mov	r5, r3
 8003a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a9e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                       0x0U, 0x0000FF00U, 0x0000FFFFU, 0xFF00FFFFU,  /* 16-bit data type */
                       0x0U, 0x000000FFU, 0x0000FFFFU, 0x00FFFFFFU}; /*  8-bit data type */

  /***************************** Header phase for GCM/GMAC or CCM *********************************/
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d104      	bne.n	8003ab8 <CRYP_GCMCCM_SetHeaderPhase+0x34>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ab6:	e002      	b.n	8003abe <CRYP_GCMCCM_SetHeaderPhase+0x3a>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	643b      	str	r3, [r7, #64]	; 0x40
  }

  if ((size_in_bytes != 0U))
 8003abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8192 	beq.w	8003dea <CRYP_GCMCCM_SetHeaderPhase+0x366>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ad8:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 8003aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d17a      	bne.n	8003bea <CRYP_GCMCCM_SetHeaderPhase+0x166>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8003af4:	2300      	movs	r3, #0
 8003af6:	647b      	str	r3, [r7, #68]	; 0x44
 8003af8:	e071      	b.n	8003bde <CRYP_GCMCCM_SetHeaderPhase+0x15a>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	441a      	add	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3301      	adds	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	441a      	add	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	441a      	add	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3301      	adds	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	441a      	add	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	3301      	adds	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003b8a:	6839      	ldr	r1, [r7, #0]
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f94f 	bl	8003e30 <CRYP_WaitOnCCFlag>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d017      	beq.n	8003bc8 <CRYP_GCMCCM_SetHeaderPhase+0x144>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	f043 0210 	orr.w	r2, r3, #16
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e12e      	b.n	8003e26 <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bd6:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8003bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bda:	3304      	adds	r3, #4
 8003bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8003bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be0:	089b      	lsrs	r3, r3, #2
 8003be2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d388      	bcc.n	8003afa <CRYP_GCMCCM_SetHeaderPhase+0x76>
 8003be8:	e11c      	b.n	8003e24 <CRYP_GCMCCM_SetHeaderPhase+0x3a0>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8003bea:	2300      	movs	r3, #0
 8003bec:	647b      	str	r3, [r7, #68]	; 0x44
 8003bee:	e074      	b.n	8003cda <CRYP_GCMCCM_SetHeaderPhase+0x256>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	441a      	add	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699a      	ldr	r2, [r3, #24]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	441a      	add	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3301      	adds	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699a      	ldr	r2, [r3, #24]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	441a      	add	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6812      	ldr	r2, [r2, #0]
 8003c4c:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3301      	adds	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	441a      	add	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3301      	adds	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003c80:	6839      	ldr	r1, [r7, #0]
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f8d4 	bl	8003e30 <CRYP_WaitOnCCFlag>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01a      	beq.n	8003cc4 <CRYP_GCMCCM_SetHeaderPhase+0x240>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f022 0201 	bic.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca2:	f043 0210 	orr.w	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e0b3      	b.n	8003e26 <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
 8003cbe:	bf00      	nop
 8003cc0:	0800b1cc 	.word	0x0800b1cc
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cd2:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8003cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d384      	bcc.n	8003bf0 <CRYP_GCMCCM_SetHeaderPhase+0x16c>
      }
      /* Write last complete words */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8003cea:	e014      	b.n	8003d16 <CRYP_GCMCCM_SetHeaderPhase+0x292>
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	441a      	add	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3301      	adds	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	879a      	strh	r2, [r3, #60]	; 0x3c
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8003d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d12:	3301      	adds	r3, #1
 8003d14:	647b      	str	r3, [r7, #68]	; 0x44
 8003d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d18:	089b      	lsrs	r3, r3, #2
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d3e3      	bcc.n	8003cec <CRYP_GCMCCM_SetHeaderPhase+0x268>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 8003d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10b      	bne.n	8003d46 <CRYP_GCMCCM_SetHeaderPhase+0x2c2>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 8003d2e:	e006      	b.n	8003d3e <CRYP_GCMCCM_SetHeaderPhase+0x2ba>
        {
          hcryp->Instance->DINR = 0x0U;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2200      	movs	r2, #0
 8003d36:	609a      	str	r2, [r3, #8]
          loopcounter++;
 8003d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	647b      	str	r3, [r7, #68]	; 0x44
        while (loopcounter < 4U)
 8003d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d9f5      	bls.n	8003d30 <CRYP_GCMCCM_SetHeaderPhase+0x2ac>
 8003d44:	e029      	b.n	8003d9a <CRYP_GCMCCM_SetHeaderPhase+0x316>
        }
      }
      else
      {
         /* Enter last bytes, padded with zeros */
         tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	63fb      	str	r3, [r7, #60]	; 0x3c
         tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	005a      	lsls	r2, r3, #1
 8003d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	3348      	adds	r3, #72	; 0x48
 8003d6a:	443b      	add	r3, r7
 8003d6c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d72:	4013      	ands	r3, r2
 8003d74:	63fb      	str	r3, [r7, #60]	; 0x3c
         hcryp->Instance->DINR = tmp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d7c:	609a      	str	r2, [r3, #8]
         loopcounter++;
 8003d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d80:	3301      	adds	r3, #1
 8003d82:	647b      	str	r3, [r7, #68]	; 0x44
         /* Pad the data with zeros to have a complete block */
         while (loopcounter < 4U)
 8003d84:	e006      	b.n	8003d94 <CRYP_GCMCCM_SetHeaderPhase+0x310>
         {
           hcryp->Instance->DINR = 0x0U;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
           loopcounter++;
 8003d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d90:	3301      	adds	r3, #1
 8003d92:	647b      	str	r3, [r7, #68]	; 0x44
         while (loopcounter < 4U)
 8003d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d9f5      	bls.n	8003d86 <CRYP_GCMCCM_SetHeaderPhase+0x302>
         }
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003d9a:	6839      	ldr	r1, [r7, #0]
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f847 	bl	8003e30 <CRYP_WaitOnCCFlag>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d017      	beq.n	8003dd8 <CRYP_GCMCCM_SetHeaderPhase+0x354>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0201 	bic.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbc:	f043 0210 	orr.w	r2, r3, #16
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e026      	b.n	8003e26 <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	e01c      	b.n	8003e24 <CRYP_GCMCCM_SetHeaderPhase+0x3a0>
    }
  }
  else
  {
    /*Workaround 1: only AES, before re-enabling the peripheral, datatype can be configured.*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f023 0106 	bic.w	r1, r3, #6
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]

    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e12:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
  }
  /* Return function status */
  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3748      	adds	r7, #72	; 0x48
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8003e2e:	bf00      	nop

08003e30 <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003e3a:	f7fe ff15 	bl	8002c68 <HAL_GetTick>
 8003e3e:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003e40:	e010      	b.n	8003e64 <CRYP_WaitOnCCFlag+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d00c      	beq.n	8003e64 <CRYP_WaitOnCCFlag+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e4a:	f7fe ff0d 	bl	8002c68 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d302      	bcc.n	8003e60 <CRYP_WaitOnCCFlag+0x30>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <CRYP_WaitOnCCFlag+0x34>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e007      	b.n	8003e74 <CRYP_WaitOnCCFlag+0x44>
  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0e7      	beq.n	8003e42 <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e08e      	b.n	8003fac <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b47      	ldr	r3, [pc, #284]	; (8003fb4 <HAL_DMA_Init+0x138>)
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d80f      	bhi.n	8003eba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	4b45      	ldr	r3, [pc, #276]	; (8003fb8 <HAL_DMA_Init+0x13c>)
 8003ea2:	4413      	add	r3, r2
 8003ea4:	4a45      	ldr	r2, [pc, #276]	; (8003fbc <HAL_DMA_Init+0x140>)
 8003ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	009a      	lsls	r2, r3, #2
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a42      	ldr	r2, [pc, #264]	; (8003fc0 <HAL_DMA_Init+0x144>)
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40
 8003eb8:	e00e      	b.n	8003ed8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4b40      	ldr	r3, [pc, #256]	; (8003fc4 <HAL_DMA_Init+0x148>)
 8003ec2:	4413      	add	r3, r2
 8003ec4:	4a3d      	ldr	r2, [pc, #244]	; (8003fbc <HAL_DMA_Init+0x140>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	009a      	lsls	r2, r3, #2
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a3c      	ldr	r2, [pc, #240]	; (8003fc8 <HAL_DMA_Init+0x14c>)
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6812      	ldr	r2, [r2, #0]
 8003eea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6819      	ldr	r1, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fabc 	bl	80044a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f38:	d102      	bne.n	8003f40 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f4c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f56:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d010      	beq.n	8003f82 <HAL_DMA_Init+0x106>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d80c      	bhi.n	8003f82 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fae5 	bl	8004538 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f7e:	605a      	str	r2, [r3, #4]
 8003f80:	e008      	b.n	8003f94 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40020407 	.word	0x40020407
 8003fb8:	bffdfff8 	.word	0xbffdfff8
 8003fbc:	cccccccd 	.word	0xcccccccd
 8003fc0:	40020000 	.word	0x40020000
 8003fc4:	bffdfbf8 	.word	0xbffdfbf8
 8003fc8:	40020400 	.word	0x40020400

08003fcc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_DMA_Start_IT+0x20>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e069      	b.n	80040c0 <HAL_DMA_Start_IT+0xf4>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d155      	bne.n	80040ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0201 	bic.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fa02 	bl	800442e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 020e 	orr.w	r2, r2, #14
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e00f      	b.n	8004064 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0204 	bic.w	r2, r2, #4
 8004052:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 020a 	orr.w	r2, r2, #10
 8004062:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004080:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004098:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	e008      	b.n	80040be <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2280      	movs	r2, #128	; 0x80
 80040b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80040be:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e04f      	b.n	800417a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d008      	beq.n	80040f8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2204      	movs	r2, #4
 80040ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e040      	b.n	800417a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 020e 	bic.w	r2, r2, #14
 8004106:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004112:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004116:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412c:	f003 021c 	and.w	r2, r3, #28
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	2101      	movs	r1, #1
 8004136:	fa01 f202 	lsl.w	r2, r1, r2
 800413a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004144:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800415c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004166:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d005      	beq.n	80041a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2204      	movs	r2, #4
 80041a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
 80041a6:	e047      	b.n	8004238 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 020e 	bic.w	r2, r2, #14
 80041b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	f003 021c 	and.w	r2, r3, #28
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	2101      	movs	r1, #1
 80041e6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00c      	beq.n	8004218 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004208:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800420c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004216:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	4798      	blx	r3
    }
  }
  return status;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004260:	f003 031c 	and.w	r3, r3, #28
 8004264:	2204      	movs	r2, #4
 8004266:	409a      	lsls	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d027      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x7c>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d022      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b00      	cmp	r3, #0
 8004286:	d107      	bne.n	8004298 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0204 	bic.w	r2, r2, #4
 8004296:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429c:	f003 021c 	and.w	r2, r3, #28
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	2104      	movs	r1, #4
 80042a6:	fa01 f202 	lsl.w	r2, r1, r2
 80042aa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8081 	beq.w	80043b8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80042be:	e07b      	b.n	80043b8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c4:	f003 031c 	and.w	r3, r3, #28
 80042c8:	2202      	movs	r2, #2
 80042ca:	409a      	lsls	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d03d      	beq.n	8004350 <HAL_DMA_IRQHandler+0x10c>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d038      	beq.n	8004350 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 020a 	bic.w	r2, r2, #10
 80042fa:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	4b2e      	ldr	r3, [pc, #184]	; (80043c4 <HAL_DMA_IRQHandler+0x180>)
 800430c:	429a      	cmp	r2, r3
 800430e:	d909      	bls.n	8004324 <HAL_DMA_IRQHandler+0xe0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	f003 031c 	and.w	r3, r3, #28
 8004318:	4a2b      	ldr	r2, [pc, #172]	; (80043c8 <HAL_DMA_IRQHandler+0x184>)
 800431a:	2102      	movs	r1, #2
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	6053      	str	r3, [r2, #4]
 8004322:	e008      	b.n	8004336 <HAL_DMA_IRQHandler+0xf2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	f003 031c 	and.w	r3, r3, #28
 800432c:	4a27      	ldr	r2, [pc, #156]	; (80043cc <HAL_DMA_IRQHandler+0x188>)
 800432e:	2102      	movs	r1, #2
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d038      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800434e:	e033      	b.n	80043b8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004354:	f003 031c 	and.w	r3, r3, #28
 8004358:	2208      	movs	r2, #8
 800435a:	409a      	lsls	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4013      	ands	r3, r2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d02a      	beq.n	80043ba <HAL_DMA_IRQHandler+0x176>
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d025      	beq.n	80043ba <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 020e 	bic.w	r2, r2, #14
 800437c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	f003 021c 	and.w	r2, r3, #28
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2101      	movs	r1, #1
 800438c:	fa01 f202 	lsl.w	r2, r1, r2
 8004390:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d004      	beq.n	80043ba <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
}
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40020080 	.word	0x40020080
 80043c8:	40020400 	.word	0x40020400
 80043cc:	40020000 	.word	0x40020000

080043d0 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d103      	bne.n	80043ec <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	72fb      	strb	r3, [r7, #11]
    return status;
 80043e8:	7afb      	ldrb	r3, [r7, #11]
 80043ea:	e01b      	b.n	8004424 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	f003 0310 	and.w	r3, r3, #16
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00d      	beq.n	800441a <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	e003      	b.n	800441a <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004418:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	601a      	str	r2, [r3, #0]

  return status;
 8004422:	7afb      	ldrb	r3, [r7, #11]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	bc80      	pop	{r7}
 800442c:	4770      	bx	lr

0800442e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800442e:	b480      	push	{r7}
 8004430:	b085      	sub	sp, #20
 8004432:	af00      	add	r7, sp, #0
 8004434:	60f8      	str	r0, [r7, #12]
 8004436:	60b9      	str	r1, [r7, #8]
 8004438:	607a      	str	r2, [r7, #4]
 800443a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004444:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444a:	2b00      	cmp	r3, #0
 800444c:	d004      	beq.n	8004458 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004456:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445c:	f003 021c 	and.w	r2, r3, #28
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	2101      	movs	r1, #1
 8004466:	fa01 f202 	lsl.w	r2, r1, r2
 800446a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b10      	cmp	r3, #16
 800447a:	d108      	bne.n	800448e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800448c:	e007      	b.n	800449e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	60da      	str	r2, [r3, #12]
}
 800449e:	bf00      	nop
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	4b1c      	ldr	r3, [pc, #112]	; (8004528 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d813      	bhi.n	80044e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c0:	089b      	lsrs	r3, r3, #2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044c8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	3b08      	subs	r3, #8
 80044d8:	4a14      	ldr	r2, [pc, #80]	; (800452c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80044da:	fba2 2303 	umull	r2, r3, r2, r3
 80044de:	091b      	lsrs	r3, r3, #4
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	e011      	b.n	8004508 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	009a      	lsls	r2, r3, #2
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80044ee:	4413      	add	r3, r2
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	3b08      	subs	r3, #8
 80044fc:	4a0b      	ldr	r2, [pc, #44]	; (800452c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80044fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004502:	091b      	lsrs	r3, r3, #4
 8004504:	3307      	adds	r3, #7
 8004506:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a0a      	ldr	r2, [pc, #40]	; (8004534 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 800450c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	2201      	movs	r2, #1
 8004516:	409a      	lsls	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800451c:	bf00      	nop
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40020407 	.word	0x40020407
 800452c:	cccccccd 	.word	0xcccccccd
 8004530:	4002081c 	.word	0x4002081c
 8004534:	40020880 	.word	0x40020880

08004538 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004548:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	461a      	mov	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a08      	ldr	r2, [pc, #32]	; (800457c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800455c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3b01      	subs	r3, #1
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2201      	movs	r2, #1
 8004568:	409a      	lsls	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800456e:	bf00      	nop
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr
 8004578:	1000823f 	.word	0x1000823f
 800457c:	40020940 	.word	0x40020940

08004580 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800458a:	2300      	movs	r3, #0
 800458c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800458e:	e140      	b.n	8004812 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	2101      	movs	r1, #1
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	fa01 f303 	lsl.w	r3, r1, r3
 800459c:	4013      	ands	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 8132 	beq.w	800480c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f003 0303 	and.w	r3, r3, #3
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d005      	beq.n	80045c0 <HAL_GPIO_Init+0x40>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d130      	bne.n	8004622 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	2203      	movs	r2, #3
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	43db      	mvns	r3, r3
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4013      	ands	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045f6:	2201      	movs	r2, #1
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43db      	mvns	r3, r3
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4013      	ands	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	091b      	lsrs	r3, r3, #4
 800460c:	f003 0201 	and.w	r2, r3, #1
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b03      	cmp	r3, #3
 800462c:	d017      	beq.n	800465e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	2203      	movs	r2, #3
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43db      	mvns	r3, r3
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4013      	ands	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 0303 	and.w	r3, r3, #3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d123      	bne.n	80046b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	08da      	lsrs	r2, r3, #3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3208      	adds	r2, #8
 8004672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004676:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	220f      	movs	r2, #15
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4013      	ands	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	08da      	lsrs	r2, r3, #3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3208      	adds	r2, #8
 80046ac:	6939      	ldr	r1, [r7, #16]
 80046ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	2203      	movs	r2, #3
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4013      	ands	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 0203 	and.w	r2, r3, #3
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 808c 	beq.w	800480c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80046f4:	4a4e      	ldr	r2, [pc, #312]	; (8004830 <HAL_GPIO_Init+0x2b0>)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	089b      	lsrs	r3, r3, #2
 80046fa:	3302      	adds	r3, #2
 80046fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004700:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	2207      	movs	r2, #7
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	43db      	mvns	r3, r3
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4013      	ands	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800471e:	d00d      	beq.n	800473c <HAL_GPIO_Init+0x1bc>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a44      	ldr	r2, [pc, #272]	; (8004834 <HAL_GPIO_Init+0x2b4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d007      	beq.n	8004738 <HAL_GPIO_Init+0x1b8>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a43      	ldr	r2, [pc, #268]	; (8004838 <HAL_GPIO_Init+0x2b8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d101      	bne.n	8004734 <HAL_GPIO_Init+0x1b4>
 8004730:	2302      	movs	r3, #2
 8004732:	e004      	b.n	800473e <HAL_GPIO_Init+0x1be>
 8004734:	2307      	movs	r3, #7
 8004736:	e002      	b.n	800473e <HAL_GPIO_Init+0x1be>
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <HAL_GPIO_Init+0x1be>
 800473c:	2300      	movs	r3, #0
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	f002 0203 	and.w	r2, r2, #3
 8004744:	0092      	lsls	r2, r2, #2
 8004746:	4093      	lsls	r3, r2
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4313      	orrs	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800474e:	4938      	ldr	r1, [pc, #224]	; (8004830 <HAL_GPIO_Init+0x2b0>)
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	089b      	lsrs	r3, r3, #2
 8004754:	3302      	adds	r3, #2
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800475c:	4b37      	ldr	r3, [pc, #220]	; (800483c <HAL_GPIO_Init+0x2bc>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	43db      	mvns	r3, r3
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4013      	ands	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004780:	4a2e      	ldr	r2, [pc, #184]	; (800483c <HAL_GPIO_Init+0x2bc>)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004786:	4b2d      	ldr	r3, [pc, #180]	; (800483c <HAL_GPIO_Init+0x2bc>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	43db      	mvns	r3, r3
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4013      	ands	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047aa:	4a24      	ldr	r2, [pc, #144]	; (800483c <HAL_GPIO_Init+0x2bc>)
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80047b0:	4b22      	ldr	r3, [pc, #136]	; (800483c <HAL_GPIO_Init+0x2bc>)
 80047b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047b6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	43db      	mvns	r3, r3
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4013      	ands	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80047d6:	4a19      	ldr	r2, [pc, #100]	; (800483c <HAL_GPIO_Init+0x2bc>)
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80047de:	4b17      	ldr	r3, [pc, #92]	; (800483c <HAL_GPIO_Init+0x2bc>)
 80047e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	43db      	mvns	r3, r3
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4013      	ands	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004804:	4a0d      	ldr	r2, [pc, #52]	; (800483c <HAL_GPIO_Init+0x2bc>)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	3301      	adds	r3, #1
 8004810:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	fa22 f303 	lsr.w	r3, r2, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	f47f aeb7 	bne.w	8004590 <HAL_GPIO_Init+0x10>
  }
}
 8004822:	bf00      	nop
 8004824:	bf00      	nop
 8004826:	371c      	adds	r7, #28
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40010000 	.word	0x40010000
 8004834:	48000400 	.word	0x48000400
 8004838:	48000800 	.word	0x48000800
 800483c:	58000800 	.word	0x58000800

08004840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	807b      	strh	r3, [r7, #2]
 800484c:	4613      	mov	r3, r2
 800484e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004850:	787b      	ldrb	r3, [r7, #1]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004856:	887a      	ldrh	r2, [r7, #2]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800485c:	e002      	b.n	8004864 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800485e:	887a      	ldrh	r2, [r7, #2]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr

0800486e <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800486e:	b480      	push	{r7}
 8004870:	b085      	sub	sp, #20
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	460b      	mov	r3, r1
 8004878:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004880:	887a      	ldrh	r2, [r7, #2]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4013      	ands	r3, r2
 8004886:	041a      	lsls	r2, r3, #16
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	43d9      	mvns	r1, r3
 800488c:	887b      	ldrh	r3, [r7, #2]
 800488e:	400b      	ands	r3, r1
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	619a      	str	r2, [r3, #24]
}
 8004896:	bf00      	nop
 8004898:	3714      	adds	r7, #20
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80048aa:	4b08      	ldr	r3, [pc, #32]	; (80048cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d006      	beq.n	80048c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048b6:	4a05      	ldr	r2, [pc, #20]	; (80048cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048b8:	88fb      	ldrh	r3, [r7, #6]
 80048ba:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fc f8f6 	bl	8000ab0 <HAL_GPIO_EXTI_Callback>
  }
}
 80048c4:	bf00      	nop
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	58000800 	.word	0x58000800

080048d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a03      	ldr	r2, [pc, #12]	; (80048e8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80048da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048de:	6013      	str	r3, [r2, #0]
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr
 80048e8:	58000400 	.word	0x58000400

080048ec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80048f0:	4b03      	ldr	r3, [pc, #12]	; (8004900 <HAL_PWREx_GetVoltageRange+0x14>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr
 8004900:	58000400 	.word	0x58000400

08004904 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004908:	4b06      	ldr	r3, [pc, #24]	; (8004924 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004914:	d101      	bne.n	800491a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr
 8004924:	58000400 	.word	0x58000400

08004928 <LL_RCC_HSE_EnableTcxo>:
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800492c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004936:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800493a:	6013      	str	r3, [r2, #0]
}
 800493c:	bf00      	nop
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <LL_RCC_HSE_DisableTcxo>:
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004952:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004956:	6013      	str	r3, [r2, #0]
}
 8004958:	bf00      	nop
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr

08004960 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800496e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004972:	d101      	bne.n	8004978 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	46bd      	mov	sp, r7
 800497e:	bc80      	pop	{r7}
 8004980:	4770      	bx	lr

08004982 <LL_RCC_HSE_Enable>:
{
 8004982:	b480      	push	{r7}
 8004984:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004994:	6013      	str	r3, [r2, #0]
}
 8004996:	bf00      	nop
 8004998:	46bd      	mov	sp, r7
 800499a:	bc80      	pop	{r7}
 800499c:	4770      	bx	lr

0800499e <LL_RCC_HSE_Disable>:
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80049a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b0:	6013      	str	r3, [r2, #0]
}
 80049b2:	bf00      	nop
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr

080049ba <LL_RCC_HSE_IsReady>:
{
 80049ba:	b480      	push	{r7}
 80049bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80049be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049cc:	d101      	bne.n	80049d2 <LL_RCC_HSE_IsReady+0x18>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <LL_RCC_HSE_IsReady+0x1a>
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <LL_RCC_HSI_Enable>:
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80049e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ee:	6013      	str	r3, [r2, #0]
}
 80049f0:	bf00      	nop
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr

080049f8 <LL_RCC_HSI_Disable>:
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80049fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a0a:	6013      	str	r3, [r2, #0]
}
 8004a0c:	bf00      	nop
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <LL_RCC_HSI_IsReady>:
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a26:	d101      	bne.n	8004a2c <LL_RCC_HSI_IsReady+0x18>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <LL_RCC_HSI_IsReady+0x1a>
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr

08004a36 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	061b      	lsls	r3, r3, #24
 8004a4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a50:	4313      	orrs	r3, r2
 8004a52:	604b      	str	r3, [r1, #4]
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr

08004a5e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d101      	bne.n	8004a76 <LL_RCC_LSE_IsReady+0x18>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <LL_RCC_LSE_IsReady+0x1a>
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr

08004a80 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004a98:	bf00      	nop
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr

08004aa0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab0:	f023 0301 	bic.w	r3, r3, #1
 8004ab4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004ab8:	bf00      	nop
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr

08004ac0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d101      	bne.n	8004ad8 <LL_RCC_LSI_IsReady+0x18>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e000      	b.n	8004ada <LL_RCC_LSI_IsReady+0x1a>
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bc80      	pop	{r7}
 8004ae0:	4770      	bx	lr

08004ae2 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af0:	f043 0301 	orr.w	r3, r3, #1
 8004af4:	6013      	str	r3, [r2, #0]
}
 8004af6:	bf00      	nop
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr

08004afe <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004afe:	b480      	push	{r7}
 8004b00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	6013      	str	r3, [r2, #0]
}
 8004b12:	bf00      	nop
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bc80      	pop	{r7}
 8004b18:	4770      	bx	lr

08004b1a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d101      	bne.n	8004b30 <LL_RCC_MSI_IsReady+0x16>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e000      	b.n	8004b32 <LL_RCC_MSI_IsReady+0x18>
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr

08004b3a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d101      	bne.n	8004b50 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr

08004b5a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr

08004b70 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b7c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr

08004b88 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	604b      	str	r3, [r1, #4]
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr

08004bb0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f023 0203 	bic.w	r2, r3, #3
 8004bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	608b      	str	r3, [r1, #8]
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr

08004bd6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 030c 	and.w	r3, r3, #12
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr

08004bec <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	608b      	str	r3, [r1, #8]
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bc80      	pop	{r7}
 8004c10:	4770      	bx	lr

08004c12 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr

08004c3c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c48:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c4c:	f023 020f 	bic.w	r2, r3, #15
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	091b      	lsrs	r3, r3, #4
 8004c54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004c5e:	bf00      	nop
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	608b      	str	r3, [r1, #8]
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr

08004c8e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ca0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	608b      	str	r3, [r1, #8]
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc80      	pop	{r7}
 8004cc8:	4770      	bx	lr

08004cca <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr

08004ce4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr

08004cfa <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr

08004d10 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d22:	6013      	str	r3, [r2, #0]
}
 8004d24:	bf00      	nop
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr

08004d2c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d3e:	6013      	str	r3, [r2, #0]
}
 8004d40:	bf00      	nop
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr

08004d48 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d5a:	d101      	bne.n	8004d60 <LL_RCC_PLL_IsReady+0x18>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <LL_RCC_PLL_IsReady+0x1a>
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bc80      	pop	{r7}
 8004d68:	4770      	bx	lr

08004d6a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr

08004d82 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004d82:	b480      	push	{r7}
 8004d84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr

08004d98 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bc80      	pop	{r7}
 8004dac:	4770      	bx	lr

08004dae <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004dae:	b480      	push	{r7}
 8004db0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0303 	and.w	r3, r3, #3
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr

08004dc4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd6:	d101      	bne.n	8004ddc <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e000      	b.n	8004dde <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004de6:	b480      	push	{r7}
 8004de8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dfa:	d101      	bne.n	8004e00 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e000      	b.n	8004e02 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr

08004e0a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e1e:	d101      	bne.n	8004e24 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004e20:	2301      	movs	r3, #1
 8004e22:	e000      	b.n	8004e26 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr

08004e2e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e40:	d101      	bne.n	8004e46 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr

08004e50 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e62:	d101      	bne.n	8004e68 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004e64:	2301      	movs	r3, #1
 8004e66:	e000      	b.n	8004e6a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr
	...

08004e74 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e36f      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e86:	f7ff fea6 	bl	8004bd6 <LL_RCC_GetSysClkSource>
 8004e8a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e8c:	f7ff ff8f 	bl	8004dae <LL_RCC_PLL_GetMainSource>
 8004e90:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 80c4 	beq.w	8005028 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x3e>
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	2b0c      	cmp	r3, #12
 8004eaa:	d176      	bne.n	8004f9a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d173      	bne.n	8004f9a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e353      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0308 	and.w	r3, r3, #8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d005      	beq.n	8004edc <HAL_RCC_OscConfig+0x68>
 8004ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eda:	e006      	b.n	8004eea <HAL_RCC_OscConfig+0x76>
 8004edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d222      	bcs.n	8004f34 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fda2 	bl	8005a3c <RCC_SetFlashLatencyFromMSIRange>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e331      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f0c:	f043 0308 	orr.w	r3, r3, #8
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f24:	4313      	orrs	r3, r2
 8004f26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff fe2b 	bl	8004b88 <LL_RCC_MSI_SetCalibTrimming>
 8004f32:	e021      	b.n	8004f78 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f3e:	f043 0308 	orr.w	r3, r3, #8
 8004f42:	6013      	str	r3, [r2, #0]
 8004f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f56:	4313      	orrs	r3, r2
 8004f58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff fe12 	bl	8004b88 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fd67 	bl	8005a3c <RCC_SetFlashLatencyFromMSIRange>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e2f6      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004f78:	f000 fce0 	bl	800593c <HAL_RCC_GetHCLKFreq>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	4aa7      	ldr	r2, [pc, #668]	; (800521c <HAL_RCC_OscConfig+0x3a8>)
 8004f80:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004f82:	4ba7      	ldr	r3, [pc, #668]	; (8005220 <HAL_RCC_OscConfig+0x3ac>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fb fe0a 	bl	8000ba0 <HAL_InitTick>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004f90:	7cfb      	ldrb	r3, [r7, #19]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d047      	beq.n	8005026 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8004f96:	7cfb      	ldrb	r3, [r7, #19]
 8004f98:	e2e5      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d02c      	beq.n	8004ffc <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004fa2:	f7ff fd9e 	bl	8004ae2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004fa6:	f7fd fe5f 	bl	8002c68 <HAL_GetTick>
 8004faa:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fae:	f7fd fe5b 	bl	8002c68 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e2d2      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004fc0:	f7ff fdab 	bl	8004b1a <LL_RCC_MSI_IsReady>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f1      	beq.n	8004fae <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fd4:	f043 0308 	orr.w	r3, r3, #8
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fec:	4313      	orrs	r3, r2
 8004fee:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff fdc7 	bl	8004b88 <LL_RCC_MSI_SetCalibTrimming>
 8004ffa:	e015      	b.n	8005028 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ffc:	f7ff fd7f 	bl	8004afe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005000:	f7fd fe32 	bl	8002c68 <HAL_GetTick>
 8005004:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005008:	f7fd fe2e 	bl	8002c68 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e2a5      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800501a:	f7ff fd7e 	bl	8004b1a <LL_RCC_MSI_IsReady>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f1      	bne.n	8005008 <HAL_RCC_OscConfig+0x194>
 8005024:	e000      	b.n	8005028 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005026:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d058      	beq.n	80050e6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	2b08      	cmp	r3, #8
 8005038:	d005      	beq.n	8005046 <HAL_RCC_OscConfig+0x1d2>
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	2b0c      	cmp	r3, #12
 800503e:	d108      	bne.n	8005052 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b03      	cmp	r3, #3
 8005044:	d105      	bne.n	8005052 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d14b      	bne.n	80050e6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e289      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005064:	4313      	orrs	r3, r2
 8005066:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005070:	d102      	bne.n	8005078 <HAL_RCC_OscConfig+0x204>
 8005072:	f7ff fc86 	bl	8004982 <LL_RCC_HSE_Enable>
 8005076:	e00d      	b.n	8005094 <HAL_RCC_OscConfig+0x220>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005080:	d104      	bne.n	800508c <HAL_RCC_OscConfig+0x218>
 8005082:	f7ff fc51 	bl	8004928 <LL_RCC_HSE_EnableTcxo>
 8005086:	f7ff fc7c 	bl	8004982 <LL_RCC_HSE_Enable>
 800508a:	e003      	b.n	8005094 <HAL_RCC_OscConfig+0x220>
 800508c:	f7ff fc87 	bl	800499e <LL_RCC_HSE_Disable>
 8005090:	f7ff fc58 	bl	8004944 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d012      	beq.n	80050c2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509c:	f7fd fde4 	bl	8002c68 <HAL_GetTick>
 80050a0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a4:	f7fd fde0 	bl	8002c68 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b64      	cmp	r3, #100	; 0x64
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e257      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80050b6:	f7ff fc80 	bl	80049ba <LL_RCC_HSE_IsReady>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f1      	beq.n	80050a4 <HAL_RCC_OscConfig+0x230>
 80050c0:	e011      	b.n	80050e6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c2:	f7fd fdd1 	bl	8002c68 <HAL_GetTick>
 80050c6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050ca:	f7fd fdcd 	bl	8002c68 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b64      	cmp	r3, #100	; 0x64
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e244      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80050dc:	f7ff fc6d 	bl	80049ba <LL_RCC_HSE_IsReady>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f1      	bne.n	80050ca <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d046      	beq.n	8005180 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d005      	beq.n	8005104 <HAL_RCC_OscConfig+0x290>
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	2b0c      	cmp	r3, #12
 80050fc:	d10e      	bne.n	800511c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d10b      	bne.n	800511c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e22a      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff fc8e 	bl	8004a36 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800511a:	e031      	b.n	8005180 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d019      	beq.n	8005158 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005124:	f7ff fc5a 	bl	80049dc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fd fd9e 	bl	8002c68 <HAL_GetTick>
 800512c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005130:	f7fd fd9a 	bl	8002c68 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e211      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005142:	f7ff fc67 	bl	8004a14 <LL_RCC_HSI_IsReady>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0f1      	beq.n	8005130 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff fc70 	bl	8004a36 <LL_RCC_HSI_SetCalibTrimming>
 8005156:	e013      	b.n	8005180 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005158:	f7ff fc4e 	bl	80049f8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515c:	f7fd fd84 	bl	8002c68 <HAL_GetTick>
 8005160:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005164:	f7fd fd80 	bl	8002c68 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e1f7      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005176:	f7ff fc4d 	bl	8004a14 <LL_RCC_HSI_IsReady>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1f1      	bne.n	8005164 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0308 	and.w	r3, r3, #8
 8005188:	2b00      	cmp	r3, #0
 800518a:	d06e      	beq.n	800526a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d056      	beq.n	8005242 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8005194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800519c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69da      	ldr	r2, [r3, #28]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d031      	beq.n	8005210 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d006      	beq.n	80051c4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e1d0      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d013      	beq.n	80051f6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80051ce:	f7ff fc67 	bl	8004aa0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051d2:	f7fd fd49 	bl	8002c68 <HAL_GetTick>
 80051d6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051da:	f7fd fd45 	bl	8002c68 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b11      	cmp	r3, #17
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e1bc      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80051ec:	f7ff fc68 	bl	8004ac0 <LL_RCC_LSI_IsReady>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1f1      	bne.n	80051da <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80051f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051fe:	f023 0210 	bic.w	r2, r3, #16
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005210:	f7ff fc36 	bl	8004a80 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005214:	f7fd fd28 	bl	8002c68 <HAL_GetTick>
 8005218:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800521a:	e00c      	b.n	8005236 <HAL_RCC_OscConfig+0x3c2>
 800521c:	20000004 	.word	0x20000004
 8005220:	20000114 	.word	0x20000114
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005224:	f7fd fd20 	bl	8002c68 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b11      	cmp	r3, #17
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e197      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005236:	f7ff fc43 	bl	8004ac0 <LL_RCC_LSI_IsReady>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0f1      	beq.n	8005224 <HAL_RCC_OscConfig+0x3b0>
 8005240:	e013      	b.n	800526a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005242:	f7ff fc2d 	bl	8004aa0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005246:	f7fd fd0f 	bl	8002c68 <HAL_GetTick>
 800524a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800524e:	f7fd fd0b 	bl	8002c68 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b11      	cmp	r3, #17
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e182      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005260:	f7ff fc2e 	bl	8004ac0 <LL_RCC_LSI_IsReady>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f1      	bne.n	800524e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 80d8 	beq.w	8005428 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005278:	f7ff fb44 	bl	8004904 <LL_PWR_IsEnabledBkUpAccess>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d113      	bne.n	80052aa <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005282:	f7ff fb25 	bl	80048d0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005286:	f7fd fcef 	bl	8002c68 <HAL_GetTick>
 800528a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800528e:	f7fd fceb 	bl	8002c68 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e162      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80052a0:	f7ff fb30 	bl	8004904 <LL_PWR_IsEnabledBkUpAccess>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f1      	beq.n	800528e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d07b      	beq.n	80053aa <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	2b85      	cmp	r3, #133	; 0x85
 80052b8:	d003      	beq.n	80052c2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	2b05      	cmp	r3, #5
 80052c0:	d109      	bne.n	80052d6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80052c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052ce:	f043 0304 	orr.w	r3, r3, #4
 80052d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d6:	f7fd fcc7 	bl	8002c68 <HAL_GetTick>
 80052da:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052e8:	f043 0301 	orr.w	r3, r3, #1
 80052ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80052f0:	e00a      	b.n	8005308 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052f2:	f7fd fcb9 	bl	8002c68 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005300:	4293      	cmp	r3, r2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e12e      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005308:	f7ff fba9 	bl	8004a5e <LL_RCC_LSE_IsReady>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0ef      	beq.n	80052f2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	2b81      	cmp	r3, #129	; 0x81
 8005318:	d003      	beq.n	8005322 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	2b85      	cmp	r3, #133	; 0x85
 8005320:	d121      	bne.n	8005366 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005322:	f7fd fca1 	bl	8002c68 <HAL_GetTick>
 8005326:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800533c:	e00a      	b.n	8005354 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533e:	f7fd fc93 	bl	8002c68 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	f241 3288 	movw	r2, #5000	; 0x1388
 800534c:	4293      	cmp	r3, r2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e108      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0ec      	beq.n	800533e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005364:	e060      	b.n	8005428 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005366:	f7fd fc7f 	bl	8002c68 <HAL_GetTick>
 800536a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800536c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800537c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005380:	e00a      	b.n	8005398 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005382:	f7fd fc71 	bl	8002c68 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005390:	4293      	cmp	r3, r2
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e0e6      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800539c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1ec      	bne.n	8005382 <HAL_RCC_OscConfig+0x50e>
 80053a8:	e03e      	b.n	8005428 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053aa:	f7fd fc5d 	bl	8002c68 <HAL_GetTick>
 80053ae:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80053b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80053c4:	e00a      	b.n	80053dc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053c6:	f7fd fc4f 	bl	8002c68 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d901      	bls.n	80053dc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e0c4      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80053dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1ec      	bne.n	80053c6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ec:	f7fd fc3c 	bl	8002c68 <HAL_GetTick>
 80053f0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80053f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053fe:	f023 0301 	bic.w	r3, r3, #1
 8005402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005406:	e00a      	b.n	800541e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005408:	f7fd fc2e 	bl	8002c68 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	f241 3288 	movw	r2, #5000	; 0x1388
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e0a3      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800541e:	f7ff fb1e 	bl	8004a5e <LL_RCC_LSE_IsReady>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1ef      	bne.n	8005408 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 8099 	beq.w	8005564 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	2b0c      	cmp	r3, #12
 8005436:	d06c      	beq.n	8005512 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	2b02      	cmp	r3, #2
 800543e:	d14b      	bne.n	80054d8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005440:	f7ff fc74 	bl	8004d2c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005444:	f7fd fc10 	bl	8002c68 <HAL_GetTick>
 8005448:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800544c:	f7fd fc0c 	bl	8002c68 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b0a      	cmp	r3, #10
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e083      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800545e:	f7ff fc73 	bl	8004d48 <LL_RCC_PLL_IsReady>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1f1      	bne.n	800544c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	4b40      	ldr	r3, [pc, #256]	; (8005570 <HAL_RCC_OscConfig+0x6fc>)
 8005470:	4013      	ands	r3, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800547a:	4311      	orrs	r1, r2
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005480:	0212      	lsls	r2, r2, #8
 8005482:	4311      	orrs	r1, r2
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005488:	4311      	orrs	r1, r2
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800548e:	4311      	orrs	r1, r2
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005494:	430a      	orrs	r2, r1
 8005496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800549a:	4313      	orrs	r3, r2
 800549c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800549e:	f7ff fc37 	bl	8004d10 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b2:	f7fd fbd9 	bl	8002c68 <HAL_GetTick>
 80054b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ba:	f7fd fbd5 	bl	8002c68 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b0a      	cmp	r3, #10
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e04c      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80054cc:	f7ff fc3c 	bl	8004d48 <LL_RCC_PLL_IsReady>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f1      	beq.n	80054ba <HAL_RCC_OscConfig+0x646>
 80054d6:	e045      	b.n	8005564 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d8:	f7ff fc28 	bl	8004d2c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054dc:	f7fd fbc4 	bl	8002c68 <HAL_GetTick>
 80054e0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e4:	f7fd fbc0 	bl	8002c68 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b0a      	cmp	r3, #10
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e037      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80054f6:	f7ff fc27 	bl	8004d48 <LL_RCC_PLL_IsReady>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1f1      	bne.n	80054e4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800550a:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <HAL_RCC_OscConfig+0x700>)
 800550c:	4013      	ands	r3, r2
 800550e:	60cb      	str	r3, [r1, #12]
 8005510:	e028      	b.n	8005564 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	2b01      	cmp	r3, #1
 8005518:	d101      	bne.n	800551e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e023      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800551e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	f003 0203 	and.w	r2, r3, #3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005530:	429a      	cmp	r2, r3
 8005532:	d115      	bne.n	8005560 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553e:	429a      	cmp	r2, r3
 8005540:	d10e      	bne.n	8005560 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	429a      	cmp	r2, r3
 8005550:	d106      	bne.n	8005560 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555c:	429a      	cmp	r2, r3
 800555e:	d001      	beq.n	8005564 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e000      	b.n	8005566 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3720      	adds	r7, #32
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	11c1808c 	.word	0x11c1808c
 8005574:	eefefffc 	.word	0xeefefffc

08005578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e12c      	b.n	80057e6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800558c:	4b98      	ldr	r3, [pc, #608]	; (80057f0 <HAL_RCC_ClockConfig+0x278>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d91b      	bls.n	80055d2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559a:	4b95      	ldr	r3, [pc, #596]	; (80057f0 <HAL_RCC_ClockConfig+0x278>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f023 0207 	bic.w	r2, r3, #7
 80055a2:	4993      	ldr	r1, [pc, #588]	; (80057f0 <HAL_RCC_ClockConfig+0x278>)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055aa:	f7fd fb5d 	bl	8002c68 <HAL_GetTick>
 80055ae:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80055b2:	f7fd fb59 	bl	8002c68 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e110      	b.n	80057e6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055c4:	4b8a      	ldr	r3, [pc, #552]	; (80057f0 <HAL_RCC_ClockConfig+0x278>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d1ef      	bne.n	80055b2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d016      	beq.n	800560c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff fb02 	bl	8004bec <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80055e8:	f7fd fb3e 	bl	8002c68 <HAL_GetTick>
 80055ec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80055f0:	f7fd fb3a 	bl	8002c68 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e0f1      	b.n	80057e6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005602:	f7ff fbdf 	bl	8004dc4 <LL_RCC_IsActiveFlag_HPRE>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d0f1      	beq.n	80055f0 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0320 	and.w	r3, r3, #32
 8005614:	2b00      	cmp	r3, #0
 8005616:	d016      	beq.n	8005646 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff faf8 	bl	8004c12 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005622:	f7fd fb21 	bl	8002c68 <HAL_GetTick>
 8005626:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005628:	e008      	b.n	800563c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800562a:	f7fd fb1d 	bl	8002c68 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d901      	bls.n	800563c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e0d4      	b.n	80057e6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800563c:	f7ff fbd3 	bl	8004de6 <LL_RCC_IsActiveFlag_C2HPRE>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0f1      	beq.n	800562a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d016      	beq.n	8005680 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff faf0 	bl	8004c3c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800565c:	f7fd fb04 	bl	8002c68 <HAL_GetTick>
 8005660:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005662:	e008      	b.n	8005676 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005664:	f7fd fb00 	bl	8002c68 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e0b7      	b.n	80057e6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005676:	f7ff fbc8 	bl	8004e0a <LL_RCC_IsActiveFlag_SHDHPRE>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0f1      	beq.n	8005664 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d016      	beq.n	80056ba <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff fae9 	bl	8004c68 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005696:	f7fd fae7 	bl	8002c68 <HAL_GetTick>
 800569a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800569e:	f7fd fae3 	bl	8002c68 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e09a      	b.n	80057e6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80056b0:	f7ff fbbd 	bl	8004e2e <LL_RCC_IsActiveFlag_PPRE1>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d0f1      	beq.n	800569e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d017      	beq.n	80056f6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff fade 	bl	8004c8e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80056d2:	f7fd fac9 	bl	8002c68 <HAL_GetTick>
 80056d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80056d8:	e008      	b.n	80056ec <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80056da:	f7fd fac5 	bl	8002c68 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e07c      	b.n	80057e6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80056ec:	f7ff fbb0 	bl	8004e50 <LL_RCC_IsActiveFlag_PPRE2>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f1      	beq.n	80056da <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d043      	beq.n	800578a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b02      	cmp	r3, #2
 8005708:	d106      	bne.n	8005718 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800570a:	f7ff f956 	bl	80049ba <LL_RCC_HSE_IsReady>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d11e      	bne.n	8005752 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e066      	b.n	80057e6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	2b03      	cmp	r3, #3
 800571e:	d106      	bne.n	800572e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005720:	f7ff fb12 	bl	8004d48 <LL_RCC_PLL_IsReady>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d113      	bne.n	8005752 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e05b      	b.n	80057e6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005736:	f7ff f9f0 	bl	8004b1a <LL_RCC_MSI_IsReady>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d108      	bne.n	8005752 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e050      	b.n	80057e6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005744:	f7ff f966 	bl	8004a14 <LL_RCC_HSI_IsReady>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e049      	b.n	80057e6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff fa2a 	bl	8004bb0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800575c:	f7fd fa84 	bl	8002c68 <HAL_GetTick>
 8005760:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005762:	e00a      	b.n	800577a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005764:	f7fd fa80 	bl	8002c68 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005772:	4293      	cmp	r3, r2
 8005774:	d901      	bls.n	800577a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e035      	b.n	80057e6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577a:	f7ff fa2c 	bl	8004bd6 <LL_RCC_GetSysClkSource>
 800577e:	4602      	mov	r2, r0
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	429a      	cmp	r2, r3
 8005788:	d1ec      	bne.n	8005764 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800578a:	4b19      	ldr	r3, [pc, #100]	; (80057f0 <HAL_RCC_ClockConfig+0x278>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d21b      	bcs.n	80057d0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005798:	4b15      	ldr	r3, [pc, #84]	; (80057f0 <HAL_RCC_ClockConfig+0x278>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f023 0207 	bic.w	r2, r3, #7
 80057a0:	4913      	ldr	r1, [pc, #76]	; (80057f0 <HAL_RCC_ClockConfig+0x278>)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057a8:	f7fd fa5e 	bl	8002c68 <HAL_GetTick>
 80057ac:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057b0:	f7fd fa5a 	bl	8002c68 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e011      	b.n	80057e6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c2:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <HAL_RCC_ClockConfig+0x278>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d1ef      	bne.n	80057b0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80057d0:	f000 f8b4 	bl	800593c <HAL_RCC_GetHCLKFreq>
 80057d4:	4603      	mov	r3, r0
 80057d6:	4a07      	ldr	r2, [pc, #28]	; (80057f4 <HAL_RCC_ClockConfig+0x27c>)
 80057d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80057da:	4b07      	ldr	r3, [pc, #28]	; (80057f8 <HAL_RCC_ClockConfig+0x280>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fb f9de 	bl	8000ba0 <HAL_InitTick>
 80057e4:	4603      	mov	r3, r0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	58004000 	.word	0x58004000
 80057f4:	20000004 	.word	0x20000004
 80057f8:	20000114 	.word	0x20000114

080057fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057fc:	b590      	push	{r4, r7, lr}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800580a:	f7ff f9e4 	bl	8004bd6 <LL_RCC_GetSysClkSource>
 800580e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005810:	f7ff facd 	bl	8004dae <LL_RCC_PLL_GetMainSource>
 8005814:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <HAL_RCC_GetSysClockFreq+0x2c>
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b0c      	cmp	r3, #12
 8005820:	d139      	bne.n	8005896 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d136      	bne.n	8005896 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005828:	f7ff f987 	bl	8004b3a <LL_RCC_MSI_IsEnabledRangeSelect>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d115      	bne.n	800585e <HAL_RCC_GetSysClockFreq+0x62>
 8005832:	f7ff f982 	bl	8004b3a <LL_RCC_MSI_IsEnabledRangeSelect>
 8005836:	4603      	mov	r3, r0
 8005838:	2b01      	cmp	r3, #1
 800583a:	d106      	bne.n	800584a <HAL_RCC_GetSysClockFreq+0x4e>
 800583c:	f7ff f98d 	bl	8004b5a <LL_RCC_MSI_GetRange>
 8005840:	4603      	mov	r3, r0
 8005842:	0a1b      	lsrs	r3, r3, #8
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	e005      	b.n	8005856 <HAL_RCC_GetSysClockFreq+0x5a>
 800584a:	f7ff f991 	bl	8004b70 <LL_RCC_MSI_GetRangeAfterStandby>
 800584e:	4603      	mov	r3, r0
 8005850:	0a1b      	lsrs	r3, r3, #8
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	4a36      	ldr	r2, [pc, #216]	; (8005930 <HAL_RCC_GetSysClockFreq+0x134>)
 8005858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800585c:	e014      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x8c>
 800585e:	f7ff f96c 	bl	8004b3a <LL_RCC_MSI_IsEnabledRangeSelect>
 8005862:	4603      	mov	r3, r0
 8005864:	2b01      	cmp	r3, #1
 8005866:	d106      	bne.n	8005876 <HAL_RCC_GetSysClockFreq+0x7a>
 8005868:	f7ff f977 	bl	8004b5a <LL_RCC_MSI_GetRange>
 800586c:	4603      	mov	r3, r0
 800586e:	091b      	lsrs	r3, r3, #4
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	e005      	b.n	8005882 <HAL_RCC_GetSysClockFreq+0x86>
 8005876:	f7ff f97b 	bl	8004b70 <LL_RCC_MSI_GetRangeAfterStandby>
 800587a:	4603      	mov	r3, r0
 800587c:	091b      	lsrs	r3, r3, #4
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	4a2b      	ldr	r2, [pc, #172]	; (8005930 <HAL_RCC_GetSysClockFreq+0x134>)
 8005884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005888:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d115      	bne.n	80058bc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005894:	e012      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b04      	cmp	r3, #4
 800589a:	d102      	bne.n	80058a2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800589c:	4b25      	ldr	r3, [pc, #148]	; (8005934 <HAL_RCC_GetSysClockFreq+0x138>)
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	e00c      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d109      	bne.n	80058bc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80058a8:	f7ff f85a 	bl	8004960 <LL_RCC_HSE_IsEnabledDiv2>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d102      	bne.n	80058b8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80058b2:	4b20      	ldr	r3, [pc, #128]	; (8005934 <HAL_RCC_GetSysClockFreq+0x138>)
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	e001      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80058b8:	4b1f      	ldr	r3, [pc, #124]	; (8005938 <HAL_RCC_GetSysClockFreq+0x13c>)
 80058ba:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058bc:	f7ff f98b 	bl	8004bd6 <LL_RCC_GetSysClkSource>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b0c      	cmp	r3, #12
 80058c4:	d12f      	bne.n	8005926 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80058c6:	f7ff fa72 	bl	8004dae <LL_RCC_PLL_GetMainSource>
 80058ca:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d003      	beq.n	80058da <HAL_RCC_GetSysClockFreq+0xde>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d003      	beq.n	80058e0 <HAL_RCC_GetSysClockFreq+0xe4>
 80058d8:	e00d      	b.n	80058f6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80058da:	4b16      	ldr	r3, [pc, #88]	; (8005934 <HAL_RCC_GetSysClockFreq+0x138>)
 80058dc:	60fb      	str	r3, [r7, #12]
        break;
 80058de:	e00d      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80058e0:	f7ff f83e 	bl	8004960 <LL_RCC_HSE_IsEnabledDiv2>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d102      	bne.n	80058f0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80058ea:	4b12      	ldr	r3, [pc, #72]	; (8005934 <HAL_RCC_GetSysClockFreq+0x138>)
 80058ec:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80058ee:	e005      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80058f0:	4b11      	ldr	r3, [pc, #68]	; (8005938 <HAL_RCC_GetSysClockFreq+0x13c>)
 80058f2:	60fb      	str	r3, [r7, #12]
        break;
 80058f4:	e002      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	60fb      	str	r3, [r7, #12]
        break;
 80058fa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80058fc:	f7ff fa35 	bl	8004d6a <LL_RCC_PLL_GetN>
 8005900:	4602      	mov	r2, r0
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	fb03 f402 	mul.w	r4, r3, r2
 8005908:	f7ff fa46 	bl	8004d98 <LL_RCC_PLL_GetDivider>
 800590c:	4603      	mov	r3, r0
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	3301      	adds	r3, #1
 8005912:	fbb4 f4f3 	udiv	r4, r4, r3
 8005916:	f7ff fa34 	bl	8004d82 <LL_RCC_PLL_GetR>
 800591a:	4603      	mov	r3, r0
 800591c:	0f5b      	lsrs	r3, r3, #29
 800591e:	3301      	adds	r3, #1
 8005920:	fbb4 f3f3 	udiv	r3, r4, r3
 8005924:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005926:	697b      	ldr	r3, [r7, #20]
}
 8005928:	4618      	mov	r0, r3
 800592a:	371c      	adds	r7, #28
 800592c:	46bd      	mov	sp, r7
 800592e:	bd90      	pop	{r4, r7, pc}
 8005930:	0800b2a0 	.word	0x0800b2a0
 8005934:	00f42400 	.word	0x00f42400
 8005938:	01e84800 	.word	0x01e84800

0800593c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800593c:	b598      	push	{r3, r4, r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005940:	f7ff ff5c 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 8005944:	4604      	mov	r4, r0
 8005946:	f7ff f9b5 	bl	8004cb4 <LL_RCC_GetAHBPrescaler>
 800594a:	4603      	mov	r3, r0
 800594c:	091b      	lsrs	r3, r3, #4
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	4a03      	ldr	r2, [pc, #12]	; (8005960 <HAL_RCC_GetHCLKFreq+0x24>)
 8005954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005958:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800595c:	4618      	mov	r0, r3
 800595e:	bd98      	pop	{r3, r4, r7, pc}
 8005960:	0800b240 	.word	0x0800b240

08005964 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005964:	b598      	push	{r3, r4, r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005968:	f7ff ffe8 	bl	800593c <HAL_RCC_GetHCLKFreq>
 800596c:	4604      	mov	r4, r0
 800596e:	f7ff f9b9 	bl	8004ce4 <LL_RCC_GetAPB1Prescaler>
 8005972:	4603      	mov	r3, r0
 8005974:	0a1b      	lsrs	r3, r3, #8
 8005976:	4a03      	ldr	r2, [pc, #12]	; (8005984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800597c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005980:	4618      	mov	r0, r3
 8005982:	bd98      	pop	{r3, r4, r7, pc}
 8005984:	0800b280 	.word	0x0800b280

08005988 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005988:	b598      	push	{r3, r4, r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800598c:	f7ff ffd6 	bl	800593c <HAL_RCC_GetHCLKFreq>
 8005990:	4604      	mov	r4, r0
 8005992:	f7ff f9b2 	bl	8004cfa <LL_RCC_GetAPB2Prescaler>
 8005996:	4603      	mov	r3, r0
 8005998:	0adb      	lsrs	r3, r3, #11
 800599a:	4a03      	ldr	r2, [pc, #12]	; (80059a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800599c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	bd98      	pop	{r3, r4, r7, pc}
 80059a8:	0800b280 	.word	0x0800b280

080059ac <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d038      	beq.n	8005a2e <HAL_RCC_GetClockConfig+0x82>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d035      	beq.n	8005a2e <HAL_RCC_GetClockConfig+0x82>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	224f      	movs	r2, #79	; 0x4f
 80059c6:	601a      	str	r2, [r3, #0]
                                    | RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_HCLK3);
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f043 0220 	orr.w	r2, r3, #32
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	601a      	str	r2, [r3, #0]
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 80059d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 020c 	and.w	r2, r3, #12
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 8005a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a08:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a0c:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	615a      	str	r2, [r3, #20]
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	011b      	lsls	r3, r3, #4
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	619a      	str	r2, [r3, #24]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005a22:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <HAL_RCC_GetClockConfig+0x8c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0207 	and.w	r2, r3, #7
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	601a      	str	r2, [r3, #0]
  }
}
 8005a2e:	bf00      	nop
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr
 8005a38:	58004000 	.word	0x58004000

08005a3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005a3c:	b590      	push	{r4, r7, lr}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	091b      	lsrs	r3, r3, #4
 8005a48:	f003 030f 	and.w	r3, r3, #15
 8005a4c:	4a10      	ldr	r2, [pc, #64]	; (8005a90 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a52:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005a54:	f7ff f939 	bl	8004cca <LL_RCC_GetAHB3Prescaler>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	091b      	lsrs	r3, r3, #4
 8005a5c:	f003 030f 	and.w	r3, r3, #15
 8005a60:	4a0c      	ldr	r2, [pc, #48]	; (8005a94 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4a09      	ldr	r2, [pc, #36]	; (8005a98 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005a72:	fba2 2303 	umull	r2, r3, r2, r3
 8005a76:	0c9c      	lsrs	r4, r3, #18
 8005a78:	f7fe ff38 	bl	80048ec <HAL_PWREx_GetVoltageRange>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4620      	mov	r0, r4
 8005a82:	f000 f80b 	bl	8005a9c <RCC_SetFlashLatency>
 8005a86:	4603      	mov	r3, r0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd90      	pop	{r4, r7, pc}
 8005a90:	0800b2a0 	.word	0x0800b2a0
 8005a94:	0800b240 	.word	0x0800b240
 8005a98:	431bde83 	.word	0x431bde83

08005a9c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b08e      	sub	sp, #56	; 0x38
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005aa6:	4a3a      	ldr	r2, [pc, #232]	; (8005b90 <RCC_SetFlashLatency+0xf4>)
 8005aa8:	f107 0320 	add.w	r3, r7, #32
 8005aac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ab0:	6018      	str	r0, [r3, #0]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005ab6:	4a37      	ldr	r2, [pc, #220]	; (8005b94 <RCC_SetFlashLatency+0xf8>)
 8005ab8:	f107 0318 	add.w	r3, r7, #24
 8005abc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ac0:	6018      	str	r0, [r3, #0]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005ac6:	4a34      	ldr	r2, [pc, #208]	; (8005b98 <RCC_SetFlashLatency+0xfc>)
 8005ac8:	f107 030c 	add.w	r3, r7, #12
 8005acc:	ca07      	ldmia	r2, {r0, r1, r2}
 8005ace:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005adc:	d11b      	bne.n	8005b16 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ade:	2300      	movs	r3, #0
 8005ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ae2:	e014      	b.n	8005b0e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	3338      	adds	r3, #56	; 0x38
 8005aea:	443b      	add	r3, r7
 8005aec:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005af0:	461a      	mov	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d807      	bhi.n	8005b08 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	3338      	adds	r3, #56	; 0x38
 8005afe:	443b      	add	r3, r7
 8005b00:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b06:	e021      	b.n	8005b4c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d9e7      	bls.n	8005ae4 <RCC_SetFlashLatency+0x48>
 8005b14:	e01a      	b.n	8005b4c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005b16:	2300      	movs	r3, #0
 8005b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b1a:	e014      	b.n	8005b46 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	3338      	adds	r3, #56	; 0x38
 8005b22:	443b      	add	r3, r7
 8005b24:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d807      	bhi.n	8005b40 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	3338      	adds	r3, #56	; 0x38
 8005b36:	443b      	add	r3, r7
 8005b38:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005b3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b3e:	e005      	b.n	8005b4c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b42:	3301      	adds	r3, #1
 8005b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d9e7      	bls.n	8005b1c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005b4c:	4b13      	ldr	r3, [pc, #76]	; (8005b9c <RCC_SetFlashLatency+0x100>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f023 0207 	bic.w	r2, r3, #7
 8005b54:	4911      	ldr	r1, [pc, #68]	; (8005b9c <RCC_SetFlashLatency+0x100>)
 8005b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b5c:	f7fd f884 	bl	8002c68 <HAL_GetTick>
 8005b60:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005b62:	e008      	b.n	8005b76 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b64:	f7fd f880 	bl	8002c68 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d901      	bls.n	8005b76 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e007      	b.n	8005b86 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005b76:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <RCC_SetFlashLatency+0x100>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d1ef      	bne.n	8005b64 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3738      	adds	r7, #56	; 0x38
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	0800b1fc 	.word	0x0800b1fc
 8005b94:	0800b204 	.word	0x0800b204
 8005b98:	0800b20c 	.word	0x0800b20c
 8005b9c:	58004000 	.word	0x58004000

08005ba0 <LL_RCC_LSE_IsReady>:
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d101      	bne.n	8005bb8 <LL_RCC_LSE_IsReady+0x18>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <LL_RCC_LSE_IsReady+0x1a>
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bc80      	pop	{r7}
 8005bc0:	4770      	bx	lr

08005bc2 <LL_RCC_SetUSARTClockSource>:
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	0c1b      	lsrs	r3, r3, #16
 8005bd6:	43db      	mvns	r3, r3
 8005bd8:	401a      	ands	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bc80      	pop	{r7}
 8005bf0:	4770      	bx	lr

08005bf2 <LL_RCC_SetI2SClockSource>:
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b083      	sub	sp, #12
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bc80      	pop	{r7}
 8005c1a:	4770      	bx	lr

08005c1c <LL_RCC_SetLPUARTClockSource>:
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bc80      	pop	{r7}
 8005c44:	4770      	bx	lr

08005c46 <LL_RCC_SetI2CClockSource>:
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	091b      	lsrs	r3, r3, #4
 8005c5a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005c5e:	43db      	mvns	r3, r3
 8005c60:	401a      	ands	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005c6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bc80      	pop	{r7}
 8005c7c:	4770      	bx	lr

08005c7e <LL_RCC_SetLPTIMClockSource>:
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	0c1b      	lsrs	r3, r3, #16
 8005c92:	041b      	lsls	r3, r3, #16
 8005c94:	43db      	mvns	r3, r3
 8005c96:	401a      	ands	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	041b      	lsls	r3, r3, #16
 8005c9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bc80      	pop	{r7}
 8005cae:	4770      	bx	lr

08005cb0 <LL_RCC_SetRNGClockSource>:
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005cc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bc80      	pop	{r7}
 8005cd8:	4770      	bx	lr

08005cda <LL_RCC_SetADCClockSource>:
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr

08005d04 <LL_RCC_SetRTCClockSource>:
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr

08005d2e <LL_RCC_GetRTCClockSource>:
{
 8005d2e:	b480      	push	{r7}
 8005d30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bc80      	pop	{r7}
 8005d44:	4770      	bx	lr

08005d46 <LL_RCC_ForceBackupDomainReset>:
{
 8005d46:	b480      	push	{r7}
 8005d48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d5e:	bf00      	nop
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bc80      	pop	{r7}
 8005d64:	4770      	bx	lr

08005d66 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005d66:	b480      	push	{r7}
 8005d68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d7e:	bf00      	nop
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr
	...

08005d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005d90:	2300      	movs	r3, #0
 8005d92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005d94:	2300      	movs	r3, #0
 8005d96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005d98:	2300      	movs	r3, #0
 8005d9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d058      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005da8:	f7fe fd92 	bl	80048d0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dac:	f7fc ff5c 	bl	8002c68 <HAL_GetTick>
 8005db0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005db2:	e009      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005db4:	f7fc ff58 	bl	8002c68 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d902      	bls.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	74fb      	strb	r3, [r7, #19]
        break;
 8005dc6:	e006      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005dc8:	4b7b      	ldr	r3, [pc, #492]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd4:	d1ee      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8005dd6:	7cfb      	ldrb	r3, [r7, #19]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d13c      	bne.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8005ddc:	f7ff ffa7 	bl	8005d2e <LL_RCC_GetRTCClockSource>
 8005de0:	4602      	mov	r2, r0
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d00f      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005df8:	f7ff ffa5 	bl	8005d46 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dfc:	f7ff ffb3 	bl	8005d66 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d014      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e14:	f7fc ff28 	bl	8002c68 <HAL_GetTick>
 8005e18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8005e1a:	e00b      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e1c:	f7fc ff24 	bl	8002c68 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d902      	bls.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	74fb      	strb	r3, [r7, #19]
            break;
 8005e32:	e004      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005e34:	f7ff feb4 	bl	8005ba0 <LL_RCC_LSE_IsReady>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d1ee      	bne.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005e3e:	7cfb      	ldrb	r3, [r7, #19]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d105      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff ff5b 	bl	8005d04 <LL_RCC_SetRTCClockSource>
 8005e4e:	e004      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e50:	7cfb      	ldrb	r3, [r7, #19]
 8005e52:	74bb      	strb	r3, [r7, #18]
 8005e54:	e001      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e56:	7cfb      	ldrb	r3, [r7, #19]
 8005e58:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d004      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff fea9 	bl	8005bc2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d004      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7ff fe9e 	bl	8005bc2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0320 	and.w	r3, r3, #32
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d004      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7ff fec0 	bl	8005c1c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7ff fee6 	bl	8005c7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d004      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff fedb 	bl	8005c7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d004      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff fed0 	bl	8005c7e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d004      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7ff fea9 	bl	8005c46 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d004      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff fe9e 	bl	8005c46 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d004      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff fe93 	bl	8005c46 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d011      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fe5e 	bl	8005bf2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f3e:	d107      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d010      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff fea5 	bl	8005cb0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d107      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f7c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d011      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7ff fea3 	bl	8005cda <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f9c:	d107      	bne.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fac:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005fae:	7cbb      	ldrb	r3, [r7, #18]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3718      	adds	r7, #24
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	58000400 	.word	0x58000400

08005fbc <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005fc4:	4b06      	ldr	r3, [pc, #24]	; (8005fe0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fcc:	4904      	ldr	r1, [pc, #16]	; (8005fe0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	608b      	str	r3, [r1, #8]
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bc80      	pop	{r7}
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	58000400 	.word	0x58000400

08005fe4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005fe8:	4b05      	ldr	r3, [pc, #20]	; (8006000 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fee:	4a04      	ldr	r2, [pc, #16]	; (8006000 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005ff8:	bf00      	nop
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bc80      	pop	{r7}
 8005ffe:	4770      	bx	lr
 8006000:	58000400 	.word	0x58000400

08006004 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006008:	4b05      	ldr	r3, [pc, #20]	; (8006020 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800600a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800600e:	4a04      	ldr	r2, [pc, #16]	; (8006020 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006010:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006018:	bf00      	nop
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr
 8006020:	58000400 	.word	0x58000400

08006024 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8006024:	b480      	push	{r7}
 8006026:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006028:	4b03      	ldr	r3, [pc, #12]	; (8006038 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800602a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800602e:	619a      	str	r2, [r3, #24]
}
 8006030:	bf00      	nop
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr
 8006038:	58000400 	.word	0x58000400

0800603c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 800603c:	b480      	push	{r7}
 800603e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006040:	4b06      	ldr	r3, [pc, #24]	; (800605c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b02      	cmp	r3, #2
 800604a:	d101      	bne.n	8006050 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800604c:	2301      	movs	r3, #1
 800604e:	e000      	b.n	8006052 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	58000400 	.word	0x58000400

08006060 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b04      	cmp	r3, #4
 800606e:	d101      	bne.n	8006074 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006070:	2301      	movs	r3, #1
 8006072:	e000      	b.n	8006076 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	46bd      	mov	sp, r7
 800607a:	bc80      	pop	{r7}
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	58000400 	.word	0x58000400

08006084 <LL_RCC_RF_DisableReset>:
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800608c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006094:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006098:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800609c:	bf00      	nop
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr

080060a4 <LL_RCC_IsRFUnderReset>:
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80060a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060b8:	d101      	bne.n	80060be <LL_RCC_IsRFUnderReset+0x1a>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e000      	b.n	80060c0 <LL_RCC_IsRFUnderReset+0x1c>
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bc80      	pop	{r7}
 80060c6:	4770      	bx	lr

080060c8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80060d0:	4b06      	ldr	r3, [pc, #24]	; (80060ec <LL_EXTI_EnableIT_32_63+0x24>)
 80060d2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80060d6:	4905      	ldr	r1, [pc, #20]	; (80060ec <LL_EXTI_EnableIT_32_63+0x24>)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bc80      	pop	{r7}
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	58000800 	.word	0x58000800

080060f0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d103      	bne.n	8006106 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	73fb      	strb	r3, [r7, #15]
    return status;
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	e052      	b.n	80061ac <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	799b      	ldrb	r3, [r3, #6]
 800610e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006110:	7bbb      	ldrb	r3, [r7, #14]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d002      	beq.n	800611c <HAL_SUBGHZ_Init+0x2c>
 8006116:	7bbb      	ldrb	r3, [r7, #14]
 8006118:	2b03      	cmp	r3, #3
 800611a:	d109      	bne.n	8006130 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fa fe20 	bl	8000d68 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006128:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800612c:	f7ff ffcc 	bl	80060c8 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d126      	bne.n	8006184 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2202      	movs	r2, #2
 800613a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800613c:	f7ff ffa2 	bl	8006084 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006140:	4b1c      	ldr	r3, [pc, #112]	; (80061b4 <HAL_SUBGHZ_Init+0xc4>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	4613      	mov	r3, r2
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	1a9b      	subs	r3, r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	0cdb      	lsrs	r3, r3, #19
 800614e:	2264      	movs	r2, #100	; 0x64
 8006150:	fb02 f303 	mul.w	r3, r2, r3
 8006154:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d105      	bne.n	8006168 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	609a      	str	r2, [r3, #8]
        break;
 8006166:	e007      	b.n	8006178 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	3b01      	subs	r3, #1
 800616c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800616e:	f7ff ff99 	bl	80060a4 <LL_RCC_IsRFUnderReset>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1ee      	bne.n	8006156 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006178:	f7ff ff34 	bl	8005fe4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800617c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006180:	f7ff ff1c 	bl	8005fbc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006184:	f7ff ff4e 	bl	8006024 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4618      	mov	r0, r3
 8006194:	f000 fab6 	bl	8006704 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	719a      	strb	r2, [r3, #6]

  return status;
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	20000004 	.word	0x20000004

080061b8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b086      	sub	sp, #24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	607a      	str	r2, [r7, #4]
 80061c2:	461a      	mov	r2, r3
 80061c4:	460b      	mov	r3, r1
 80061c6:	817b      	strh	r3, [r7, #10]
 80061c8:	4613      	mov	r3, r2
 80061ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	799b      	ldrb	r3, [r3, #6]
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d14a      	bne.n	800626c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	795b      	ldrb	r3, [r3, #5]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d101      	bne.n	80061e2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80061de:	2302      	movs	r3, #2
 80061e0:	e045      	b.n	800626e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2201      	movs	r2, #1
 80061e6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2202      	movs	r2, #2
 80061ec:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 fb56 	bl	80068a0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80061f4:	f7ff ff06 	bl	8006004 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80061f8:	210d      	movs	r1, #13
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 faa2 	bl	8006744 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006200:	897b      	ldrh	r3, [r7, #10]
 8006202:	0a1b      	lsrs	r3, r3, #8
 8006204:	b29b      	uxth	r3, r3
 8006206:	b2db      	uxtb	r3, r3
 8006208:	4619      	mov	r1, r3
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 fa9a 	bl	8006744 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006210:	897b      	ldrh	r3, [r7, #10]
 8006212:	b2db      	uxtb	r3, r3
 8006214:	4619      	mov	r1, r3
 8006216:	68f8      	ldr	r0, [r7, #12]
 8006218:	f000 fa94 	bl	8006744 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800621c:	2300      	movs	r3, #0
 800621e:	82bb      	strh	r3, [r7, #20]
 8006220:	e00a      	b.n	8006238 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006222:	8abb      	ldrh	r3, [r7, #20]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	4413      	add	r3, r2
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	4619      	mov	r1, r3
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 fa89 	bl	8006744 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006232:	8abb      	ldrh	r3, [r7, #20]
 8006234:	3301      	adds	r3, #1
 8006236:	82bb      	strh	r3, [r7, #20]
 8006238:	8aba      	ldrh	r2, [r7, #20]
 800623a:	893b      	ldrh	r3, [r7, #8]
 800623c:	429a      	cmp	r2, r3
 800623e:	d3f0      	bcc.n	8006222 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006240:	f7ff fed0 	bl	8005fe4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 fb4f 	bl	80068e8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d002      	beq.n	8006258 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	75fb      	strb	r3, [r7, #23]
 8006256:	e001      	b.n	800625c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	715a      	strb	r2, [r3, #5]

    return status;
 8006268:	7dfb      	ldrb	r3, [r7, #23]
 800626a:	e000      	b.n	800626e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800626c:	2302      	movs	r3, #2
  }
}
 800626e:	4618      	mov	r0, r3
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b088      	sub	sp, #32
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	607a      	str	r2, [r7, #4]
 8006280:	461a      	mov	r2, r3
 8006282:	460b      	mov	r3, r1
 8006284:	817b      	strh	r3, [r7, #10]
 8006286:	4613      	mov	r3, r2
 8006288:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	799b      	ldrb	r3, [r3, #6]
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b01      	cmp	r3, #1
 8006296:	d14a      	bne.n	800632e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	795b      	ldrb	r3, [r3, #5]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d101      	bne.n	80062a4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80062a0:	2302      	movs	r3, #2
 80062a2:	e045      	b.n	8006330 <HAL_SUBGHZ_ReadRegisters+0xba>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2201      	movs	r2, #1
 80062a8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 faf8 	bl	80068a0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80062b0:	f7ff fea8 	bl	8006004 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80062b4:	211d      	movs	r1, #29
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 fa44 	bl	8006744 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80062bc:	897b      	ldrh	r3, [r7, #10]
 80062be:	0a1b      	lsrs	r3, r3, #8
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	4619      	mov	r1, r3
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 fa3c 	bl	8006744 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80062cc:	897b      	ldrh	r3, [r7, #10]
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	4619      	mov	r1, r3
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fa36 	bl	8006744 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80062d8:	2100      	movs	r1, #0
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 fa32 	bl	8006744 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80062e0:	2300      	movs	r3, #0
 80062e2:	82fb      	strh	r3, [r7, #22]
 80062e4:	e009      	b.n	80062fa <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80062e6:	69b9      	ldr	r1, [r7, #24]
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 fa81 	bl	80067f0 <SUBGHZSPI_Receive>
      pData++;
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	3301      	adds	r3, #1
 80062f2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80062f4:	8afb      	ldrh	r3, [r7, #22]
 80062f6:	3301      	adds	r3, #1
 80062f8:	82fb      	strh	r3, [r7, #22]
 80062fa:	8afa      	ldrh	r2, [r7, #22]
 80062fc:	893b      	ldrh	r3, [r7, #8]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d3f1      	bcc.n	80062e6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006302:	f7ff fe6f 	bl	8005fe4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 faee 	bl	80068e8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	e001      	b.n	800631e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	715a      	strb	r2, [r3, #5]

    return status;
 800632a:	7ffb      	ldrb	r3, [r7, #31]
 800632c:	e000      	b.n	8006330 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800632e:	2302      	movs	r3, #2
  }
}
 8006330:	4618      	mov	r0, r3
 8006332:	3720      	adds	r7, #32
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	607a      	str	r2, [r7, #4]
 8006342:	461a      	mov	r2, r3
 8006344:	460b      	mov	r3, r1
 8006346:	72fb      	strb	r3, [r7, #11]
 8006348:	4613      	mov	r3, r2
 800634a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	799b      	ldrb	r3, [r3, #6]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b01      	cmp	r3, #1
 8006354:	d14a      	bne.n	80063ec <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	795b      	ldrb	r3, [r3, #5]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800635e:	2302      	movs	r3, #2
 8006360:	e045      	b.n	80063ee <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 fa99 	bl	80068a0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800636e:	7afb      	ldrb	r3, [r7, #11]
 8006370:	2b84      	cmp	r3, #132	; 0x84
 8006372:	d002      	beq.n	800637a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006374:	7afb      	ldrb	r3, [r7, #11]
 8006376:	2b94      	cmp	r3, #148	; 0x94
 8006378:	d103      	bne.n	8006382 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2201      	movs	r2, #1
 800637e:	711a      	strb	r2, [r3, #4]
 8006380:	e002      	b.n	8006388 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006388:	f7ff fe3c 	bl	8006004 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800638c:	7afb      	ldrb	r3, [r7, #11]
 800638e:	4619      	mov	r1, r3
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 f9d7 	bl	8006744 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006396:	2300      	movs	r3, #0
 8006398:	82bb      	strh	r3, [r7, #20]
 800639a:	e00a      	b.n	80063b2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800639c:	8abb      	ldrh	r3, [r7, #20]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	4413      	add	r3, r2
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	4619      	mov	r1, r3
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 f9cc 	bl	8006744 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80063ac:	8abb      	ldrh	r3, [r7, #20]
 80063ae:	3301      	adds	r3, #1
 80063b0:	82bb      	strh	r3, [r7, #20]
 80063b2:	8aba      	ldrh	r2, [r7, #20]
 80063b4:	893b      	ldrh	r3, [r7, #8]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d3f0      	bcc.n	800639c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80063ba:	f7ff fe13 	bl	8005fe4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80063be:	7afb      	ldrb	r3, [r7, #11]
 80063c0:	2b84      	cmp	r3, #132	; 0x84
 80063c2:	d002      	beq.n	80063ca <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 fa8f 	bl	80068e8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	75fb      	strb	r3, [r7, #23]
 80063d6:	e001      	b.n	80063dc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	715a      	strb	r2, [r3, #5]

    return status;
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	e000      	b.n	80063ee <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80063ec:	2302      	movs	r3, #2
  }
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b088      	sub	sp, #32
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	461a      	mov	r2, r3
 8006402:	460b      	mov	r3, r1
 8006404:	72fb      	strb	r3, [r7, #11]
 8006406:	4613      	mov	r3, r2
 8006408:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	799b      	ldrb	r3, [r3, #6]
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b01      	cmp	r3, #1
 8006416:	d13d      	bne.n	8006494 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	795b      	ldrb	r3, [r3, #5]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d101      	bne.n	8006424 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8006420:	2302      	movs	r3, #2
 8006422:	e038      	b.n	8006496 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2201      	movs	r2, #1
 8006428:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 fa38 	bl	80068a0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006430:	f7ff fde8 	bl	8006004 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006434:	7afb      	ldrb	r3, [r7, #11]
 8006436:	4619      	mov	r1, r3
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 f983 	bl	8006744 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800643e:	2100      	movs	r1, #0
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 f97f 	bl	8006744 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006446:	2300      	movs	r3, #0
 8006448:	82fb      	strh	r3, [r7, #22]
 800644a:	e009      	b.n	8006460 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800644c:	69b9      	ldr	r1, [r7, #24]
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 f9ce 	bl	80067f0 <SUBGHZSPI_Receive>
      pData++;
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	3301      	adds	r3, #1
 8006458:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800645a:	8afb      	ldrh	r3, [r7, #22]
 800645c:	3301      	adds	r3, #1
 800645e:	82fb      	strh	r3, [r7, #22]
 8006460:	8afa      	ldrh	r2, [r7, #22]
 8006462:	893b      	ldrh	r3, [r7, #8]
 8006464:	429a      	cmp	r2, r3
 8006466:	d3f1      	bcc.n	800644c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006468:	f7ff fdbc 	bl	8005fe4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 fa3b 	bl	80068e8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	77fb      	strb	r3, [r7, #31]
 800647e:	e001      	b.n	8006484 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	715a      	strb	r2, [r3, #5]

    return status;
 8006490:	7ffb      	ldrb	r3, [r7, #31]
 8006492:	e000      	b.n	8006496 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006494:	2302      	movs	r3, #2
  }
}
 8006496:	4618      	mov	r0, r3
 8006498:	3720      	adds	r7, #32
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b086      	sub	sp, #24
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	461a      	mov	r2, r3
 80064aa:	460b      	mov	r3, r1
 80064ac:	72fb      	strb	r3, [r7, #11]
 80064ae:	4613      	mov	r3, r2
 80064b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	799b      	ldrb	r3, [r3, #6]
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d13e      	bne.n	800653a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	795b      	ldrb	r3, [r3, #5]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d101      	bne.n	80064c8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80064c4:	2302      	movs	r3, #2
 80064c6:	e039      	b.n	800653c <HAL_SUBGHZ_WriteBuffer+0x9e>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2201      	movs	r2, #1
 80064cc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f9e6 	bl	80068a0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80064d4:	f7ff fd96 	bl	8006004 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80064d8:	210e      	movs	r1, #14
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f932 	bl	8006744 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80064e0:	7afb      	ldrb	r3, [r7, #11]
 80064e2:	4619      	mov	r1, r3
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f92d 	bl	8006744 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80064ea:	2300      	movs	r3, #0
 80064ec:	82bb      	strh	r3, [r7, #20]
 80064ee:	e00a      	b.n	8006506 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80064f0:	8abb      	ldrh	r3, [r7, #20]
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	4413      	add	r3, r2
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	4619      	mov	r1, r3
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 f922 	bl	8006744 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006500:	8abb      	ldrh	r3, [r7, #20]
 8006502:	3301      	adds	r3, #1
 8006504:	82bb      	strh	r3, [r7, #20]
 8006506:	8aba      	ldrh	r2, [r7, #20]
 8006508:	893b      	ldrh	r3, [r7, #8]
 800650a:	429a      	cmp	r2, r3
 800650c:	d3f0      	bcc.n	80064f0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800650e:	f7ff fd69 	bl	8005fe4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 f9e8 	bl	80068e8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	75fb      	strb	r3, [r7, #23]
 8006524:	e001      	b.n	800652a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2201      	movs	r2, #1
 800652e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	715a      	strb	r2, [r3, #5]

    return status;
 8006536:	7dfb      	ldrb	r3, [r7, #23]
 8006538:	e000      	b.n	800653c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800653a:	2302      	movs	r3, #2
  }
}
 800653c:	4618      	mov	r0, r3
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	607a      	str	r2, [r7, #4]
 800654e:	461a      	mov	r2, r3
 8006550:	460b      	mov	r3, r1
 8006552:	72fb      	strb	r3, [r7, #11]
 8006554:	4613      	mov	r3, r2
 8006556:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	799b      	ldrb	r3, [r3, #6]
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b01      	cmp	r3, #1
 8006564:	d141      	bne.n	80065ea <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	795b      	ldrb	r3, [r3, #5]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d101      	bne.n	8006572 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800656e:	2302      	movs	r3, #2
 8006570:	e03c      	b.n	80065ec <HAL_SUBGHZ_ReadBuffer+0xa8>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2201      	movs	r2, #1
 8006576:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 f991 	bl	80068a0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800657e:	f7ff fd41 	bl	8006004 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006582:	211e      	movs	r1, #30
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 f8dd 	bl	8006744 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800658a:	7afb      	ldrb	r3, [r7, #11]
 800658c:	4619      	mov	r1, r3
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f000 f8d8 	bl	8006744 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006594:	2100      	movs	r1, #0
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 f8d4 	bl	8006744 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800659c:	2300      	movs	r3, #0
 800659e:	82fb      	strh	r3, [r7, #22]
 80065a0:	e009      	b.n	80065b6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80065a2:	69b9      	ldr	r1, [r7, #24]
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f923 	bl	80067f0 <SUBGHZSPI_Receive>
      pData++;
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	3301      	adds	r3, #1
 80065ae:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80065b0:	8afb      	ldrh	r3, [r7, #22]
 80065b2:	3301      	adds	r3, #1
 80065b4:	82fb      	strh	r3, [r7, #22]
 80065b6:	8afa      	ldrh	r2, [r7, #22]
 80065b8:	893b      	ldrh	r3, [r7, #8]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d3f1      	bcc.n	80065a2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80065be:	f7ff fd11 	bl	8005fe4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 f990 	bl	80068e8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	77fb      	strb	r3, [r7, #31]
 80065d4:	e001      	b.n	80065da <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2201      	movs	r2, #1
 80065de:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	715a      	strb	r2, [r3, #5]

    return status;
 80065e6:	7ffb      	ldrb	r3, [r7, #31]
 80065e8:	e000      	b.n	80065ec <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80065ea:	2302      	movs	r3, #2
  }
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3720      	adds	r7, #32
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80065fc:	2300      	movs	r3, #0
 80065fe:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006600:	f107 020c 	add.w	r2, r7, #12
 8006604:	2302      	movs	r3, #2
 8006606:	2112      	movs	r1, #18
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7ff fef4 	bl	80063f6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800660e:	7b3b      	ldrb	r3, [r7, #12]
 8006610:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8006612:	89fb      	ldrh	r3, [r7, #14]
 8006614:	021b      	lsls	r3, r3, #8
 8006616:	b21a      	sxth	r2, r3
 8006618:	7b7b      	ldrb	r3, [r7, #13]
 800661a:	b21b      	sxth	r3, r3
 800661c:	4313      	orrs	r3, r2
 800661e:	b21b      	sxth	r3, r3
 8006620:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8006622:	f107 020c 	add.w	r2, r7, #12
 8006626:	2302      	movs	r3, #2
 8006628:	2102      	movs	r1, #2
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff fe84 	bl	8006338 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006630:	89fb      	ldrh	r3, [r7, #14]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fc fa20 	bl	8002a80 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8006640:	89fb      	ldrh	r3, [r7, #14]
 8006642:	085b      	lsrs	r3, r3, #1
 8006644:	f003 0301 	and.w	r3, r3, #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7fc fa25 	bl	8002a9c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006652:	89fb      	ldrh	r3, [r7, #14]
 8006654:	089b      	lsrs	r3, r3, #2
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <HAL_SUBGHZ_IRQHandler+0x70>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7fc fa74 	bl	8002b4c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006664:	89fb      	ldrh	r3, [r7, #14]
 8006666:	08db      	lsrs	r3, r3, #3
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <HAL_SUBGHZ_IRQHandler+0x82>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7fc fa79 	bl	8002b68 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006676:	89fb      	ldrh	r3, [r7, #14]
 8006678:	091b      	lsrs	r3, r3, #4
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <HAL_SUBGHZ_IRQHandler+0x94>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fc fa7e 	bl	8002b84 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006688:	89fb      	ldrh	r3, [r7, #14]
 800668a:	095b      	lsrs	r3, r3, #5
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7fc fa4b 	bl	8002b30 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800669a:	89fb      	ldrh	r3, [r7, #14]
 800669c:	099b      	lsrs	r3, r3, #6
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <HAL_SUBGHZ_IRQHandler+0xb8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fc fa06 	bl	8002ab8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80066ac:	89fb      	ldrh	r3, [r7, #14]
 80066ae:	09db      	lsrs	r3, r3, #7
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d00e      	beq.n	80066d6 <HAL_SUBGHZ_IRQHandler+0xe2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80066b8:	89fb      	ldrh	r3, [r7, #14]
 80066ba:	0a1b      	lsrs	r3, r3, #8
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d004      	beq.n	80066ce <HAL_SUBGHZ_IRQHandler+0xda>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80066c4:	2101      	movs	r1, #1
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7fc fa04 	bl	8002ad4 <HAL_SUBGHZ_CADStatusCallback>
 80066cc:	e003      	b.n	80066d6 <HAL_SUBGHZ_IRQHandler+0xe2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80066ce:	2100      	movs	r1, #0
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7fc f9ff 	bl	8002ad4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80066d6:	89fb      	ldrh	r3, [r7, #14]
 80066d8:	0a5b      	lsrs	r3, r3, #9
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_SUBGHZ_IRQHandler+0xf4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7fc fa14 	bl	8002b10 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80066e8:	89fb      	ldrh	r3, [r7, #14]
 80066ea:	0b9b      	lsrs	r3, r3, #14
 80066ec:	f003 0301 	and.w	r3, r3, #1
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d002      	beq.n	80066fa <HAL_SUBGHZ_IRQHandler+0x106>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7fc fa53 	bl	8002ba0 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80066fa:	bf00      	nop
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800670c:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <SUBGHZSPI_Init+0x3c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a0b      	ldr	r2, [pc, #44]	; (8006740 <SUBGHZSPI_Init+0x3c>)
 8006712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006716:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006718:	4a09      	ldr	r2, [pc, #36]	; (8006740 <SUBGHZSPI_Init+0x3c>)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8006720:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006722:	4b07      	ldr	r3, [pc, #28]	; (8006740 <SUBGHZSPI_Init+0x3c>)
 8006724:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8006728:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800672a:	4b05      	ldr	r3, [pc, #20]	; (8006740 <SUBGHZSPI_Init+0x3c>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a04      	ldr	r2, [pc, #16]	; (8006740 <SUBGHZSPI_Init+0x3c>)
 8006730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006734:	6013      	str	r3, [r2, #0]
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	bc80      	pop	{r7}
 800673e:	4770      	bx	lr
 8006740:	58010000 	.word	0x58010000

08006744 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006754:	4b23      	ldr	r3, [pc, #140]	; (80067e4 <SUBGHZSPI_Transmit+0xa0>)
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	4613      	mov	r3, r2
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	1a9b      	subs	r3, r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	0cdb      	lsrs	r3, r3, #19
 8006762:	2264      	movs	r2, #100	; 0x64
 8006764:	fb02 f303 	mul.w	r3, r2, r3
 8006768:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d105      	bne.n	800677c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	609a      	str	r2, [r3, #8]
      break;
 800677a:	e008      	b.n	800678e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	3b01      	subs	r3, #1
 8006780:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006782:	4b19      	ldr	r3, [pc, #100]	; (80067e8 <SUBGHZSPI_Transmit+0xa4>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b02      	cmp	r3, #2
 800678c:	d1ed      	bne.n	800676a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800678e:	4b17      	ldr	r3, [pc, #92]	; (80067ec <SUBGHZSPI_Transmit+0xa8>)
 8006790:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	78fa      	ldrb	r2, [r7, #3]
 8006796:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006798:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <SUBGHZSPI_Transmit+0xa0>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	4613      	mov	r3, r2
 800679e:	00db      	lsls	r3, r3, #3
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	0cdb      	lsrs	r3, r3, #19
 80067a6:	2264      	movs	r2, #100	; 0x64
 80067a8:	fb02 f303 	mul.w	r3, r2, r3
 80067ac:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d105      	bne.n	80067c0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	609a      	str	r2, [r3, #8]
      break;
 80067be:	e008      	b.n	80067d2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80067c6:	4b08      	ldr	r3, [pc, #32]	; (80067e8 <SUBGHZSPI_Transmit+0xa4>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d1ed      	bne.n	80067ae <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80067d2:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <SUBGHZSPI_Transmit+0xa4>)
 80067d4:	68db      	ldr	r3, [r3, #12]

  return status;
 80067d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	371c      	adds	r7, #28
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	20000004 	.word	0x20000004
 80067e8:	58010000 	.word	0x58010000
 80067ec:	5801000c 	.word	0x5801000c

080067f0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b087      	sub	sp, #28
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80067fe:	4b25      	ldr	r3, [pc, #148]	; (8006894 <SUBGHZSPI_Receive+0xa4>)
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	4613      	mov	r3, r2
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	1a9b      	subs	r3, r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	0cdb      	lsrs	r3, r3, #19
 800680c:	2264      	movs	r2, #100	; 0x64
 800680e:	fb02 f303 	mul.w	r3, r2, r3
 8006812:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d105      	bne.n	8006826 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	609a      	str	r2, [r3, #8]
      break;
 8006824:	e008      	b.n	8006838 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3b01      	subs	r3, #1
 800682a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800682c:	4b1a      	ldr	r3, [pc, #104]	; (8006898 <SUBGHZSPI_Receive+0xa8>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b02      	cmp	r3, #2
 8006836:	d1ed      	bne.n	8006814 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006838:	4b18      	ldr	r3, [pc, #96]	; (800689c <SUBGHZSPI_Receive+0xac>)
 800683a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	22ff      	movs	r2, #255	; 0xff
 8006840:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006842:	4b14      	ldr	r3, [pc, #80]	; (8006894 <SUBGHZSPI_Receive+0xa4>)
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	4613      	mov	r3, r2
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	1a9b      	subs	r3, r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	0cdb      	lsrs	r3, r3, #19
 8006850:	2264      	movs	r2, #100	; 0x64
 8006852:	fb02 f303 	mul.w	r3, r2, r3
 8006856:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d105      	bne.n	800686a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	609a      	str	r2, [r3, #8]
      break;
 8006868:	e008      	b.n	800687c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3b01      	subs	r3, #1
 800686e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006870:	4b09      	ldr	r3, [pc, #36]	; (8006898 <SUBGHZSPI_Receive+0xa8>)
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b01      	cmp	r3, #1
 800687a:	d1ed      	bne.n	8006858 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800687c:	4b06      	ldr	r3, [pc, #24]	; (8006898 <SUBGHZSPI_Receive+0xa8>)
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	b2da      	uxtb	r2, r3
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	701a      	strb	r2, [r3, #0]

  return status;
 8006886:	7dfb      	ldrb	r3, [r7, #23]
}
 8006888:	4618      	mov	r0, r3
 800688a:	371c      	adds	r7, #28
 800688c:	46bd      	mov	sp, r7
 800688e:	bc80      	pop	{r7}
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	20000004 	.word	0x20000004
 8006898:	58010000 	.word	0x58010000
 800689c:	5801000c 	.word	0x5801000c

080068a0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	791b      	ldrb	r3, [r3, #4]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d111      	bne.n	80068d4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80068b0:	4b0c      	ldr	r3, [pc, #48]	; (80068e4 <SUBGHZ_CheckDeviceReady+0x44>)
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	005b      	lsls	r3, r3, #1
 80068b8:	4413      	add	r3, r2
 80068ba:	00db      	lsls	r3, r3, #3
 80068bc:	0c1b      	lsrs	r3, r3, #16
 80068be:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80068c0:	f7ff fba0 	bl	8006004 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1f9      	bne.n	80068c4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80068d0:	f7ff fb88 	bl	8005fe4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f807 	bl	80068e8 <SUBGHZ_WaitOnBusy>
 80068da:	4603      	mov	r3, r0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	20000004 	.word	0x20000004

080068e8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80068f0:	2300      	movs	r3, #0
 80068f2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80068f4:	4b12      	ldr	r3, [pc, #72]	; (8006940 <SUBGHZ_WaitOnBusy+0x58>)
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	4613      	mov	r3, r2
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	4413      	add	r3, r2
 80068fe:	00db      	lsls	r3, r3, #3
 8006900:	0d1b      	lsrs	r3, r3, #20
 8006902:	2264      	movs	r2, #100	; 0x64
 8006904:	fb02 f303 	mul.w	r3, r2, r3
 8006908:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800690a:	f7ff fba9 	bl	8006060 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800690e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d105      	bne.n	8006922 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2202      	movs	r2, #2
 800691e:	609a      	str	r2, [r3, #8]
      break;
 8006920:	e009      	b.n	8006936 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3b01      	subs	r3, #1
 8006926:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006928:	f7ff fb88 	bl	800603c <LL_PWR_IsActiveFlag_RFBUSYS>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	4013      	ands	r3, r2
 8006932:	2b01      	cmp	r3, #1
 8006934:	d0e9      	beq.n	800690a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8006936:	7dfb      	ldrb	r3, [r7, #23]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3718      	adds	r7, #24
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	20000004 	.word	0x20000004

08006944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e049      	b.n	80069ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d106      	bne.n	8006970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f841 	bl	80069f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3304      	adds	r3, #4
 8006980:	4619      	mov	r1, r3
 8006982:	4610      	mov	r0, r2
 8006984:	f000 f9ce 	bl	8006d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80069fa:	bf00      	nop
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bc80      	pop	{r7}
 8006a02:	4770      	bx	lr

08006a04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d001      	beq.n	8006a1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e036      	b.n	8006a8a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0201 	orr.w	r2, r2, #1
 8006a32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a16      	ldr	r2, [pc, #88]	; (8006a94 <HAL_TIM_Base_Start_IT+0x90>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d004      	beq.n	8006a48 <HAL_TIM_Base_Start_IT+0x44>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a46:	d115      	bne.n	8006a74 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	4b12      	ldr	r3, [pc, #72]	; (8006a98 <HAL_TIM_Base_Start_IT+0x94>)
 8006a50:	4013      	ands	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2b06      	cmp	r3, #6
 8006a58:	d015      	beq.n	8006a86 <HAL_TIM_Base_Start_IT+0x82>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a60:	d011      	beq.n	8006a86 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f042 0201 	orr.w	r2, r2, #1
 8006a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a72:	e008      	b.n	8006a86 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f042 0201 	orr.w	r2, r2, #1
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	e000      	b.n	8006a88 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bc80      	pop	{r7}
 8006a92:	4770      	bx	lr
 8006a94:	40012c00 	.word	0x40012c00
 8006a98:	00010007 	.word	0x00010007

08006a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 0302 	and.w	r3, r3, #2
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d122      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d11b      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f06f 0202 	mvn.w	r2, #2
 8006ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f904 	bl	8006cec <HAL_TIM_IC_CaptureCallback>
 8006ae4:	e005      	b.n	8006af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f8f7 	bl	8006cda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f906 	bl	8006cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f003 0304 	and.w	r3, r3, #4
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d122      	bne.n	8006b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d11b      	bne.n	8006b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f06f 0204 	mvn.w	r2, #4
 8006b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2202      	movs	r2, #2
 8006b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f8da 	bl	8006cec <HAL_TIM_IC_CaptureCallback>
 8006b38:	e005      	b.n	8006b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f8cd 	bl	8006cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f8dc 	bl	8006cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	d122      	bne.n	8006ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d11b      	bne.n	8006ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0208 	mvn.w	r2, #8
 8006b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2204      	movs	r2, #4
 8006b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f8b0 	bl	8006cec <HAL_TIM_IC_CaptureCallback>
 8006b8c:	e005      	b.n	8006b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f8a3 	bl	8006cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f8b2 	bl	8006cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	f003 0310 	and.w	r3, r3, #16
 8006baa:	2b10      	cmp	r3, #16
 8006bac:	d122      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	2b10      	cmp	r3, #16
 8006bba:	d11b      	bne.n	8006bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f06f 0210 	mvn.w	r2, #16
 8006bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2208      	movs	r2, #8
 8006bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f886 	bl	8006cec <HAL_TIM_IC_CaptureCallback>
 8006be0:	e005      	b.n	8006bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f879 	bl	8006cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f888 	bl	8006cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d10e      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d107      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f06f 0201 	mvn.w	r2, #1
 8006c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7f9 ff86 	bl	8000b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2a:	2b80      	cmp	r3, #128	; 0x80
 8006c2c:	d10e      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c38:	2b80      	cmp	r3, #128	; 0x80
 8006c3a:	d107      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f8d7 	bl	8006dfa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c5a:	d10e      	bne.n	8006c7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c66:	2b80      	cmp	r3, #128	; 0x80
 8006c68:	d107      	bne.n	8006c7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f8c9 	bl	8006e0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c84:	2b40      	cmp	r3, #64	; 0x40
 8006c86:	d10e      	bne.n	8006ca6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c92:	2b40      	cmp	r3, #64	; 0x40
 8006c94:	d107      	bne.n	8006ca6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f835 	bl	8006d10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b20      	cmp	r3, #32
 8006cb2:	d10e      	bne.n	8006cd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b20      	cmp	r3, #32
 8006cc0:	d107      	bne.n	8006cd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f06f 0220 	mvn.w	r2, #32
 8006cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f88b 	bl	8006de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cd2:	bf00      	nop
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bc80      	pop	{r7}
 8006cea:	4770      	bx	lr

08006cec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr

08006cfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b083      	sub	sp, #12
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bc80      	pop	{r7}
 8006d0e:	4770      	bx	lr

08006d10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bc80      	pop	{r7}
 8006d20:	4770      	bx	lr
	...

08006d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a29      	ldr	r2, [pc, #164]	; (8006ddc <TIM_Base_SetConfig+0xb8>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_Base_SetConfig+0x20>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d42:	d108      	bne.n	8006d56 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a20      	ldr	r2, [pc, #128]	; (8006ddc <TIM_Base_SetConfig+0xb8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00b      	beq.n	8006d76 <TIM_Base_SetConfig+0x52>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d64:	d007      	beq.n	8006d76 <TIM_Base_SetConfig+0x52>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a1d      	ldr	r2, [pc, #116]	; (8006de0 <TIM_Base_SetConfig+0xbc>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d003      	beq.n	8006d76 <TIM_Base_SetConfig+0x52>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a1c      	ldr	r2, [pc, #112]	; (8006de4 <TIM_Base_SetConfig+0xc0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d108      	bne.n	8006d88 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a0b      	ldr	r2, [pc, #44]	; (8006ddc <TIM_Base_SetConfig+0xb8>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d007      	beq.n	8006dc4 <TIM_Base_SetConfig+0xa0>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a0a      	ldr	r2, [pc, #40]	; (8006de0 <TIM_Base_SetConfig+0xbc>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d003      	beq.n	8006dc4 <TIM_Base_SetConfig+0xa0>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a09      	ldr	r2, [pc, #36]	; (8006de4 <TIM_Base_SetConfig+0xc0>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d103      	bne.n	8006dcc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	691a      	ldr	r2, [r3, #16]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	615a      	str	r2, [r3, #20]
}
 8006dd2:	bf00      	nop
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr
 8006ddc:	40012c00 	.word	0x40012c00
 8006de0:	40014400 	.word	0x40014400
 8006de4:	40014800 	.word	0x40014800

08006de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bc80      	pop	{r7}
 8006df8:	4770      	bx	lr

08006dfa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bc80      	pop	{r7}
 8006e0a:	4770      	bx	lr

08006e0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bc80      	pop	{r7}
 8006e1c:	4770      	bx	lr

08006e1e <LL_RCC_GetUSARTClockSource>:
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006e26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	401a      	ands	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	041b      	lsls	r3, r3, #16
 8006e36:	4313      	orrs	r3, r2
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr

08006e42 <LL_RCC_GetLPUARTClockSource>:
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4013      	ands	r3, r2
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bc80      	pop	{r7}
 8006e5e:	4770      	bx	lr

08006e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e042      	b.n	8006ef8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d106      	bne.n	8006e8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7fa fc95 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2224      	movs	r2, #36	; 0x24
 8006e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0201 	bic.w	r2, r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fbfa 	bl	800769c <UART_SetConfig>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d101      	bne.n	8006eb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e022      	b.n	8006ef8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fe62 	bl	8007b84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ece:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689a      	ldr	r2, [r3, #8]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ede:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0201 	orr.w	r2, r2, #1
 8006eee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fee8 	bl	8007cc6 <UART_CheckIdleState>
 8006ef6:	4603      	mov	r3, r0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08a      	sub	sp, #40	; 0x28
 8006f04:	af02      	add	r7, sp, #8
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	603b      	str	r3, [r7, #0]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f16:	2b20      	cmp	r3, #32
 8006f18:	d173      	bne.n	8007002 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <HAL_UART_Transmit+0x26>
 8006f20:	88fb      	ldrh	r3, [r7, #6]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e06c      	b.n	8007004 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2221      	movs	r2, #33	; 0x21
 8006f36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f3a:	f7fb fe95 	bl	8002c68 <HAL_GetTick>
 8006f3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	88fa      	ldrh	r2, [r7, #6]
 8006f44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	88fa      	ldrh	r2, [r7, #6]
 8006f4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f58:	d108      	bne.n	8006f6c <HAL_UART_Transmit+0x6c>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d104      	bne.n	8006f6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f62:	2300      	movs	r3, #0
 8006f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	61bb      	str	r3, [r7, #24]
 8006f6a:	e003      	b.n	8006f74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f70:	2300      	movs	r3, #0
 8006f72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f74:	e02c      	b.n	8006fd0 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2180      	movs	r1, #128	; 0x80
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 feee 	bl	8007d62 <UART_WaitOnFlagUntilTimeout>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e039      	b.n	8007004 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10b      	bne.n	8006fae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fa4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	3302      	adds	r3, #2
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	e007      	b.n	8006fbe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	781a      	ldrb	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1cc      	bne.n	8006f76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2140      	movs	r1, #64	; 0x40
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 febb 	bl	8007d62 <UART_WaitOnFlagUntilTimeout>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e006      	b.n	8007004 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	e000      	b.n	8007004 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8007002:	2302      	movs	r3, #2
  }
}
 8007004:	4618      	mov	r0, r3
 8007006:	3720      	adds	r7, #32
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b0ba      	sub	sp, #232	; 0xe8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007032:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007036:	f640 030f 	movw	r3, #2063	; 0x80f
 800703a:	4013      	ands	r3, r2
 800703c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007044:	2b00      	cmp	r3, #0
 8007046:	d11b      	bne.n	8007080 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d015      	beq.n	8007080 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007058:	f003 0320 	and.w	r3, r3, #32
 800705c:	2b00      	cmp	r3, #0
 800705e:	d105      	bne.n	800706c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d009      	beq.n	8007080 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 82e3 	beq.w	800763c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	4798      	blx	r3
      }
      return;
 800707e:	e2dd      	b.n	800763c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 8123 	beq.w	80072d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800708a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800708e:	4b8d      	ldr	r3, [pc, #564]	; (80072c4 <HAL_UART_IRQHandler+0x2b8>)
 8007090:	4013      	ands	r3, r2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d106      	bne.n	80070a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007096:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800709a:	4b8b      	ldr	r3, [pc, #556]	; (80072c8 <HAL_UART_IRQHandler+0x2bc>)
 800709c:	4013      	ands	r3, r2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 8116 	beq.w	80072d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d011      	beq.n	80070d4 <HAL_UART_IRQHandler+0xc8>
 80070b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00b      	beq.n	80070d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2201      	movs	r2, #1
 80070c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ca:	f043 0201 	orr.w	r2, r3, #1
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d8:	f003 0302 	and.w	r3, r3, #2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d011      	beq.n	8007104 <HAL_UART_IRQHandler+0xf8>
 80070e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2202      	movs	r2, #2
 80070f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fa:	f043 0204 	orr.w	r2, r3, #4
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	d011      	beq.n	8007134 <HAL_UART_IRQHandler+0x128>
 8007110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007114:	f003 0301 	and.w	r3, r3, #1
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00b      	beq.n	8007134 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2204      	movs	r2, #4
 8007122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712a:	f043 0202 	orr.w	r2, r3, #2
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007138:	f003 0308 	and.w	r3, r3, #8
 800713c:	2b00      	cmp	r3, #0
 800713e:	d017      	beq.n	8007170 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007144:	f003 0320 	and.w	r3, r3, #32
 8007148:	2b00      	cmp	r3, #0
 800714a:	d105      	bne.n	8007158 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800714c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007150:	4b5c      	ldr	r3, [pc, #368]	; (80072c4 <HAL_UART_IRQHandler+0x2b8>)
 8007152:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00b      	beq.n	8007170 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2208      	movs	r2, #8
 800715e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007166:	f043 0208 	orr.w	r2, r3, #8
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007178:	2b00      	cmp	r3, #0
 800717a:	d012      	beq.n	80071a2 <HAL_UART_IRQHandler+0x196>
 800717c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007180:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00c      	beq.n	80071a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007190:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007198:	f043 0220 	orr.w	r2, r3, #32
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 8249 	beq.w	8007640 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80071ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d013      	beq.n	80071e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80071ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071be:	f003 0320 	and.w	r3, r3, #32
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d105      	bne.n	80071d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80071c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d007      	beq.n	80071e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f6:	2b40      	cmp	r3, #64	; 0x40
 80071f8:	d005      	beq.n	8007206 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007202:	2b00      	cmp	r3, #0
 8007204:	d054      	beq.n	80072b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 ff5a 	bl	80080c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007216:	2b40      	cmp	r3, #64	; 0x40
 8007218:	d146      	bne.n	80072a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3308      	adds	r3, #8
 8007220:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007224:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007230:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007238:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3308      	adds	r3, #8
 8007242:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007246:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800724a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007252:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007256:	e841 2300 	strex	r3, r2, [r1]
 800725a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800725e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1d9      	bne.n	800721a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800726c:	2b00      	cmp	r3, #0
 800726e:	d017      	beq.n	80072a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007276:	4a15      	ldr	r2, [pc, #84]	; (80072cc <HAL_UART_IRQHandler+0x2c0>)
 8007278:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007280:	4618      	mov	r0, r3
 8007282:	f7fc ff7f 	bl	8004184 <HAL_DMA_Abort_IT>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d019      	beq.n	80072c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800729a:	4610      	mov	r0, r2
 800729c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729e:	e00f      	b.n	80072c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f9f2 	bl	800768a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a6:	e00b      	b.n	80072c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f9ee 	bl	800768a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ae:	e007      	b.n	80072c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f9ea 	bl	800768a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80072be:	e1bf      	b.n	8007640 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c0:	bf00      	nop
    return;
 80072c2:	e1bd      	b.n	8007640 <HAL_UART_IRQHandler+0x634>
 80072c4:	10000001 	.word	0x10000001
 80072c8:	04000120 	.word	0x04000120
 80072cc:	08008375 	.word	0x08008375

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	f040 8153 	bne.w	8007580 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072de:	f003 0310 	and.w	r3, r3, #16
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f000 814c 	beq.w	8007580 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80072e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ec:	f003 0310 	and.w	r3, r3, #16
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 8145 	beq.w	8007580 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2210      	movs	r2, #16
 80072fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007308:	2b40      	cmp	r3, #64	; 0x40
 800730a:	f040 80bb 	bne.w	8007484 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800731c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 818f 	beq.w	8007644 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800732c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007330:	429a      	cmp	r2, r3
 8007332:	f080 8187 	bcs.w	8007644 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800733c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0320 	and.w	r3, r3, #32
 800734e:	2b00      	cmp	r3, #0
 8007350:	f040 8087 	bne.w	8007462 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800736c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007370:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800737e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007382:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800738a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800738e:	e841 2300 	strex	r3, r2, [r1]
 8007392:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1da      	bne.n	8007354 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3308      	adds	r3, #8
 80073a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073b0:	f023 0301 	bic.w	r3, r3, #1
 80073b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3308      	adds	r3, #8
 80073be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80073c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80073c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80073ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e1      	bne.n	800739e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3308      	adds	r3, #8
 80073e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3308      	adds	r3, #8
 80073fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007400:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007404:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800740c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e3      	bne.n	80073da <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2220      	movs	r2, #32
 8007416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800742e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007430:	f023 0310 	bic.w	r3, r3, #16
 8007434:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	461a      	mov	r2, r3
 800743e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007442:	65bb      	str	r3, [r7, #88]	; 0x58
 8007444:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007448:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800744a:	e841 2300 	strex	r3, r2, [r1]
 800744e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1e4      	bne.n	8007420 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800745c:	4618      	mov	r0, r3
 800745e:	f7fc fe33 	bl	80040c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2202      	movs	r2, #2
 8007466:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007474:	b29b      	uxth	r3, r3
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	b29b      	uxth	r3, r3
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7fa fa1d 	bl	80018bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007482:	e0df      	b.n	8007644 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007490:	b29b      	uxth	r3, r3
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800749e:	b29b      	uxth	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 80d1 	beq.w	8007648 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80074a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 80cc 	beq.w	8007648 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80074be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074d2:	647b      	str	r3, [r7, #68]	; 0x44
 80074d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074da:	e841 2300 	strex	r3, r2, [r1]
 80074de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1e4      	bne.n	80074b0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3308      	adds	r3, #8
 80074ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f0:	e853 3f00 	ldrex	r3, [r3]
 80074f4:	623b      	str	r3, [r7, #32]
   return(result);
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074fc:	f023 0301 	bic.w	r3, r3, #1
 8007500:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3308      	adds	r3, #8
 800750a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800750e:	633a      	str	r2, [r7, #48]	; 0x30
 8007510:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e1      	bne.n	80074e6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	60fb      	str	r3, [r7, #12]
   return(result);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0310 	bic.w	r3, r3, #16
 800754a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007558:	61fb      	str	r3, [r7, #28]
 800755a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755c:	69b9      	ldr	r1, [r7, #24]
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	e841 2300 	strex	r3, r2, [r1]
 8007564:	617b      	str	r3, [r7, #20]
   return(result);
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e4      	bne.n	8007536 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007572:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7fa f99f 	bl	80018bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800757e:	e063      	b.n	8007648 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007584:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00e      	beq.n	80075aa <HAL_UART_IRQHandler+0x59e>
 800758c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d008      	beq.n	80075aa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80075a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 ff27 	bl	80083f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075a8:	e051      	b.n	800764e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80075aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d014      	beq.n	80075e0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80075b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d105      	bne.n	80075ce <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80075c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d008      	beq.n	80075e0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d03a      	beq.n	800764c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	4798      	blx	r3
    }
    return;
 80075de:	e035      	b.n	800764c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d009      	beq.n	8007600 <HAL_UART_IRQHandler+0x5f4>
 80075ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fed1 	bl	80083a0 <UART_EndTransmit_IT>
    return;
 80075fe:	e026      	b.n	800764e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007604:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d009      	beq.n	8007620 <HAL_UART_IRQHandler+0x614>
 800760c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007610:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fefe 	bl	800841a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800761e:	e016      	b.n	800764e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d010      	beq.n	800764e <HAL_UART_IRQHandler+0x642>
 800762c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007630:	2b00      	cmp	r3, #0
 8007632:	da0c      	bge.n	800764e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fee7 	bl	8008408 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800763a:	e008      	b.n	800764e <HAL_UART_IRQHandler+0x642>
      return;
 800763c:	bf00      	nop
 800763e:	e006      	b.n	800764e <HAL_UART_IRQHandler+0x642>
    return;
 8007640:	bf00      	nop
 8007642:	e004      	b.n	800764e <HAL_UART_IRQHandler+0x642>
      return;
 8007644:	bf00      	nop
 8007646:	e002      	b.n	800764e <HAL_UART_IRQHandler+0x642>
      return;
 8007648:	bf00      	nop
 800764a:	e000      	b.n	800764e <HAL_UART_IRQHandler+0x642>
    return;
 800764c:	bf00      	nop
  }
}
 800764e:	37e8      	adds	r7, #232	; 0xe8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	bc80      	pop	{r7}
 8007664:	4770      	bx	lr

08007666 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800766e:	bf00      	nop
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	bc80      	pop	{r7}
 8007676:	4770      	bx	lr

08007678 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	bc80      	pop	{r7}
 8007688:	4770      	bx	lr

0800768a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007692:	bf00      	nop
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	bc80      	pop	{r7}
 800769a:	4770      	bx	lr

0800769c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800769c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076a0:	b08c      	sub	sp, #48	; 0x30
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076a6:	2300      	movs	r3, #0
 80076a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	431a      	orrs	r2, r3
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	431a      	orrs	r2, r3
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	4b94      	ldr	r3, [pc, #592]	; (800791c <UART_SetConfig+0x280>)
 80076cc:	4013      	ands	r3, r2
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	6812      	ldr	r2, [r2, #0]
 80076d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076d4:	430b      	orrs	r3, r1
 80076d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	68da      	ldr	r2, [r3, #12]
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a89      	ldr	r2, [pc, #548]	; (8007920 <UART_SetConfig+0x284>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d004      	beq.n	8007708 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007704:	4313      	orrs	r3, r2
 8007706:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007712:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	6812      	ldr	r2, [r2, #0]
 800771a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800771c:	430b      	orrs	r3, r1
 800771e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	f023 010f 	bic.w	r1, r3, #15
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a7a      	ldr	r2, [pc, #488]	; (8007924 <UART_SetConfig+0x288>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d127      	bne.n	8007790 <UART_SetConfig+0xf4>
 8007740:	2003      	movs	r0, #3
 8007742:	f7ff fb6c 	bl	8006e1e <LL_RCC_GetUSARTClockSource>
 8007746:	4603      	mov	r3, r0
 8007748:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800774c:	2b03      	cmp	r3, #3
 800774e:	d81b      	bhi.n	8007788 <UART_SetConfig+0xec>
 8007750:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <UART_SetConfig+0xbc>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	08007769 	.word	0x08007769
 800775c:	08007779 	.word	0x08007779
 8007760:	08007771 	.word	0x08007771
 8007764:	08007781 	.word	0x08007781
 8007768:	2301      	movs	r3, #1
 800776a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800776e:	e080      	b.n	8007872 <UART_SetConfig+0x1d6>
 8007770:	2302      	movs	r3, #2
 8007772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007776:	e07c      	b.n	8007872 <UART_SetConfig+0x1d6>
 8007778:	2304      	movs	r3, #4
 800777a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800777e:	e078      	b.n	8007872 <UART_SetConfig+0x1d6>
 8007780:	2308      	movs	r3, #8
 8007782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007786:	e074      	b.n	8007872 <UART_SetConfig+0x1d6>
 8007788:	2310      	movs	r3, #16
 800778a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800778e:	e070      	b.n	8007872 <UART_SetConfig+0x1d6>
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a64      	ldr	r2, [pc, #400]	; (8007928 <UART_SetConfig+0x28c>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d138      	bne.n	800780c <UART_SetConfig+0x170>
 800779a:	200c      	movs	r0, #12
 800779c:	f7ff fb3f 	bl	8006e1e <LL_RCC_GetUSARTClockSource>
 80077a0:	4603      	mov	r3, r0
 80077a2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80077a6:	2b0c      	cmp	r3, #12
 80077a8:	d82c      	bhi.n	8007804 <UART_SetConfig+0x168>
 80077aa:	a201      	add	r2, pc, #4	; (adr r2, 80077b0 <UART_SetConfig+0x114>)
 80077ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b0:	080077e5 	.word	0x080077e5
 80077b4:	08007805 	.word	0x08007805
 80077b8:	08007805 	.word	0x08007805
 80077bc:	08007805 	.word	0x08007805
 80077c0:	080077f5 	.word	0x080077f5
 80077c4:	08007805 	.word	0x08007805
 80077c8:	08007805 	.word	0x08007805
 80077cc:	08007805 	.word	0x08007805
 80077d0:	080077ed 	.word	0x080077ed
 80077d4:	08007805 	.word	0x08007805
 80077d8:	08007805 	.word	0x08007805
 80077dc:	08007805 	.word	0x08007805
 80077e0:	080077fd 	.word	0x080077fd
 80077e4:	2300      	movs	r3, #0
 80077e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077ea:	e042      	b.n	8007872 <UART_SetConfig+0x1d6>
 80077ec:	2302      	movs	r3, #2
 80077ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077f2:	e03e      	b.n	8007872 <UART_SetConfig+0x1d6>
 80077f4:	2304      	movs	r3, #4
 80077f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80077fa:	e03a      	b.n	8007872 <UART_SetConfig+0x1d6>
 80077fc:	2308      	movs	r3, #8
 80077fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007802:	e036      	b.n	8007872 <UART_SetConfig+0x1d6>
 8007804:	2310      	movs	r3, #16
 8007806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800780a:	e032      	b.n	8007872 <UART_SetConfig+0x1d6>
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a43      	ldr	r2, [pc, #268]	; (8007920 <UART_SetConfig+0x284>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d12a      	bne.n	800786c <UART_SetConfig+0x1d0>
 8007816:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800781a:	f7ff fb12 	bl	8006e42 <LL_RCC_GetLPUARTClockSource>
 800781e:	4603      	mov	r3, r0
 8007820:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007824:	d01a      	beq.n	800785c <UART_SetConfig+0x1c0>
 8007826:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800782a:	d81b      	bhi.n	8007864 <UART_SetConfig+0x1c8>
 800782c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007830:	d00c      	beq.n	800784c <UART_SetConfig+0x1b0>
 8007832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007836:	d815      	bhi.n	8007864 <UART_SetConfig+0x1c8>
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <UART_SetConfig+0x1a8>
 800783c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007840:	d008      	beq.n	8007854 <UART_SetConfig+0x1b8>
 8007842:	e00f      	b.n	8007864 <UART_SetConfig+0x1c8>
 8007844:	2300      	movs	r3, #0
 8007846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800784a:	e012      	b.n	8007872 <UART_SetConfig+0x1d6>
 800784c:	2302      	movs	r3, #2
 800784e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007852:	e00e      	b.n	8007872 <UART_SetConfig+0x1d6>
 8007854:	2304      	movs	r3, #4
 8007856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800785a:	e00a      	b.n	8007872 <UART_SetConfig+0x1d6>
 800785c:	2308      	movs	r3, #8
 800785e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007862:	e006      	b.n	8007872 <UART_SetConfig+0x1d6>
 8007864:	2310      	movs	r3, #16
 8007866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800786a:	e002      	b.n	8007872 <UART_SetConfig+0x1d6>
 800786c:	2310      	movs	r3, #16
 800786e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a2a      	ldr	r2, [pc, #168]	; (8007920 <UART_SetConfig+0x284>)
 8007878:	4293      	cmp	r3, r2
 800787a:	f040 80a4 	bne.w	80079c6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800787e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007882:	2b08      	cmp	r3, #8
 8007884:	d823      	bhi.n	80078ce <UART_SetConfig+0x232>
 8007886:	a201      	add	r2, pc, #4	; (adr r2, 800788c <UART_SetConfig+0x1f0>)
 8007888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788c:	080078b1 	.word	0x080078b1
 8007890:	080078cf 	.word	0x080078cf
 8007894:	080078b9 	.word	0x080078b9
 8007898:	080078cf 	.word	0x080078cf
 800789c:	080078bf 	.word	0x080078bf
 80078a0:	080078cf 	.word	0x080078cf
 80078a4:	080078cf 	.word	0x080078cf
 80078a8:	080078cf 	.word	0x080078cf
 80078ac:	080078c7 	.word	0x080078c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078b0:	f7fe f858 	bl	8005964 <HAL_RCC_GetPCLK1Freq>
 80078b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078b6:	e010      	b.n	80078da <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078b8:	4b1c      	ldr	r3, [pc, #112]	; (800792c <UART_SetConfig+0x290>)
 80078ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078bc:	e00d      	b.n	80078da <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078be:	f7fd ff9d 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 80078c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80078c4:	e009      	b.n	80078da <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80078cc:	e005      	b.n	80078da <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80078ce:	2300      	movs	r3, #0
 80078d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80078d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 8137 	beq.w	8007b50 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e6:	4a12      	ldr	r2, [pc, #72]	; (8007930 <UART_SetConfig+0x294>)
 80078e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078ec:	461a      	mov	r2, r3
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80078f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	4613      	mov	r3, r2
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	4413      	add	r3, r2
 8007900:	69ba      	ldr	r2, [r7, #24]
 8007902:	429a      	cmp	r2, r3
 8007904:	d305      	bcc.n	8007912 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	429a      	cmp	r2, r3
 8007910:	d910      	bls.n	8007934 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007918:	e11a      	b.n	8007b50 <UART_SetConfig+0x4b4>
 800791a:	bf00      	nop
 800791c:	cfff69f3 	.word	0xcfff69f3
 8007920:	40008000 	.word	0x40008000
 8007924:	40013800 	.word	0x40013800
 8007928:	40004400 	.word	0x40004400
 800792c:	00f42400 	.word	0x00f42400
 8007930:	0800b2e8 	.word	0x0800b2e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	2200      	movs	r2, #0
 8007938:	60bb      	str	r3, [r7, #8]
 800793a:	60fa      	str	r2, [r7, #12]
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	4a8e      	ldr	r2, [pc, #568]	; (8007b7c <UART_SetConfig+0x4e0>)
 8007942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007946:	b29b      	uxth	r3, r3
 8007948:	2200      	movs	r2, #0
 800794a:	603b      	str	r3, [r7, #0]
 800794c:	607a      	str	r2, [r7, #4]
 800794e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007952:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007956:	f7f8 fc6b 	bl	8000230 <__aeabi_uldivmod>
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	4610      	mov	r0, r2
 8007960:	4619      	mov	r1, r3
 8007962:	f04f 0200 	mov.w	r2, #0
 8007966:	f04f 0300 	mov.w	r3, #0
 800796a:	020b      	lsls	r3, r1, #8
 800796c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007970:	0202      	lsls	r2, r0, #8
 8007972:	6979      	ldr	r1, [r7, #20]
 8007974:	6849      	ldr	r1, [r1, #4]
 8007976:	0849      	lsrs	r1, r1, #1
 8007978:	2000      	movs	r0, #0
 800797a:	460c      	mov	r4, r1
 800797c:	4605      	mov	r5, r0
 800797e:	eb12 0804 	adds.w	r8, r2, r4
 8007982:	eb43 0905 	adc.w	r9, r3, r5
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	469a      	mov	sl, r3
 800798e:	4693      	mov	fp, r2
 8007990:	4652      	mov	r2, sl
 8007992:	465b      	mov	r3, fp
 8007994:	4640      	mov	r0, r8
 8007996:	4649      	mov	r1, r9
 8007998:	f7f8 fc4a 	bl	8000230 <__aeabi_uldivmod>
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4613      	mov	r3, r2
 80079a2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079aa:	d308      	bcc.n	80079be <UART_SetConfig+0x322>
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079b2:	d204      	bcs.n	80079be <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6a3a      	ldr	r2, [r7, #32]
 80079ba:	60da      	str	r2, [r3, #12]
 80079bc:	e0c8      	b.n	8007b50 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80079c4:	e0c4      	b.n	8007b50 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079ce:	d167      	bne.n	8007aa0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80079d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80079d4:	2b08      	cmp	r3, #8
 80079d6:	d828      	bhi.n	8007a2a <UART_SetConfig+0x38e>
 80079d8:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <UART_SetConfig+0x344>)
 80079da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079de:	bf00      	nop
 80079e0:	08007a05 	.word	0x08007a05
 80079e4:	08007a0d 	.word	0x08007a0d
 80079e8:	08007a15 	.word	0x08007a15
 80079ec:	08007a2b 	.word	0x08007a2b
 80079f0:	08007a1b 	.word	0x08007a1b
 80079f4:	08007a2b 	.word	0x08007a2b
 80079f8:	08007a2b 	.word	0x08007a2b
 80079fc:	08007a2b 	.word	0x08007a2b
 8007a00:	08007a23 	.word	0x08007a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a04:	f7fd ffae 	bl	8005964 <HAL_RCC_GetPCLK1Freq>
 8007a08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a0a:	e014      	b.n	8007a36 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a0c:	f7fd ffbc 	bl	8005988 <HAL_RCC_GetPCLK2Freq>
 8007a10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a12:	e010      	b.n	8007a36 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a14:	4b5a      	ldr	r3, [pc, #360]	; (8007b80 <UART_SetConfig+0x4e4>)
 8007a16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a18:	e00d      	b.n	8007a36 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a1a:	f7fd feef 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 8007a1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007a20:	e009      	b.n	8007a36 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007a28:	e005      	b.n	8007a36 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007a34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f000 8089 	beq.w	8007b50 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a42:	4a4e      	ldr	r2, [pc, #312]	; (8007b7c <UART_SetConfig+0x4e0>)
 8007a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a50:	005a      	lsls	r2, r3, #1
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	085b      	lsrs	r3, r3, #1
 8007a58:	441a      	add	r2, r3
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	2b0f      	cmp	r3, #15
 8007a68:	d916      	bls.n	8007a98 <UART_SetConfig+0x3fc>
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a70:	d212      	bcs.n	8007a98 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	f023 030f 	bic.w	r3, r3, #15
 8007a7a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	085b      	lsrs	r3, r3, #1
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	f003 0307 	and.w	r3, r3, #7
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	8bfb      	ldrh	r3, [r7, #30]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	8bfa      	ldrh	r2, [r7, #30]
 8007a94:	60da      	str	r2, [r3, #12]
 8007a96:	e05b      	b.n	8007b50 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007a9e:	e057      	b.n	8007b50 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007aa0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007aa4:	2b08      	cmp	r3, #8
 8007aa6:	d828      	bhi.n	8007afa <UART_SetConfig+0x45e>
 8007aa8:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <UART_SetConfig+0x414>)
 8007aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aae:	bf00      	nop
 8007ab0:	08007ad5 	.word	0x08007ad5
 8007ab4:	08007add 	.word	0x08007add
 8007ab8:	08007ae5 	.word	0x08007ae5
 8007abc:	08007afb 	.word	0x08007afb
 8007ac0:	08007aeb 	.word	0x08007aeb
 8007ac4:	08007afb 	.word	0x08007afb
 8007ac8:	08007afb 	.word	0x08007afb
 8007acc:	08007afb 	.word	0x08007afb
 8007ad0:	08007af3 	.word	0x08007af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ad4:	f7fd ff46 	bl	8005964 <HAL_RCC_GetPCLK1Freq>
 8007ad8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ada:	e014      	b.n	8007b06 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007adc:	f7fd ff54 	bl	8005988 <HAL_RCC_GetPCLK2Freq>
 8007ae0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ae2:	e010      	b.n	8007b06 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ae4:	4b26      	ldr	r3, [pc, #152]	; (8007b80 <UART_SetConfig+0x4e4>)
 8007ae6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ae8:	e00d      	b.n	8007b06 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aea:	f7fd fe87 	bl	80057fc <HAL_RCC_GetSysClockFreq>
 8007aee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007af0:	e009      	b.n	8007b06 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007af8:	e005      	b.n	8007b06 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007b04:	bf00      	nop
    }

    if (pclk != 0U)
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d021      	beq.n	8007b50 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b10:	4a1a      	ldr	r2, [pc, #104]	; (8007b7c <UART_SetConfig+0x4e0>)
 8007b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b16:	461a      	mov	r2, r3
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	085b      	lsrs	r3, r3, #1
 8007b24:	441a      	add	r2, r3
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b30:	6a3b      	ldr	r3, [r7, #32]
 8007b32:	2b0f      	cmp	r3, #15
 8007b34:	d909      	bls.n	8007b4a <UART_SetConfig+0x4ae>
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b3c:	d205      	bcs.n	8007b4a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	60da      	str	r2, [r3, #12]
 8007b48:	e002      	b.n	8007b50 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	2200      	movs	r2, #0
 8007b64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007b6c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3730      	adds	r7, #48	; 0x30
 8007b74:	46bd      	mov	sp, r7
 8007b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b7a:	bf00      	nop
 8007b7c:	0800b2e8 	.word	0x0800b2e8
 8007b80:	00f42400 	.word	0x00f42400

08007b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00a      	beq.n	8007bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00a      	beq.n	8007bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd4:	f003 0304 	and.w	r3, r3, #4
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d00a      	beq.n	8007bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf6:	f003 0308 	and.w	r3, r3, #8
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00a      	beq.n	8007c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	430a      	orrs	r2, r1
 8007c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c18:	f003 0310 	and.w	r3, r3, #16
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00a      	beq.n	8007c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00a      	beq.n	8007c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	430a      	orrs	r2, r1
 8007c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d01a      	beq.n	8007c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	430a      	orrs	r2, r1
 8007c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c82:	d10a      	bne.n	8007c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	605a      	str	r2, [r3, #4]
  }
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bc80      	pop	{r7}
 8007cc4:	4770      	bx	lr

08007cc6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b086      	sub	sp, #24
 8007cca:	af02      	add	r7, sp, #8
 8007ccc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cd6:	f7fa ffc7 	bl	8002c68 <HAL_GetTick>
 8007cda:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0308 	and.w	r3, r3, #8
 8007ce6:	2b08      	cmp	r3, #8
 8007ce8:	d10e      	bne.n	8007d08 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f832 	bl	8007d62 <UART_WaitOnFlagUntilTimeout>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e028      	b.n	8007d5a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 0304 	and.w	r3, r3, #4
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d10e      	bne.n	8007d34 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f81c 	bl	8007d62 <UART_WaitOnFlagUntilTimeout>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d001      	beq.n	8007d34 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e012      	b.n	8007d5a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b09c      	sub	sp, #112	; 0x70
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	60f8      	str	r0, [r7, #12]
 8007d6a:	60b9      	str	r1, [r7, #8]
 8007d6c:	603b      	str	r3, [r7, #0]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d72:	e0a9      	b.n	8007ec8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7a:	f000 80a5 	beq.w	8007ec8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d7e:	f7fa ff73 	bl	8002c68 <HAL_GetTick>
 8007d82:	4602      	mov	r2, r0
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d302      	bcc.n	8007d94 <UART_WaitOnFlagUntilTimeout+0x32>
 8007d8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d140      	bne.n	8007e16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007da4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007da8:	667b      	str	r3, [r7, #100]	; 0x64
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	461a      	mov	r2, r3
 8007db0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007db2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007db4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007db8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007dba:	e841 2300 	strex	r3, r2, [r1]
 8007dbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e6      	bne.n	8007d94 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3308      	adds	r3, #8
 8007dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd8:	f023 0301 	bic.w	r3, r3, #1
 8007ddc:	663b      	str	r3, [r7, #96]	; 0x60
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3308      	adds	r3, #8
 8007de4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007de6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007de8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007dec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dee:	e841 2300 	strex	r3, r2, [r1]
 8007df2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1e5      	bne.n	8007dc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2220      	movs	r2, #32
 8007dfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e069      	b.n	8007eea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0304 	and.w	r3, r3, #4
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d051      	beq.n	8007ec8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e32:	d149      	bne.n	8007ec8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e3c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e46:	e853 3f00 	ldrex	r3, [r3]
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e64:	e841 2300 	strex	r3, r2, [r1]
 8007e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1e6      	bne.n	8007e3e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3308      	adds	r3, #8
 8007e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	e853 3f00 	ldrex	r3, [r3]
 8007e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f023 0301 	bic.w	r3, r3, #1
 8007e86:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e90:	623a      	str	r2, [r7, #32]
 8007e92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e94:	69f9      	ldr	r1, [r7, #28]
 8007e96:	6a3a      	ldr	r2, [r7, #32]
 8007e98:	e841 2300 	strex	r3, r2, [r1]
 8007e9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1e5      	bne.n	8007e70 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2220      	movs	r2, #32
 8007eb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	e010      	b.n	8007eea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	69da      	ldr	r2, [r3, #28]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	bf0c      	ite	eq
 8007ed8:	2301      	moveq	r3, #1
 8007eda:	2300      	movne	r3, #0
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	461a      	mov	r2, r3
 8007ee0:	79fb      	ldrb	r3, [r7, #7]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	f43f af46 	beq.w	8007d74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3770      	adds	r7, #112	; 0x70
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
	...

08007ef4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b096      	sub	sp, #88	; 0x58
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	4613      	mov	r3, r2
 8007f00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	88fa      	ldrh	r2, [r7, #6]
 8007f0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2222      	movs	r2, #34	; 0x22
 8007f1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d02d      	beq.n	8007f86 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f30:	4a40      	ldr	r2, [pc, #256]	; (8008034 <UART_Start_Receive_DMA+0x140>)
 8007f32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f3a:	4a3f      	ldr	r2, [pc, #252]	; (8008038 <UART_Start_Receive_DMA+0x144>)
 8007f3c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f44:	4a3d      	ldr	r2, [pc, #244]	; (800803c <UART_Start_Receive_DMA+0x148>)
 8007f46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f4e:	2200      	movs	r2, #0
 8007f50:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3324      	adds	r3, #36	; 0x24
 8007f5e:	4619      	mov	r1, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f64:	461a      	mov	r2, r3
 8007f66:	88fb      	ldrh	r3, [r7, #6]
 8007f68:	f7fc f830 	bl	8003fcc <HAL_DMA_Start_IT>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d009      	beq.n	8007f86 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2210      	movs	r2, #16
 8007f76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e051      	b.n	800802a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d018      	beq.n	8007fc0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f96:	e853 3f00 	ldrex	r3, [r3]
 8007f9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fa2:	657b      	str	r3, [r7, #84]	; 0x54
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fac:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fae:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fb4:	e841 2300 	strex	r3, r2, [r1]
 8007fb8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1e6      	bne.n	8007f8e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3308      	adds	r3, #8
 8007fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	f043 0301 	orr.w	r3, r3, #1
 8007fd6:	653b      	str	r3, [r7, #80]	; 0x50
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3308      	adds	r3, #8
 8007fde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fe0:	637a      	str	r2, [r7, #52]	; 0x34
 8007fe2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e5      	bne.n	8007fc0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	e853 3f00 	ldrex	r3, [r3]
 8008002:	613b      	str	r3, [r7, #16]
   return(result);
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800800a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3308      	adds	r3, #8
 8008012:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008014:	623a      	str	r2, [r7, #32]
 8008016:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	69f9      	ldr	r1, [r7, #28]
 800801a:	6a3a      	ldr	r2, [r7, #32]
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	61bb      	str	r3, [r7, #24]
   return(result);
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e5      	bne.n	8007ff4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3758      	adds	r7, #88	; 0x58
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	0800818b 	.word	0x0800818b
 8008038:	080082b7 	.word	0x080082b7
 800803c:	080082f5 	.word	0x080082f5

08008040 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008040:	b480      	push	{r7}
 8008042:	b08f      	sub	sp, #60	; 0x3c
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	61fb      	str	r3, [r7, #28]
   return(result);
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800805c:	637b      	str	r3, [r7, #52]	; 0x34
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008068:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800806c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800806e:	e841 2300 	strex	r3, r2, [r1]
 8008072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1e6      	bne.n	8008048 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3308      	adds	r3, #8
 8008080:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	e853 3f00 	ldrex	r3, [r3]
 8008088:	60bb      	str	r3, [r7, #8]
   return(result);
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008090:	633b      	str	r3, [r7, #48]	; 0x30
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3308      	adds	r3, #8
 8008098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800809a:	61ba      	str	r2, [r7, #24]
 800809c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809e:	6979      	ldr	r1, [r7, #20]
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	e841 2300 	strex	r3, r2, [r1]
 80080a6:	613b      	str	r3, [r7, #16]
   return(result);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e5      	bne.n	800807a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2220      	movs	r2, #32
 80080b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80080b6:	bf00      	nop
 80080b8:	373c      	adds	r7, #60	; 0x3c
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bc80      	pop	{r7}
 80080be:	4770      	bx	lr

080080c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b095      	sub	sp, #84	; 0x54
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d0:	e853 3f00 	ldrex	r3, [r3]
 80080d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	461a      	mov	r2, r3
 80080e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e6:	643b      	str	r3, [r7, #64]	; 0x40
 80080e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080ee:	e841 2300 	strex	r3, r2, [r1]
 80080f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1e6      	bne.n	80080c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3308      	adds	r3, #8
 8008100:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	e853 3f00 	ldrex	r3, [r3]
 8008108:	61fb      	str	r3, [r7, #28]
   return(result);
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008110:	f023 0301 	bic.w	r3, r3, #1
 8008114:	64bb      	str	r3, [r7, #72]	; 0x48
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3308      	adds	r3, #8
 800811c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800811e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008120:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008122:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008126:	e841 2300 	strex	r3, r2, [r1]
 800812a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1e3      	bne.n	80080fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008136:	2b01      	cmp	r3, #1
 8008138:	d118      	bne.n	800816c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	e853 3f00 	ldrex	r3, [r3]
 8008146:	60bb      	str	r3, [r7, #8]
   return(result);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f023 0310 	bic.w	r3, r3, #16
 800814e:	647b      	str	r3, [r7, #68]	; 0x44
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	461a      	mov	r2, r3
 8008156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008158:	61bb      	str	r3, [r7, #24]
 800815a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815c:	6979      	ldr	r1, [r7, #20]
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	e841 2300 	strex	r3, r2, [r1]
 8008164:	613b      	str	r3, [r7, #16]
   return(result);
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1e6      	bne.n	800813a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2220      	movs	r2, #32
 8008170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008180:	bf00      	nop
 8008182:	3754      	adds	r7, #84	; 0x54
 8008184:	46bd      	mov	sp, r7
 8008186:	bc80      	pop	{r7}
 8008188:	4770      	bx	lr

0800818a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b09c      	sub	sp, #112	; 0x70
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008196:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 0320 	and.w	r3, r3, #32
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d171      	bne.n	800828a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80081a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a8:	2200      	movs	r2, #0
 80081aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b6:	e853 3f00 	ldrex	r3, [r3]
 80081ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80081bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80081c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	461a      	mov	r2, r3
 80081ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80081ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081d4:	e841 2300 	strex	r3, r2, [r1]
 80081d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1e6      	bne.n	80081ae <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3308      	adds	r3, #8
 80081e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ea:	e853 3f00 	ldrex	r3, [r3]
 80081ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f2:	f023 0301 	bic.w	r3, r3, #1
 80081f6:	667b      	str	r3, [r7, #100]	; 0x64
 80081f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3308      	adds	r3, #8
 80081fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008200:	647a      	str	r2, [r7, #68]	; 0x44
 8008202:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008204:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008208:	e841 2300 	strex	r3, r2, [r1]
 800820c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800820e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1e5      	bne.n	80081e0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3308      	adds	r3, #8
 800821a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	623b      	str	r3, [r7, #32]
   return(result);
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800822a:	663b      	str	r3, [r7, #96]	; 0x60
 800822c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3308      	adds	r3, #8
 8008232:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008234:	633a      	str	r2, [r7, #48]	; 0x30
 8008236:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008238:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800823a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800823c:	e841 2300 	strex	r3, r2, [r1]
 8008240:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e5      	bne.n	8008214 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800824a:	2220      	movs	r2, #32
 800824c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008254:	2b01      	cmp	r3, #1
 8008256:	d118      	bne.n	800828a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	e853 3f00 	ldrex	r3, [r3]
 8008264:	60fb      	str	r3, [r7, #12]
   return(result);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f023 0310 	bic.w	r3, r3, #16
 800826c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800826e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	461a      	mov	r2, r3
 8008274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008276:	61fb      	str	r3, [r7, #28]
 8008278:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827a:	69b9      	ldr	r1, [r7, #24]
 800827c:	69fa      	ldr	r2, [r7, #28]
 800827e:	e841 2300 	strex	r3, r2, [r1]
 8008282:	617b      	str	r3, [r7, #20]
   return(result);
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1e6      	bne.n	8008258 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800828a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800828c:	2200      	movs	r2, #0
 800828e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008294:	2b01      	cmp	r3, #1
 8008296:	d107      	bne.n	80082a8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800829a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800829e:	4619      	mov	r1, r3
 80082a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80082a2:	f7f9 fb0b 	bl	80018bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80082a6:	e002      	b.n	80082ae <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80082a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80082aa:	f7ff f9dc 	bl	8007666 <HAL_UART_RxCpltCallback>
}
 80082ae:	bf00      	nop
 80082b0:	3770      	adds	r7, #112	; 0x70
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2201      	movs	r2, #1
 80082c8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d109      	bne.n	80082e6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082d8:	085b      	lsrs	r3, r3, #1
 80082da:	b29b      	uxth	r3, r3
 80082dc:	4619      	mov	r1, r3
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f7f9 faec 	bl	80018bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80082e4:	e002      	b.n	80082ec <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f7ff f9c6 	bl	8007678 <HAL_UART_RxHalfCpltCallback>
}
 80082ec:	bf00      	nop
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008300:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008308:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008310:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800831c:	2b80      	cmp	r3, #128	; 0x80
 800831e:	d109      	bne.n	8008334 <UART_DMAError+0x40>
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	2b21      	cmp	r3, #33	; 0x21
 8008324:	d106      	bne.n	8008334 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2200      	movs	r2, #0
 800832a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800832e:	6978      	ldr	r0, [r7, #20]
 8008330:	f7ff fe86 	bl	8008040 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833e:	2b40      	cmp	r3, #64	; 0x40
 8008340:	d109      	bne.n	8008356 <UART_DMAError+0x62>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2b22      	cmp	r3, #34	; 0x22
 8008346:	d106      	bne.n	8008356 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	2200      	movs	r2, #0
 800834c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008350:	6978      	ldr	r0, [r7, #20]
 8008352:	f7ff feb5 	bl	80080c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800835c:	f043 0210 	orr.w	r2, r3, #16
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008366:	6978      	ldr	r0, [r7, #20]
 8008368:	f7ff f98f 	bl	800768a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800836c:	bf00      	nop
 800836e:	3718      	adds	r7, #24
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008380:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2200      	movs	r2, #0
 800838e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f7ff f979 	bl	800768a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008398:	bf00      	nop
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	e853 3f00 	ldrex	r3, [r3]
 80083b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083bc:	61fb      	str	r3, [r7, #28]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	61bb      	str	r3, [r7, #24]
 80083c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	6979      	ldr	r1, [r7, #20]
 80083cc:	69ba      	ldr	r2, [r7, #24]
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	613b      	str	r3, [r7, #16]
   return(result);
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e6      	bne.n	80083a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2220      	movs	r2, #32
 80083de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff f933 	bl	8007654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ee:	bf00      	nop
 80083f0:	3720      	adds	r7, #32
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b083      	sub	sp, #12
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80083fe:	bf00      	nop
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	bc80      	pop	{r7}
 8008406:	4770      	bx	lr

08008408 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	bc80      	pop	{r7}
 8008418:	4770      	bx	lr

0800841a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008422:	bf00      	nop
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	bc80      	pop	{r7}
 800842a:	4770      	bx	lr

0800842c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800843a:	2b01      	cmp	r3, #1
 800843c:	d101      	bne.n	8008442 <HAL_UARTEx_DisableFifoMode+0x16>
 800843e:	2302      	movs	r3, #2
 8008440:	e027      	b.n	8008492 <HAL_UARTEx_DisableFifoMode+0x66>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2224      	movs	r2, #36	; 0x24
 800844e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 0201 	bic.w	r2, r2, #1
 8008468:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008470:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2220      	movs	r2, #32
 8008484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	bc80      	pop	{r7}
 800849a:	4770      	bx	lr

0800849c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d101      	bne.n	80084b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084b0:	2302      	movs	r3, #2
 80084b2:	e02d      	b.n	8008510 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2224      	movs	r2, #36	; 0x24
 80084c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f022 0201 	bic.w	r2, r2, #1
 80084da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	430a      	orrs	r2, r1
 80084ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f8a3 	bl	800863c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2220      	movs	r2, #32
 8008502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008528:	2b01      	cmp	r3, #1
 800852a:	d101      	bne.n	8008530 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800852c:	2302      	movs	r3, #2
 800852e:	e02d      	b.n	800858c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2224      	movs	r2, #36	; 0x24
 800853c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f022 0201 	bic.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	430a      	orrs	r2, r1
 800856a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f865 	bl	800863c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2220      	movs	r2, #32
 800857e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b08c      	sub	sp, #48	; 0x30
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085a8:	2b20      	cmp	r3, #32
 80085aa:	d142      	bne.n	8008632 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80085b2:	88fb      	ldrh	r3, [r7, #6]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e03b      	b.n	8008634 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2201      	movs	r2, #1
 80085c0:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80085c8:	88fb      	ldrh	r3, [r7, #6]
 80085ca:	461a      	mov	r2, r3
 80085cc:	68b9      	ldr	r1, [r7, #8]
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f7ff fc90 	bl	8007ef4 <UART_Start_Receive_DMA>
 80085d4:	4603      	mov	r3, r0
 80085d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80085da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d124      	bne.n	800862c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d11d      	bne.n	8008626 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2210      	movs	r2, #16
 80085f0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	e853 3f00 	ldrex	r3, [r3]
 80085fe:	617b      	str	r3, [r7, #20]
   return(result);
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	f043 0310 	orr.w	r3, r3, #16
 8008606:	62bb      	str	r3, [r7, #40]	; 0x28
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	461a      	mov	r2, r3
 800860e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008610:	627b      	str	r3, [r7, #36]	; 0x24
 8008612:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008614:	6a39      	ldr	r1, [r7, #32]
 8008616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008618:	e841 2300 	strex	r3, r2, [r1]
 800861c:	61fb      	str	r3, [r7, #28]
   return(result);
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1e6      	bne.n	80085f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8008624:	e002      	b.n	800862c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800862c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008630:	e000      	b.n	8008634 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008632:	2302      	movs	r3, #2
  }
}
 8008634:	4618      	mov	r0, r3
 8008636:	3730      	adds	r7, #48	; 0x30
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008648:	2b00      	cmp	r3, #0
 800864a:	d108      	bne.n	800865e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800865c:	e031      	b.n	80086c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800865e:	2308      	movs	r3, #8
 8008660:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008662:	2308      	movs	r3, #8
 8008664:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	0e5b      	lsrs	r3, r3, #25
 800866e:	b2db      	uxtb	r3, r3
 8008670:	f003 0307 	and.w	r3, r3, #7
 8008674:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	0f5b      	lsrs	r3, r3, #29
 800867e:	b2db      	uxtb	r3, r3
 8008680:	f003 0307 	and.w	r3, r3, #7
 8008684:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	7b3a      	ldrb	r2, [r7, #12]
 800868a:	4910      	ldr	r1, [pc, #64]	; (80086cc <UARTEx_SetNbDataToProcess+0x90>)
 800868c:	5c8a      	ldrb	r2, [r1, r2]
 800868e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008692:	7b3a      	ldrb	r2, [r7, #12]
 8008694:	490e      	ldr	r1, [pc, #56]	; (80086d0 <UARTEx_SetNbDataToProcess+0x94>)
 8008696:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008698:	fb93 f3f2 	sdiv	r3, r3, r2
 800869c:	b29a      	uxth	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
 80086a6:	7b7a      	ldrb	r2, [r7, #13]
 80086a8:	4908      	ldr	r1, [pc, #32]	; (80086cc <UARTEx_SetNbDataToProcess+0x90>)
 80086aa:	5c8a      	ldrb	r2, [r1, r2]
 80086ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80086b0:	7b7a      	ldrb	r2, [r7, #13]
 80086b2:	4907      	ldr	r1, [pc, #28]	; (80086d0 <UARTEx_SetNbDataToProcess+0x94>)
 80086b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80086c2:	bf00      	nop
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bc80      	pop	{r7}
 80086ca:	4770      	bx	lr
 80086cc:	0800b300 	.word	0x0800b300
 80086d0:	0800b308 	.word	0x0800b308

080086d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80086e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80086e6:	2b84      	cmp	r3, #132	; 0x84
 80086e8:	d005      	beq.n	80086f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80086ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	4413      	add	r3, r2
 80086f2:	3303      	adds	r3, #3
 80086f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80086f6:	68fb      	ldr	r3, [r7, #12]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bc80      	pop	{r7}
 8008700:	4770      	bx	lr

08008702 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008706:	f000 faf1 	bl	8008cec <vTaskStartScheduler>
  
  return osOK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	bd80      	pop	{r7, pc}

08008710 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008712:	b089      	sub	sp, #36	; 0x24
 8008714:	af04      	add	r7, sp, #16
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d020      	beq.n	8008764 <osThreadCreate+0x54>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d01c      	beq.n	8008764 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685c      	ldr	r4, [r3, #4]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681d      	ldr	r5, [r3, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	691e      	ldr	r6, [r3, #16]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800873c:	4618      	mov	r0, r3
 800873e:	f7ff ffc9 	bl	80086d4 <makeFreeRtosPriority>
 8008742:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800874c:	9202      	str	r2, [sp, #8]
 800874e:	9301      	str	r3, [sp, #4]
 8008750:	9100      	str	r1, [sp, #0]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	4632      	mov	r2, r6
 8008756:	4629      	mov	r1, r5
 8008758:	4620      	mov	r0, r4
 800875a:	f000 f8e8 	bl	800892e <xTaskCreateStatic>
 800875e:	4603      	mov	r3, r0
 8008760:	60fb      	str	r3, [r7, #12]
 8008762:	e01c      	b.n	800879e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685c      	ldr	r4, [r3, #4]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008770:	b29e      	uxth	r6, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff ffab 	bl	80086d4 <makeFreeRtosPriority>
 800877e:	4602      	mov	r2, r0
 8008780:	f107 030c 	add.w	r3, r7, #12
 8008784:	9301      	str	r3, [sp, #4]
 8008786:	9200      	str	r2, [sp, #0]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	4632      	mov	r2, r6
 800878c:	4629      	mov	r1, r5
 800878e:	4620      	mov	r0, r4
 8008790:	f000 f92a 	bl	80089e8 <xTaskCreate>
 8008794:	4603      	mov	r3, r0
 8008796:	2b01      	cmp	r3, #1
 8008798:	d001      	beq.n	800879e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800879a:	2300      	movs	r3, #0
 800879c:	e000      	b.n	80087a0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800879e:	68fb      	ldr	r3, [r7, #12]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080087a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <osDelay+0x16>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	e000      	b.n	80087c0 <osDelay+0x18>
 80087be:	2301      	movs	r3, #1
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 fa5f 	bl	8008c84 <vTaskDelay>
  
  return osOK;
 80087c6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3710      	adds	r7, #16
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f103 0208 	add.w	r2, r3, #8
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f04f 32ff 	mov.w	r2, #4294967295
 80087e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f103 0208 	add.w	r2, r3, #8
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f103 0208 	add.w	r2, r3, #8
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	bc80      	pop	{r7}
 800880c:	4770      	bx	lr

0800880e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800880e:	b480      	push	{r7}
 8008810:	b083      	sub	sp, #12
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	bc80      	pop	{r7}
 8008824:	4770      	bx	lr

08008826 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008826:	b480      	push	{r7}
 8008828:	b085      	sub	sp, #20
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	689a      	ldr	r2, [r3, #8]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	1c5a      	adds	r2, r3, #1
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	601a      	str	r2, [r3, #0]
}
 8008862:	bf00      	nop
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	bc80      	pop	{r7}
 800886a:	4770      	bx	lr

0800886c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008882:	d103      	bne.n	800888c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	60fb      	str	r3, [r7, #12]
 800888a:	e00c      	b.n	80088a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	3308      	adds	r3, #8
 8008890:	60fb      	str	r3, [r7, #12]
 8008892:	e002      	b.n	800889a <vListInsert+0x2e>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	60fb      	str	r3, [r7, #12]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68ba      	ldr	r2, [r7, #8]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d2f6      	bcs.n	8008894 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	685a      	ldr	r2, [r3, #4]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	1c5a      	adds	r2, r3, #1
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	601a      	str	r2, [r3, #0]
}
 80088d2:	bf00      	nop
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bc80      	pop	{r7}
 80088da:	4770      	bx	lr

080088dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	6892      	ldr	r2, [r2, #8]
 80088f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	6852      	ldr	r2, [r2, #4]
 80088fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	429a      	cmp	r2, r3
 8008906:	d103      	bne.n	8008910 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689a      	ldr	r2, [r3, #8]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	1e5a      	subs	r2, r3, #1
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3714      	adds	r7, #20
 8008928:	46bd      	mov	sp, r7
 800892a:	bc80      	pop	{r7}
 800892c:	4770      	bx	lr

0800892e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800892e:	b580      	push	{r7, lr}
 8008930:	b08e      	sub	sp, #56	; 0x38
 8008932:	af04      	add	r7, sp, #16
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	607a      	str	r2, [r7, #4]
 800893a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800893c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10a      	bne.n	8008958 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008954:	bf00      	nop
 8008956:	e7fe      	b.n	8008956 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10a      	bne.n	8008974 <xTaskCreateStatic+0x46>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	61fb      	str	r3, [r7, #28]
}
 8008970:	bf00      	nop
 8008972:	e7fe      	b.n	8008972 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008974:	23b4      	movs	r3, #180	; 0xb4
 8008976:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	2bb4      	cmp	r3, #180	; 0xb4
 800897c:	d00a      	beq.n	8008994 <xTaskCreateStatic+0x66>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	61bb      	str	r3, [r7, #24]
}
 8008990:	bf00      	nop
 8008992:	e7fe      	b.n	8008992 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008994:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008998:	2b00      	cmp	r3, #0
 800899a:	d01e      	beq.n	80089da <xTaskCreateStatic+0xac>
 800899c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d01b      	beq.n	80089da <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80089a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089aa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80089b4:	2300      	movs	r3, #0
 80089b6:	9303      	str	r3, [sp, #12]
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	9302      	str	r3, [sp, #8]
 80089bc:	f107 0314 	add.w	r3, r7, #20
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	68b9      	ldr	r1, [r7, #8]
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 f851 	bl	8008a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089d4:	f000 f8ec 	bl	8008bb0 <prvAddNewTaskToReadyList>
 80089d8:	e001      	b.n	80089de <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80089da:	2300      	movs	r3, #0
 80089dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80089de:	697b      	ldr	r3, [r7, #20]
	}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3728      	adds	r7, #40	; 0x28
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08c      	sub	sp, #48	; 0x30
 80089ec:	af04      	add	r7, sp, #16
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	603b      	str	r3, [r7, #0]
 80089f4:	4613      	mov	r3, r2
 80089f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80089f8:	88fb      	ldrh	r3, [r7, #6]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 fe97 	bl	8009730 <pvPortMalloc>
 8008a02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00e      	beq.n	8008a28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a0a:	20b4      	movs	r0, #180	; 0xb4
 8008a0c:	f000 fe90 	bl	8009730 <pvPortMalloc>
 8008a10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	631a      	str	r2, [r3, #48]	; 0x30
 8008a1e:	e005      	b.n	8008a2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008a20:	6978      	ldr	r0, [r7, #20]
 8008a22:	f000 ff49 	bl	80098b8 <vPortFree>
 8008a26:	e001      	b.n	8008a2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d017      	beq.n	8008a62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008a3a:	88fa      	ldrh	r2, [r7, #6]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	9303      	str	r3, [sp, #12]
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	9302      	str	r3, [sp, #8]
 8008a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a46:	9301      	str	r3, [sp, #4]
 8008a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	68b9      	ldr	r1, [r7, #8]
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 f80f 	bl	8008a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a56:	69f8      	ldr	r0, [r7, #28]
 8008a58:	f000 f8aa 	bl	8008bb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	61bb      	str	r3, [r7, #24]
 8008a60:	e002      	b.n	8008a68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a62:	f04f 33ff 	mov.w	r3, #4294967295
 8008a66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a68:	69bb      	ldr	r3, [r7, #24]
	}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3720      	adds	r7, #32
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
	...

08008a74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b088      	sub	sp, #32
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	4413      	add	r3, r2
 8008a92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	f023 0307 	bic.w	r3, r3, #7
 8008a9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00a      	beq.n	8008abc <prvInitialiseNewTask+0x48>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	617b      	str	r3, [r7, #20]
}
 8008ab8:	bf00      	nop
 8008aba:	e7fe      	b.n	8008aba <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01f      	beq.n	8008b02 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	61fb      	str	r3, [r7, #28]
 8008ac6:	e012      	b.n	8008aee <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	4413      	add	r3, r2
 8008ace:	7819      	ldrb	r1, [r3, #0]
 8008ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	3334      	adds	r3, #52	; 0x34
 8008ad8:	460a      	mov	r2, r1
 8008ada:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d006      	beq.n	8008af6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	3301      	adds	r3, #1
 8008aec:	61fb      	str	r3, [r7, #28]
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	2b0f      	cmp	r3, #15
 8008af2:	d9e9      	bls.n	8008ac8 <prvInitialiseNewTask+0x54>
 8008af4:	e000      	b.n	8008af8 <prvInitialiseNewTask+0x84>
			{
				break;
 8008af6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b00:	e003      	b.n	8008b0a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0c:	2b06      	cmp	r3, #6
 8008b0e:	d901      	bls.n	8008b14 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008b10:	2306      	movs	r3, #6
 8008b12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b1e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	2200      	movs	r2, #0
 8008b24:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b28:	3304      	adds	r3, #4
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7ff fe6f 	bl	800880e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b32:	3318      	adds	r3, #24
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7ff fe6a 	bl	800880e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b42:	f1c3 0207 	rsb	r2, r3, #7
 8008b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b52:	2200      	movs	r2, #0
 8008b54:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	334c      	adds	r3, #76	; 0x4c
 8008b64:	2260      	movs	r2, #96	; 0x60
 8008b66:	2100      	movs	r1, #0
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f001 f906 	bl	8009d7a <memset>
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b70:	4a0c      	ldr	r2, [pc, #48]	; (8008ba4 <prvInitialiseNewTask+0x130>)
 8008b72:	651a      	str	r2, [r3, #80]	; 0x50
 8008b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b76:	4a0c      	ldr	r2, [pc, #48]	; (8008ba8 <prvInitialiseNewTask+0x134>)
 8008b78:	655a      	str	r2, [r3, #84]	; 0x54
 8008b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7c:	4a0b      	ldr	r2, [pc, #44]	; (8008bac <prvInitialiseNewTask+0x138>)
 8008b7e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	68f9      	ldr	r1, [r7, #12]
 8008b84:	69b8      	ldr	r0, [r7, #24]
 8008b86:	f000 fc1f 	bl	80093c8 <pxPortInitialiseStack>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d002      	beq.n	8008b9c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b9c:	bf00      	nop
 8008b9e:	3720      	adds	r7, #32
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	0800b330 	.word	0x0800b330
 8008ba8:	0800b350 	.word	0x0800b350
 8008bac:	0800b310 	.word	0x0800b310

08008bb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008bb8:	f000 fcf8 	bl	80095ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008bbc:	4b2a      	ldr	r3, [pc, #168]	; (8008c68 <prvAddNewTaskToReadyList+0xb8>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	4a29      	ldr	r2, [pc, #164]	; (8008c68 <prvAddNewTaskToReadyList+0xb8>)
 8008bc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008bc6:	4b29      	ldr	r3, [pc, #164]	; (8008c6c <prvAddNewTaskToReadyList+0xbc>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d109      	bne.n	8008be2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008bce:	4a27      	ldr	r2, [pc, #156]	; (8008c6c <prvAddNewTaskToReadyList+0xbc>)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008bd4:	4b24      	ldr	r3, [pc, #144]	; (8008c68 <prvAddNewTaskToReadyList+0xb8>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d110      	bne.n	8008bfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008bdc:	f000 facc 	bl	8009178 <prvInitialiseTaskLists>
 8008be0:	e00d      	b.n	8008bfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008be2:	4b23      	ldr	r3, [pc, #140]	; (8008c70 <prvAddNewTaskToReadyList+0xc0>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d109      	bne.n	8008bfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008bea:	4b20      	ldr	r3, [pc, #128]	; (8008c6c <prvAddNewTaskToReadyList+0xbc>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d802      	bhi.n	8008bfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008bf8:	4a1c      	ldr	r2, [pc, #112]	; (8008c6c <prvAddNewTaskToReadyList+0xbc>)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008bfe:	4b1d      	ldr	r3, [pc, #116]	; (8008c74 <prvAddNewTaskToReadyList+0xc4>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	3301      	adds	r3, #1
 8008c04:	4a1b      	ldr	r2, [pc, #108]	; (8008c74 <prvAddNewTaskToReadyList+0xc4>)
 8008c06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	409a      	lsls	r2, r3
 8008c10:	4b19      	ldr	r3, [pc, #100]	; (8008c78 <prvAddNewTaskToReadyList+0xc8>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4313      	orrs	r3, r2
 8008c16:	4a18      	ldr	r2, [pc, #96]	; (8008c78 <prvAddNewTaskToReadyList+0xc8>)
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4a15      	ldr	r2, [pc, #84]	; (8008c7c <prvAddNewTaskToReadyList+0xcc>)
 8008c28:	441a      	add	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	4619      	mov	r1, r3
 8008c30:	4610      	mov	r0, r2
 8008c32:	f7ff fdf8 	bl	8008826 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008c36:	f000 fce9 	bl	800960c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008c3a:	4b0d      	ldr	r3, [pc, #52]	; (8008c70 <prvAddNewTaskToReadyList+0xc0>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00e      	beq.n	8008c60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008c42:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <prvAddNewTaskToReadyList+0xbc>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d207      	bcs.n	8008c60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008c50:	4b0b      	ldr	r3, [pc, #44]	; (8008c80 <prvAddNewTaskToReadyList+0xd0>)
 8008c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c56:	601a      	str	r2, [r3, #0]
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c60:	bf00      	nop
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	20001000 	.word	0x20001000
 8008c6c:	20000f00 	.word	0x20000f00
 8008c70:	2000100c 	.word	0x2000100c
 8008c74:	2000101c 	.word	0x2000101c
 8008c78:	20001008 	.word	0x20001008
 8008c7c:	20000f04 	.word	0x20000f04
 8008c80:	e000ed04 	.word	0xe000ed04

08008c84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d017      	beq.n	8008cc6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c96:	4b13      	ldr	r3, [pc, #76]	; (8008ce4 <vTaskDelay+0x60>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00a      	beq.n	8008cb4 <vTaskDelay+0x30>
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	60bb      	str	r3, [r7, #8]
}
 8008cb0:	bf00      	nop
 8008cb2:	e7fe      	b.n	8008cb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008cb4:	f000 f884 	bl	8008dc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008cb8:	2100      	movs	r1, #0
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fb1e 	bl	80092fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008cc0:	f000 f88c 	bl	8008ddc <xTaskResumeAll>
 8008cc4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d107      	bne.n	8008cdc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008ccc:	4b06      	ldr	r3, [pc, #24]	; (8008ce8 <vTaskDelay+0x64>)
 8008cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008cdc:	bf00      	nop
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	20001028 	.word	0x20001028
 8008ce8:	e000ed04 	.word	0xe000ed04

08008cec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b08a      	sub	sp, #40	; 0x28
 8008cf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008cfa:	463a      	mov	r2, r7
 8008cfc:	1d39      	adds	r1, r7, #4
 8008cfe:	f107 0308 	add.w	r3, r7, #8
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7f7 fd32 	bl	800076c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	9202      	str	r2, [sp, #8]
 8008d10:	9301      	str	r3, [sp, #4]
 8008d12:	2300      	movs	r3, #0
 8008d14:	9300      	str	r3, [sp, #0]
 8008d16:	2300      	movs	r3, #0
 8008d18:	460a      	mov	r2, r1
 8008d1a:	4921      	ldr	r1, [pc, #132]	; (8008da0 <vTaskStartScheduler+0xb4>)
 8008d1c:	4821      	ldr	r0, [pc, #132]	; (8008da4 <vTaskStartScheduler+0xb8>)
 8008d1e:	f7ff fe06 	bl	800892e <xTaskCreateStatic>
 8008d22:	4603      	mov	r3, r0
 8008d24:	4a20      	ldr	r2, [pc, #128]	; (8008da8 <vTaskStartScheduler+0xbc>)
 8008d26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008d28:	4b1f      	ldr	r3, [pc, #124]	; (8008da8 <vTaskStartScheduler+0xbc>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d002      	beq.n	8008d36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008d30:	2301      	movs	r3, #1
 8008d32:	617b      	str	r3, [r7, #20]
 8008d34:	e001      	b.n	8008d3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008d36:	2300      	movs	r3, #0
 8008d38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d11b      	bne.n	8008d78 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	613b      	str	r3, [r7, #16]
}
 8008d52:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d54:	4b15      	ldr	r3, [pc, #84]	; (8008dac <vTaskStartScheduler+0xc0>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	334c      	adds	r3, #76	; 0x4c
 8008d5a:	4a15      	ldr	r2, [pc, #84]	; (8008db0 <vTaskStartScheduler+0xc4>)
 8008d5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008d5e:	4b15      	ldr	r3, [pc, #84]	; (8008db4 <vTaskStartScheduler+0xc8>)
 8008d60:	f04f 32ff 	mov.w	r2, #4294967295
 8008d64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008d66:	4b14      	ldr	r3, [pc, #80]	; (8008db8 <vTaskStartScheduler+0xcc>)
 8008d68:	2201      	movs	r2, #1
 8008d6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008d6c:	4b13      	ldr	r3, [pc, #76]	; (8008dbc <vTaskStartScheduler+0xd0>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d72:	f000 fba9 	bl	80094c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d76:	e00e      	b.n	8008d96 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7e:	d10a      	bne.n	8008d96 <vTaskStartScheduler+0xaa>
	__asm volatile
 8008d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	60fb      	str	r3, [r7, #12]
}
 8008d92:	bf00      	nop
 8008d94:	e7fe      	b.n	8008d94 <vTaskStartScheduler+0xa8>
}
 8008d96:	bf00      	nop
 8008d98:	3718      	adds	r7, #24
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	0800b218 	.word	0x0800b218
 8008da4:	08009149 	.word	0x08009149
 8008da8:	20001024 	.word	0x20001024
 8008dac:	20000f00 	.word	0x20000f00
 8008db0:	20000120 	.word	0x20000120
 8008db4:	20001020 	.word	0x20001020
 8008db8:	2000100c 	.word	0x2000100c
 8008dbc:	20001004 	.word	0x20001004

08008dc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008dc4:	4b04      	ldr	r3, [pc, #16]	; (8008dd8 <vTaskSuspendAll+0x18>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	4a03      	ldr	r2, [pc, #12]	; (8008dd8 <vTaskSuspendAll+0x18>)
 8008dcc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008dce:	bf00      	nop
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bc80      	pop	{r7}
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	20001028 	.word	0x20001028

08008ddc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008de2:	2300      	movs	r3, #0
 8008de4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008de6:	2300      	movs	r3, #0
 8008de8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008dea:	4b41      	ldr	r3, [pc, #260]	; (8008ef0 <xTaskResumeAll+0x114>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d10a      	bne.n	8008e08 <xTaskResumeAll+0x2c>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	603b      	str	r3, [r7, #0]
}
 8008e04:	bf00      	nop
 8008e06:	e7fe      	b.n	8008e06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e08:	f000 fbd0 	bl	80095ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e0c:	4b38      	ldr	r3, [pc, #224]	; (8008ef0 <xTaskResumeAll+0x114>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	4a37      	ldr	r2, [pc, #220]	; (8008ef0 <xTaskResumeAll+0x114>)
 8008e14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e16:	4b36      	ldr	r3, [pc, #216]	; (8008ef0 <xTaskResumeAll+0x114>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d161      	bne.n	8008ee2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e1e:	4b35      	ldr	r3, [pc, #212]	; (8008ef4 <xTaskResumeAll+0x118>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d05d      	beq.n	8008ee2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e26:	e02e      	b.n	8008e86 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e28:	4b33      	ldr	r3, [pc, #204]	; (8008ef8 <xTaskResumeAll+0x11c>)
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	3318      	adds	r3, #24
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7ff fd51 	bl	80088dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	3304      	adds	r3, #4
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff fd4c 	bl	80088dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e48:	2201      	movs	r2, #1
 8008e4a:	409a      	lsls	r2, r3
 8008e4c:	4b2b      	ldr	r3, [pc, #172]	; (8008efc <xTaskResumeAll+0x120>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	4a2a      	ldr	r2, [pc, #168]	; (8008efc <xTaskResumeAll+0x120>)
 8008e54:	6013      	str	r3, [r2, #0]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4a27      	ldr	r2, [pc, #156]	; (8008f00 <xTaskResumeAll+0x124>)
 8008e64:	441a      	add	r2, r3
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3304      	adds	r3, #4
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	f7ff fcda 	bl	8008826 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e76:	4b23      	ldr	r3, [pc, #140]	; (8008f04 <xTaskResumeAll+0x128>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d302      	bcc.n	8008e86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008e80:	4b21      	ldr	r3, [pc, #132]	; (8008f08 <xTaskResumeAll+0x12c>)
 8008e82:	2201      	movs	r2, #1
 8008e84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e86:	4b1c      	ldr	r3, [pc, #112]	; (8008ef8 <xTaskResumeAll+0x11c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1cc      	bne.n	8008e28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e94:	f000 fa12 	bl	80092bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008e98:	4b1c      	ldr	r3, [pc, #112]	; (8008f0c <xTaskResumeAll+0x130>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d010      	beq.n	8008ec6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ea4:	f000 f836 	bl	8008f14 <xTaskIncrementTick>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d002      	beq.n	8008eb4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008eae:	4b16      	ldr	r3, [pc, #88]	; (8008f08 <xTaskResumeAll+0x12c>)
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1f1      	bne.n	8008ea4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008ec0:	4b12      	ldr	r3, [pc, #72]	; (8008f0c <xTaskResumeAll+0x130>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ec6:	4b10      	ldr	r3, [pc, #64]	; (8008f08 <xTaskResumeAll+0x12c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d009      	beq.n	8008ee2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008ed2:	4b0f      	ldr	r3, [pc, #60]	; (8008f10 <xTaskResumeAll+0x134>)
 8008ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ee2:	f000 fb93 	bl	800960c <vPortExitCritical>

	return xAlreadyYielded;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	20001028 	.word	0x20001028
 8008ef4:	20001000 	.word	0x20001000
 8008ef8:	20000fc0 	.word	0x20000fc0
 8008efc:	20001008 	.word	0x20001008
 8008f00:	20000f04 	.word	0x20000f04
 8008f04:	20000f00 	.word	0x20000f00
 8008f08:	20001014 	.word	0x20001014
 8008f0c:	20001010 	.word	0x20001010
 8008f10:	e000ed04 	.word	0xe000ed04

08008f14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f1e:	4b4e      	ldr	r3, [pc, #312]	; (8009058 <xTaskIncrementTick+0x144>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f040 8088 	bne.w	8009038 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f28:	4b4c      	ldr	r3, [pc, #304]	; (800905c <xTaskIncrementTick+0x148>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f30:	4a4a      	ldr	r2, [pc, #296]	; (800905c <xTaskIncrementTick+0x148>)
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d120      	bne.n	8008f7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f3c:	4b48      	ldr	r3, [pc, #288]	; (8009060 <xTaskIncrementTick+0x14c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <xTaskIncrementTick+0x48>
	__asm volatile
 8008f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4a:	f383 8811 	msr	BASEPRI, r3
 8008f4e:	f3bf 8f6f 	isb	sy
 8008f52:	f3bf 8f4f 	dsb	sy
 8008f56:	603b      	str	r3, [r7, #0]
}
 8008f58:	bf00      	nop
 8008f5a:	e7fe      	b.n	8008f5a <xTaskIncrementTick+0x46>
 8008f5c:	4b40      	ldr	r3, [pc, #256]	; (8009060 <xTaskIncrementTick+0x14c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	60fb      	str	r3, [r7, #12]
 8008f62:	4b40      	ldr	r3, [pc, #256]	; (8009064 <xTaskIncrementTick+0x150>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a3e      	ldr	r2, [pc, #248]	; (8009060 <xTaskIncrementTick+0x14c>)
 8008f68:	6013      	str	r3, [r2, #0]
 8008f6a:	4a3e      	ldr	r2, [pc, #248]	; (8009064 <xTaskIncrementTick+0x150>)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	4b3d      	ldr	r3, [pc, #244]	; (8009068 <xTaskIncrementTick+0x154>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3301      	adds	r3, #1
 8008f76:	4a3c      	ldr	r2, [pc, #240]	; (8009068 <xTaskIncrementTick+0x154>)
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	f000 f99f 	bl	80092bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f7e:	4b3b      	ldr	r3, [pc, #236]	; (800906c <xTaskIncrementTick+0x158>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d348      	bcc.n	800901a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f88:	4b35      	ldr	r3, [pc, #212]	; (8009060 <xTaskIncrementTick+0x14c>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d104      	bne.n	8008f9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f92:	4b36      	ldr	r3, [pc, #216]	; (800906c <xTaskIncrementTick+0x158>)
 8008f94:	f04f 32ff 	mov.w	r2, #4294967295
 8008f98:	601a      	str	r2, [r3, #0]
					break;
 8008f9a:	e03e      	b.n	800901a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f9c:	4b30      	ldr	r3, [pc, #192]	; (8009060 <xTaskIncrementTick+0x14c>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d203      	bcs.n	8008fbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008fb4:	4a2d      	ldr	r2, [pc, #180]	; (800906c <xTaskIncrementTick+0x158>)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008fba:	e02e      	b.n	800901a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7ff fc8b 	bl	80088dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d004      	beq.n	8008fd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	3318      	adds	r3, #24
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7ff fc82 	bl	80088dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fdc:	2201      	movs	r2, #1
 8008fde:	409a      	lsls	r2, r3
 8008fe0:	4b23      	ldr	r3, [pc, #140]	; (8009070 <xTaskIncrementTick+0x15c>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	4a22      	ldr	r2, [pc, #136]	; (8009070 <xTaskIncrementTick+0x15c>)
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fee:	4613      	mov	r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4a1f      	ldr	r2, [pc, #124]	; (8009074 <xTaskIncrementTick+0x160>)
 8008ff8:	441a      	add	r2, r3
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	4619      	mov	r1, r3
 8009000:	4610      	mov	r0, r2
 8009002:	f7ff fc10 	bl	8008826 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900a:	4b1b      	ldr	r3, [pc, #108]	; (8009078 <xTaskIncrementTick+0x164>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	429a      	cmp	r2, r3
 8009012:	d3b9      	bcc.n	8008f88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009014:	2301      	movs	r3, #1
 8009016:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009018:	e7b6      	b.n	8008f88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800901a:	4b17      	ldr	r3, [pc, #92]	; (8009078 <xTaskIncrementTick+0x164>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009020:	4914      	ldr	r1, [pc, #80]	; (8009074 <xTaskIncrementTick+0x160>)
 8009022:	4613      	mov	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	4413      	add	r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	440b      	add	r3, r1
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d907      	bls.n	8009042 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8009032:	2301      	movs	r3, #1
 8009034:	617b      	str	r3, [r7, #20]
 8009036:	e004      	b.n	8009042 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009038:	4b10      	ldr	r3, [pc, #64]	; (800907c <xTaskIncrementTick+0x168>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	3301      	adds	r3, #1
 800903e:	4a0f      	ldr	r2, [pc, #60]	; (800907c <xTaskIncrementTick+0x168>)
 8009040:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009042:	4b0f      	ldr	r3, [pc, #60]	; (8009080 <xTaskIncrementTick+0x16c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800904a:	2301      	movs	r3, #1
 800904c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800904e:	697b      	ldr	r3, [r7, #20]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3718      	adds	r7, #24
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	20001028 	.word	0x20001028
 800905c:	20001004 	.word	0x20001004
 8009060:	20000fb8 	.word	0x20000fb8
 8009064:	20000fbc 	.word	0x20000fbc
 8009068:	20001018 	.word	0x20001018
 800906c:	20001020 	.word	0x20001020
 8009070:	20001008 	.word	0x20001008
 8009074:	20000f04 	.word	0x20000f04
 8009078:	20000f00 	.word	0x20000f00
 800907c:	20001010 	.word	0x20001010
 8009080:	20001014 	.word	0x20001014

08009084 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800908a:	4b29      	ldr	r3, [pc, #164]	; (8009130 <vTaskSwitchContext+0xac>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009092:	4b28      	ldr	r3, [pc, #160]	; (8009134 <vTaskSwitchContext+0xb0>)
 8009094:	2201      	movs	r2, #1
 8009096:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009098:	e044      	b.n	8009124 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800909a:	4b26      	ldr	r3, [pc, #152]	; (8009134 <vTaskSwitchContext+0xb0>)
 800909c:	2200      	movs	r2, #0
 800909e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090a0:	4b25      	ldr	r3, [pc, #148]	; (8009138 <vTaskSwitchContext+0xb4>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	fab3 f383 	clz	r3, r3
 80090ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80090ae:	7afb      	ldrb	r3, [r7, #11]
 80090b0:	f1c3 031f 	rsb	r3, r3, #31
 80090b4:	617b      	str	r3, [r7, #20]
 80090b6:	4921      	ldr	r1, [pc, #132]	; (800913c <vTaskSwitchContext+0xb8>)
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	4613      	mov	r3, r2
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4413      	add	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	440b      	add	r3, r1
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10a      	bne.n	80090e0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	f383 8811 	msr	BASEPRI, r3
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	f3bf 8f4f 	dsb	sy
 80090da:	607b      	str	r3, [r7, #4]
}
 80090dc:	bf00      	nop
 80090de:	e7fe      	b.n	80090de <vTaskSwitchContext+0x5a>
 80090e0:	697a      	ldr	r2, [r7, #20]
 80090e2:	4613      	mov	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4a14      	ldr	r2, [pc, #80]	; (800913c <vTaskSwitchContext+0xb8>)
 80090ec:	4413      	add	r3, r2
 80090ee:	613b      	str	r3, [r7, #16]
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	605a      	str	r2, [r3, #4]
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	685a      	ldr	r2, [r3, #4]
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	3308      	adds	r3, #8
 8009102:	429a      	cmp	r2, r3
 8009104:	d104      	bne.n	8009110 <vTaskSwitchContext+0x8c>
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	605a      	str	r2, [r3, #4]
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	4a0a      	ldr	r2, [pc, #40]	; (8009140 <vTaskSwitchContext+0xbc>)
 8009118:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800911a:	4b09      	ldr	r3, [pc, #36]	; (8009140 <vTaskSwitchContext+0xbc>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	334c      	adds	r3, #76	; 0x4c
 8009120:	4a08      	ldr	r2, [pc, #32]	; (8009144 <vTaskSwitchContext+0xc0>)
 8009122:	6013      	str	r3, [r2, #0]
}
 8009124:	bf00      	nop
 8009126:	371c      	adds	r7, #28
 8009128:	46bd      	mov	sp, r7
 800912a:	bc80      	pop	{r7}
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	20001028 	.word	0x20001028
 8009134:	20001014 	.word	0x20001014
 8009138:	20001008 	.word	0x20001008
 800913c:	20000f04 	.word	0x20000f04
 8009140:	20000f00 	.word	0x20000f00
 8009144:	20000120 	.word	0x20000120

08009148 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009150:	f000 f852 	bl	80091f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009154:	4b06      	ldr	r3, [pc, #24]	; (8009170 <prvIdleTask+0x28>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d9f9      	bls.n	8009150 <prvIdleTask+0x8>
			{
				taskYIELD();
 800915c:	4b05      	ldr	r3, [pc, #20]	; (8009174 <prvIdleTask+0x2c>)
 800915e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	f3bf 8f4f 	dsb	sy
 8009168:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800916c:	e7f0      	b.n	8009150 <prvIdleTask+0x8>
 800916e:	bf00      	nop
 8009170:	20000f04 	.word	0x20000f04
 8009174:	e000ed04 	.word	0xe000ed04

08009178 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800917e:	2300      	movs	r3, #0
 8009180:	607b      	str	r3, [r7, #4]
 8009182:	e00c      	b.n	800919e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	4613      	mov	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4a12      	ldr	r2, [pc, #72]	; (80091d8 <prvInitialiseTaskLists+0x60>)
 8009190:	4413      	add	r3, r2
 8009192:	4618      	mov	r0, r3
 8009194:	f7ff fb1c 	bl	80087d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	3301      	adds	r3, #1
 800919c:	607b      	str	r3, [r7, #4]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2b06      	cmp	r3, #6
 80091a2:	d9ef      	bls.n	8009184 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80091a4:	480d      	ldr	r0, [pc, #52]	; (80091dc <prvInitialiseTaskLists+0x64>)
 80091a6:	f7ff fb13 	bl	80087d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80091aa:	480d      	ldr	r0, [pc, #52]	; (80091e0 <prvInitialiseTaskLists+0x68>)
 80091ac:	f7ff fb10 	bl	80087d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80091b0:	480c      	ldr	r0, [pc, #48]	; (80091e4 <prvInitialiseTaskLists+0x6c>)
 80091b2:	f7ff fb0d 	bl	80087d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80091b6:	480c      	ldr	r0, [pc, #48]	; (80091e8 <prvInitialiseTaskLists+0x70>)
 80091b8:	f7ff fb0a 	bl	80087d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80091bc:	480b      	ldr	r0, [pc, #44]	; (80091ec <prvInitialiseTaskLists+0x74>)
 80091be:	f7ff fb07 	bl	80087d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80091c2:	4b0b      	ldr	r3, [pc, #44]	; (80091f0 <prvInitialiseTaskLists+0x78>)
 80091c4:	4a05      	ldr	r2, [pc, #20]	; (80091dc <prvInitialiseTaskLists+0x64>)
 80091c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80091c8:	4b0a      	ldr	r3, [pc, #40]	; (80091f4 <prvInitialiseTaskLists+0x7c>)
 80091ca:	4a05      	ldr	r2, [pc, #20]	; (80091e0 <prvInitialiseTaskLists+0x68>)
 80091cc:	601a      	str	r2, [r3, #0]
}
 80091ce:	bf00      	nop
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20000f04 	.word	0x20000f04
 80091dc:	20000f90 	.word	0x20000f90
 80091e0:	20000fa4 	.word	0x20000fa4
 80091e4:	20000fc0 	.word	0x20000fc0
 80091e8:	20000fd4 	.word	0x20000fd4
 80091ec:	20000fec 	.word	0x20000fec
 80091f0:	20000fb8 	.word	0x20000fb8
 80091f4:	20000fbc 	.word	0x20000fbc

080091f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091fe:	e019      	b.n	8009234 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009200:	f000 f9d4 	bl	80095ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009204:	4b10      	ldr	r3, [pc, #64]	; (8009248 <prvCheckTasksWaitingTermination+0x50>)
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	3304      	adds	r3, #4
 8009210:	4618      	mov	r0, r3
 8009212:	f7ff fb63 	bl	80088dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009216:	4b0d      	ldr	r3, [pc, #52]	; (800924c <prvCheckTasksWaitingTermination+0x54>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3b01      	subs	r3, #1
 800921c:	4a0b      	ldr	r2, [pc, #44]	; (800924c <prvCheckTasksWaitingTermination+0x54>)
 800921e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009220:	4b0b      	ldr	r3, [pc, #44]	; (8009250 <prvCheckTasksWaitingTermination+0x58>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3b01      	subs	r3, #1
 8009226:	4a0a      	ldr	r2, [pc, #40]	; (8009250 <prvCheckTasksWaitingTermination+0x58>)
 8009228:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800922a:	f000 f9ef 	bl	800960c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f810 	bl	8009254 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009234:	4b06      	ldr	r3, [pc, #24]	; (8009250 <prvCheckTasksWaitingTermination+0x58>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1e1      	bne.n	8009200 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800923c:	bf00      	nop
 800923e:	bf00      	nop
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	20000fd4 	.word	0x20000fd4
 800924c:	20001000 	.word	0x20001000
 8009250:	20000fe8 	.word	0x20000fe8

08009254 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	334c      	adds	r3, #76	; 0x4c
 8009260:	4618      	mov	r0, r3
 8009262:	f000 fe61 	bl	8009f28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800926c:	2b00      	cmp	r3, #0
 800926e:	d108      	bne.n	8009282 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009274:	4618      	mov	r0, r3
 8009276:	f000 fb1f 	bl	80098b8 <vPortFree>
				vPortFree( pxTCB );
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fb1c 	bl	80098b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009280:	e018      	b.n	80092b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009288:	2b01      	cmp	r3, #1
 800928a:	d103      	bne.n	8009294 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fb13 	bl	80098b8 <vPortFree>
	}
 8009292:	e00f      	b.n	80092b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800929a:	2b02      	cmp	r3, #2
 800929c:	d00a      	beq.n	80092b4 <prvDeleteTCB+0x60>
	__asm volatile
 800929e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	60fb      	str	r3, [r7, #12]
}
 80092b0:	bf00      	nop
 80092b2:	e7fe      	b.n	80092b2 <prvDeleteTCB+0x5e>
	}
 80092b4:	bf00      	nop
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092c2:	4b0c      	ldr	r3, [pc, #48]	; (80092f4 <prvResetNextTaskUnblockTime+0x38>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d104      	bne.n	80092d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80092cc:	4b0a      	ldr	r3, [pc, #40]	; (80092f8 <prvResetNextTaskUnblockTime+0x3c>)
 80092ce:	f04f 32ff 	mov.w	r2, #4294967295
 80092d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80092d4:	e008      	b.n	80092e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092d6:	4b07      	ldr	r3, [pc, #28]	; (80092f4 <prvResetNextTaskUnblockTime+0x38>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	4a04      	ldr	r2, [pc, #16]	; (80092f8 <prvResetNextTaskUnblockTime+0x3c>)
 80092e6:	6013      	str	r3, [r2, #0]
}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bc80      	pop	{r7}
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	20000fb8 	.word	0x20000fb8
 80092f8:	20001020 	.word	0x20001020

080092fc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009306:	4b29      	ldr	r3, [pc, #164]	; (80093ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800930c:	4b28      	ldr	r3, [pc, #160]	; (80093b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3304      	adds	r3, #4
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff fae2 	bl	80088dc <uxListRemove>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10b      	bne.n	8009336 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800931e:	4b24      	ldr	r3, [pc, #144]	; (80093b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009324:	2201      	movs	r2, #1
 8009326:	fa02 f303 	lsl.w	r3, r2, r3
 800932a:	43da      	mvns	r2, r3
 800932c:	4b21      	ldr	r3, [pc, #132]	; (80093b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4013      	ands	r3, r2
 8009332:	4a20      	ldr	r2, [pc, #128]	; (80093b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009334:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933c:	d10a      	bne.n	8009354 <prvAddCurrentTaskToDelayedList+0x58>
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d007      	beq.n	8009354 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009344:	4b1a      	ldr	r3, [pc, #104]	; (80093b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3304      	adds	r3, #4
 800934a:	4619      	mov	r1, r3
 800934c:	481a      	ldr	r0, [pc, #104]	; (80093b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800934e:	f7ff fa6a 	bl	8008826 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009352:	e026      	b.n	80093a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4413      	add	r3, r2
 800935a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800935c:	4b14      	ldr	r3, [pc, #80]	; (80093b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	429a      	cmp	r2, r3
 800936a:	d209      	bcs.n	8009380 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800936c:	4b13      	ldr	r3, [pc, #76]	; (80093bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	4b0f      	ldr	r3, [pc, #60]	; (80093b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3304      	adds	r3, #4
 8009376:	4619      	mov	r1, r3
 8009378:	4610      	mov	r0, r2
 800937a:	f7ff fa77 	bl	800886c <vListInsert>
}
 800937e:	e010      	b.n	80093a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009380:	4b0f      	ldr	r3, [pc, #60]	; (80093c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	4b0a      	ldr	r3, [pc, #40]	; (80093b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3304      	adds	r3, #4
 800938a:	4619      	mov	r1, r3
 800938c:	4610      	mov	r0, r2
 800938e:	f7ff fa6d 	bl	800886c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009392:	4b0c      	ldr	r3, [pc, #48]	; (80093c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	429a      	cmp	r2, r3
 800939a:	d202      	bcs.n	80093a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800939c:	4a09      	ldr	r2, [pc, #36]	; (80093c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	6013      	str	r3, [r2, #0]
}
 80093a2:	bf00      	nop
 80093a4:	3710      	adds	r7, #16
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20001004 	.word	0x20001004
 80093b0:	20000f00 	.word	0x20000f00
 80093b4:	20001008 	.word	0x20001008
 80093b8:	20000fec 	.word	0x20000fec
 80093bc:	20000fbc 	.word	0x20000fbc
 80093c0:	20000fb8 	.word	0x20000fb8
 80093c4:	20001020 	.word	0x20001020

080093c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	3b04      	subs	r3, #4
 80093d8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80093e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	3b04      	subs	r3, #4
 80093e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	f023 0201 	bic.w	r2, r3, #1
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3b04      	subs	r3, #4
 80093f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80093f8:	4a08      	ldr	r2, [pc, #32]	; (800941c <pxPortInitialiseStack+0x54>)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	3b14      	subs	r3, #20
 8009402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	3b20      	subs	r3, #32
 800940e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009410:	68fb      	ldr	r3, [r7, #12]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	bc80      	pop	{r7}
 800941a:	4770      	bx	lr
 800941c:	08009421 	.word	0x08009421

08009420 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009426:	2300      	movs	r3, #0
 8009428:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800942a:	4b12      	ldr	r3, [pc, #72]	; (8009474 <prvTaskExitError+0x54>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009432:	d00a      	beq.n	800944a <prvTaskExitError+0x2a>
	__asm volatile
 8009434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	60fb      	str	r3, [r7, #12]
}
 8009446:	bf00      	nop
 8009448:	e7fe      	b.n	8009448 <prvTaskExitError+0x28>
	__asm volatile
 800944a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	60bb      	str	r3, [r7, #8]
}
 800945c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800945e:	bf00      	nop
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d0fc      	beq.n	8009460 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009466:	bf00      	nop
 8009468:	bf00      	nop
 800946a:	3714      	adds	r7, #20
 800946c:	46bd      	mov	sp, r7
 800946e:	bc80      	pop	{r7}
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	2000011c 	.word	0x2000011c
	...

08009480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009480:	4b07      	ldr	r3, [pc, #28]	; (80094a0 <pxCurrentTCBConst2>)
 8009482:	6819      	ldr	r1, [r3, #0]
 8009484:	6808      	ldr	r0, [r1, #0]
 8009486:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800948a:	f380 8809 	msr	PSP, r0
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f04f 0000 	mov.w	r0, #0
 8009496:	f380 8811 	msr	BASEPRI, r0
 800949a:	f04e 0e0d 	orr.w	lr, lr, #13
 800949e:	4770      	bx	lr

080094a0 <pxCurrentTCBConst2>:
 80094a0:	20000f00 	.word	0x20000f00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094a4:	bf00      	nop
 80094a6:	bf00      	nop

080094a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80094a8:	4806      	ldr	r0, [pc, #24]	; (80094c4 <prvPortStartFirstTask+0x1c>)
 80094aa:	6800      	ldr	r0, [r0, #0]
 80094ac:	6800      	ldr	r0, [r0, #0]
 80094ae:	f380 8808 	msr	MSP, r0
 80094b2:	b662      	cpsie	i
 80094b4:	b661      	cpsie	f
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	df00      	svc	0
 80094c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80094c2:	bf00      	nop
 80094c4:	e000ed08 	.word	0xe000ed08

080094c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80094ce:	4b32      	ldr	r3, [pc, #200]	; (8009598 <xPortStartScheduler+0xd0>)
 80094d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	22ff      	movs	r2, #255	; 0xff
 80094de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80094e8:	78fb      	ldrb	r3, [r7, #3]
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	4b2a      	ldr	r3, [pc, #168]	; (800959c <xPortStartScheduler+0xd4>)
 80094f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80094f6:	4b2a      	ldr	r3, [pc, #168]	; (80095a0 <xPortStartScheduler+0xd8>)
 80094f8:	2207      	movs	r2, #7
 80094fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094fc:	e009      	b.n	8009512 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80094fe:	4b28      	ldr	r3, [pc, #160]	; (80095a0 <xPortStartScheduler+0xd8>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3b01      	subs	r3, #1
 8009504:	4a26      	ldr	r2, [pc, #152]	; (80095a0 <xPortStartScheduler+0xd8>)
 8009506:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009508:	78fb      	ldrb	r3, [r7, #3]
 800950a:	b2db      	uxtb	r3, r3
 800950c:	005b      	lsls	r3, r3, #1
 800950e:	b2db      	uxtb	r3, r3
 8009510:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009512:	78fb      	ldrb	r3, [r7, #3]
 8009514:	b2db      	uxtb	r3, r3
 8009516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800951a:	2b80      	cmp	r3, #128	; 0x80
 800951c:	d0ef      	beq.n	80094fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800951e:	4b20      	ldr	r3, [pc, #128]	; (80095a0 <xPortStartScheduler+0xd8>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f1c3 0307 	rsb	r3, r3, #7
 8009526:	2b04      	cmp	r3, #4
 8009528:	d00a      	beq.n	8009540 <xPortStartScheduler+0x78>
	__asm volatile
 800952a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	60bb      	str	r3, [r7, #8]
}
 800953c:	bf00      	nop
 800953e:	e7fe      	b.n	800953e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009540:	4b17      	ldr	r3, [pc, #92]	; (80095a0 <xPortStartScheduler+0xd8>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	021b      	lsls	r3, r3, #8
 8009546:	4a16      	ldr	r2, [pc, #88]	; (80095a0 <xPortStartScheduler+0xd8>)
 8009548:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800954a:	4b15      	ldr	r3, [pc, #84]	; (80095a0 <xPortStartScheduler+0xd8>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009552:	4a13      	ldr	r2, [pc, #76]	; (80095a0 <xPortStartScheduler+0xd8>)
 8009554:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	b2da      	uxtb	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800955e:	4b11      	ldr	r3, [pc, #68]	; (80095a4 <xPortStartScheduler+0xdc>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a10      	ldr	r2, [pc, #64]	; (80095a4 <xPortStartScheduler+0xdc>)
 8009564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009568:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800956a:	4b0e      	ldr	r3, [pc, #56]	; (80095a4 <xPortStartScheduler+0xdc>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a0d      	ldr	r2, [pc, #52]	; (80095a4 <xPortStartScheduler+0xdc>)
 8009570:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009574:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009576:	f000 f8b9 	bl	80096ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800957a:	4b0b      	ldr	r3, [pc, #44]	; (80095a8 <xPortStartScheduler+0xe0>)
 800957c:	2200      	movs	r2, #0
 800957e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009580:	f7ff ff92 	bl	80094a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009584:	f7ff fd7e 	bl	8009084 <vTaskSwitchContext>
	prvTaskExitError();
 8009588:	f7ff ff4a 	bl	8009420 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	e000e400 	.word	0xe000e400
 800959c:	2000102c 	.word	0x2000102c
 80095a0:	20001030 	.word	0x20001030
 80095a4:	e000ed20 	.word	0xe000ed20
 80095a8:	2000011c 	.word	0x2000011c

080095ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
	__asm volatile
 80095b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	607b      	str	r3, [r7, #4]
}
 80095c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80095c6:	4b0f      	ldr	r3, [pc, #60]	; (8009604 <vPortEnterCritical+0x58>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	3301      	adds	r3, #1
 80095cc:	4a0d      	ldr	r2, [pc, #52]	; (8009604 <vPortEnterCritical+0x58>)
 80095ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80095d0:	4b0c      	ldr	r3, [pc, #48]	; (8009604 <vPortEnterCritical+0x58>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d10f      	bne.n	80095f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80095d8:	4b0b      	ldr	r3, [pc, #44]	; (8009608 <vPortEnterCritical+0x5c>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00a      	beq.n	80095f8 <vPortEnterCritical+0x4c>
	__asm volatile
 80095e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e6:	f383 8811 	msr	BASEPRI, r3
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	603b      	str	r3, [r7, #0]
}
 80095f4:	bf00      	nop
 80095f6:	e7fe      	b.n	80095f6 <vPortEnterCritical+0x4a>
	}
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bc80      	pop	{r7}
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	2000011c 	.word	0x2000011c
 8009608:	e000ed04 	.word	0xe000ed04

0800960c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009612:	4b11      	ldr	r3, [pc, #68]	; (8009658 <vPortExitCritical+0x4c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d10a      	bne.n	8009630 <vPortExitCritical+0x24>
	__asm volatile
 800961a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961e:	f383 8811 	msr	BASEPRI, r3
 8009622:	f3bf 8f6f 	isb	sy
 8009626:	f3bf 8f4f 	dsb	sy
 800962a:	607b      	str	r3, [r7, #4]
}
 800962c:	bf00      	nop
 800962e:	e7fe      	b.n	800962e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009630:	4b09      	ldr	r3, [pc, #36]	; (8009658 <vPortExitCritical+0x4c>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3b01      	subs	r3, #1
 8009636:	4a08      	ldr	r2, [pc, #32]	; (8009658 <vPortExitCritical+0x4c>)
 8009638:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800963a:	4b07      	ldr	r3, [pc, #28]	; (8009658 <vPortExitCritical+0x4c>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d105      	bne.n	800964e <vPortExitCritical+0x42>
 8009642:	2300      	movs	r3, #0
 8009644:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800964c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800964e:	bf00      	nop
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	bc80      	pop	{r7}
 8009656:	4770      	bx	lr
 8009658:	2000011c 	.word	0x2000011c
 800965c:	00000000 	.word	0x00000000

08009660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009660:	f3ef 8009 	mrs	r0, PSP
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	4b0d      	ldr	r3, [pc, #52]	; (80096a0 <pxCurrentTCBConst>)
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009670:	6010      	str	r0, [r2, #0]
 8009672:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009676:	f04f 0050 	mov.w	r0, #80	; 0x50
 800967a:	f380 8811 	msr	BASEPRI, r0
 800967e:	f7ff fd01 	bl	8009084 <vTaskSwitchContext>
 8009682:	f04f 0000 	mov.w	r0, #0
 8009686:	f380 8811 	msr	BASEPRI, r0
 800968a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800968e:	6819      	ldr	r1, [r3, #0]
 8009690:	6808      	ldr	r0, [r1, #0]
 8009692:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009696:	f380 8809 	msr	PSP, r0
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	4770      	bx	lr

080096a0 <pxCurrentTCBConst>:
 80096a0:	20000f00 	.word	0x20000f00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80096a4:	bf00      	nop
 80096a6:	bf00      	nop

080096a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
	__asm volatile
 80096ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	607b      	str	r3, [r7, #4]
}
 80096c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80096c2:	f7ff fc27 	bl	8008f14 <xTaskIncrementTick>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d003      	beq.n	80096d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80096cc:	4b06      	ldr	r3, [pc, #24]	; (80096e8 <SysTick_Handler+0x40>)
 80096ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d2:	601a      	str	r2, [r3, #0]
 80096d4:	2300      	movs	r3, #0
 80096d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	f383 8811 	msr	BASEPRI, r3
}
 80096de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80096e0:	bf00      	nop
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	e000ed04 	.word	0xe000ed04

080096ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80096ec:	b480      	push	{r7}
 80096ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096f0:	4b0a      	ldr	r3, [pc, #40]	; (800971c <vPortSetupTimerInterrupt+0x30>)
 80096f2:	2200      	movs	r2, #0
 80096f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096f6:	4b0a      	ldr	r3, [pc, #40]	; (8009720 <vPortSetupTimerInterrupt+0x34>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096fc:	4b09      	ldr	r3, [pc, #36]	; (8009724 <vPortSetupTimerInterrupt+0x38>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a09      	ldr	r2, [pc, #36]	; (8009728 <vPortSetupTimerInterrupt+0x3c>)
 8009702:	fba2 2303 	umull	r2, r3, r2, r3
 8009706:	099b      	lsrs	r3, r3, #6
 8009708:	4a08      	ldr	r2, [pc, #32]	; (800972c <vPortSetupTimerInterrupt+0x40>)
 800970a:	3b01      	subs	r3, #1
 800970c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800970e:	4b03      	ldr	r3, [pc, #12]	; (800971c <vPortSetupTimerInterrupt+0x30>)
 8009710:	2207      	movs	r2, #7
 8009712:	601a      	str	r2, [r3, #0]
}
 8009714:	bf00      	nop
 8009716:	46bd      	mov	sp, r7
 8009718:	bc80      	pop	{r7}
 800971a:	4770      	bx	lr
 800971c:	e000e010 	.word	0xe000e010
 8009720:	e000e018 	.word	0xe000e018
 8009724:	20000004 	.word	0x20000004
 8009728:	10624dd3 	.word	0x10624dd3
 800972c:	e000e014 	.word	0xe000e014

08009730 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b08a      	sub	sp, #40	; 0x28
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009738:	2300      	movs	r3, #0
 800973a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800973c:	f7ff fb40 	bl	8008dc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009740:	4b58      	ldr	r3, [pc, #352]	; (80098a4 <pvPortMalloc+0x174>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009748:	f000 f910 	bl	800996c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800974c:	4b56      	ldr	r3, [pc, #344]	; (80098a8 <pvPortMalloc+0x178>)
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4013      	ands	r3, r2
 8009754:	2b00      	cmp	r3, #0
 8009756:	f040 808e 	bne.w	8009876 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d01d      	beq.n	800979c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009760:	2208      	movs	r2, #8
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4413      	add	r3, r2
 8009766:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f003 0307 	and.w	r3, r3, #7
 800976e:	2b00      	cmp	r3, #0
 8009770:	d014      	beq.n	800979c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f023 0307 	bic.w	r3, r3, #7
 8009778:	3308      	adds	r3, #8
 800977a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f003 0307 	and.w	r3, r3, #7
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <pvPortMalloc+0x6c>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	617b      	str	r3, [r7, #20]
}
 8009798:	bf00      	nop
 800979a:	e7fe      	b.n	800979a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d069      	beq.n	8009876 <pvPortMalloc+0x146>
 80097a2:	4b42      	ldr	r3, [pc, #264]	; (80098ac <pvPortMalloc+0x17c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d864      	bhi.n	8009876 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80097ac:	4b40      	ldr	r3, [pc, #256]	; (80098b0 <pvPortMalloc+0x180>)
 80097ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80097b0:	4b3f      	ldr	r3, [pc, #252]	; (80098b0 <pvPortMalloc+0x180>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097b6:	e004      	b.n	80097c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80097b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d903      	bls.n	80097d4 <pvPortMalloc+0xa4>
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1f1      	bne.n	80097b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097d4:	4b33      	ldr	r3, [pc, #204]	; (80098a4 <pvPortMalloc+0x174>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097da:	429a      	cmp	r2, r3
 80097dc:	d04b      	beq.n	8009876 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097de:	6a3b      	ldr	r3, [r7, #32]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2208      	movs	r2, #8
 80097e4:	4413      	add	r3, r2
 80097e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	6a3b      	ldr	r3, [r7, #32]
 80097ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	1ad2      	subs	r2, r2, r3
 80097f8:	2308      	movs	r3, #8
 80097fa:	005b      	lsls	r3, r3, #1
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d91f      	bls.n	8009840 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4413      	add	r3, r2
 8009806:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	f003 0307 	and.w	r3, r3, #7
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00a      	beq.n	8009828 <pvPortMalloc+0xf8>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	613b      	str	r3, [r7, #16]
}
 8009824:	bf00      	nop
 8009826:	e7fe      	b.n	8009826 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	1ad2      	subs	r2, r2, r3
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800983a:	69b8      	ldr	r0, [r7, #24]
 800983c:	f000 f8f8 	bl	8009a30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009840:	4b1a      	ldr	r3, [pc, #104]	; (80098ac <pvPortMalloc+0x17c>)
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	4a18      	ldr	r2, [pc, #96]	; (80098ac <pvPortMalloc+0x17c>)
 800984c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800984e:	4b17      	ldr	r3, [pc, #92]	; (80098ac <pvPortMalloc+0x17c>)
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	4b18      	ldr	r3, [pc, #96]	; (80098b4 <pvPortMalloc+0x184>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	d203      	bcs.n	8009862 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800985a:	4b14      	ldr	r3, [pc, #80]	; (80098ac <pvPortMalloc+0x17c>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a15      	ldr	r2, [pc, #84]	; (80098b4 <pvPortMalloc+0x184>)
 8009860:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	4b10      	ldr	r3, [pc, #64]	; (80098a8 <pvPortMalloc+0x178>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	431a      	orrs	r2, r3
 800986c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	2200      	movs	r2, #0
 8009874:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009876:	f7ff fab1 	bl	8008ddc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	f003 0307 	and.w	r3, r3, #7
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00a      	beq.n	800989a <pvPortMalloc+0x16a>
	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	60fb      	str	r3, [r7, #12]
}
 8009896:	bf00      	nop
 8009898:	e7fe      	b.n	8009898 <pvPortMalloc+0x168>
	return pvReturn;
 800989a:	69fb      	ldr	r3, [r7, #28]
}
 800989c:	4618      	mov	r0, r3
 800989e:	3728      	adds	r7, #40	; 0x28
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	20003364 	.word	0x20003364
 80098a8:	20003370 	.word	0x20003370
 80098ac:	20003368 	.word	0x20003368
 80098b0:	2000335c 	.word	0x2000335c
 80098b4:	2000336c 	.word	0x2000336c

080098b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b086      	sub	sp, #24
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d048      	beq.n	800995c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098ca:	2308      	movs	r3, #8
 80098cc:	425b      	negs	r3, r3
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	4413      	add	r3, r2
 80098d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	4b21      	ldr	r3, [pc, #132]	; (8009964 <vPortFree+0xac>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4013      	ands	r3, r2
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d10a      	bne.n	80098fc <vPortFree+0x44>
	__asm volatile
 80098e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	60fb      	str	r3, [r7, #12]
}
 80098f8:	bf00      	nop
 80098fa:	e7fe      	b.n	80098fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00a      	beq.n	800991a <vPortFree+0x62>
	__asm volatile
 8009904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	60bb      	str	r3, [r7, #8]
}
 8009916:	bf00      	nop
 8009918:	e7fe      	b.n	8009918 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	4b11      	ldr	r3, [pc, #68]	; (8009964 <vPortFree+0xac>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4013      	ands	r3, r2
 8009924:	2b00      	cmp	r3, #0
 8009926:	d019      	beq.n	800995c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d115      	bne.n	800995c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	685a      	ldr	r2, [r3, #4]
 8009934:	4b0b      	ldr	r3, [pc, #44]	; (8009964 <vPortFree+0xac>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	43db      	mvns	r3, r3
 800993a:	401a      	ands	r2, r3
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009940:	f7ff fa3e 	bl	8008dc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	4b07      	ldr	r3, [pc, #28]	; (8009968 <vPortFree+0xb0>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4413      	add	r3, r2
 800994e:	4a06      	ldr	r2, [pc, #24]	; (8009968 <vPortFree+0xb0>)
 8009950:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009952:	6938      	ldr	r0, [r7, #16]
 8009954:	f000 f86c 	bl	8009a30 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009958:	f7ff fa40 	bl	8008ddc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800995c:	bf00      	nop
 800995e:	3718      	adds	r7, #24
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	20003370 	.word	0x20003370
 8009968:	20003368 	.word	0x20003368

0800996c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009972:	f242 3328 	movw	r3, #9000	; 0x2328
 8009976:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009978:	4b27      	ldr	r3, [pc, #156]	; (8009a18 <prvHeapInit+0xac>)
 800997a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f003 0307 	and.w	r3, r3, #7
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00c      	beq.n	80099a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	3307      	adds	r3, #7
 800998a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f023 0307 	bic.w	r3, r3, #7
 8009992:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	4a1f      	ldr	r2, [pc, #124]	; (8009a18 <prvHeapInit+0xac>)
 800999c:	4413      	add	r3, r2
 800999e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80099a4:	4a1d      	ldr	r2, [pc, #116]	; (8009a1c <prvHeapInit+0xb0>)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099aa:	4b1c      	ldr	r3, [pc, #112]	; (8009a1c <prvHeapInit+0xb0>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	4413      	add	r3, r2
 80099b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099b8:	2208      	movs	r2, #8
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	1a9b      	subs	r3, r3, r2
 80099be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f023 0307 	bic.w	r3, r3, #7
 80099c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4a15      	ldr	r2, [pc, #84]	; (8009a20 <prvHeapInit+0xb4>)
 80099cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099ce:	4b14      	ldr	r3, [pc, #80]	; (8009a20 <prvHeapInit+0xb4>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2200      	movs	r2, #0
 80099d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099d6:	4b12      	ldr	r3, [pc, #72]	; (8009a20 <prvHeapInit+0xb4>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2200      	movs	r2, #0
 80099dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	68fa      	ldr	r2, [r7, #12]
 80099e6:	1ad2      	subs	r2, r2, r3
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80099ec:	4b0c      	ldr	r3, [pc, #48]	; (8009a20 <prvHeapInit+0xb4>)
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	4a0a      	ldr	r2, [pc, #40]	; (8009a24 <prvHeapInit+0xb8>)
 80099fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	4a09      	ldr	r2, [pc, #36]	; (8009a28 <prvHeapInit+0xbc>)
 8009a02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a04:	4b09      	ldr	r3, [pc, #36]	; (8009a2c <prvHeapInit+0xc0>)
 8009a06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a0a:	601a      	str	r2, [r3, #0]
}
 8009a0c:	bf00      	nop
 8009a0e:	3714      	adds	r7, #20
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bc80      	pop	{r7}
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop
 8009a18:	20001034 	.word	0x20001034
 8009a1c:	2000335c 	.word	0x2000335c
 8009a20:	20003364 	.word	0x20003364
 8009a24:	2000336c 	.word	0x2000336c
 8009a28:	20003368 	.word	0x20003368
 8009a2c:	20003370 	.word	0x20003370

08009a30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a38:	4b27      	ldr	r3, [pc, #156]	; (8009ad8 <prvInsertBlockIntoFreeList+0xa8>)
 8009a3a:	60fb      	str	r3, [r7, #12]
 8009a3c:	e002      	b.n	8009a44 <prvInsertBlockIntoFreeList+0x14>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	60fb      	str	r3, [r7, #12]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d8f7      	bhi.n	8009a3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	4413      	add	r3, r2
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d108      	bne.n	8009a72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	441a      	add	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	68ba      	ldr	r2, [r7, #8]
 8009a7c:	441a      	add	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d118      	bne.n	8009ab8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	4b14      	ldr	r3, [pc, #80]	; (8009adc <prvInsertBlockIntoFreeList+0xac>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d00d      	beq.n	8009aae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	685a      	ldr	r2, [r3, #4]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	441a      	add	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	601a      	str	r2, [r3, #0]
 8009aac:	e008      	b.n	8009ac0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009aae:	4b0b      	ldr	r3, [pc, #44]	; (8009adc <prvInsertBlockIntoFreeList+0xac>)
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	601a      	str	r2, [r3, #0]
 8009ab6:	e003      	b.n	8009ac0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d002      	beq.n	8009ace <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ace:	bf00      	nop
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bc80      	pop	{r7}
 8009ad6:	4770      	bx	lr
 8009ad8:	2000335c 	.word	0x2000335c
 8009adc:	20003364 	.word	0x20003364

08009ae0 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b085      	sub	sp, #20
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	70fb      	strb	r3, [r7, #3]
 8009aec:	4613      	mov	r3, r2
 8009aee:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8009af4:	e004      	b.n	8009b00 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	1c5a      	adds	r2, r3, #1
 8009afa:	60fa      	str	r2, [r7, #12]
 8009afc:	78fa      	ldrb	r2, [r7, #3]
 8009afe:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8009b00:	883b      	ldrh	r3, [r7, #0]
 8009b02:	1e5a      	subs	r2, r3, #1
 8009b04:	803a      	strh	r2, [r7, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d1f5      	bne.n	8009af6 <UTIL_MEM_set_8+0x16>
  }
}
 8009b0a:	bf00      	nop
 8009b0c:	bf00      	nop
 8009b0e:	3714      	adds	r7, #20
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bc80      	pop	{r7}
 8009b14:	4770      	bx	lr
	...

08009b18 <__errno>:
 8009b18:	4b01      	ldr	r3, [pc, #4]	; (8009b20 <__errno+0x8>)
 8009b1a:	6818      	ldr	r0, [r3, #0]
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	20000120 	.word	0x20000120

08009b24 <std>:
 8009b24:	2300      	movs	r3, #0
 8009b26:	b510      	push	{r4, lr}
 8009b28:	4604      	mov	r4, r0
 8009b2a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b32:	6083      	str	r3, [r0, #8]
 8009b34:	8181      	strh	r1, [r0, #12]
 8009b36:	6643      	str	r3, [r0, #100]	; 0x64
 8009b38:	81c2      	strh	r2, [r0, #14]
 8009b3a:	6183      	str	r3, [r0, #24]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	2208      	movs	r2, #8
 8009b40:	305c      	adds	r0, #92	; 0x5c
 8009b42:	f000 f91a 	bl	8009d7a <memset>
 8009b46:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <std+0x38>)
 8009b48:	6263      	str	r3, [r4, #36]	; 0x24
 8009b4a:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <std+0x3c>)
 8009b4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b4e:	4b05      	ldr	r3, [pc, #20]	; (8009b64 <std+0x40>)
 8009b50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b52:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <std+0x44>)
 8009b54:	6224      	str	r4, [r4, #32]
 8009b56:	6323      	str	r3, [r4, #48]	; 0x30
 8009b58:	bd10      	pop	{r4, pc}
 8009b5a:	bf00      	nop
 8009b5c:	0800a041 	.word	0x0800a041
 8009b60:	0800a063 	.word	0x0800a063
 8009b64:	0800a09b 	.word	0x0800a09b
 8009b68:	0800a0bf 	.word	0x0800a0bf

08009b6c <_cleanup_r>:
 8009b6c:	4901      	ldr	r1, [pc, #4]	; (8009b74 <_cleanup_r+0x8>)
 8009b6e:	f000 b8af 	b.w	8009cd0 <_fwalk_reent>
 8009b72:	bf00      	nop
 8009b74:	0800a239 	.word	0x0800a239

08009b78 <__sfmoreglue>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	2268      	movs	r2, #104	; 0x68
 8009b7c:	1e4d      	subs	r5, r1, #1
 8009b7e:	4355      	muls	r5, r2
 8009b80:	460e      	mov	r6, r1
 8009b82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b86:	f000 f921 	bl	8009dcc <_malloc_r>
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	b140      	cbz	r0, 8009ba0 <__sfmoreglue+0x28>
 8009b8e:	2100      	movs	r1, #0
 8009b90:	e9c0 1600 	strd	r1, r6, [r0]
 8009b94:	300c      	adds	r0, #12
 8009b96:	60a0      	str	r0, [r4, #8]
 8009b98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b9c:	f000 f8ed 	bl	8009d7a <memset>
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	bd70      	pop	{r4, r5, r6, pc}

08009ba4 <__sfp_lock_acquire>:
 8009ba4:	4801      	ldr	r0, [pc, #4]	; (8009bac <__sfp_lock_acquire+0x8>)
 8009ba6:	f000 b8d8 	b.w	8009d5a <__retarget_lock_acquire_recursive>
 8009baa:	bf00      	nop
 8009bac:	20003375 	.word	0x20003375

08009bb0 <__sfp_lock_release>:
 8009bb0:	4801      	ldr	r0, [pc, #4]	; (8009bb8 <__sfp_lock_release+0x8>)
 8009bb2:	f000 b8d3 	b.w	8009d5c <__retarget_lock_release_recursive>
 8009bb6:	bf00      	nop
 8009bb8:	20003375 	.word	0x20003375

08009bbc <__sinit_lock_acquire>:
 8009bbc:	4801      	ldr	r0, [pc, #4]	; (8009bc4 <__sinit_lock_acquire+0x8>)
 8009bbe:	f000 b8cc 	b.w	8009d5a <__retarget_lock_acquire_recursive>
 8009bc2:	bf00      	nop
 8009bc4:	20003376 	.word	0x20003376

08009bc8 <__sinit_lock_release>:
 8009bc8:	4801      	ldr	r0, [pc, #4]	; (8009bd0 <__sinit_lock_release+0x8>)
 8009bca:	f000 b8c7 	b.w	8009d5c <__retarget_lock_release_recursive>
 8009bce:	bf00      	nop
 8009bd0:	20003376 	.word	0x20003376

08009bd4 <__sinit>:
 8009bd4:	b510      	push	{r4, lr}
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	f7ff fff0 	bl	8009bbc <__sinit_lock_acquire>
 8009bdc:	69a3      	ldr	r3, [r4, #24]
 8009bde:	b11b      	cbz	r3, 8009be8 <__sinit+0x14>
 8009be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009be4:	f7ff bff0 	b.w	8009bc8 <__sinit_lock_release>
 8009be8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bec:	6523      	str	r3, [r4, #80]	; 0x50
 8009bee:	4b13      	ldr	r3, [pc, #76]	; (8009c3c <__sinit+0x68>)
 8009bf0:	4a13      	ldr	r2, [pc, #76]	; (8009c40 <__sinit+0x6c>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009bf6:	42a3      	cmp	r3, r4
 8009bf8:	bf04      	itt	eq
 8009bfa:	2301      	moveq	r3, #1
 8009bfc:	61a3      	streq	r3, [r4, #24]
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f000 f820 	bl	8009c44 <__sfp>
 8009c04:	6060      	str	r0, [r4, #4]
 8009c06:	4620      	mov	r0, r4
 8009c08:	f000 f81c 	bl	8009c44 <__sfp>
 8009c0c:	60a0      	str	r0, [r4, #8]
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f000 f818 	bl	8009c44 <__sfp>
 8009c14:	2200      	movs	r2, #0
 8009c16:	60e0      	str	r0, [r4, #12]
 8009c18:	2104      	movs	r1, #4
 8009c1a:	6860      	ldr	r0, [r4, #4]
 8009c1c:	f7ff ff82 	bl	8009b24 <std>
 8009c20:	68a0      	ldr	r0, [r4, #8]
 8009c22:	2201      	movs	r2, #1
 8009c24:	2109      	movs	r1, #9
 8009c26:	f7ff ff7d 	bl	8009b24 <std>
 8009c2a:	68e0      	ldr	r0, [r4, #12]
 8009c2c:	2202      	movs	r2, #2
 8009c2e:	2112      	movs	r1, #18
 8009c30:	f7ff ff78 	bl	8009b24 <std>
 8009c34:	2301      	movs	r3, #1
 8009c36:	61a3      	str	r3, [r4, #24]
 8009c38:	e7d2      	b.n	8009be0 <__sinit+0xc>
 8009c3a:	bf00      	nop
 8009c3c:	0800b370 	.word	0x0800b370
 8009c40:	08009b6d 	.word	0x08009b6d

08009c44 <__sfp>:
 8009c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c46:	4607      	mov	r7, r0
 8009c48:	f7ff ffac 	bl	8009ba4 <__sfp_lock_acquire>
 8009c4c:	4b1e      	ldr	r3, [pc, #120]	; (8009cc8 <__sfp+0x84>)
 8009c4e:	681e      	ldr	r6, [r3, #0]
 8009c50:	69b3      	ldr	r3, [r6, #24]
 8009c52:	b913      	cbnz	r3, 8009c5a <__sfp+0x16>
 8009c54:	4630      	mov	r0, r6
 8009c56:	f7ff ffbd 	bl	8009bd4 <__sinit>
 8009c5a:	3648      	adds	r6, #72	; 0x48
 8009c5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c60:	3b01      	subs	r3, #1
 8009c62:	d503      	bpl.n	8009c6c <__sfp+0x28>
 8009c64:	6833      	ldr	r3, [r6, #0]
 8009c66:	b30b      	cbz	r3, 8009cac <__sfp+0x68>
 8009c68:	6836      	ldr	r6, [r6, #0]
 8009c6a:	e7f7      	b.n	8009c5c <__sfp+0x18>
 8009c6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c70:	b9d5      	cbnz	r5, 8009ca8 <__sfp+0x64>
 8009c72:	4b16      	ldr	r3, [pc, #88]	; (8009ccc <__sfp+0x88>)
 8009c74:	60e3      	str	r3, [r4, #12]
 8009c76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c7a:	6665      	str	r5, [r4, #100]	; 0x64
 8009c7c:	f000 f86c 	bl	8009d58 <__retarget_lock_init_recursive>
 8009c80:	f7ff ff96 	bl	8009bb0 <__sfp_lock_release>
 8009c84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c8c:	6025      	str	r5, [r4, #0]
 8009c8e:	61a5      	str	r5, [r4, #24]
 8009c90:	2208      	movs	r2, #8
 8009c92:	4629      	mov	r1, r5
 8009c94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c98:	f000 f86f 	bl	8009d7a <memset>
 8009c9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ca0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ca8:	3468      	adds	r4, #104	; 0x68
 8009caa:	e7d9      	b.n	8009c60 <__sfp+0x1c>
 8009cac:	2104      	movs	r1, #4
 8009cae:	4638      	mov	r0, r7
 8009cb0:	f7ff ff62 	bl	8009b78 <__sfmoreglue>
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	6030      	str	r0, [r6, #0]
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d1d5      	bne.n	8009c68 <__sfp+0x24>
 8009cbc:	f7ff ff78 	bl	8009bb0 <__sfp_lock_release>
 8009cc0:	230c      	movs	r3, #12
 8009cc2:	603b      	str	r3, [r7, #0]
 8009cc4:	e7ee      	b.n	8009ca4 <__sfp+0x60>
 8009cc6:	bf00      	nop
 8009cc8:	0800b370 	.word	0x0800b370
 8009ccc:	ffff0001 	.word	0xffff0001

08009cd0 <_fwalk_reent>:
 8009cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cd4:	4606      	mov	r6, r0
 8009cd6:	4688      	mov	r8, r1
 8009cd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cdc:	2700      	movs	r7, #0
 8009cde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ce2:	f1b9 0901 	subs.w	r9, r9, #1
 8009ce6:	d505      	bpl.n	8009cf4 <_fwalk_reent+0x24>
 8009ce8:	6824      	ldr	r4, [r4, #0]
 8009cea:	2c00      	cmp	r4, #0
 8009cec:	d1f7      	bne.n	8009cde <_fwalk_reent+0xe>
 8009cee:	4638      	mov	r0, r7
 8009cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cf4:	89ab      	ldrh	r3, [r5, #12]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d907      	bls.n	8009d0a <_fwalk_reent+0x3a>
 8009cfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	d003      	beq.n	8009d0a <_fwalk_reent+0x3a>
 8009d02:	4629      	mov	r1, r5
 8009d04:	4630      	mov	r0, r6
 8009d06:	47c0      	blx	r8
 8009d08:	4307      	orrs	r7, r0
 8009d0a:	3568      	adds	r5, #104	; 0x68
 8009d0c:	e7e9      	b.n	8009ce2 <_fwalk_reent+0x12>
	...

08009d10 <__libc_init_array>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	4d0d      	ldr	r5, [pc, #52]	; (8009d48 <__libc_init_array+0x38>)
 8009d14:	4c0d      	ldr	r4, [pc, #52]	; (8009d4c <__libc_init_array+0x3c>)
 8009d16:	1b64      	subs	r4, r4, r5
 8009d18:	10a4      	asrs	r4, r4, #2
 8009d1a:	2600      	movs	r6, #0
 8009d1c:	42a6      	cmp	r6, r4
 8009d1e:	d109      	bne.n	8009d34 <__libc_init_array+0x24>
 8009d20:	4d0b      	ldr	r5, [pc, #44]	; (8009d50 <__libc_init_array+0x40>)
 8009d22:	4c0c      	ldr	r4, [pc, #48]	; (8009d54 <__libc_init_array+0x44>)
 8009d24:	f001 f968 	bl	800aff8 <_init>
 8009d28:	1b64      	subs	r4, r4, r5
 8009d2a:	10a4      	asrs	r4, r4, #2
 8009d2c:	2600      	movs	r6, #0
 8009d2e:	42a6      	cmp	r6, r4
 8009d30:	d105      	bne.n	8009d3e <__libc_init_array+0x2e>
 8009d32:	bd70      	pop	{r4, r5, r6, pc}
 8009d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d38:	4798      	blx	r3
 8009d3a:	3601      	adds	r6, #1
 8009d3c:	e7ee      	b.n	8009d1c <__libc_init_array+0xc>
 8009d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d42:	4798      	blx	r3
 8009d44:	3601      	adds	r6, #1
 8009d46:	e7f2      	b.n	8009d2e <__libc_init_array+0x1e>
 8009d48:	0800b3b0 	.word	0x0800b3b0
 8009d4c:	0800b3b0 	.word	0x0800b3b0
 8009d50:	0800b3b0 	.word	0x0800b3b0
 8009d54:	0800b3b4 	.word	0x0800b3b4

08009d58 <__retarget_lock_init_recursive>:
 8009d58:	4770      	bx	lr

08009d5a <__retarget_lock_acquire_recursive>:
 8009d5a:	4770      	bx	lr

08009d5c <__retarget_lock_release_recursive>:
 8009d5c:	4770      	bx	lr

08009d5e <memcpy>:
 8009d5e:	440a      	add	r2, r1
 8009d60:	4291      	cmp	r1, r2
 8009d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d66:	d100      	bne.n	8009d6a <memcpy+0xc>
 8009d68:	4770      	bx	lr
 8009d6a:	b510      	push	{r4, lr}
 8009d6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d74:	4291      	cmp	r1, r2
 8009d76:	d1f9      	bne.n	8009d6c <memcpy+0xe>
 8009d78:	bd10      	pop	{r4, pc}

08009d7a <memset>:
 8009d7a:	4402      	add	r2, r0
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d100      	bne.n	8009d84 <memset+0xa>
 8009d82:	4770      	bx	lr
 8009d84:	f803 1b01 	strb.w	r1, [r3], #1
 8009d88:	e7f9      	b.n	8009d7e <memset+0x4>
	...

08009d8c <sbrk_aligned>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	4e0e      	ldr	r6, [pc, #56]	; (8009dc8 <sbrk_aligned+0x3c>)
 8009d90:	460c      	mov	r4, r1
 8009d92:	6831      	ldr	r1, [r6, #0]
 8009d94:	4605      	mov	r5, r0
 8009d96:	b911      	cbnz	r1, 8009d9e <sbrk_aligned+0x12>
 8009d98:	f000 f922 	bl	8009fe0 <_sbrk_r>
 8009d9c:	6030      	str	r0, [r6, #0]
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4628      	mov	r0, r5
 8009da2:	f000 f91d 	bl	8009fe0 <_sbrk_r>
 8009da6:	1c43      	adds	r3, r0, #1
 8009da8:	d00a      	beq.n	8009dc0 <sbrk_aligned+0x34>
 8009daa:	1cc4      	adds	r4, r0, #3
 8009dac:	f024 0403 	bic.w	r4, r4, #3
 8009db0:	42a0      	cmp	r0, r4
 8009db2:	d007      	beq.n	8009dc4 <sbrk_aligned+0x38>
 8009db4:	1a21      	subs	r1, r4, r0
 8009db6:	4628      	mov	r0, r5
 8009db8:	f000 f912 	bl	8009fe0 <_sbrk_r>
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	d101      	bne.n	8009dc4 <sbrk_aligned+0x38>
 8009dc0:	f04f 34ff 	mov.w	r4, #4294967295
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	bd70      	pop	{r4, r5, r6, pc}
 8009dc8:	2000337c 	.word	0x2000337c

08009dcc <_malloc_r>:
 8009dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd0:	1ccd      	adds	r5, r1, #3
 8009dd2:	f025 0503 	bic.w	r5, r5, #3
 8009dd6:	3508      	adds	r5, #8
 8009dd8:	2d0c      	cmp	r5, #12
 8009dda:	bf38      	it	cc
 8009ddc:	250c      	movcc	r5, #12
 8009dde:	2d00      	cmp	r5, #0
 8009de0:	4607      	mov	r7, r0
 8009de2:	db01      	blt.n	8009de8 <_malloc_r+0x1c>
 8009de4:	42a9      	cmp	r1, r5
 8009de6:	d905      	bls.n	8009df4 <_malloc_r+0x28>
 8009de8:	230c      	movs	r3, #12
 8009dea:	603b      	str	r3, [r7, #0]
 8009dec:	2600      	movs	r6, #0
 8009dee:	4630      	mov	r0, r6
 8009df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009df4:	4e2e      	ldr	r6, [pc, #184]	; (8009eb0 <_malloc_r+0xe4>)
 8009df6:	f000 fa6d 	bl	800a2d4 <__malloc_lock>
 8009dfa:	6833      	ldr	r3, [r6, #0]
 8009dfc:	461c      	mov	r4, r3
 8009dfe:	bb34      	cbnz	r4, 8009e4e <_malloc_r+0x82>
 8009e00:	4629      	mov	r1, r5
 8009e02:	4638      	mov	r0, r7
 8009e04:	f7ff ffc2 	bl	8009d8c <sbrk_aligned>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	d14d      	bne.n	8009eaa <_malloc_r+0xde>
 8009e0e:	6834      	ldr	r4, [r6, #0]
 8009e10:	4626      	mov	r6, r4
 8009e12:	2e00      	cmp	r6, #0
 8009e14:	d140      	bne.n	8009e98 <_malloc_r+0xcc>
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	4631      	mov	r1, r6
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	eb04 0803 	add.w	r8, r4, r3
 8009e20:	f000 f8de 	bl	8009fe0 <_sbrk_r>
 8009e24:	4580      	cmp	r8, r0
 8009e26:	d13a      	bne.n	8009e9e <_malloc_r+0xd2>
 8009e28:	6821      	ldr	r1, [r4, #0]
 8009e2a:	3503      	adds	r5, #3
 8009e2c:	1a6d      	subs	r5, r5, r1
 8009e2e:	f025 0503 	bic.w	r5, r5, #3
 8009e32:	3508      	adds	r5, #8
 8009e34:	2d0c      	cmp	r5, #12
 8009e36:	bf38      	it	cc
 8009e38:	250c      	movcc	r5, #12
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	4638      	mov	r0, r7
 8009e3e:	f7ff ffa5 	bl	8009d8c <sbrk_aligned>
 8009e42:	3001      	adds	r0, #1
 8009e44:	d02b      	beq.n	8009e9e <_malloc_r+0xd2>
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	442b      	add	r3, r5
 8009e4a:	6023      	str	r3, [r4, #0]
 8009e4c:	e00e      	b.n	8009e6c <_malloc_r+0xa0>
 8009e4e:	6822      	ldr	r2, [r4, #0]
 8009e50:	1b52      	subs	r2, r2, r5
 8009e52:	d41e      	bmi.n	8009e92 <_malloc_r+0xc6>
 8009e54:	2a0b      	cmp	r2, #11
 8009e56:	d916      	bls.n	8009e86 <_malloc_r+0xba>
 8009e58:	1961      	adds	r1, r4, r5
 8009e5a:	42a3      	cmp	r3, r4
 8009e5c:	6025      	str	r5, [r4, #0]
 8009e5e:	bf18      	it	ne
 8009e60:	6059      	strne	r1, [r3, #4]
 8009e62:	6863      	ldr	r3, [r4, #4]
 8009e64:	bf08      	it	eq
 8009e66:	6031      	streq	r1, [r6, #0]
 8009e68:	5162      	str	r2, [r4, r5]
 8009e6a:	604b      	str	r3, [r1, #4]
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	f104 060b 	add.w	r6, r4, #11
 8009e72:	f000 fa35 	bl	800a2e0 <__malloc_unlock>
 8009e76:	f026 0607 	bic.w	r6, r6, #7
 8009e7a:	1d23      	adds	r3, r4, #4
 8009e7c:	1af2      	subs	r2, r6, r3
 8009e7e:	d0b6      	beq.n	8009dee <_malloc_r+0x22>
 8009e80:	1b9b      	subs	r3, r3, r6
 8009e82:	50a3      	str	r3, [r4, r2]
 8009e84:	e7b3      	b.n	8009dee <_malloc_r+0x22>
 8009e86:	6862      	ldr	r2, [r4, #4]
 8009e88:	42a3      	cmp	r3, r4
 8009e8a:	bf0c      	ite	eq
 8009e8c:	6032      	streq	r2, [r6, #0]
 8009e8e:	605a      	strne	r2, [r3, #4]
 8009e90:	e7ec      	b.n	8009e6c <_malloc_r+0xa0>
 8009e92:	4623      	mov	r3, r4
 8009e94:	6864      	ldr	r4, [r4, #4]
 8009e96:	e7b2      	b.n	8009dfe <_malloc_r+0x32>
 8009e98:	4634      	mov	r4, r6
 8009e9a:	6876      	ldr	r6, [r6, #4]
 8009e9c:	e7b9      	b.n	8009e12 <_malloc_r+0x46>
 8009e9e:	230c      	movs	r3, #12
 8009ea0:	603b      	str	r3, [r7, #0]
 8009ea2:	4638      	mov	r0, r7
 8009ea4:	f000 fa1c 	bl	800a2e0 <__malloc_unlock>
 8009ea8:	e7a1      	b.n	8009dee <_malloc_r+0x22>
 8009eaa:	6025      	str	r5, [r4, #0]
 8009eac:	e7de      	b.n	8009e6c <_malloc_r+0xa0>
 8009eae:	bf00      	nop
 8009eb0:	20003378 	.word	0x20003378

08009eb4 <iprintf>:
 8009eb4:	b40f      	push	{r0, r1, r2, r3}
 8009eb6:	4b0a      	ldr	r3, [pc, #40]	; (8009ee0 <iprintf+0x2c>)
 8009eb8:	b513      	push	{r0, r1, r4, lr}
 8009eba:	681c      	ldr	r4, [r3, #0]
 8009ebc:	b124      	cbz	r4, 8009ec8 <iprintf+0x14>
 8009ebe:	69a3      	ldr	r3, [r4, #24]
 8009ec0:	b913      	cbnz	r3, 8009ec8 <iprintf+0x14>
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f7ff fe86 	bl	8009bd4 <__sinit>
 8009ec8:	ab05      	add	r3, sp, #20
 8009eca:	9a04      	ldr	r2, [sp, #16]
 8009ecc:	68a1      	ldr	r1, [r4, #8]
 8009ece:	9301      	str	r3, [sp, #4]
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f000 fbd9 	bl	800a688 <_vfiprintf_r>
 8009ed6:	b002      	add	sp, #8
 8009ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009edc:	b004      	add	sp, #16
 8009ede:	4770      	bx	lr
 8009ee0:	20000120 	.word	0x20000120

08009ee4 <putchar>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	4b08      	ldr	r3, [pc, #32]	; (8009f08 <putchar+0x24>)
 8009ee8:	681c      	ldr	r4, [r3, #0]
 8009eea:	4605      	mov	r5, r0
 8009eec:	b124      	cbz	r4, 8009ef8 <putchar+0x14>
 8009eee:	69a3      	ldr	r3, [r4, #24]
 8009ef0:	b913      	cbnz	r3, 8009ef8 <putchar+0x14>
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	f7ff fe6e 	bl	8009bd4 <__sinit>
 8009ef8:	68a2      	ldr	r2, [r4, #8]
 8009efa:	4629      	mov	r1, r5
 8009efc:	4620      	mov	r0, r4
 8009efe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f02:	f000 be85 	b.w	800ac10 <_putc_r>
 8009f06:	bf00      	nop
 8009f08:	20000120 	.word	0x20000120

08009f0c <cleanup_glue>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	460c      	mov	r4, r1
 8009f10:	6809      	ldr	r1, [r1, #0]
 8009f12:	4605      	mov	r5, r0
 8009f14:	b109      	cbz	r1, 8009f1a <cleanup_glue+0xe>
 8009f16:	f7ff fff9 	bl	8009f0c <cleanup_glue>
 8009f1a:	4621      	mov	r1, r4
 8009f1c:	4628      	mov	r0, r5
 8009f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f22:	f000 b9e3 	b.w	800a2ec <_free_r>
	...

08009f28 <_reclaim_reent>:
 8009f28:	4b2c      	ldr	r3, [pc, #176]	; (8009fdc <_reclaim_reent+0xb4>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4283      	cmp	r3, r0
 8009f2e:	b570      	push	{r4, r5, r6, lr}
 8009f30:	4604      	mov	r4, r0
 8009f32:	d051      	beq.n	8009fd8 <_reclaim_reent+0xb0>
 8009f34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009f36:	b143      	cbz	r3, 8009f4a <_reclaim_reent+0x22>
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d14a      	bne.n	8009fd4 <_reclaim_reent+0xac>
 8009f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f40:	6819      	ldr	r1, [r3, #0]
 8009f42:	b111      	cbz	r1, 8009f4a <_reclaim_reent+0x22>
 8009f44:	4620      	mov	r0, r4
 8009f46:	f000 f9d1 	bl	800a2ec <_free_r>
 8009f4a:	6961      	ldr	r1, [r4, #20]
 8009f4c:	b111      	cbz	r1, 8009f54 <_reclaim_reent+0x2c>
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f000 f9cc 	bl	800a2ec <_free_r>
 8009f54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009f56:	b111      	cbz	r1, 8009f5e <_reclaim_reent+0x36>
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f000 f9c7 	bl	800a2ec <_free_r>
 8009f5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009f60:	b111      	cbz	r1, 8009f68 <_reclaim_reent+0x40>
 8009f62:	4620      	mov	r0, r4
 8009f64:	f000 f9c2 	bl	800a2ec <_free_r>
 8009f68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009f6a:	b111      	cbz	r1, 8009f72 <_reclaim_reent+0x4a>
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f000 f9bd 	bl	800a2ec <_free_r>
 8009f72:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009f74:	b111      	cbz	r1, 8009f7c <_reclaim_reent+0x54>
 8009f76:	4620      	mov	r0, r4
 8009f78:	f000 f9b8 	bl	800a2ec <_free_r>
 8009f7c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009f7e:	b111      	cbz	r1, 8009f86 <_reclaim_reent+0x5e>
 8009f80:	4620      	mov	r0, r4
 8009f82:	f000 f9b3 	bl	800a2ec <_free_r>
 8009f86:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009f88:	b111      	cbz	r1, 8009f90 <_reclaim_reent+0x68>
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	f000 f9ae 	bl	800a2ec <_free_r>
 8009f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f92:	b111      	cbz	r1, 8009f9a <_reclaim_reent+0x72>
 8009f94:	4620      	mov	r0, r4
 8009f96:	f000 f9a9 	bl	800a2ec <_free_r>
 8009f9a:	69a3      	ldr	r3, [r4, #24]
 8009f9c:	b1e3      	cbz	r3, 8009fd8 <_reclaim_reent+0xb0>
 8009f9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	4798      	blx	r3
 8009fa4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009fa6:	b1b9      	cbz	r1, 8009fd8 <_reclaim_reent+0xb0>
 8009fa8:	4620      	mov	r0, r4
 8009faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009fae:	f7ff bfad 	b.w	8009f0c <cleanup_glue>
 8009fb2:	5949      	ldr	r1, [r1, r5]
 8009fb4:	b941      	cbnz	r1, 8009fc8 <_reclaim_reent+0xa0>
 8009fb6:	3504      	adds	r5, #4
 8009fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fba:	2d80      	cmp	r5, #128	; 0x80
 8009fbc:	68d9      	ldr	r1, [r3, #12]
 8009fbe:	d1f8      	bne.n	8009fb2 <_reclaim_reent+0x8a>
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f000 f993 	bl	800a2ec <_free_r>
 8009fc6:	e7ba      	b.n	8009f3e <_reclaim_reent+0x16>
 8009fc8:	680e      	ldr	r6, [r1, #0]
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f000 f98e 	bl	800a2ec <_free_r>
 8009fd0:	4631      	mov	r1, r6
 8009fd2:	e7ef      	b.n	8009fb4 <_reclaim_reent+0x8c>
 8009fd4:	2500      	movs	r5, #0
 8009fd6:	e7ef      	b.n	8009fb8 <_reclaim_reent+0x90>
 8009fd8:	bd70      	pop	{r4, r5, r6, pc}
 8009fda:	bf00      	nop
 8009fdc:	20000120 	.word	0x20000120

08009fe0 <_sbrk_r>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	4d06      	ldr	r5, [pc, #24]	; (8009ffc <_sbrk_r+0x1c>)
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	4608      	mov	r0, r1
 8009fea:	602b      	str	r3, [r5, #0]
 8009fec:	f7f7 fb2a 	bl	8001644 <_sbrk>
 8009ff0:	1c43      	adds	r3, r0, #1
 8009ff2:	d102      	bne.n	8009ffa <_sbrk_r+0x1a>
 8009ff4:	682b      	ldr	r3, [r5, #0]
 8009ff6:	b103      	cbz	r3, 8009ffa <_sbrk_r+0x1a>
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	bd38      	pop	{r3, r4, r5, pc}
 8009ffc:	20003380 	.word	0x20003380

0800a000 <siprintf>:
 800a000:	b40e      	push	{r1, r2, r3}
 800a002:	b500      	push	{lr}
 800a004:	b09c      	sub	sp, #112	; 0x70
 800a006:	ab1d      	add	r3, sp, #116	; 0x74
 800a008:	9002      	str	r0, [sp, #8]
 800a00a:	9006      	str	r0, [sp, #24]
 800a00c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a010:	4809      	ldr	r0, [pc, #36]	; (800a038 <siprintf+0x38>)
 800a012:	9107      	str	r1, [sp, #28]
 800a014:	9104      	str	r1, [sp, #16]
 800a016:	4909      	ldr	r1, [pc, #36]	; (800a03c <siprintf+0x3c>)
 800a018:	f853 2b04 	ldr.w	r2, [r3], #4
 800a01c:	9105      	str	r1, [sp, #20]
 800a01e:	6800      	ldr	r0, [r0, #0]
 800a020:	9301      	str	r3, [sp, #4]
 800a022:	a902      	add	r1, sp, #8
 800a024:	f000 fa08 	bl	800a438 <_svfiprintf_r>
 800a028:	9b02      	ldr	r3, [sp, #8]
 800a02a:	2200      	movs	r2, #0
 800a02c:	701a      	strb	r2, [r3, #0]
 800a02e:	b01c      	add	sp, #112	; 0x70
 800a030:	f85d eb04 	ldr.w	lr, [sp], #4
 800a034:	b003      	add	sp, #12
 800a036:	4770      	bx	lr
 800a038:	20000120 	.word	0x20000120
 800a03c:	ffff0208 	.word	0xffff0208

0800a040 <__sread>:
 800a040:	b510      	push	{r4, lr}
 800a042:	460c      	mov	r4, r1
 800a044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a048:	f000 fe2a 	bl	800aca0 <_read_r>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	bfab      	itete	ge
 800a050:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a052:	89a3      	ldrhlt	r3, [r4, #12]
 800a054:	181b      	addge	r3, r3, r0
 800a056:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a05a:	bfac      	ite	ge
 800a05c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a05e:	81a3      	strhlt	r3, [r4, #12]
 800a060:	bd10      	pop	{r4, pc}

0800a062 <__swrite>:
 800a062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a066:	461f      	mov	r7, r3
 800a068:	898b      	ldrh	r3, [r1, #12]
 800a06a:	05db      	lsls	r3, r3, #23
 800a06c:	4605      	mov	r5, r0
 800a06e:	460c      	mov	r4, r1
 800a070:	4616      	mov	r6, r2
 800a072:	d505      	bpl.n	800a080 <__swrite+0x1e>
 800a074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a078:	2302      	movs	r3, #2
 800a07a:	2200      	movs	r2, #0
 800a07c:	f000 f918 	bl	800a2b0 <_lseek_r>
 800a080:	89a3      	ldrh	r3, [r4, #12]
 800a082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a086:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a08a:	81a3      	strh	r3, [r4, #12]
 800a08c:	4632      	mov	r2, r6
 800a08e:	463b      	mov	r3, r7
 800a090:	4628      	mov	r0, r5
 800a092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a096:	f000 b82b 	b.w	800a0f0 <_write_r>

0800a09a <__sseek>:
 800a09a:	b510      	push	{r4, lr}
 800a09c:	460c      	mov	r4, r1
 800a09e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a2:	f000 f905 	bl	800a2b0 <_lseek_r>
 800a0a6:	1c43      	adds	r3, r0, #1
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	bf15      	itete	ne
 800a0ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0b6:	81a3      	strheq	r3, [r4, #12]
 800a0b8:	bf18      	it	ne
 800a0ba:	81a3      	strhne	r3, [r4, #12]
 800a0bc:	bd10      	pop	{r4, pc}

0800a0be <__sclose>:
 800a0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c2:	f000 b827 	b.w	800a114 <_close_r>

0800a0c6 <strncmp>:
 800a0c6:	b510      	push	{r4, lr}
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	b172      	cbz	r2, 800a0ea <strncmp+0x24>
 800a0cc:	3901      	subs	r1, #1
 800a0ce:	1884      	adds	r4, r0, r2
 800a0d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a0d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a0d8:	4290      	cmp	r0, r2
 800a0da:	d101      	bne.n	800a0e0 <strncmp+0x1a>
 800a0dc:	42a3      	cmp	r3, r4
 800a0de:	d101      	bne.n	800a0e4 <strncmp+0x1e>
 800a0e0:	1a80      	subs	r0, r0, r2
 800a0e2:	bd10      	pop	{r4, pc}
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d1f3      	bne.n	800a0d0 <strncmp+0xa>
 800a0e8:	e7fa      	b.n	800a0e0 <strncmp+0x1a>
 800a0ea:	4610      	mov	r0, r2
 800a0ec:	e7f9      	b.n	800a0e2 <strncmp+0x1c>
	...

0800a0f0 <_write_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4d07      	ldr	r5, [pc, #28]	; (800a110 <_write_r+0x20>)
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	4608      	mov	r0, r1
 800a0f8:	4611      	mov	r1, r2
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	602a      	str	r2, [r5, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	f7f6 fa42 	bl	8000588 <_write>
 800a104:	1c43      	adds	r3, r0, #1
 800a106:	d102      	bne.n	800a10e <_write_r+0x1e>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	b103      	cbz	r3, 800a10e <_write_r+0x1e>
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	bd38      	pop	{r3, r4, r5, pc}
 800a110:	20003380 	.word	0x20003380

0800a114 <_close_r>:
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	4d06      	ldr	r5, [pc, #24]	; (800a130 <_close_r+0x1c>)
 800a118:	2300      	movs	r3, #0
 800a11a:	4604      	mov	r4, r0
 800a11c:	4608      	mov	r0, r1
 800a11e:	602b      	str	r3, [r5, #0]
 800a120:	f7f7 fa5f 	bl	80015e2 <_close>
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d102      	bne.n	800a12e <_close_r+0x1a>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	b103      	cbz	r3, 800a12e <_close_r+0x1a>
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	bd38      	pop	{r3, r4, r5, pc}
 800a130:	20003380 	.word	0x20003380

0800a134 <__sflush_r>:
 800a134:	898a      	ldrh	r2, [r1, #12]
 800a136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a138:	4605      	mov	r5, r0
 800a13a:	0710      	lsls	r0, r2, #28
 800a13c:	460c      	mov	r4, r1
 800a13e:	d457      	bmi.n	800a1f0 <__sflush_r+0xbc>
 800a140:	684b      	ldr	r3, [r1, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	dc04      	bgt.n	800a150 <__sflush_r+0x1c>
 800a146:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a148:	2b00      	cmp	r3, #0
 800a14a:	dc01      	bgt.n	800a150 <__sflush_r+0x1c>
 800a14c:	2000      	movs	r0, #0
 800a14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a152:	2e00      	cmp	r6, #0
 800a154:	d0fa      	beq.n	800a14c <__sflush_r+0x18>
 800a156:	2300      	movs	r3, #0
 800a158:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a15c:	682f      	ldr	r7, [r5, #0]
 800a15e:	602b      	str	r3, [r5, #0]
 800a160:	d032      	beq.n	800a1c8 <__sflush_r+0x94>
 800a162:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a164:	89a3      	ldrh	r3, [r4, #12]
 800a166:	075a      	lsls	r2, r3, #29
 800a168:	d505      	bpl.n	800a176 <__sflush_r+0x42>
 800a16a:	6863      	ldr	r3, [r4, #4]
 800a16c:	1ac0      	subs	r0, r0, r3
 800a16e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a170:	b10b      	cbz	r3, 800a176 <__sflush_r+0x42>
 800a172:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a174:	1ac0      	subs	r0, r0, r3
 800a176:	2300      	movs	r3, #0
 800a178:	4602      	mov	r2, r0
 800a17a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a17c:	6a21      	ldr	r1, [r4, #32]
 800a17e:	4628      	mov	r0, r5
 800a180:	47b0      	blx	r6
 800a182:	1c43      	adds	r3, r0, #1
 800a184:	89a3      	ldrh	r3, [r4, #12]
 800a186:	d106      	bne.n	800a196 <__sflush_r+0x62>
 800a188:	6829      	ldr	r1, [r5, #0]
 800a18a:	291d      	cmp	r1, #29
 800a18c:	d82c      	bhi.n	800a1e8 <__sflush_r+0xb4>
 800a18e:	4a29      	ldr	r2, [pc, #164]	; (800a234 <__sflush_r+0x100>)
 800a190:	40ca      	lsrs	r2, r1
 800a192:	07d6      	lsls	r6, r2, #31
 800a194:	d528      	bpl.n	800a1e8 <__sflush_r+0xb4>
 800a196:	2200      	movs	r2, #0
 800a198:	6062      	str	r2, [r4, #4]
 800a19a:	04d9      	lsls	r1, r3, #19
 800a19c:	6922      	ldr	r2, [r4, #16]
 800a19e:	6022      	str	r2, [r4, #0]
 800a1a0:	d504      	bpl.n	800a1ac <__sflush_r+0x78>
 800a1a2:	1c42      	adds	r2, r0, #1
 800a1a4:	d101      	bne.n	800a1aa <__sflush_r+0x76>
 800a1a6:	682b      	ldr	r3, [r5, #0]
 800a1a8:	b903      	cbnz	r3, 800a1ac <__sflush_r+0x78>
 800a1aa:	6560      	str	r0, [r4, #84]	; 0x54
 800a1ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1ae:	602f      	str	r7, [r5, #0]
 800a1b0:	2900      	cmp	r1, #0
 800a1b2:	d0cb      	beq.n	800a14c <__sflush_r+0x18>
 800a1b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1b8:	4299      	cmp	r1, r3
 800a1ba:	d002      	beq.n	800a1c2 <__sflush_r+0x8e>
 800a1bc:	4628      	mov	r0, r5
 800a1be:	f000 f895 	bl	800a2ec <_free_r>
 800a1c2:	2000      	movs	r0, #0
 800a1c4:	6360      	str	r0, [r4, #52]	; 0x34
 800a1c6:	e7c2      	b.n	800a14e <__sflush_r+0x1a>
 800a1c8:	6a21      	ldr	r1, [r4, #32]
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	47b0      	blx	r6
 800a1d0:	1c41      	adds	r1, r0, #1
 800a1d2:	d1c7      	bne.n	800a164 <__sflush_r+0x30>
 800a1d4:	682b      	ldr	r3, [r5, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d0c4      	beq.n	800a164 <__sflush_r+0x30>
 800a1da:	2b1d      	cmp	r3, #29
 800a1dc:	d001      	beq.n	800a1e2 <__sflush_r+0xae>
 800a1de:	2b16      	cmp	r3, #22
 800a1e0:	d101      	bne.n	800a1e6 <__sflush_r+0xb2>
 800a1e2:	602f      	str	r7, [r5, #0]
 800a1e4:	e7b2      	b.n	800a14c <__sflush_r+0x18>
 800a1e6:	89a3      	ldrh	r3, [r4, #12]
 800a1e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1ec:	81a3      	strh	r3, [r4, #12]
 800a1ee:	e7ae      	b.n	800a14e <__sflush_r+0x1a>
 800a1f0:	690f      	ldr	r7, [r1, #16]
 800a1f2:	2f00      	cmp	r7, #0
 800a1f4:	d0aa      	beq.n	800a14c <__sflush_r+0x18>
 800a1f6:	0793      	lsls	r3, r2, #30
 800a1f8:	680e      	ldr	r6, [r1, #0]
 800a1fa:	bf08      	it	eq
 800a1fc:	694b      	ldreq	r3, [r1, #20]
 800a1fe:	600f      	str	r7, [r1, #0]
 800a200:	bf18      	it	ne
 800a202:	2300      	movne	r3, #0
 800a204:	1bf6      	subs	r6, r6, r7
 800a206:	608b      	str	r3, [r1, #8]
 800a208:	2e00      	cmp	r6, #0
 800a20a:	dd9f      	ble.n	800a14c <__sflush_r+0x18>
 800a20c:	6a21      	ldr	r1, [r4, #32]
 800a20e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a212:	4633      	mov	r3, r6
 800a214:	463a      	mov	r2, r7
 800a216:	4628      	mov	r0, r5
 800a218:	47e0      	blx	ip
 800a21a:	2800      	cmp	r0, #0
 800a21c:	dc06      	bgt.n	800a22c <__sflush_r+0xf8>
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a224:	81a3      	strh	r3, [r4, #12]
 800a226:	f04f 30ff 	mov.w	r0, #4294967295
 800a22a:	e790      	b.n	800a14e <__sflush_r+0x1a>
 800a22c:	4407      	add	r7, r0
 800a22e:	1a36      	subs	r6, r6, r0
 800a230:	e7ea      	b.n	800a208 <__sflush_r+0xd4>
 800a232:	bf00      	nop
 800a234:	20400001 	.word	0x20400001

0800a238 <_fflush_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	690b      	ldr	r3, [r1, #16]
 800a23c:	4605      	mov	r5, r0
 800a23e:	460c      	mov	r4, r1
 800a240:	b913      	cbnz	r3, 800a248 <_fflush_r+0x10>
 800a242:	2500      	movs	r5, #0
 800a244:	4628      	mov	r0, r5
 800a246:	bd38      	pop	{r3, r4, r5, pc}
 800a248:	b118      	cbz	r0, 800a252 <_fflush_r+0x1a>
 800a24a:	6983      	ldr	r3, [r0, #24]
 800a24c:	b90b      	cbnz	r3, 800a252 <_fflush_r+0x1a>
 800a24e:	f7ff fcc1 	bl	8009bd4 <__sinit>
 800a252:	4b14      	ldr	r3, [pc, #80]	; (800a2a4 <_fflush_r+0x6c>)
 800a254:	429c      	cmp	r4, r3
 800a256:	d11b      	bne.n	800a290 <_fflush_r+0x58>
 800a258:	686c      	ldr	r4, [r5, #4]
 800a25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d0ef      	beq.n	800a242 <_fflush_r+0xa>
 800a262:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a264:	07d0      	lsls	r0, r2, #31
 800a266:	d404      	bmi.n	800a272 <_fflush_r+0x3a>
 800a268:	0599      	lsls	r1, r3, #22
 800a26a:	d402      	bmi.n	800a272 <_fflush_r+0x3a>
 800a26c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a26e:	f7ff fd74 	bl	8009d5a <__retarget_lock_acquire_recursive>
 800a272:	4628      	mov	r0, r5
 800a274:	4621      	mov	r1, r4
 800a276:	f7ff ff5d 	bl	800a134 <__sflush_r>
 800a27a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a27c:	07da      	lsls	r2, r3, #31
 800a27e:	4605      	mov	r5, r0
 800a280:	d4e0      	bmi.n	800a244 <_fflush_r+0xc>
 800a282:	89a3      	ldrh	r3, [r4, #12]
 800a284:	059b      	lsls	r3, r3, #22
 800a286:	d4dd      	bmi.n	800a244 <_fflush_r+0xc>
 800a288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a28a:	f7ff fd67 	bl	8009d5c <__retarget_lock_release_recursive>
 800a28e:	e7d9      	b.n	800a244 <_fflush_r+0xc>
 800a290:	4b05      	ldr	r3, [pc, #20]	; (800a2a8 <_fflush_r+0x70>)
 800a292:	429c      	cmp	r4, r3
 800a294:	d101      	bne.n	800a29a <_fflush_r+0x62>
 800a296:	68ac      	ldr	r4, [r5, #8]
 800a298:	e7df      	b.n	800a25a <_fflush_r+0x22>
 800a29a:	4b04      	ldr	r3, [pc, #16]	; (800a2ac <_fflush_r+0x74>)
 800a29c:	429c      	cmp	r4, r3
 800a29e:	bf08      	it	eq
 800a2a0:	68ec      	ldreq	r4, [r5, #12]
 800a2a2:	e7da      	b.n	800a25a <_fflush_r+0x22>
 800a2a4:	0800b330 	.word	0x0800b330
 800a2a8:	0800b350 	.word	0x0800b350
 800a2ac:	0800b310 	.word	0x0800b310

0800a2b0 <_lseek_r>:
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	4d07      	ldr	r5, [pc, #28]	; (800a2d0 <_lseek_r+0x20>)
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	4608      	mov	r0, r1
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	602a      	str	r2, [r5, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	f7f7 f9b3 	bl	800162a <_lseek>
 800a2c4:	1c43      	adds	r3, r0, #1
 800a2c6:	d102      	bne.n	800a2ce <_lseek_r+0x1e>
 800a2c8:	682b      	ldr	r3, [r5, #0]
 800a2ca:	b103      	cbz	r3, 800a2ce <_lseek_r+0x1e>
 800a2cc:	6023      	str	r3, [r4, #0]
 800a2ce:	bd38      	pop	{r3, r4, r5, pc}
 800a2d0:	20003380 	.word	0x20003380

0800a2d4 <__malloc_lock>:
 800a2d4:	4801      	ldr	r0, [pc, #4]	; (800a2dc <__malloc_lock+0x8>)
 800a2d6:	f7ff bd40 	b.w	8009d5a <__retarget_lock_acquire_recursive>
 800a2da:	bf00      	nop
 800a2dc:	20003374 	.word	0x20003374

0800a2e0 <__malloc_unlock>:
 800a2e0:	4801      	ldr	r0, [pc, #4]	; (800a2e8 <__malloc_unlock+0x8>)
 800a2e2:	f7ff bd3b 	b.w	8009d5c <__retarget_lock_release_recursive>
 800a2e6:	bf00      	nop
 800a2e8:	20003374 	.word	0x20003374

0800a2ec <_free_r>:
 800a2ec:	b538      	push	{r3, r4, r5, lr}
 800a2ee:	4605      	mov	r5, r0
 800a2f0:	2900      	cmp	r1, #0
 800a2f2:	d041      	beq.n	800a378 <_free_r+0x8c>
 800a2f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2f8:	1f0c      	subs	r4, r1, #4
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	bfb8      	it	lt
 800a2fe:	18e4      	addlt	r4, r4, r3
 800a300:	f7ff ffe8 	bl	800a2d4 <__malloc_lock>
 800a304:	4a1d      	ldr	r2, [pc, #116]	; (800a37c <_free_r+0x90>)
 800a306:	6813      	ldr	r3, [r2, #0]
 800a308:	b933      	cbnz	r3, 800a318 <_free_r+0x2c>
 800a30a:	6063      	str	r3, [r4, #4]
 800a30c:	6014      	str	r4, [r2, #0]
 800a30e:	4628      	mov	r0, r5
 800a310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a314:	f7ff bfe4 	b.w	800a2e0 <__malloc_unlock>
 800a318:	42a3      	cmp	r3, r4
 800a31a:	d908      	bls.n	800a32e <_free_r+0x42>
 800a31c:	6820      	ldr	r0, [r4, #0]
 800a31e:	1821      	adds	r1, r4, r0
 800a320:	428b      	cmp	r3, r1
 800a322:	bf01      	itttt	eq
 800a324:	6819      	ldreq	r1, [r3, #0]
 800a326:	685b      	ldreq	r3, [r3, #4]
 800a328:	1809      	addeq	r1, r1, r0
 800a32a:	6021      	streq	r1, [r4, #0]
 800a32c:	e7ed      	b.n	800a30a <_free_r+0x1e>
 800a32e:	461a      	mov	r2, r3
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	b10b      	cbz	r3, 800a338 <_free_r+0x4c>
 800a334:	42a3      	cmp	r3, r4
 800a336:	d9fa      	bls.n	800a32e <_free_r+0x42>
 800a338:	6811      	ldr	r1, [r2, #0]
 800a33a:	1850      	adds	r0, r2, r1
 800a33c:	42a0      	cmp	r0, r4
 800a33e:	d10b      	bne.n	800a358 <_free_r+0x6c>
 800a340:	6820      	ldr	r0, [r4, #0]
 800a342:	4401      	add	r1, r0
 800a344:	1850      	adds	r0, r2, r1
 800a346:	4283      	cmp	r3, r0
 800a348:	6011      	str	r1, [r2, #0]
 800a34a:	d1e0      	bne.n	800a30e <_free_r+0x22>
 800a34c:	6818      	ldr	r0, [r3, #0]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	6053      	str	r3, [r2, #4]
 800a352:	4401      	add	r1, r0
 800a354:	6011      	str	r1, [r2, #0]
 800a356:	e7da      	b.n	800a30e <_free_r+0x22>
 800a358:	d902      	bls.n	800a360 <_free_r+0x74>
 800a35a:	230c      	movs	r3, #12
 800a35c:	602b      	str	r3, [r5, #0]
 800a35e:	e7d6      	b.n	800a30e <_free_r+0x22>
 800a360:	6820      	ldr	r0, [r4, #0]
 800a362:	1821      	adds	r1, r4, r0
 800a364:	428b      	cmp	r3, r1
 800a366:	bf04      	itt	eq
 800a368:	6819      	ldreq	r1, [r3, #0]
 800a36a:	685b      	ldreq	r3, [r3, #4]
 800a36c:	6063      	str	r3, [r4, #4]
 800a36e:	bf04      	itt	eq
 800a370:	1809      	addeq	r1, r1, r0
 800a372:	6021      	streq	r1, [r4, #0]
 800a374:	6054      	str	r4, [r2, #4]
 800a376:	e7ca      	b.n	800a30e <_free_r+0x22>
 800a378:	bd38      	pop	{r3, r4, r5, pc}
 800a37a:	bf00      	nop
 800a37c:	20003378 	.word	0x20003378

0800a380 <__ssputs_r>:
 800a380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a384:	688e      	ldr	r6, [r1, #8]
 800a386:	429e      	cmp	r6, r3
 800a388:	4682      	mov	sl, r0
 800a38a:	460c      	mov	r4, r1
 800a38c:	4690      	mov	r8, r2
 800a38e:	461f      	mov	r7, r3
 800a390:	d838      	bhi.n	800a404 <__ssputs_r+0x84>
 800a392:	898a      	ldrh	r2, [r1, #12]
 800a394:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a398:	d032      	beq.n	800a400 <__ssputs_r+0x80>
 800a39a:	6825      	ldr	r5, [r4, #0]
 800a39c:	6909      	ldr	r1, [r1, #16]
 800a39e:	eba5 0901 	sub.w	r9, r5, r1
 800a3a2:	6965      	ldr	r5, [r4, #20]
 800a3a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	444b      	add	r3, r9
 800a3b0:	106d      	asrs	r5, r5, #1
 800a3b2:	429d      	cmp	r5, r3
 800a3b4:	bf38      	it	cc
 800a3b6:	461d      	movcc	r5, r3
 800a3b8:	0553      	lsls	r3, r2, #21
 800a3ba:	d531      	bpl.n	800a420 <__ssputs_r+0xa0>
 800a3bc:	4629      	mov	r1, r5
 800a3be:	f7ff fd05 	bl	8009dcc <_malloc_r>
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	b950      	cbnz	r0, 800a3dc <__ssputs_r+0x5c>
 800a3c6:	230c      	movs	r3, #12
 800a3c8:	f8ca 3000 	str.w	r3, [sl]
 800a3cc:	89a3      	ldrh	r3, [r4, #12]
 800a3ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3d2:	81a3      	strh	r3, [r4, #12]
 800a3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3dc:	6921      	ldr	r1, [r4, #16]
 800a3de:	464a      	mov	r2, r9
 800a3e0:	f7ff fcbd 	bl	8009d5e <memcpy>
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ee:	81a3      	strh	r3, [r4, #12]
 800a3f0:	6126      	str	r6, [r4, #16]
 800a3f2:	6165      	str	r5, [r4, #20]
 800a3f4:	444e      	add	r6, r9
 800a3f6:	eba5 0509 	sub.w	r5, r5, r9
 800a3fa:	6026      	str	r6, [r4, #0]
 800a3fc:	60a5      	str	r5, [r4, #8]
 800a3fe:	463e      	mov	r6, r7
 800a400:	42be      	cmp	r6, r7
 800a402:	d900      	bls.n	800a406 <__ssputs_r+0x86>
 800a404:	463e      	mov	r6, r7
 800a406:	6820      	ldr	r0, [r4, #0]
 800a408:	4632      	mov	r2, r6
 800a40a:	4641      	mov	r1, r8
 800a40c:	f000 fd80 	bl	800af10 <memmove>
 800a410:	68a3      	ldr	r3, [r4, #8]
 800a412:	1b9b      	subs	r3, r3, r6
 800a414:	60a3      	str	r3, [r4, #8]
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	4433      	add	r3, r6
 800a41a:	6023      	str	r3, [r4, #0]
 800a41c:	2000      	movs	r0, #0
 800a41e:	e7db      	b.n	800a3d8 <__ssputs_r+0x58>
 800a420:	462a      	mov	r2, r5
 800a422:	f000 fd8f 	bl	800af44 <_realloc_r>
 800a426:	4606      	mov	r6, r0
 800a428:	2800      	cmp	r0, #0
 800a42a:	d1e1      	bne.n	800a3f0 <__ssputs_r+0x70>
 800a42c:	6921      	ldr	r1, [r4, #16]
 800a42e:	4650      	mov	r0, sl
 800a430:	f7ff ff5c 	bl	800a2ec <_free_r>
 800a434:	e7c7      	b.n	800a3c6 <__ssputs_r+0x46>
	...

0800a438 <_svfiprintf_r>:
 800a438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43c:	4698      	mov	r8, r3
 800a43e:	898b      	ldrh	r3, [r1, #12]
 800a440:	061b      	lsls	r3, r3, #24
 800a442:	b09d      	sub	sp, #116	; 0x74
 800a444:	4607      	mov	r7, r0
 800a446:	460d      	mov	r5, r1
 800a448:	4614      	mov	r4, r2
 800a44a:	d50e      	bpl.n	800a46a <_svfiprintf_r+0x32>
 800a44c:	690b      	ldr	r3, [r1, #16]
 800a44e:	b963      	cbnz	r3, 800a46a <_svfiprintf_r+0x32>
 800a450:	2140      	movs	r1, #64	; 0x40
 800a452:	f7ff fcbb 	bl	8009dcc <_malloc_r>
 800a456:	6028      	str	r0, [r5, #0]
 800a458:	6128      	str	r0, [r5, #16]
 800a45a:	b920      	cbnz	r0, 800a466 <_svfiprintf_r+0x2e>
 800a45c:	230c      	movs	r3, #12
 800a45e:	603b      	str	r3, [r7, #0]
 800a460:	f04f 30ff 	mov.w	r0, #4294967295
 800a464:	e0d1      	b.n	800a60a <_svfiprintf_r+0x1d2>
 800a466:	2340      	movs	r3, #64	; 0x40
 800a468:	616b      	str	r3, [r5, #20]
 800a46a:	2300      	movs	r3, #0
 800a46c:	9309      	str	r3, [sp, #36]	; 0x24
 800a46e:	2320      	movs	r3, #32
 800a470:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a474:	f8cd 800c 	str.w	r8, [sp, #12]
 800a478:	2330      	movs	r3, #48	; 0x30
 800a47a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a624 <_svfiprintf_r+0x1ec>
 800a47e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a482:	f04f 0901 	mov.w	r9, #1
 800a486:	4623      	mov	r3, r4
 800a488:	469a      	mov	sl, r3
 800a48a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a48e:	b10a      	cbz	r2, 800a494 <_svfiprintf_r+0x5c>
 800a490:	2a25      	cmp	r2, #37	; 0x25
 800a492:	d1f9      	bne.n	800a488 <_svfiprintf_r+0x50>
 800a494:	ebba 0b04 	subs.w	fp, sl, r4
 800a498:	d00b      	beq.n	800a4b2 <_svfiprintf_r+0x7a>
 800a49a:	465b      	mov	r3, fp
 800a49c:	4622      	mov	r2, r4
 800a49e:	4629      	mov	r1, r5
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	f7ff ff6d 	bl	800a380 <__ssputs_r>
 800a4a6:	3001      	adds	r0, #1
 800a4a8:	f000 80aa 	beq.w	800a600 <_svfiprintf_r+0x1c8>
 800a4ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ae:	445a      	add	r2, fp
 800a4b0:	9209      	str	r2, [sp, #36]	; 0x24
 800a4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f000 80a2 	beq.w	800a600 <_svfiprintf_r+0x1c8>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4c6:	f10a 0a01 	add.w	sl, sl, #1
 800a4ca:	9304      	str	r3, [sp, #16]
 800a4cc:	9307      	str	r3, [sp, #28]
 800a4ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4d2:	931a      	str	r3, [sp, #104]	; 0x68
 800a4d4:	4654      	mov	r4, sl
 800a4d6:	2205      	movs	r2, #5
 800a4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4dc:	4851      	ldr	r0, [pc, #324]	; (800a624 <_svfiprintf_r+0x1ec>)
 800a4de:	f7f5 fe57 	bl	8000190 <memchr>
 800a4e2:	9a04      	ldr	r2, [sp, #16]
 800a4e4:	b9d8      	cbnz	r0, 800a51e <_svfiprintf_r+0xe6>
 800a4e6:	06d0      	lsls	r0, r2, #27
 800a4e8:	bf44      	itt	mi
 800a4ea:	2320      	movmi	r3, #32
 800a4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4f0:	0711      	lsls	r1, r2, #28
 800a4f2:	bf44      	itt	mi
 800a4f4:	232b      	movmi	r3, #43	; 0x2b
 800a4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a4fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a500:	d015      	beq.n	800a52e <_svfiprintf_r+0xf6>
 800a502:	9a07      	ldr	r2, [sp, #28]
 800a504:	4654      	mov	r4, sl
 800a506:	2000      	movs	r0, #0
 800a508:	f04f 0c0a 	mov.w	ip, #10
 800a50c:	4621      	mov	r1, r4
 800a50e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a512:	3b30      	subs	r3, #48	; 0x30
 800a514:	2b09      	cmp	r3, #9
 800a516:	d94e      	bls.n	800a5b6 <_svfiprintf_r+0x17e>
 800a518:	b1b0      	cbz	r0, 800a548 <_svfiprintf_r+0x110>
 800a51a:	9207      	str	r2, [sp, #28]
 800a51c:	e014      	b.n	800a548 <_svfiprintf_r+0x110>
 800a51e:	eba0 0308 	sub.w	r3, r0, r8
 800a522:	fa09 f303 	lsl.w	r3, r9, r3
 800a526:	4313      	orrs	r3, r2
 800a528:	9304      	str	r3, [sp, #16]
 800a52a:	46a2      	mov	sl, r4
 800a52c:	e7d2      	b.n	800a4d4 <_svfiprintf_r+0x9c>
 800a52e:	9b03      	ldr	r3, [sp, #12]
 800a530:	1d19      	adds	r1, r3, #4
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	9103      	str	r1, [sp, #12]
 800a536:	2b00      	cmp	r3, #0
 800a538:	bfbb      	ittet	lt
 800a53a:	425b      	neglt	r3, r3
 800a53c:	f042 0202 	orrlt.w	r2, r2, #2
 800a540:	9307      	strge	r3, [sp, #28]
 800a542:	9307      	strlt	r3, [sp, #28]
 800a544:	bfb8      	it	lt
 800a546:	9204      	strlt	r2, [sp, #16]
 800a548:	7823      	ldrb	r3, [r4, #0]
 800a54a:	2b2e      	cmp	r3, #46	; 0x2e
 800a54c:	d10c      	bne.n	800a568 <_svfiprintf_r+0x130>
 800a54e:	7863      	ldrb	r3, [r4, #1]
 800a550:	2b2a      	cmp	r3, #42	; 0x2a
 800a552:	d135      	bne.n	800a5c0 <_svfiprintf_r+0x188>
 800a554:	9b03      	ldr	r3, [sp, #12]
 800a556:	1d1a      	adds	r2, r3, #4
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	9203      	str	r2, [sp, #12]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	bfb8      	it	lt
 800a560:	f04f 33ff 	movlt.w	r3, #4294967295
 800a564:	3402      	adds	r4, #2
 800a566:	9305      	str	r3, [sp, #20]
 800a568:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a628 <_svfiprintf_r+0x1f0>
 800a56c:	7821      	ldrb	r1, [r4, #0]
 800a56e:	2203      	movs	r2, #3
 800a570:	4650      	mov	r0, sl
 800a572:	f7f5 fe0d 	bl	8000190 <memchr>
 800a576:	b140      	cbz	r0, 800a58a <_svfiprintf_r+0x152>
 800a578:	2340      	movs	r3, #64	; 0x40
 800a57a:	eba0 000a 	sub.w	r0, r0, sl
 800a57e:	fa03 f000 	lsl.w	r0, r3, r0
 800a582:	9b04      	ldr	r3, [sp, #16]
 800a584:	4303      	orrs	r3, r0
 800a586:	3401      	adds	r4, #1
 800a588:	9304      	str	r3, [sp, #16]
 800a58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a58e:	4827      	ldr	r0, [pc, #156]	; (800a62c <_svfiprintf_r+0x1f4>)
 800a590:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a594:	2206      	movs	r2, #6
 800a596:	f7f5 fdfb 	bl	8000190 <memchr>
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d038      	beq.n	800a610 <_svfiprintf_r+0x1d8>
 800a59e:	4b24      	ldr	r3, [pc, #144]	; (800a630 <_svfiprintf_r+0x1f8>)
 800a5a0:	bb1b      	cbnz	r3, 800a5ea <_svfiprintf_r+0x1b2>
 800a5a2:	9b03      	ldr	r3, [sp, #12]
 800a5a4:	3307      	adds	r3, #7
 800a5a6:	f023 0307 	bic.w	r3, r3, #7
 800a5aa:	3308      	adds	r3, #8
 800a5ac:	9303      	str	r3, [sp, #12]
 800a5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b0:	4433      	add	r3, r6
 800a5b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5b4:	e767      	b.n	800a486 <_svfiprintf_r+0x4e>
 800a5b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	2001      	movs	r0, #1
 800a5be:	e7a5      	b.n	800a50c <_svfiprintf_r+0xd4>
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	3401      	adds	r4, #1
 800a5c4:	9305      	str	r3, [sp, #20]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	f04f 0c0a 	mov.w	ip, #10
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5d2:	3a30      	subs	r2, #48	; 0x30
 800a5d4:	2a09      	cmp	r2, #9
 800a5d6:	d903      	bls.n	800a5e0 <_svfiprintf_r+0x1a8>
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d0c5      	beq.n	800a568 <_svfiprintf_r+0x130>
 800a5dc:	9105      	str	r1, [sp, #20]
 800a5de:	e7c3      	b.n	800a568 <_svfiprintf_r+0x130>
 800a5e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e7f0      	b.n	800a5cc <_svfiprintf_r+0x194>
 800a5ea:	ab03      	add	r3, sp, #12
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	462a      	mov	r2, r5
 800a5f0:	4b10      	ldr	r3, [pc, #64]	; (800a634 <_svfiprintf_r+0x1fc>)
 800a5f2:	a904      	add	r1, sp, #16
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	f3af 8000 	nop.w
 800a5fa:	1c42      	adds	r2, r0, #1
 800a5fc:	4606      	mov	r6, r0
 800a5fe:	d1d6      	bne.n	800a5ae <_svfiprintf_r+0x176>
 800a600:	89ab      	ldrh	r3, [r5, #12]
 800a602:	065b      	lsls	r3, r3, #25
 800a604:	f53f af2c 	bmi.w	800a460 <_svfiprintf_r+0x28>
 800a608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a60a:	b01d      	add	sp, #116	; 0x74
 800a60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a610:	ab03      	add	r3, sp, #12
 800a612:	9300      	str	r3, [sp, #0]
 800a614:	462a      	mov	r2, r5
 800a616:	4b07      	ldr	r3, [pc, #28]	; (800a634 <_svfiprintf_r+0x1fc>)
 800a618:	a904      	add	r1, sp, #16
 800a61a:	4638      	mov	r0, r7
 800a61c:	f000 f9d2 	bl	800a9c4 <_printf_i>
 800a620:	e7eb      	b.n	800a5fa <_svfiprintf_r+0x1c2>
 800a622:	bf00      	nop
 800a624:	0800b374 	.word	0x0800b374
 800a628:	0800b37a 	.word	0x0800b37a
 800a62c:	0800b37e 	.word	0x0800b37e
 800a630:	00000000 	.word	0x00000000
 800a634:	0800a381 	.word	0x0800a381

0800a638 <__sfputc_r>:
 800a638:	6893      	ldr	r3, [r2, #8]
 800a63a:	3b01      	subs	r3, #1
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	b410      	push	{r4}
 800a640:	6093      	str	r3, [r2, #8]
 800a642:	da07      	bge.n	800a654 <__sfputc_r+0x1c>
 800a644:	6994      	ldr	r4, [r2, #24]
 800a646:	42a3      	cmp	r3, r4
 800a648:	db01      	blt.n	800a64e <__sfputc_r+0x16>
 800a64a:	290a      	cmp	r1, #10
 800a64c:	d102      	bne.n	800a654 <__sfputc_r+0x1c>
 800a64e:	bc10      	pop	{r4}
 800a650:	f000 bb38 	b.w	800acc4 <__swbuf_r>
 800a654:	6813      	ldr	r3, [r2, #0]
 800a656:	1c58      	adds	r0, r3, #1
 800a658:	6010      	str	r0, [r2, #0]
 800a65a:	7019      	strb	r1, [r3, #0]
 800a65c:	4608      	mov	r0, r1
 800a65e:	bc10      	pop	{r4}
 800a660:	4770      	bx	lr

0800a662 <__sfputs_r>:
 800a662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a664:	4606      	mov	r6, r0
 800a666:	460f      	mov	r7, r1
 800a668:	4614      	mov	r4, r2
 800a66a:	18d5      	adds	r5, r2, r3
 800a66c:	42ac      	cmp	r4, r5
 800a66e:	d101      	bne.n	800a674 <__sfputs_r+0x12>
 800a670:	2000      	movs	r0, #0
 800a672:	e007      	b.n	800a684 <__sfputs_r+0x22>
 800a674:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a678:	463a      	mov	r2, r7
 800a67a:	4630      	mov	r0, r6
 800a67c:	f7ff ffdc 	bl	800a638 <__sfputc_r>
 800a680:	1c43      	adds	r3, r0, #1
 800a682:	d1f3      	bne.n	800a66c <__sfputs_r+0xa>
 800a684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a688 <_vfiprintf_r>:
 800a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68c:	460d      	mov	r5, r1
 800a68e:	b09d      	sub	sp, #116	; 0x74
 800a690:	4614      	mov	r4, r2
 800a692:	4698      	mov	r8, r3
 800a694:	4606      	mov	r6, r0
 800a696:	b118      	cbz	r0, 800a6a0 <_vfiprintf_r+0x18>
 800a698:	6983      	ldr	r3, [r0, #24]
 800a69a:	b90b      	cbnz	r3, 800a6a0 <_vfiprintf_r+0x18>
 800a69c:	f7ff fa9a 	bl	8009bd4 <__sinit>
 800a6a0:	4b89      	ldr	r3, [pc, #548]	; (800a8c8 <_vfiprintf_r+0x240>)
 800a6a2:	429d      	cmp	r5, r3
 800a6a4:	d11b      	bne.n	800a6de <_vfiprintf_r+0x56>
 800a6a6:	6875      	ldr	r5, [r6, #4]
 800a6a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6aa:	07d9      	lsls	r1, r3, #31
 800a6ac:	d405      	bmi.n	800a6ba <_vfiprintf_r+0x32>
 800a6ae:	89ab      	ldrh	r3, [r5, #12]
 800a6b0:	059a      	lsls	r2, r3, #22
 800a6b2:	d402      	bmi.n	800a6ba <_vfiprintf_r+0x32>
 800a6b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6b6:	f7ff fb50 	bl	8009d5a <__retarget_lock_acquire_recursive>
 800a6ba:	89ab      	ldrh	r3, [r5, #12]
 800a6bc:	071b      	lsls	r3, r3, #28
 800a6be:	d501      	bpl.n	800a6c4 <_vfiprintf_r+0x3c>
 800a6c0:	692b      	ldr	r3, [r5, #16]
 800a6c2:	b9eb      	cbnz	r3, 800a700 <_vfiprintf_r+0x78>
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	f000 fb4e 	bl	800ad68 <__swsetup_r>
 800a6cc:	b1c0      	cbz	r0, 800a700 <_vfiprintf_r+0x78>
 800a6ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6d0:	07dc      	lsls	r4, r3, #31
 800a6d2:	d50e      	bpl.n	800a6f2 <_vfiprintf_r+0x6a>
 800a6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d8:	b01d      	add	sp, #116	; 0x74
 800a6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6de:	4b7b      	ldr	r3, [pc, #492]	; (800a8cc <_vfiprintf_r+0x244>)
 800a6e0:	429d      	cmp	r5, r3
 800a6e2:	d101      	bne.n	800a6e8 <_vfiprintf_r+0x60>
 800a6e4:	68b5      	ldr	r5, [r6, #8]
 800a6e6:	e7df      	b.n	800a6a8 <_vfiprintf_r+0x20>
 800a6e8:	4b79      	ldr	r3, [pc, #484]	; (800a8d0 <_vfiprintf_r+0x248>)
 800a6ea:	429d      	cmp	r5, r3
 800a6ec:	bf08      	it	eq
 800a6ee:	68f5      	ldreq	r5, [r6, #12]
 800a6f0:	e7da      	b.n	800a6a8 <_vfiprintf_r+0x20>
 800a6f2:	89ab      	ldrh	r3, [r5, #12]
 800a6f4:	0598      	lsls	r0, r3, #22
 800a6f6:	d4ed      	bmi.n	800a6d4 <_vfiprintf_r+0x4c>
 800a6f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6fa:	f7ff fb2f 	bl	8009d5c <__retarget_lock_release_recursive>
 800a6fe:	e7e9      	b.n	800a6d4 <_vfiprintf_r+0x4c>
 800a700:	2300      	movs	r3, #0
 800a702:	9309      	str	r3, [sp, #36]	; 0x24
 800a704:	2320      	movs	r3, #32
 800a706:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a70a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a70e:	2330      	movs	r3, #48	; 0x30
 800a710:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8d4 <_vfiprintf_r+0x24c>
 800a714:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a718:	f04f 0901 	mov.w	r9, #1
 800a71c:	4623      	mov	r3, r4
 800a71e:	469a      	mov	sl, r3
 800a720:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a724:	b10a      	cbz	r2, 800a72a <_vfiprintf_r+0xa2>
 800a726:	2a25      	cmp	r2, #37	; 0x25
 800a728:	d1f9      	bne.n	800a71e <_vfiprintf_r+0x96>
 800a72a:	ebba 0b04 	subs.w	fp, sl, r4
 800a72e:	d00b      	beq.n	800a748 <_vfiprintf_r+0xc0>
 800a730:	465b      	mov	r3, fp
 800a732:	4622      	mov	r2, r4
 800a734:	4629      	mov	r1, r5
 800a736:	4630      	mov	r0, r6
 800a738:	f7ff ff93 	bl	800a662 <__sfputs_r>
 800a73c:	3001      	adds	r0, #1
 800a73e:	f000 80aa 	beq.w	800a896 <_vfiprintf_r+0x20e>
 800a742:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a744:	445a      	add	r2, fp
 800a746:	9209      	str	r2, [sp, #36]	; 0x24
 800a748:	f89a 3000 	ldrb.w	r3, [sl]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f000 80a2 	beq.w	800a896 <_vfiprintf_r+0x20e>
 800a752:	2300      	movs	r3, #0
 800a754:	f04f 32ff 	mov.w	r2, #4294967295
 800a758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a75c:	f10a 0a01 	add.w	sl, sl, #1
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	9307      	str	r3, [sp, #28]
 800a764:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a768:	931a      	str	r3, [sp, #104]	; 0x68
 800a76a:	4654      	mov	r4, sl
 800a76c:	2205      	movs	r2, #5
 800a76e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a772:	4858      	ldr	r0, [pc, #352]	; (800a8d4 <_vfiprintf_r+0x24c>)
 800a774:	f7f5 fd0c 	bl	8000190 <memchr>
 800a778:	9a04      	ldr	r2, [sp, #16]
 800a77a:	b9d8      	cbnz	r0, 800a7b4 <_vfiprintf_r+0x12c>
 800a77c:	06d1      	lsls	r1, r2, #27
 800a77e:	bf44      	itt	mi
 800a780:	2320      	movmi	r3, #32
 800a782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a786:	0713      	lsls	r3, r2, #28
 800a788:	bf44      	itt	mi
 800a78a:	232b      	movmi	r3, #43	; 0x2b
 800a78c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a790:	f89a 3000 	ldrb.w	r3, [sl]
 800a794:	2b2a      	cmp	r3, #42	; 0x2a
 800a796:	d015      	beq.n	800a7c4 <_vfiprintf_r+0x13c>
 800a798:	9a07      	ldr	r2, [sp, #28]
 800a79a:	4654      	mov	r4, sl
 800a79c:	2000      	movs	r0, #0
 800a79e:	f04f 0c0a 	mov.w	ip, #10
 800a7a2:	4621      	mov	r1, r4
 800a7a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7a8:	3b30      	subs	r3, #48	; 0x30
 800a7aa:	2b09      	cmp	r3, #9
 800a7ac:	d94e      	bls.n	800a84c <_vfiprintf_r+0x1c4>
 800a7ae:	b1b0      	cbz	r0, 800a7de <_vfiprintf_r+0x156>
 800a7b0:	9207      	str	r2, [sp, #28]
 800a7b2:	e014      	b.n	800a7de <_vfiprintf_r+0x156>
 800a7b4:	eba0 0308 	sub.w	r3, r0, r8
 800a7b8:	fa09 f303 	lsl.w	r3, r9, r3
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	9304      	str	r3, [sp, #16]
 800a7c0:	46a2      	mov	sl, r4
 800a7c2:	e7d2      	b.n	800a76a <_vfiprintf_r+0xe2>
 800a7c4:	9b03      	ldr	r3, [sp, #12]
 800a7c6:	1d19      	adds	r1, r3, #4
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	9103      	str	r1, [sp, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	bfbb      	ittet	lt
 800a7d0:	425b      	neglt	r3, r3
 800a7d2:	f042 0202 	orrlt.w	r2, r2, #2
 800a7d6:	9307      	strge	r3, [sp, #28]
 800a7d8:	9307      	strlt	r3, [sp, #28]
 800a7da:	bfb8      	it	lt
 800a7dc:	9204      	strlt	r2, [sp, #16]
 800a7de:	7823      	ldrb	r3, [r4, #0]
 800a7e0:	2b2e      	cmp	r3, #46	; 0x2e
 800a7e2:	d10c      	bne.n	800a7fe <_vfiprintf_r+0x176>
 800a7e4:	7863      	ldrb	r3, [r4, #1]
 800a7e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7e8:	d135      	bne.n	800a856 <_vfiprintf_r+0x1ce>
 800a7ea:	9b03      	ldr	r3, [sp, #12]
 800a7ec:	1d1a      	adds	r2, r3, #4
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	9203      	str	r2, [sp, #12]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	bfb8      	it	lt
 800a7f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7fa:	3402      	adds	r4, #2
 800a7fc:	9305      	str	r3, [sp, #20]
 800a7fe:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a8d8 <_vfiprintf_r+0x250>
 800a802:	7821      	ldrb	r1, [r4, #0]
 800a804:	2203      	movs	r2, #3
 800a806:	4650      	mov	r0, sl
 800a808:	f7f5 fcc2 	bl	8000190 <memchr>
 800a80c:	b140      	cbz	r0, 800a820 <_vfiprintf_r+0x198>
 800a80e:	2340      	movs	r3, #64	; 0x40
 800a810:	eba0 000a 	sub.w	r0, r0, sl
 800a814:	fa03 f000 	lsl.w	r0, r3, r0
 800a818:	9b04      	ldr	r3, [sp, #16]
 800a81a:	4303      	orrs	r3, r0
 800a81c:	3401      	adds	r4, #1
 800a81e:	9304      	str	r3, [sp, #16]
 800a820:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a824:	482d      	ldr	r0, [pc, #180]	; (800a8dc <_vfiprintf_r+0x254>)
 800a826:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a82a:	2206      	movs	r2, #6
 800a82c:	f7f5 fcb0 	bl	8000190 <memchr>
 800a830:	2800      	cmp	r0, #0
 800a832:	d03f      	beq.n	800a8b4 <_vfiprintf_r+0x22c>
 800a834:	4b2a      	ldr	r3, [pc, #168]	; (800a8e0 <_vfiprintf_r+0x258>)
 800a836:	bb1b      	cbnz	r3, 800a880 <_vfiprintf_r+0x1f8>
 800a838:	9b03      	ldr	r3, [sp, #12]
 800a83a:	3307      	adds	r3, #7
 800a83c:	f023 0307 	bic.w	r3, r3, #7
 800a840:	3308      	adds	r3, #8
 800a842:	9303      	str	r3, [sp, #12]
 800a844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a846:	443b      	add	r3, r7
 800a848:	9309      	str	r3, [sp, #36]	; 0x24
 800a84a:	e767      	b.n	800a71c <_vfiprintf_r+0x94>
 800a84c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a850:	460c      	mov	r4, r1
 800a852:	2001      	movs	r0, #1
 800a854:	e7a5      	b.n	800a7a2 <_vfiprintf_r+0x11a>
 800a856:	2300      	movs	r3, #0
 800a858:	3401      	adds	r4, #1
 800a85a:	9305      	str	r3, [sp, #20]
 800a85c:	4619      	mov	r1, r3
 800a85e:	f04f 0c0a 	mov.w	ip, #10
 800a862:	4620      	mov	r0, r4
 800a864:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a868:	3a30      	subs	r2, #48	; 0x30
 800a86a:	2a09      	cmp	r2, #9
 800a86c:	d903      	bls.n	800a876 <_vfiprintf_r+0x1ee>
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d0c5      	beq.n	800a7fe <_vfiprintf_r+0x176>
 800a872:	9105      	str	r1, [sp, #20]
 800a874:	e7c3      	b.n	800a7fe <_vfiprintf_r+0x176>
 800a876:	fb0c 2101 	mla	r1, ip, r1, r2
 800a87a:	4604      	mov	r4, r0
 800a87c:	2301      	movs	r3, #1
 800a87e:	e7f0      	b.n	800a862 <_vfiprintf_r+0x1da>
 800a880:	ab03      	add	r3, sp, #12
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	462a      	mov	r2, r5
 800a886:	4b17      	ldr	r3, [pc, #92]	; (800a8e4 <_vfiprintf_r+0x25c>)
 800a888:	a904      	add	r1, sp, #16
 800a88a:	4630      	mov	r0, r6
 800a88c:	f3af 8000 	nop.w
 800a890:	4607      	mov	r7, r0
 800a892:	1c78      	adds	r0, r7, #1
 800a894:	d1d6      	bne.n	800a844 <_vfiprintf_r+0x1bc>
 800a896:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a898:	07d9      	lsls	r1, r3, #31
 800a89a:	d405      	bmi.n	800a8a8 <_vfiprintf_r+0x220>
 800a89c:	89ab      	ldrh	r3, [r5, #12]
 800a89e:	059a      	lsls	r2, r3, #22
 800a8a0:	d402      	bmi.n	800a8a8 <_vfiprintf_r+0x220>
 800a8a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8a4:	f7ff fa5a 	bl	8009d5c <__retarget_lock_release_recursive>
 800a8a8:	89ab      	ldrh	r3, [r5, #12]
 800a8aa:	065b      	lsls	r3, r3, #25
 800a8ac:	f53f af12 	bmi.w	800a6d4 <_vfiprintf_r+0x4c>
 800a8b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8b2:	e711      	b.n	800a6d8 <_vfiprintf_r+0x50>
 800a8b4:	ab03      	add	r3, sp, #12
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	462a      	mov	r2, r5
 800a8ba:	4b0a      	ldr	r3, [pc, #40]	; (800a8e4 <_vfiprintf_r+0x25c>)
 800a8bc:	a904      	add	r1, sp, #16
 800a8be:	4630      	mov	r0, r6
 800a8c0:	f000 f880 	bl	800a9c4 <_printf_i>
 800a8c4:	e7e4      	b.n	800a890 <_vfiprintf_r+0x208>
 800a8c6:	bf00      	nop
 800a8c8:	0800b330 	.word	0x0800b330
 800a8cc:	0800b350 	.word	0x0800b350
 800a8d0:	0800b310 	.word	0x0800b310
 800a8d4:	0800b374 	.word	0x0800b374
 800a8d8:	0800b37a 	.word	0x0800b37a
 800a8dc:	0800b37e 	.word	0x0800b37e
 800a8e0:	00000000 	.word	0x00000000
 800a8e4:	0800a663 	.word	0x0800a663

0800a8e8 <_printf_common>:
 800a8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ec:	4616      	mov	r6, r2
 800a8ee:	4699      	mov	r9, r3
 800a8f0:	688a      	ldr	r2, [r1, #8]
 800a8f2:	690b      	ldr	r3, [r1, #16]
 800a8f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	bfb8      	it	lt
 800a8fc:	4613      	movlt	r3, r2
 800a8fe:	6033      	str	r3, [r6, #0]
 800a900:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a904:	4607      	mov	r7, r0
 800a906:	460c      	mov	r4, r1
 800a908:	b10a      	cbz	r2, 800a90e <_printf_common+0x26>
 800a90a:	3301      	adds	r3, #1
 800a90c:	6033      	str	r3, [r6, #0]
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	0699      	lsls	r1, r3, #26
 800a912:	bf42      	ittt	mi
 800a914:	6833      	ldrmi	r3, [r6, #0]
 800a916:	3302      	addmi	r3, #2
 800a918:	6033      	strmi	r3, [r6, #0]
 800a91a:	6825      	ldr	r5, [r4, #0]
 800a91c:	f015 0506 	ands.w	r5, r5, #6
 800a920:	d106      	bne.n	800a930 <_printf_common+0x48>
 800a922:	f104 0a19 	add.w	sl, r4, #25
 800a926:	68e3      	ldr	r3, [r4, #12]
 800a928:	6832      	ldr	r2, [r6, #0]
 800a92a:	1a9b      	subs	r3, r3, r2
 800a92c:	42ab      	cmp	r3, r5
 800a92e:	dc26      	bgt.n	800a97e <_printf_common+0x96>
 800a930:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a934:	1e13      	subs	r3, r2, #0
 800a936:	6822      	ldr	r2, [r4, #0]
 800a938:	bf18      	it	ne
 800a93a:	2301      	movne	r3, #1
 800a93c:	0692      	lsls	r2, r2, #26
 800a93e:	d42b      	bmi.n	800a998 <_printf_common+0xb0>
 800a940:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a944:	4649      	mov	r1, r9
 800a946:	4638      	mov	r0, r7
 800a948:	47c0      	blx	r8
 800a94a:	3001      	adds	r0, #1
 800a94c:	d01e      	beq.n	800a98c <_printf_common+0xa4>
 800a94e:	6823      	ldr	r3, [r4, #0]
 800a950:	68e5      	ldr	r5, [r4, #12]
 800a952:	6832      	ldr	r2, [r6, #0]
 800a954:	f003 0306 	and.w	r3, r3, #6
 800a958:	2b04      	cmp	r3, #4
 800a95a:	bf08      	it	eq
 800a95c:	1aad      	subeq	r5, r5, r2
 800a95e:	68a3      	ldr	r3, [r4, #8]
 800a960:	6922      	ldr	r2, [r4, #16]
 800a962:	bf0c      	ite	eq
 800a964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a968:	2500      	movne	r5, #0
 800a96a:	4293      	cmp	r3, r2
 800a96c:	bfc4      	itt	gt
 800a96e:	1a9b      	subgt	r3, r3, r2
 800a970:	18ed      	addgt	r5, r5, r3
 800a972:	2600      	movs	r6, #0
 800a974:	341a      	adds	r4, #26
 800a976:	42b5      	cmp	r5, r6
 800a978:	d11a      	bne.n	800a9b0 <_printf_common+0xc8>
 800a97a:	2000      	movs	r0, #0
 800a97c:	e008      	b.n	800a990 <_printf_common+0xa8>
 800a97e:	2301      	movs	r3, #1
 800a980:	4652      	mov	r2, sl
 800a982:	4649      	mov	r1, r9
 800a984:	4638      	mov	r0, r7
 800a986:	47c0      	blx	r8
 800a988:	3001      	adds	r0, #1
 800a98a:	d103      	bne.n	800a994 <_printf_common+0xac>
 800a98c:	f04f 30ff 	mov.w	r0, #4294967295
 800a990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a994:	3501      	adds	r5, #1
 800a996:	e7c6      	b.n	800a926 <_printf_common+0x3e>
 800a998:	18e1      	adds	r1, r4, r3
 800a99a:	1c5a      	adds	r2, r3, #1
 800a99c:	2030      	movs	r0, #48	; 0x30
 800a99e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9a2:	4422      	add	r2, r4
 800a9a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9ac:	3302      	adds	r3, #2
 800a9ae:	e7c7      	b.n	800a940 <_printf_common+0x58>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	4622      	mov	r2, r4
 800a9b4:	4649      	mov	r1, r9
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	47c0      	blx	r8
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	d0e6      	beq.n	800a98c <_printf_common+0xa4>
 800a9be:	3601      	adds	r6, #1
 800a9c0:	e7d9      	b.n	800a976 <_printf_common+0x8e>
	...

0800a9c4 <_printf_i>:
 800a9c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c8:	7e0f      	ldrb	r7, [r1, #24]
 800a9ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9cc:	2f78      	cmp	r7, #120	; 0x78
 800a9ce:	4691      	mov	r9, r2
 800a9d0:	4680      	mov	r8, r0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	469a      	mov	sl, r3
 800a9d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9da:	d807      	bhi.n	800a9ec <_printf_i+0x28>
 800a9dc:	2f62      	cmp	r7, #98	; 0x62
 800a9de:	d80a      	bhi.n	800a9f6 <_printf_i+0x32>
 800a9e0:	2f00      	cmp	r7, #0
 800a9e2:	f000 80d8 	beq.w	800ab96 <_printf_i+0x1d2>
 800a9e6:	2f58      	cmp	r7, #88	; 0x58
 800a9e8:	f000 80a3 	beq.w	800ab32 <_printf_i+0x16e>
 800a9ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9f4:	e03a      	b.n	800aa6c <_printf_i+0xa8>
 800a9f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9fa:	2b15      	cmp	r3, #21
 800a9fc:	d8f6      	bhi.n	800a9ec <_printf_i+0x28>
 800a9fe:	a101      	add	r1, pc, #4	; (adr r1, 800aa04 <_printf_i+0x40>)
 800aa00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa04:	0800aa5d 	.word	0x0800aa5d
 800aa08:	0800aa71 	.word	0x0800aa71
 800aa0c:	0800a9ed 	.word	0x0800a9ed
 800aa10:	0800a9ed 	.word	0x0800a9ed
 800aa14:	0800a9ed 	.word	0x0800a9ed
 800aa18:	0800a9ed 	.word	0x0800a9ed
 800aa1c:	0800aa71 	.word	0x0800aa71
 800aa20:	0800a9ed 	.word	0x0800a9ed
 800aa24:	0800a9ed 	.word	0x0800a9ed
 800aa28:	0800a9ed 	.word	0x0800a9ed
 800aa2c:	0800a9ed 	.word	0x0800a9ed
 800aa30:	0800ab7d 	.word	0x0800ab7d
 800aa34:	0800aaa1 	.word	0x0800aaa1
 800aa38:	0800ab5f 	.word	0x0800ab5f
 800aa3c:	0800a9ed 	.word	0x0800a9ed
 800aa40:	0800a9ed 	.word	0x0800a9ed
 800aa44:	0800ab9f 	.word	0x0800ab9f
 800aa48:	0800a9ed 	.word	0x0800a9ed
 800aa4c:	0800aaa1 	.word	0x0800aaa1
 800aa50:	0800a9ed 	.word	0x0800a9ed
 800aa54:	0800a9ed 	.word	0x0800a9ed
 800aa58:	0800ab67 	.word	0x0800ab67
 800aa5c:	682b      	ldr	r3, [r5, #0]
 800aa5e:	1d1a      	adds	r2, r3, #4
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	602a      	str	r2, [r5, #0]
 800aa64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e0a3      	b.n	800abb8 <_printf_i+0x1f4>
 800aa70:	6820      	ldr	r0, [r4, #0]
 800aa72:	6829      	ldr	r1, [r5, #0]
 800aa74:	0606      	lsls	r6, r0, #24
 800aa76:	f101 0304 	add.w	r3, r1, #4
 800aa7a:	d50a      	bpl.n	800aa92 <_printf_i+0xce>
 800aa7c:	680e      	ldr	r6, [r1, #0]
 800aa7e:	602b      	str	r3, [r5, #0]
 800aa80:	2e00      	cmp	r6, #0
 800aa82:	da03      	bge.n	800aa8c <_printf_i+0xc8>
 800aa84:	232d      	movs	r3, #45	; 0x2d
 800aa86:	4276      	negs	r6, r6
 800aa88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa8c:	485e      	ldr	r0, [pc, #376]	; (800ac08 <_printf_i+0x244>)
 800aa8e:	230a      	movs	r3, #10
 800aa90:	e019      	b.n	800aac6 <_printf_i+0x102>
 800aa92:	680e      	ldr	r6, [r1, #0]
 800aa94:	602b      	str	r3, [r5, #0]
 800aa96:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aa9a:	bf18      	it	ne
 800aa9c:	b236      	sxthne	r6, r6
 800aa9e:	e7ef      	b.n	800aa80 <_printf_i+0xbc>
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	6820      	ldr	r0, [r4, #0]
 800aaa4:	1d19      	adds	r1, r3, #4
 800aaa6:	6029      	str	r1, [r5, #0]
 800aaa8:	0601      	lsls	r1, r0, #24
 800aaaa:	d501      	bpl.n	800aab0 <_printf_i+0xec>
 800aaac:	681e      	ldr	r6, [r3, #0]
 800aaae:	e002      	b.n	800aab6 <_printf_i+0xf2>
 800aab0:	0646      	lsls	r6, r0, #25
 800aab2:	d5fb      	bpl.n	800aaac <_printf_i+0xe8>
 800aab4:	881e      	ldrh	r6, [r3, #0]
 800aab6:	4854      	ldr	r0, [pc, #336]	; (800ac08 <_printf_i+0x244>)
 800aab8:	2f6f      	cmp	r7, #111	; 0x6f
 800aaba:	bf0c      	ite	eq
 800aabc:	2308      	moveq	r3, #8
 800aabe:	230a      	movne	r3, #10
 800aac0:	2100      	movs	r1, #0
 800aac2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aac6:	6865      	ldr	r5, [r4, #4]
 800aac8:	60a5      	str	r5, [r4, #8]
 800aaca:	2d00      	cmp	r5, #0
 800aacc:	bfa2      	ittt	ge
 800aace:	6821      	ldrge	r1, [r4, #0]
 800aad0:	f021 0104 	bicge.w	r1, r1, #4
 800aad4:	6021      	strge	r1, [r4, #0]
 800aad6:	b90e      	cbnz	r6, 800aadc <_printf_i+0x118>
 800aad8:	2d00      	cmp	r5, #0
 800aada:	d04d      	beq.n	800ab78 <_printf_i+0x1b4>
 800aadc:	4615      	mov	r5, r2
 800aade:	fbb6 f1f3 	udiv	r1, r6, r3
 800aae2:	fb03 6711 	mls	r7, r3, r1, r6
 800aae6:	5dc7      	ldrb	r7, [r0, r7]
 800aae8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aaec:	4637      	mov	r7, r6
 800aaee:	42bb      	cmp	r3, r7
 800aaf0:	460e      	mov	r6, r1
 800aaf2:	d9f4      	bls.n	800aade <_printf_i+0x11a>
 800aaf4:	2b08      	cmp	r3, #8
 800aaf6:	d10b      	bne.n	800ab10 <_printf_i+0x14c>
 800aaf8:	6823      	ldr	r3, [r4, #0]
 800aafa:	07de      	lsls	r6, r3, #31
 800aafc:	d508      	bpl.n	800ab10 <_printf_i+0x14c>
 800aafe:	6923      	ldr	r3, [r4, #16]
 800ab00:	6861      	ldr	r1, [r4, #4]
 800ab02:	4299      	cmp	r1, r3
 800ab04:	bfde      	ittt	le
 800ab06:	2330      	movle	r3, #48	; 0x30
 800ab08:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab10:	1b52      	subs	r2, r2, r5
 800ab12:	6122      	str	r2, [r4, #16]
 800ab14:	f8cd a000 	str.w	sl, [sp]
 800ab18:	464b      	mov	r3, r9
 800ab1a:	aa03      	add	r2, sp, #12
 800ab1c:	4621      	mov	r1, r4
 800ab1e:	4640      	mov	r0, r8
 800ab20:	f7ff fee2 	bl	800a8e8 <_printf_common>
 800ab24:	3001      	adds	r0, #1
 800ab26:	d14c      	bne.n	800abc2 <_printf_i+0x1fe>
 800ab28:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2c:	b004      	add	sp, #16
 800ab2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab32:	4835      	ldr	r0, [pc, #212]	; (800ac08 <_printf_i+0x244>)
 800ab34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab38:	6829      	ldr	r1, [r5, #0]
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab40:	6029      	str	r1, [r5, #0]
 800ab42:	061d      	lsls	r5, r3, #24
 800ab44:	d514      	bpl.n	800ab70 <_printf_i+0x1ac>
 800ab46:	07df      	lsls	r7, r3, #31
 800ab48:	bf44      	itt	mi
 800ab4a:	f043 0320 	orrmi.w	r3, r3, #32
 800ab4e:	6023      	strmi	r3, [r4, #0]
 800ab50:	b91e      	cbnz	r6, 800ab5a <_printf_i+0x196>
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	f023 0320 	bic.w	r3, r3, #32
 800ab58:	6023      	str	r3, [r4, #0]
 800ab5a:	2310      	movs	r3, #16
 800ab5c:	e7b0      	b.n	800aac0 <_printf_i+0xfc>
 800ab5e:	6823      	ldr	r3, [r4, #0]
 800ab60:	f043 0320 	orr.w	r3, r3, #32
 800ab64:	6023      	str	r3, [r4, #0]
 800ab66:	2378      	movs	r3, #120	; 0x78
 800ab68:	4828      	ldr	r0, [pc, #160]	; (800ac0c <_printf_i+0x248>)
 800ab6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab6e:	e7e3      	b.n	800ab38 <_printf_i+0x174>
 800ab70:	0659      	lsls	r1, r3, #25
 800ab72:	bf48      	it	mi
 800ab74:	b2b6      	uxthmi	r6, r6
 800ab76:	e7e6      	b.n	800ab46 <_printf_i+0x182>
 800ab78:	4615      	mov	r5, r2
 800ab7a:	e7bb      	b.n	800aaf4 <_printf_i+0x130>
 800ab7c:	682b      	ldr	r3, [r5, #0]
 800ab7e:	6826      	ldr	r6, [r4, #0]
 800ab80:	6961      	ldr	r1, [r4, #20]
 800ab82:	1d18      	adds	r0, r3, #4
 800ab84:	6028      	str	r0, [r5, #0]
 800ab86:	0635      	lsls	r5, r6, #24
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	d501      	bpl.n	800ab90 <_printf_i+0x1cc>
 800ab8c:	6019      	str	r1, [r3, #0]
 800ab8e:	e002      	b.n	800ab96 <_printf_i+0x1d2>
 800ab90:	0670      	lsls	r0, r6, #25
 800ab92:	d5fb      	bpl.n	800ab8c <_printf_i+0x1c8>
 800ab94:	8019      	strh	r1, [r3, #0]
 800ab96:	2300      	movs	r3, #0
 800ab98:	6123      	str	r3, [r4, #16]
 800ab9a:	4615      	mov	r5, r2
 800ab9c:	e7ba      	b.n	800ab14 <_printf_i+0x150>
 800ab9e:	682b      	ldr	r3, [r5, #0]
 800aba0:	1d1a      	adds	r2, r3, #4
 800aba2:	602a      	str	r2, [r5, #0]
 800aba4:	681d      	ldr	r5, [r3, #0]
 800aba6:	6862      	ldr	r2, [r4, #4]
 800aba8:	2100      	movs	r1, #0
 800abaa:	4628      	mov	r0, r5
 800abac:	f7f5 faf0 	bl	8000190 <memchr>
 800abb0:	b108      	cbz	r0, 800abb6 <_printf_i+0x1f2>
 800abb2:	1b40      	subs	r0, r0, r5
 800abb4:	6060      	str	r0, [r4, #4]
 800abb6:	6863      	ldr	r3, [r4, #4]
 800abb8:	6123      	str	r3, [r4, #16]
 800abba:	2300      	movs	r3, #0
 800abbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abc0:	e7a8      	b.n	800ab14 <_printf_i+0x150>
 800abc2:	6923      	ldr	r3, [r4, #16]
 800abc4:	462a      	mov	r2, r5
 800abc6:	4649      	mov	r1, r9
 800abc8:	4640      	mov	r0, r8
 800abca:	47d0      	blx	sl
 800abcc:	3001      	adds	r0, #1
 800abce:	d0ab      	beq.n	800ab28 <_printf_i+0x164>
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	079b      	lsls	r3, r3, #30
 800abd4:	d413      	bmi.n	800abfe <_printf_i+0x23a>
 800abd6:	68e0      	ldr	r0, [r4, #12]
 800abd8:	9b03      	ldr	r3, [sp, #12]
 800abda:	4298      	cmp	r0, r3
 800abdc:	bfb8      	it	lt
 800abde:	4618      	movlt	r0, r3
 800abe0:	e7a4      	b.n	800ab2c <_printf_i+0x168>
 800abe2:	2301      	movs	r3, #1
 800abe4:	4632      	mov	r2, r6
 800abe6:	4649      	mov	r1, r9
 800abe8:	4640      	mov	r0, r8
 800abea:	47d0      	blx	sl
 800abec:	3001      	adds	r0, #1
 800abee:	d09b      	beq.n	800ab28 <_printf_i+0x164>
 800abf0:	3501      	adds	r5, #1
 800abf2:	68e3      	ldr	r3, [r4, #12]
 800abf4:	9903      	ldr	r1, [sp, #12]
 800abf6:	1a5b      	subs	r3, r3, r1
 800abf8:	42ab      	cmp	r3, r5
 800abfa:	dcf2      	bgt.n	800abe2 <_printf_i+0x21e>
 800abfc:	e7eb      	b.n	800abd6 <_printf_i+0x212>
 800abfe:	2500      	movs	r5, #0
 800ac00:	f104 0619 	add.w	r6, r4, #25
 800ac04:	e7f5      	b.n	800abf2 <_printf_i+0x22e>
 800ac06:	bf00      	nop
 800ac08:	0800b385 	.word	0x0800b385
 800ac0c:	0800b396 	.word	0x0800b396

0800ac10 <_putc_r>:
 800ac10:	b570      	push	{r4, r5, r6, lr}
 800ac12:	460d      	mov	r5, r1
 800ac14:	4614      	mov	r4, r2
 800ac16:	4606      	mov	r6, r0
 800ac18:	b118      	cbz	r0, 800ac22 <_putc_r+0x12>
 800ac1a:	6983      	ldr	r3, [r0, #24]
 800ac1c:	b90b      	cbnz	r3, 800ac22 <_putc_r+0x12>
 800ac1e:	f7fe ffd9 	bl	8009bd4 <__sinit>
 800ac22:	4b1c      	ldr	r3, [pc, #112]	; (800ac94 <_putc_r+0x84>)
 800ac24:	429c      	cmp	r4, r3
 800ac26:	d124      	bne.n	800ac72 <_putc_r+0x62>
 800ac28:	6874      	ldr	r4, [r6, #4]
 800ac2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac2c:	07d8      	lsls	r0, r3, #31
 800ac2e:	d405      	bmi.n	800ac3c <_putc_r+0x2c>
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	0599      	lsls	r1, r3, #22
 800ac34:	d402      	bmi.n	800ac3c <_putc_r+0x2c>
 800ac36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac38:	f7ff f88f 	bl	8009d5a <__retarget_lock_acquire_recursive>
 800ac3c:	68a3      	ldr	r3, [r4, #8]
 800ac3e:	3b01      	subs	r3, #1
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	60a3      	str	r3, [r4, #8]
 800ac44:	da05      	bge.n	800ac52 <_putc_r+0x42>
 800ac46:	69a2      	ldr	r2, [r4, #24]
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	db1c      	blt.n	800ac86 <_putc_r+0x76>
 800ac4c:	b2eb      	uxtb	r3, r5
 800ac4e:	2b0a      	cmp	r3, #10
 800ac50:	d019      	beq.n	800ac86 <_putc_r+0x76>
 800ac52:	6823      	ldr	r3, [r4, #0]
 800ac54:	1c5a      	adds	r2, r3, #1
 800ac56:	6022      	str	r2, [r4, #0]
 800ac58:	701d      	strb	r5, [r3, #0]
 800ac5a:	b2ed      	uxtb	r5, r5
 800ac5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac5e:	07da      	lsls	r2, r3, #31
 800ac60:	d405      	bmi.n	800ac6e <_putc_r+0x5e>
 800ac62:	89a3      	ldrh	r3, [r4, #12]
 800ac64:	059b      	lsls	r3, r3, #22
 800ac66:	d402      	bmi.n	800ac6e <_putc_r+0x5e>
 800ac68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac6a:	f7ff f877 	bl	8009d5c <__retarget_lock_release_recursive>
 800ac6e:	4628      	mov	r0, r5
 800ac70:	bd70      	pop	{r4, r5, r6, pc}
 800ac72:	4b09      	ldr	r3, [pc, #36]	; (800ac98 <_putc_r+0x88>)
 800ac74:	429c      	cmp	r4, r3
 800ac76:	d101      	bne.n	800ac7c <_putc_r+0x6c>
 800ac78:	68b4      	ldr	r4, [r6, #8]
 800ac7a:	e7d6      	b.n	800ac2a <_putc_r+0x1a>
 800ac7c:	4b07      	ldr	r3, [pc, #28]	; (800ac9c <_putc_r+0x8c>)
 800ac7e:	429c      	cmp	r4, r3
 800ac80:	bf08      	it	eq
 800ac82:	68f4      	ldreq	r4, [r6, #12]
 800ac84:	e7d1      	b.n	800ac2a <_putc_r+0x1a>
 800ac86:	4629      	mov	r1, r5
 800ac88:	4622      	mov	r2, r4
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	f000 f81a 	bl	800acc4 <__swbuf_r>
 800ac90:	4605      	mov	r5, r0
 800ac92:	e7e3      	b.n	800ac5c <_putc_r+0x4c>
 800ac94:	0800b330 	.word	0x0800b330
 800ac98:	0800b350 	.word	0x0800b350
 800ac9c:	0800b310 	.word	0x0800b310

0800aca0 <_read_r>:
 800aca0:	b538      	push	{r3, r4, r5, lr}
 800aca2:	4d07      	ldr	r5, [pc, #28]	; (800acc0 <_read_r+0x20>)
 800aca4:	4604      	mov	r4, r0
 800aca6:	4608      	mov	r0, r1
 800aca8:	4611      	mov	r1, r2
 800acaa:	2200      	movs	r2, #0
 800acac:	602a      	str	r2, [r5, #0]
 800acae:	461a      	mov	r2, r3
 800acb0:	f7f6 fc7a 	bl	80015a8 <_read>
 800acb4:	1c43      	adds	r3, r0, #1
 800acb6:	d102      	bne.n	800acbe <_read_r+0x1e>
 800acb8:	682b      	ldr	r3, [r5, #0]
 800acba:	b103      	cbz	r3, 800acbe <_read_r+0x1e>
 800acbc:	6023      	str	r3, [r4, #0]
 800acbe:	bd38      	pop	{r3, r4, r5, pc}
 800acc0:	20003380 	.word	0x20003380

0800acc4 <__swbuf_r>:
 800acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc6:	460e      	mov	r6, r1
 800acc8:	4614      	mov	r4, r2
 800acca:	4605      	mov	r5, r0
 800accc:	b118      	cbz	r0, 800acd6 <__swbuf_r+0x12>
 800acce:	6983      	ldr	r3, [r0, #24]
 800acd0:	b90b      	cbnz	r3, 800acd6 <__swbuf_r+0x12>
 800acd2:	f7fe ff7f 	bl	8009bd4 <__sinit>
 800acd6:	4b21      	ldr	r3, [pc, #132]	; (800ad5c <__swbuf_r+0x98>)
 800acd8:	429c      	cmp	r4, r3
 800acda:	d12b      	bne.n	800ad34 <__swbuf_r+0x70>
 800acdc:	686c      	ldr	r4, [r5, #4]
 800acde:	69a3      	ldr	r3, [r4, #24]
 800ace0:	60a3      	str	r3, [r4, #8]
 800ace2:	89a3      	ldrh	r3, [r4, #12]
 800ace4:	071a      	lsls	r2, r3, #28
 800ace6:	d52f      	bpl.n	800ad48 <__swbuf_r+0x84>
 800ace8:	6923      	ldr	r3, [r4, #16]
 800acea:	b36b      	cbz	r3, 800ad48 <__swbuf_r+0x84>
 800acec:	6923      	ldr	r3, [r4, #16]
 800acee:	6820      	ldr	r0, [r4, #0]
 800acf0:	1ac0      	subs	r0, r0, r3
 800acf2:	6963      	ldr	r3, [r4, #20]
 800acf4:	b2f6      	uxtb	r6, r6
 800acf6:	4283      	cmp	r3, r0
 800acf8:	4637      	mov	r7, r6
 800acfa:	dc04      	bgt.n	800ad06 <__swbuf_r+0x42>
 800acfc:	4621      	mov	r1, r4
 800acfe:	4628      	mov	r0, r5
 800ad00:	f7ff fa9a 	bl	800a238 <_fflush_r>
 800ad04:	bb30      	cbnz	r0, 800ad54 <__swbuf_r+0x90>
 800ad06:	68a3      	ldr	r3, [r4, #8]
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	60a3      	str	r3, [r4, #8]
 800ad0c:	6823      	ldr	r3, [r4, #0]
 800ad0e:	1c5a      	adds	r2, r3, #1
 800ad10:	6022      	str	r2, [r4, #0]
 800ad12:	701e      	strb	r6, [r3, #0]
 800ad14:	6963      	ldr	r3, [r4, #20]
 800ad16:	3001      	adds	r0, #1
 800ad18:	4283      	cmp	r3, r0
 800ad1a:	d004      	beq.n	800ad26 <__swbuf_r+0x62>
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	07db      	lsls	r3, r3, #31
 800ad20:	d506      	bpl.n	800ad30 <__swbuf_r+0x6c>
 800ad22:	2e0a      	cmp	r6, #10
 800ad24:	d104      	bne.n	800ad30 <__swbuf_r+0x6c>
 800ad26:	4621      	mov	r1, r4
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f7ff fa85 	bl	800a238 <_fflush_r>
 800ad2e:	b988      	cbnz	r0, 800ad54 <__swbuf_r+0x90>
 800ad30:	4638      	mov	r0, r7
 800ad32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad34:	4b0a      	ldr	r3, [pc, #40]	; (800ad60 <__swbuf_r+0x9c>)
 800ad36:	429c      	cmp	r4, r3
 800ad38:	d101      	bne.n	800ad3e <__swbuf_r+0x7a>
 800ad3a:	68ac      	ldr	r4, [r5, #8]
 800ad3c:	e7cf      	b.n	800acde <__swbuf_r+0x1a>
 800ad3e:	4b09      	ldr	r3, [pc, #36]	; (800ad64 <__swbuf_r+0xa0>)
 800ad40:	429c      	cmp	r4, r3
 800ad42:	bf08      	it	eq
 800ad44:	68ec      	ldreq	r4, [r5, #12]
 800ad46:	e7ca      	b.n	800acde <__swbuf_r+0x1a>
 800ad48:	4621      	mov	r1, r4
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	f000 f80c 	bl	800ad68 <__swsetup_r>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	d0cb      	beq.n	800acec <__swbuf_r+0x28>
 800ad54:	f04f 37ff 	mov.w	r7, #4294967295
 800ad58:	e7ea      	b.n	800ad30 <__swbuf_r+0x6c>
 800ad5a:	bf00      	nop
 800ad5c:	0800b330 	.word	0x0800b330
 800ad60:	0800b350 	.word	0x0800b350
 800ad64:	0800b310 	.word	0x0800b310

0800ad68 <__swsetup_r>:
 800ad68:	4b32      	ldr	r3, [pc, #200]	; (800ae34 <__swsetup_r+0xcc>)
 800ad6a:	b570      	push	{r4, r5, r6, lr}
 800ad6c:	681d      	ldr	r5, [r3, #0]
 800ad6e:	4606      	mov	r6, r0
 800ad70:	460c      	mov	r4, r1
 800ad72:	b125      	cbz	r5, 800ad7e <__swsetup_r+0x16>
 800ad74:	69ab      	ldr	r3, [r5, #24]
 800ad76:	b913      	cbnz	r3, 800ad7e <__swsetup_r+0x16>
 800ad78:	4628      	mov	r0, r5
 800ad7a:	f7fe ff2b 	bl	8009bd4 <__sinit>
 800ad7e:	4b2e      	ldr	r3, [pc, #184]	; (800ae38 <__swsetup_r+0xd0>)
 800ad80:	429c      	cmp	r4, r3
 800ad82:	d10f      	bne.n	800ada4 <__swsetup_r+0x3c>
 800ad84:	686c      	ldr	r4, [r5, #4]
 800ad86:	89a3      	ldrh	r3, [r4, #12]
 800ad88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad8c:	0719      	lsls	r1, r3, #28
 800ad8e:	d42c      	bmi.n	800adea <__swsetup_r+0x82>
 800ad90:	06dd      	lsls	r5, r3, #27
 800ad92:	d411      	bmi.n	800adb8 <__swsetup_r+0x50>
 800ad94:	2309      	movs	r3, #9
 800ad96:	6033      	str	r3, [r6, #0]
 800ad98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad9c:	81a3      	strh	r3, [r4, #12]
 800ad9e:	f04f 30ff 	mov.w	r0, #4294967295
 800ada2:	e03e      	b.n	800ae22 <__swsetup_r+0xba>
 800ada4:	4b25      	ldr	r3, [pc, #148]	; (800ae3c <__swsetup_r+0xd4>)
 800ada6:	429c      	cmp	r4, r3
 800ada8:	d101      	bne.n	800adae <__swsetup_r+0x46>
 800adaa:	68ac      	ldr	r4, [r5, #8]
 800adac:	e7eb      	b.n	800ad86 <__swsetup_r+0x1e>
 800adae:	4b24      	ldr	r3, [pc, #144]	; (800ae40 <__swsetup_r+0xd8>)
 800adb0:	429c      	cmp	r4, r3
 800adb2:	bf08      	it	eq
 800adb4:	68ec      	ldreq	r4, [r5, #12]
 800adb6:	e7e6      	b.n	800ad86 <__swsetup_r+0x1e>
 800adb8:	0758      	lsls	r0, r3, #29
 800adba:	d512      	bpl.n	800ade2 <__swsetup_r+0x7a>
 800adbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adbe:	b141      	cbz	r1, 800add2 <__swsetup_r+0x6a>
 800adc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adc4:	4299      	cmp	r1, r3
 800adc6:	d002      	beq.n	800adce <__swsetup_r+0x66>
 800adc8:	4630      	mov	r0, r6
 800adca:	f7ff fa8f 	bl	800a2ec <_free_r>
 800adce:	2300      	movs	r3, #0
 800add0:	6363      	str	r3, [r4, #52]	; 0x34
 800add2:	89a3      	ldrh	r3, [r4, #12]
 800add4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800add8:	81a3      	strh	r3, [r4, #12]
 800adda:	2300      	movs	r3, #0
 800addc:	6063      	str	r3, [r4, #4]
 800adde:	6923      	ldr	r3, [r4, #16]
 800ade0:	6023      	str	r3, [r4, #0]
 800ade2:	89a3      	ldrh	r3, [r4, #12]
 800ade4:	f043 0308 	orr.w	r3, r3, #8
 800ade8:	81a3      	strh	r3, [r4, #12]
 800adea:	6923      	ldr	r3, [r4, #16]
 800adec:	b94b      	cbnz	r3, 800ae02 <__swsetup_r+0x9a>
 800adee:	89a3      	ldrh	r3, [r4, #12]
 800adf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800adf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adf8:	d003      	beq.n	800ae02 <__swsetup_r+0x9a>
 800adfa:	4621      	mov	r1, r4
 800adfc:	4630      	mov	r0, r6
 800adfe:	f000 f847 	bl	800ae90 <__smakebuf_r>
 800ae02:	89a0      	ldrh	r0, [r4, #12]
 800ae04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae08:	f010 0301 	ands.w	r3, r0, #1
 800ae0c:	d00a      	beq.n	800ae24 <__swsetup_r+0xbc>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	60a3      	str	r3, [r4, #8]
 800ae12:	6963      	ldr	r3, [r4, #20]
 800ae14:	425b      	negs	r3, r3
 800ae16:	61a3      	str	r3, [r4, #24]
 800ae18:	6923      	ldr	r3, [r4, #16]
 800ae1a:	b943      	cbnz	r3, 800ae2e <__swsetup_r+0xc6>
 800ae1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae20:	d1ba      	bne.n	800ad98 <__swsetup_r+0x30>
 800ae22:	bd70      	pop	{r4, r5, r6, pc}
 800ae24:	0781      	lsls	r1, r0, #30
 800ae26:	bf58      	it	pl
 800ae28:	6963      	ldrpl	r3, [r4, #20]
 800ae2a:	60a3      	str	r3, [r4, #8]
 800ae2c:	e7f4      	b.n	800ae18 <__swsetup_r+0xb0>
 800ae2e:	2000      	movs	r0, #0
 800ae30:	e7f7      	b.n	800ae22 <__swsetup_r+0xba>
 800ae32:	bf00      	nop
 800ae34:	20000120 	.word	0x20000120
 800ae38:	0800b330 	.word	0x0800b330
 800ae3c:	0800b350 	.word	0x0800b350
 800ae40:	0800b310 	.word	0x0800b310

0800ae44 <__swhatbuf_r>:
 800ae44:	b570      	push	{r4, r5, r6, lr}
 800ae46:	460e      	mov	r6, r1
 800ae48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae4c:	2900      	cmp	r1, #0
 800ae4e:	b096      	sub	sp, #88	; 0x58
 800ae50:	4614      	mov	r4, r2
 800ae52:	461d      	mov	r5, r3
 800ae54:	da08      	bge.n	800ae68 <__swhatbuf_r+0x24>
 800ae56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	602a      	str	r2, [r5, #0]
 800ae5e:	061a      	lsls	r2, r3, #24
 800ae60:	d410      	bmi.n	800ae84 <__swhatbuf_r+0x40>
 800ae62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae66:	e00e      	b.n	800ae86 <__swhatbuf_r+0x42>
 800ae68:	466a      	mov	r2, sp
 800ae6a:	f000 f89b 	bl	800afa4 <_fstat_r>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	dbf1      	blt.n	800ae56 <__swhatbuf_r+0x12>
 800ae72:	9a01      	ldr	r2, [sp, #4]
 800ae74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae7c:	425a      	negs	r2, r3
 800ae7e:	415a      	adcs	r2, r3
 800ae80:	602a      	str	r2, [r5, #0]
 800ae82:	e7ee      	b.n	800ae62 <__swhatbuf_r+0x1e>
 800ae84:	2340      	movs	r3, #64	; 0x40
 800ae86:	2000      	movs	r0, #0
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	b016      	add	sp, #88	; 0x58
 800ae8c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae90 <__smakebuf_r>:
 800ae90:	898b      	ldrh	r3, [r1, #12]
 800ae92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae94:	079d      	lsls	r5, r3, #30
 800ae96:	4606      	mov	r6, r0
 800ae98:	460c      	mov	r4, r1
 800ae9a:	d507      	bpl.n	800aeac <__smakebuf_r+0x1c>
 800ae9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aea0:	6023      	str	r3, [r4, #0]
 800aea2:	6123      	str	r3, [r4, #16]
 800aea4:	2301      	movs	r3, #1
 800aea6:	6163      	str	r3, [r4, #20]
 800aea8:	b002      	add	sp, #8
 800aeaa:	bd70      	pop	{r4, r5, r6, pc}
 800aeac:	ab01      	add	r3, sp, #4
 800aeae:	466a      	mov	r2, sp
 800aeb0:	f7ff ffc8 	bl	800ae44 <__swhatbuf_r>
 800aeb4:	9900      	ldr	r1, [sp, #0]
 800aeb6:	4605      	mov	r5, r0
 800aeb8:	4630      	mov	r0, r6
 800aeba:	f7fe ff87 	bl	8009dcc <_malloc_r>
 800aebe:	b948      	cbnz	r0, 800aed4 <__smakebuf_r+0x44>
 800aec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aec4:	059a      	lsls	r2, r3, #22
 800aec6:	d4ef      	bmi.n	800aea8 <__smakebuf_r+0x18>
 800aec8:	f023 0303 	bic.w	r3, r3, #3
 800aecc:	f043 0302 	orr.w	r3, r3, #2
 800aed0:	81a3      	strh	r3, [r4, #12]
 800aed2:	e7e3      	b.n	800ae9c <__smakebuf_r+0xc>
 800aed4:	4b0d      	ldr	r3, [pc, #52]	; (800af0c <__smakebuf_r+0x7c>)
 800aed6:	62b3      	str	r3, [r6, #40]	; 0x28
 800aed8:	89a3      	ldrh	r3, [r4, #12]
 800aeda:	6020      	str	r0, [r4, #0]
 800aedc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aee0:	81a3      	strh	r3, [r4, #12]
 800aee2:	9b00      	ldr	r3, [sp, #0]
 800aee4:	6163      	str	r3, [r4, #20]
 800aee6:	9b01      	ldr	r3, [sp, #4]
 800aee8:	6120      	str	r0, [r4, #16]
 800aeea:	b15b      	cbz	r3, 800af04 <__smakebuf_r+0x74>
 800aeec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aef0:	4630      	mov	r0, r6
 800aef2:	f000 f869 	bl	800afc8 <_isatty_r>
 800aef6:	b128      	cbz	r0, 800af04 <__smakebuf_r+0x74>
 800aef8:	89a3      	ldrh	r3, [r4, #12]
 800aefa:	f023 0303 	bic.w	r3, r3, #3
 800aefe:	f043 0301 	orr.w	r3, r3, #1
 800af02:	81a3      	strh	r3, [r4, #12]
 800af04:	89a0      	ldrh	r0, [r4, #12]
 800af06:	4305      	orrs	r5, r0
 800af08:	81a5      	strh	r5, [r4, #12]
 800af0a:	e7cd      	b.n	800aea8 <__smakebuf_r+0x18>
 800af0c:	08009b6d 	.word	0x08009b6d

0800af10 <memmove>:
 800af10:	4288      	cmp	r0, r1
 800af12:	b510      	push	{r4, lr}
 800af14:	eb01 0402 	add.w	r4, r1, r2
 800af18:	d902      	bls.n	800af20 <memmove+0x10>
 800af1a:	4284      	cmp	r4, r0
 800af1c:	4623      	mov	r3, r4
 800af1e:	d807      	bhi.n	800af30 <memmove+0x20>
 800af20:	1e43      	subs	r3, r0, #1
 800af22:	42a1      	cmp	r1, r4
 800af24:	d008      	beq.n	800af38 <memmove+0x28>
 800af26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af2e:	e7f8      	b.n	800af22 <memmove+0x12>
 800af30:	4402      	add	r2, r0
 800af32:	4601      	mov	r1, r0
 800af34:	428a      	cmp	r2, r1
 800af36:	d100      	bne.n	800af3a <memmove+0x2a>
 800af38:	bd10      	pop	{r4, pc}
 800af3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af42:	e7f7      	b.n	800af34 <memmove+0x24>

0800af44 <_realloc_r>:
 800af44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af48:	4680      	mov	r8, r0
 800af4a:	4614      	mov	r4, r2
 800af4c:	460e      	mov	r6, r1
 800af4e:	b921      	cbnz	r1, 800af5a <_realloc_r+0x16>
 800af50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af54:	4611      	mov	r1, r2
 800af56:	f7fe bf39 	b.w	8009dcc <_malloc_r>
 800af5a:	b92a      	cbnz	r2, 800af68 <_realloc_r+0x24>
 800af5c:	f7ff f9c6 	bl	800a2ec <_free_r>
 800af60:	4625      	mov	r5, r4
 800af62:	4628      	mov	r0, r5
 800af64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af68:	f000 f83e 	bl	800afe8 <_malloc_usable_size_r>
 800af6c:	4284      	cmp	r4, r0
 800af6e:	4607      	mov	r7, r0
 800af70:	d802      	bhi.n	800af78 <_realloc_r+0x34>
 800af72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af76:	d812      	bhi.n	800af9e <_realloc_r+0x5a>
 800af78:	4621      	mov	r1, r4
 800af7a:	4640      	mov	r0, r8
 800af7c:	f7fe ff26 	bl	8009dcc <_malloc_r>
 800af80:	4605      	mov	r5, r0
 800af82:	2800      	cmp	r0, #0
 800af84:	d0ed      	beq.n	800af62 <_realloc_r+0x1e>
 800af86:	42bc      	cmp	r4, r7
 800af88:	4622      	mov	r2, r4
 800af8a:	4631      	mov	r1, r6
 800af8c:	bf28      	it	cs
 800af8e:	463a      	movcs	r2, r7
 800af90:	f7fe fee5 	bl	8009d5e <memcpy>
 800af94:	4631      	mov	r1, r6
 800af96:	4640      	mov	r0, r8
 800af98:	f7ff f9a8 	bl	800a2ec <_free_r>
 800af9c:	e7e1      	b.n	800af62 <_realloc_r+0x1e>
 800af9e:	4635      	mov	r5, r6
 800afa0:	e7df      	b.n	800af62 <_realloc_r+0x1e>
	...

0800afa4 <_fstat_r>:
 800afa4:	b538      	push	{r3, r4, r5, lr}
 800afa6:	4d07      	ldr	r5, [pc, #28]	; (800afc4 <_fstat_r+0x20>)
 800afa8:	2300      	movs	r3, #0
 800afaa:	4604      	mov	r4, r0
 800afac:	4608      	mov	r0, r1
 800afae:	4611      	mov	r1, r2
 800afb0:	602b      	str	r3, [r5, #0]
 800afb2:	f7f6 fb21 	bl	80015f8 <_fstat>
 800afb6:	1c43      	adds	r3, r0, #1
 800afb8:	d102      	bne.n	800afc0 <_fstat_r+0x1c>
 800afba:	682b      	ldr	r3, [r5, #0]
 800afbc:	b103      	cbz	r3, 800afc0 <_fstat_r+0x1c>
 800afbe:	6023      	str	r3, [r4, #0]
 800afc0:	bd38      	pop	{r3, r4, r5, pc}
 800afc2:	bf00      	nop
 800afc4:	20003380 	.word	0x20003380

0800afc8 <_isatty_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	4d06      	ldr	r5, [pc, #24]	; (800afe4 <_isatty_r+0x1c>)
 800afcc:	2300      	movs	r3, #0
 800afce:	4604      	mov	r4, r0
 800afd0:	4608      	mov	r0, r1
 800afd2:	602b      	str	r3, [r5, #0]
 800afd4:	f7f6 fb1f 	bl	8001616 <_isatty>
 800afd8:	1c43      	adds	r3, r0, #1
 800afda:	d102      	bne.n	800afe2 <_isatty_r+0x1a>
 800afdc:	682b      	ldr	r3, [r5, #0]
 800afde:	b103      	cbz	r3, 800afe2 <_isatty_r+0x1a>
 800afe0:	6023      	str	r3, [r4, #0]
 800afe2:	bd38      	pop	{r3, r4, r5, pc}
 800afe4:	20003380 	.word	0x20003380

0800afe8 <_malloc_usable_size_r>:
 800afe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afec:	1f18      	subs	r0, r3, #4
 800afee:	2b00      	cmp	r3, #0
 800aff0:	bfbc      	itt	lt
 800aff2:	580b      	ldrlt	r3, [r1, r0]
 800aff4:	18c0      	addlt	r0, r0, r3
 800aff6:	4770      	bx	lr

0800aff8 <_init>:
 800aff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affa:	bf00      	nop
 800affc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800affe:	bc08      	pop	{r3}
 800b000:	469e      	mov	lr, r3
 800b002:	4770      	bx	lr

0800b004 <_fini>:
 800b004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b006:	bf00      	nop
 800b008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b00a:	bc08      	pop	{r3}
 800b00c:	469e      	mov	lr, r3
 800b00e:	4770      	bx	lr
