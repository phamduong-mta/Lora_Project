
Lora_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a940  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800aa80  0800aa80  0001aa80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ada0  0800ada0  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ada0  0800ada0  0001ada0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ada8  0800ada8  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ada8  0800ada8  0001ada8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800adac  0800adac  0001adac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  0800adb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d4  2000018c  0800af3c  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a60  0800af3c  00020a60  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021d3e  00000000  00000000  000201b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045a6  00000000  00000000  00041ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ed0  00000000  00000000  000464a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d08  00000000  00000000  00048370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002295c  00000000  00000000  0004a078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024f92  00000000  00000000  0006c9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c49f6  00000000  00000000  00091966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015635c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a78  00000000  00000000  001563ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000018c 	.word	0x2000018c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800aa68 	.word	0x0800aa68

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000190 	.word	0x20000190
 800017c:	0800aa68 	.word	0x0800aa68

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	fbb8 fef5 	udiv	lr, r8, r5
 800029c:	fa1f f78c 	uxth.w	r7, ip
 80002a0:	fb05 831e 	mls	r3, r5, lr, r8
 80002a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a8:	fb0e f107 	mul.w	r1, lr, r7
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d90b      	bls.n	80002c8 <__udivmoddi4+0x68>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4299      	cmp	r1, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002d0:	fb05 3310 	mls	r3, r5, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x96>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e8:	f080 8108 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8105 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 050c 	sub.w	r5, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb5 f3f7 	udiv	r3, r5, r7
 8000368:	fb07 5013 	mls	r0, r7, r3, r5
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0f7 	udiv	r0, r5, r7
 8000394:	fb07 5510 	mls	r5, r7, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa05 f301 	lsl.w	r3, r5, r1
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40fd      	lsrs	r5, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 5518 	mls	r5, r9, r8, r5
 80003f0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0505 	adds.w	r5, ip, r5
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a8      	cmp	r0, r5
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4465      	add	r5, ip
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000420:	fb09 5510 	mls	r5, r9, r0, r5
 8000424:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	45ae      	cmp	lr, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45ae      	cmp	lr, r5
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba5 050e 	sub.w	r5, r5, lr
 800044e:	42a5      	cmp	r5, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb65 050e 	sbc.w	r5, r5, lr
 8000462:	fa05 f707 	lsl.w	r7, r5, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	40cd      	lsrs	r5, r1
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c6 7500 	strd	r7, r5, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa25 f303 	lsr.w	r3, r5, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	430d      	orrs	r5, r1
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3011 	mls	r0, r7, r1, r3
 800049c:	0c2b      	lsrs	r3, r5, #16
 800049e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004a2:	fb01 f00e 	mul.w	r0, r1, lr
 80004a6:	4298      	cmp	r0, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c8:	fb07 3310 	mls	r3, r7, r0, r3
 80004cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d0:	fb00 f30e 	mul.w	r3, r0, lr
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1aed      	subs	r5, r5, r3
 80004ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	4686      	mov	lr, r0
 80004fa:	e6e5      	b.n	80002c8 <__udivmoddi4+0x68>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fa      	b.n	80002f6 <__udivmoddi4+0x96>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4640      	mov	r0, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4465      	add	r5, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4608      	mov	r0, r1
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000550:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4013      	ands	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000558:	68fb      	ldr	r3, [r7, #12]
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <LL_AHB3_GRP1_DisableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_DisableClock(uint32_t Periphs)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 800056c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000570:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	43db      	mvns	r3, r3
 8000576:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800057a:	4013      	ands	r3, r2
 800057c:	650b      	str	r3, [r1, #80]	; 0x50
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <_write>:
extern uint8_t size;
extern bool flag_encrpt;
extern volatile uint8_t Node_id[NODE_ID_SIZE];

#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	b29a      	uxth	r2, r3
 8000598:	f04f 33ff 	mov.w	r3, #4294967295
 800059c:	68b9      	ldr	r1, [r7, #8]
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <_write+0x28>)
 80005a0:	f007 fa61 	bl	8007a66 <HAL_UART_Transmit>
	return len;
 80005a4:	687b      	ldr	r3, [r7, #4]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000948 	.word	0x20000948

080005b4 <MX_AES_Init>:
__ALIGN_BEGIN static const uint32_t pKeyAES[8] __ALIGN_END = {
                            0x603DEB10,0x15CA71BE,0x2B73AEF0,0x857D7781,0x1F352C07,0x3B6108D7,0x2D9810A3,0x0914DFF4};

/* AES init function */
void MX_AES_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_AES_Init+0x4c>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <MX_AES_Init+0x50>)
 80005bc:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_DATATYPE_32B;
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <MX_AES_Init+0x4c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_256B;
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_AES_Init+0x4c>)
 80005c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80005ca:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_AES_Init+0x4c>)
 80005ce:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <MX_AES_Init+0x54>)
 80005d0:	60da      	str	r2, [r3, #12]
  hcryp.Init.Algorithm = CRYP_AES_ECB;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_AES_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_AES_Init+0x4c>)
 80005da:	2201      	movs	r2, #1
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_BYTE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_AES_Init+0x4c>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	629a      	str	r2, [r3, #40]	; 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_AES_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_AES_Init+0x4c>)
 80005ec:	f002 fe6d 	bl	80032ca <HAL_CRYP_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_AES_Init+0x46>
  {
    Error_Handler();
 80005f6:	f000 fcbd 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200001a8 	.word	0x200001a8
 8000604:	58001800 	.word	0x58001800
 8000608:	0800ac18 	.word	0x0800ac18

0800060c <HAL_CRYP_MspInit>:

void HAL_CRYP_MspInit(CRYP_HandleTypeDef* crypHandle)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

  if(crypHandle->Instance==AES)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a05      	ldr	r2, [pc, #20]	; (8000630 <HAL_CRYP_MspInit+0x24>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d103      	bne.n	8000626 <HAL_CRYP_MspInit+0x1a>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* AES clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 800061e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000622:	f7ff ff87 	bl	8000534 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	58001800 	.word	0x58001800

08000634 <HAL_CRYP_MspDeInit>:

void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef* crypHandle)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]

  if(crypHandle->Instance==AES)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a05      	ldr	r2, [pc, #20]	; (8000658 <HAL_CRYP_MspDeInit+0x24>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d103      	bne.n	800064e <HAL_CRYP_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN AES_MspDeInit 0 */

  /* USER CODE END AES_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_AES_CLK_DISABLE();
 8000646:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800064a:	f7ff ff8b 	bl	8000564 <LL_AHB3_GRP1_DisableClock>
  /* USER CODE BEGIN AES_MspDeInit 1 */

  /* USER CODE END AES_MspDeInit 1 */
  }
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	58001800 	.word	0x58001800

0800065c <AES_encrypt_Packet>:
//
//	printf("Decrypted data: %s\n", rxBuffer_decypt);
//	memset(rxBuffer_decypt,0,sizeof(rxBuffer_decypt));
//	memset(rxBuffer_encypt,0,sizeof(rxBuffer_encypt));
}
void AES_encrypt_Packet(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	if (rxBuffer[0] == '\0') {
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <AES_encrypt_Packet+0x38>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d105      	bne.n	8000674 <AES_encrypt_Packet+0x18>
		memset(rxBuffer_encypt, 0, sizeof(rxBuffer_encypt));
 8000668:	22ff      	movs	r2, #255	; 0xff
 800066a:	2100      	movs	r1, #0
 800066c:	480a      	ldr	r0, [pc, #40]	; (8000698 <AES_encrypt_Packet+0x3c>)
 800066e:	f009 f805 	bl	800967c <memset>
 8000672:	e003      	b.n	800067c <AES_encrypt_Packet+0x20>
	} else

	strcat(rxBuffer_packet, Node_id);
 8000674:	4909      	ldr	r1, [pc, #36]	; (800069c <AES_encrypt_Packet+0x40>)
 8000676:	480a      	ldr	r0, [pc, #40]	; (80006a0 <AES_encrypt_Packet+0x44>)
 8000678:	f009 f8b6 	bl	80097e8 <strcat>
	strcat(rxBuffer_packet, rxBuffer);
 800067c:	4905      	ldr	r1, [pc, #20]	; (8000694 <AES_encrypt_Packet+0x38>)
 800067e:	4808      	ldr	r0, [pc, #32]	; (80006a0 <AES_encrypt_Packet+0x44>)
 8000680:	f009 f8b2 	bl	80097e8 <strcat>
	//strcpy(rxBuffer,Node_id);
	AES_Encrypt(rxBuffer_packet, rxBuffer_encypt, sizeof(rxBuffer));
 8000684:	22ff      	movs	r2, #255	; 0xff
 8000686:	4904      	ldr	r1, [pc, #16]	; (8000698 <AES_encrypt_Packet+0x3c>)
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <AES_encrypt_Packet+0x44>)
 800068a:	f000 f82d 	bl	80006e8 <AES_Encrypt>

	//printf("Encrypted data: ");
	//print_array(rxBuffer_encypt, strlen(rxBuffer_encypt));
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000010 	.word	0x20000010
 8000698:	200003b4 	.word	0x200003b4
 800069c:	20000008 	.word	0x20000008
 80006a0:	200002b4 	.word	0x200002b4

080006a4 <AES_decrypt_Packet>:
void AES_decrypt_Packet(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	if (rxBuffer_encypt_receive[0] == '\0') {
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <AES_decrypt_Packet+0x34>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d105      	bne.n	80006bc <AES_decrypt_Packet+0x18>
		memset(rxBuffer_decypt, 0, sizeof(rxBuffer_decypt));
 80006b0:	22ff      	movs	r2, #255	; 0xff
 80006b2:	2100      	movs	r1, #0
 80006b4:	4809      	ldr	r0, [pc, #36]	; (80006dc <AES_decrypt_Packet+0x38>)
 80006b6:	f008 ffe1 	bl	800967c <memset>
 80006ba:	e004      	b.n	80006c6 <AES_decrypt_Packet+0x22>
	} else
		AES_Decrypt(rxBuffer_encypt_receive, rxBuffer_decypt, sizeof(rxBuffer_encypt_receive));
 80006bc:	22ff      	movs	r2, #255	; 0xff
 80006be:	4907      	ldr	r1, [pc, #28]	; (80006dc <AES_decrypt_Packet+0x38>)
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <AES_decrypt_Packet+0x34>)
 80006c2:	f000 f855 	bl	8000770 <AES_Decrypt>

	printf("Decrypted data: %s\n", rxBuffer_decypt);
 80006c6:	4905      	ldr	r1, [pc, #20]	; (80006dc <AES_decrypt_Packet+0x38>)
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <AES_decrypt_Packet+0x3c>)
 80006ca:	f008 ffdf 	bl	800968c <iprintf>
	printf("\r\n");
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <AES_decrypt_Packet+0x40>)
 80006d0:	f009 f862 	bl	8009798 <puts>
	//memset(rxBuffer_decypt, 0, sizeof(rxBuffer_decypt));
	//memset(rxBuffer_encypt, 0, sizeof(rxBuffer_encypt));
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200004b4 	.word	0x200004b4
 80006dc:	200005b4 	.word	0x200005b4
 80006e0:	0800aa80 	.word	0x0800aa80
 80006e4:	0800aa94 	.word	0x0800aa94

080006e8 <AES_Encrypt>:

	}
	printf("\n");

}
void AES_Encrypt(uint8_t *input_data, uint8_t *output_data, uint32_t data_size) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af02      	add	r7, sp, #8
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
	MX_AES_Init();
 80006f4:	f7ff ff5e 	bl	80005b4 <MX_AES_Init>
	uint8_t *input_block = input_data;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	61fb      	str	r3, [r7, #28]
	uint8_t *output_block = output_data;
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	61bb      	str	r3, [r7, #24]
	uint32_t remaining_data = data_size;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	617b      	str	r3, [r7, #20]

	while (remaining_data >= BLOCK_SIZE) {
 8000704:	e014      	b.n	8000730 <AES_Encrypt+0x48>
		if (HAL_CRYP_Encrypt(&hcryp, input_block, BLOCK_SIZE, output_block,
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	2220      	movs	r2, #32
 8000710:	69f9      	ldr	r1, [r7, #28]
 8000712:	4816      	ldr	r0, [pc, #88]	; (800076c <AES_Encrypt+0x84>)
 8000714:	f002 fe42 	bl	800339c <HAL_CRYP_Encrypt>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d11f      	bne.n	800075e <AES_Encrypt+0x76>
				1000) != HAL_OK) {
			// Xử lý lỗi khi mã hóa AES
			return;
		}
		input_block += BLOCK_SIZE;
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3320      	adds	r3, #32
 8000722:	61fb      	str	r3, [r7, #28]
		output_block += BLOCK_SIZE;
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	3320      	adds	r3, #32
 8000728:	61bb      	str	r3, [r7, #24]
		remaining_data -= BLOCK_SIZE;
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	3b20      	subs	r3, #32
 800072e:	617b      	str	r3, [r7, #20]
	while (remaining_data >= BLOCK_SIZE) {
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	2b1f      	cmp	r3, #31
 8000734:	d8e7      	bhi.n	8000706 <AES_Encrypt+0x1e>
	}

	// Mã hóa block cuối cùng
	if (remaining_data > 0) {
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d00c      	beq.n	8000756 <AES_Encrypt+0x6e>
		if (HAL_CRYP_Encrypt(&hcryp, input_block, remaining_data, output_block,
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	b29a      	uxth	r2, r3
 8000740:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	69f9      	ldr	r1, [r7, #28]
 800074a:	4808      	ldr	r0, [pc, #32]	; (800076c <AES_Encrypt+0x84>)
 800074c:	f002 fe26 	bl	800339c <HAL_CRYP_Encrypt>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d105      	bne.n	8000762 <AES_Encrypt+0x7a>
			// Xử lý lỗi khi mã hóa AES
			return;
		}
	}

	HAL_CRYP_DeInit(&hcryp);
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <AES_Encrypt+0x84>)
 8000758:	f002 fdf2 	bl	8003340 <HAL_CRYP_DeInit>
 800075c:	e002      	b.n	8000764 <AES_Encrypt+0x7c>
			return;
 800075e:	bf00      	nop
 8000760:	e000      	b.n	8000764 <AES_Encrypt+0x7c>
			return;
 8000762:	bf00      	nop
}
 8000764:	3720      	adds	r7, #32
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200001a8 	.word	0x200001a8

08000770 <AES_Decrypt>:
void AES_Decrypt(uint8_t *input_data, uint8_t *output_data, uint32_t data_size) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af02      	add	r7, sp, #8
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]

	MX_AES_Init();
 800077c:	f7ff ff1a 	bl	80005b4 <MX_AES_Init>
	uint8_t *input_block = input_data;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	61fb      	str	r3, [r7, #28]
	uint8_t *output_block = output_data;
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	61bb      	str	r3, [r7, #24]
	uint32_t remaining_data = data_size;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	617b      	str	r3, [r7, #20]

	while (remaining_data >= BLOCK_SIZE) {
 800078c:	e014      	b.n	80007b8 <AES_Decrypt+0x48>
		if (HAL_CRYP_Decrypt(&hcryp, input_block, BLOCK_SIZE, output_block,
 800078e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	2220      	movs	r2, #32
 8000798:	69f9      	ldr	r1, [r7, #28]
 800079a:	4816      	ldr	r0, [pc, #88]	; (80007f4 <AES_Decrypt+0x84>)
 800079c:	f002 fe98 	bl	80034d0 <HAL_CRYP_Decrypt>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d11f      	bne.n	80007e6 <AES_Decrypt+0x76>
				1000) != HAL_OK) {
			// Xử lý lỗi khi giải mã AES
			return;
		}
		input_block += BLOCK_SIZE;
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3320      	adds	r3, #32
 80007aa:	61fb      	str	r3, [r7, #28]
		output_block += BLOCK_SIZE;
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	3320      	adds	r3, #32
 80007b0:	61bb      	str	r3, [r7, #24]
		remaining_data -= BLOCK_SIZE;
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3b20      	subs	r3, #32
 80007b6:	617b      	str	r3, [r7, #20]
	while (remaining_data >= BLOCK_SIZE) {
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	2b1f      	cmp	r3, #31
 80007bc:	d8e7      	bhi.n	800078e <AES_Decrypt+0x1e>
	}

	// Giải mã block cuối cùng
	if (remaining_data > 0) {
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d00c      	beq.n	80007de <AES_Decrypt+0x6e>
		if (HAL_CRYP_Decrypt(&hcryp, input_block, remaining_data, output_block,
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	69f9      	ldr	r1, [r7, #28]
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <AES_Decrypt+0x84>)
 80007d4:	f002 fe7c 	bl	80034d0 <HAL_CRYP_Decrypt>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d105      	bne.n	80007ea <AES_Decrypt+0x7a>
			// Xử lý lỗi khi giải mã AES
			return;
		}
	}

	HAL_CRYP_DeInit(&hcryp);
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <AES_Decrypt+0x84>)
 80007e0:	f002 fdae 	bl	8003340 <HAL_CRYP_DeInit>
 80007e4:	e002      	b.n	80007ec <AES_Decrypt+0x7c>
			return;
 80007e6:	bf00      	nop
 80007e8:	e000      	b.n	80007ec <AES_Decrypt+0x7c>
			return;
 80007ea:	bf00      	nop
}
 80007ec:	3720      	adds	r7, #32
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200001a8 	.word	0x200001a8

080007f8 <LL_AHB1_GRP1_EnableClock>:
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000804:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000806:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4313      	orrs	r3, r2
 800080e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000814:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4013      	ands	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800081c:	68fb      	ldr	r3, [r7, #12]
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800082c:	2004      	movs	r0, #4
 800082e:	f7ff ffe3 	bl	80007f8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff ffe0 	bl	80007f8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	200b      	movs	r0, #11
 800083e:	f002 fd0e 	bl	800325e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000842:	200b      	movs	r0, #11
 8000844:	f002 fd25 	bl	8003292 <HAL_NVIC_EnableIRQ>

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <LL_AHB2_GRP1_EnableClock>:
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000858:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800085a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4313      	orrs	r3, r2
 8000862:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000868:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4013      	ands	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000870:	68fb      	ldr	r3, [r7, #12]
}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff ffdb 	bl	800084c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2002      	movs	r0, #2
 8000898:	f7ff ffd8 	bl	800084c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089c:	2004      	movs	r0, #4
 800089e:	f7ff ffd5 	bl	800084c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_6
 80008a2:	2200      	movs	r2, #0
 80008a4:	f641 21f0 	movw	r1, #6896	; 0x1af0
 80008a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ac:	f004 fd3c 	bl	8005328 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 80008b6:	4844      	ldr	r0, [pc, #272]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008b8:	f004 fd36 	bl	8005328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	213c      	movs	r1, #60	; 0x3c
 80008c0:	4842      	ldr	r0, [pc, #264]	; (80009cc <MX_GPIO_Init+0x150>)
 80008c2:	f004 fd31 	bl	8005328 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA12 PA11 PA9 PA6
                           PA7 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_6
 80008c6:	f641 23f0 	movw	r3, #6896	; 0x1af0
 80008ca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	4619      	mov	r1, r3
 80008dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e0:	f004 faf4 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80008e4:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80008e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f2:	2302      	movs	r3, #2
 80008f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	4619      	mov	r1, r3
 80008fa:	4833      	ldr	r0, [pc, #204]	; (80009c8 <MX_GPIO_Init+0x14c>)
 80008fc:	f004 fae6 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000900:	2304      	movs	r3, #4
 8000902:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	4619      	mov	r1, r3
 8000914:	482d      	ldr	r0, [pc, #180]	; (80009cc <MX_GPIO_Init+0x150>)
 8000916:	f004 fad9 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 800091a:	2338      	movs	r3, #56	; 0x38
 800091c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4827      	ldr	r0, [pc, #156]	; (80009cc <MX_GPIO_Init+0x150>)
 8000930:	f004 facc 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000934:	2301      	movs	r3, #1
 8000936:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000938:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800093c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093e:	2301      	movs	r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	4619      	mov	r1, r3
 8000946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094a:	f004 fabf 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1C1_Pin|B3_Pin;
 800094e:	2342      	movs	r3, #66	; 0x42
 8000950:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000952:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000956:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000958:	2301      	movs	r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	4619      	mov	r1, r3
 8000960:	481a      	ldr	r0, [pc, #104]	; (80009cc <MX_GPIO_Init+0x150>)
 8000962:	f004 fab3 	bl	8004ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B10_Pin;
 8000966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800096c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000970:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000972:	2301      	movs	r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B10_GPIO_Port, &GPIO_InitStruct);
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	4619      	mov	r1, r3
 800097a:	4813      	ldr	r0, [pc, #76]	; (80009c8 <MX_GPIO_Init+0x14c>)
 800097c:	f004 faa6 	bl	8004ecc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2006      	movs	r0, #6
 8000986:	f002 fc6a 	bl	800325e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800098a:	2006      	movs	r0, #6
 800098c:	f002 fc81 	bl	8003292 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2100      	movs	r1, #0
 8000994:	2007      	movs	r0, #7
 8000996:	f002 fc62 	bl	800325e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800099a:	2007      	movs	r0, #7
 800099c:	f002 fc79 	bl	8003292 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2016      	movs	r0, #22
 80009a6:	f002 fc5a 	bl	800325e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009aa:	2016      	movs	r0, #22
 80009ac:	f002 fc71 	bl	8003292 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	2029      	movs	r0, #41	; 0x29
 80009b6:	f002 fc52 	bl	800325e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ba:	2029      	movs	r0, #41	; 0x29
 80009bc:	f002 fc69 	bl	8003292 <HAL_NVIC_EnableIRQ>

}
 80009c0:	bf00      	nop
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	48000400 	.word	0x48000400
 80009cc:	48000800 	.word	0x48000800

080009d0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80009d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009e0:	f023 0218 	bic.w	r2, r3, #24
 80009e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009fe:	f002 faf5 	bl	8002fec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a02:	f000 f813 	bl	8000a2c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a06:	f7ff ff39 	bl	800087c <MX_GPIO_Init>
	MX_DMA_Init();
 8000a0a:	f7ff ff0d 	bl	8000828 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000a0e:	f001 f86f 	bl	8001af0 <MX_USART2_UART_Init>
	MX_SUBGHZ_Init();
 8000a12:	f000 fbbf 	bl	8001194 <MX_SUBGHZ_Init>
	MX_AES_Init();
 8000a16:	f7ff fdcd 	bl	80005b4 <MX_AES_Init>
	/* USER CODE BEGIN 2 */
	radioInit();
 8000a1a:	f000 fbe1 	bl	80011e0 <radioInit>
	fsmInit();
 8000a1e:	f000 ff33 	bl	8001888 <fsmInit>
	UartDmaStart();
 8000a22:	f001 f973 	bl	8001d0c <UartDmaStart>

	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		SUBGHZ();
 8000a26:	f000 ff81 	bl	800192c <SUBGHZ>
 8000a2a:	e7fc      	b.n	8000a26 <main+0x2c>

08000a2c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b09a      	sub	sp, #104	; 0x68
 8000a30:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	2248      	movs	r2, #72	; 0x48
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f008 fe1e 	bl	800967c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000a52:	f004 fcb1 	bl	80053b8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff ffba 	bl	80009d0 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <SystemClock_Config+0xac>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a64:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <SystemClock_Config+0xac>)
 8000a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <SystemClock_Config+0xac>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8000a78:	2324      	movs	r3, #36	; 0x24
 8000a7a:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a7c:	2381      	movs	r3, #129	; 0x81
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a80:	2301      	movs	r3, #1
 8000a82:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000a88:	23b0      	movs	r3, #176	; 0xb0
 8000a8a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a90:	f107 0320 	add.w	r3, r7, #32
 8000a94:	4618      	mov	r0, r3
 8000a96:	f004 ff61 	bl	800595c <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x78>
		Error_Handler();
 8000aa0:	f000 fa68 	bl	8000f74 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8000aa4:	234f      	movs	r3, #79	; 0x4f
 8000aa6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f005 facd 	bl	8006060 <HAL_RCC_ClockConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0xa4>
		Error_Handler();
 8000acc:	f000 fa52 	bl	8000f74 <Error_Handler>
	}
}
 8000ad0:	bf00      	nop
 8000ad2:	3768      	adds	r7, #104	; 0x68
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	58000400 	.word	0x58000400

08000adc <HAL_GPIO_EXTI_Callback>:
 * @brief  Receive data trough SUBGHZSPI peripheral
 * @param  radioIrq  interrupt pending status information
 * @retval None
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_1) {
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	f040 812c 	bne.w	8000d46 <HAL_GPIO_EXTI_Callback+0x26a>

		switch (freChannel) {
 8000aee:	4bd1      	ldr	r3, [pc, #836]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x358>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b07      	cmp	r3, #7
 8000af6:	f200 80fb 	bhi.w	8000cf0 <HAL_GPIO_EXTI_Callback+0x214>
 8000afa:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <HAL_GPIO_EXTI_Callback+0x24>)
 8000afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b00:	08000b21 	.word	0x08000b21
 8000b04:	08000b5b 	.word	0x08000b5b
 8000b08:	08000b95 	.word	0x08000b95
 8000b0c:	08000bcf 	.word	0x08000bcf
 8000b10:	08000c09 	.word	0x08000c09
 8000b14:	08000c43 	.word	0x08000c43
 8000b18:	08000c7d 	.word	0x08000c7d
 8000b1c:	08000cb7 	.word	0x08000cb7
		case 0:
			RF_FREQUENCY = RF_FREQUENCY0
 8000b20:	4bc5      	ldr	r3, [pc, #788]	; (8000e38 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000b22:	4ac6      	ldr	r2, [pc, #792]	; (8000e3c <HAL_GPIO_EXTI_Callback+0x360>)
 8000b24:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2e:	f004 fbfb 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2140      	movs	r1, #64	; 0x40
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3a:	f004 fbf5 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2140      	movs	r1, #64	; 0x40
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b46:	f004 fbef 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b54:	f004 fbe8 	bl	8005328 <HAL_GPIO_WritePin>
			break;
 8000b58:	e0e6      	b.n	8000d28 <HAL_GPIO_EXTI_Callback+0x24c>
		case 1:
			RF_FREQUENCY = RF_FREQUENCY1
 8000b5a:	4bb7      	ldr	r3, [pc, #732]	; (8000e38 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000b5c:	4ab7      	ldr	r2, [pc, #732]	; (8000e3c <HAL_GPIO_EXTI_Callback+0x360>)
 8000b5e:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f004 fbde 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2140      	movs	r1, #64	; 0x40
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f004 fbd8 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2140      	movs	r1, #64	; 0x40
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b80:	f004 fbd2 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f004 fbcb 	bl	8005328 <HAL_GPIO_WritePin>
			break;
 8000b92:	e0c9      	b.n	8000d28 <HAL_GPIO_EXTI_Callback+0x24c>
		case 2:
			RF_FREQUENCY = RF_FREQUENCY2
 8000b94:	4ba8      	ldr	r3, [pc, #672]	; (8000e38 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000b96:	4aa9      	ldr	r2, [pc, #676]	; (8000e3c <HAL_GPIO_EXTI_Callback+0x360>)
 8000b98:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f004 fbc1 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2140      	movs	r1, #64	; 0x40
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f004 fbbb 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2140      	movs	r1, #64	; 0x40
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f004 fbb5 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_SET);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc8:	f004 fbae 	bl	8005328 <HAL_GPIO_WritePin>
			break;
 8000bcc:	e0ac      	b.n	8000d28 <HAL_GPIO_EXTI_Callback+0x24c>
		case 3:
			RF_FREQUENCY = RF_FREQUENCY3
 8000bce:	4b9a      	ldr	r3, [pc, #616]	; (8000e38 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000bd0:	4a9a      	ldr	r2, [pc, #616]	; (8000e3c <HAL_GPIO_EXTI_Callback+0x360>)
 8000bd2:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2180      	movs	r1, #128	; 0x80
 8000bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bdc:	f004 fba4 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	2140      	movs	r1, #64	; 0x40
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be8:	f004 fb9e 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2140      	movs	r1, #64	; 0x40
 8000bf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf4:	f004 fb98 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c02:	f004 fb91 	bl	8005328 <HAL_GPIO_WritePin>
			break;
 8000c06:	e08f      	b.n	8000d28 <HAL_GPIO_EXTI_Callback+0x24c>
		case 4:
			RF_FREQUENCY = RF_FREQUENCY4
 8000c08:	4b8b      	ldr	r3, [pc, #556]	; (8000e38 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000c0a:	4a8c      	ldr	r2, [pc, #560]	; (8000e3c <HAL_GPIO_EXTI_Callback+0x360>)
 8000c0c:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c16:	f004 fb87 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2140      	movs	r1, #64	; 0x40
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c22:	f004 fb81 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2140      	movs	r1, #64	; 0x40
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2e:	f004 fb7b 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_SET);
 8000c32:	2201      	movs	r2, #1
 8000c34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3c:	f004 fb74 	bl	8005328 <HAL_GPIO_WritePin>
			break;
 8000c40:	e072      	b.n	8000d28 <HAL_GPIO_EXTI_Callback+0x24c>
		case 5:
			RF_FREQUENCY = RF_FREQUENCY5
 8000c42:	4b7d      	ldr	r3, [pc, #500]	; (8000e38 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000c44:	4a7d      	ldr	r2, [pc, #500]	; (8000e3c <HAL_GPIO_EXTI_Callback+0x360>)
 8000c46:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c50:	f004 fb6a 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2140      	movs	r1, #64	; 0x40
 8000c58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5c:	f004 fb64 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2140      	movs	r1, #64	; 0x40
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f004 fb5e 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c76:	f004 fb57 	bl	8005328 <HAL_GPIO_WritePin>
			break;
 8000c7a:	e055      	b.n	8000d28 <HAL_GPIO_EXTI_Callback+0x24c>
		case 6:
			RF_FREQUENCY = RF_FREQUENCY6
 8000c7c:	4b6e      	ldr	r3, [pc, #440]	; (8000e38 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000c7e:	4a6f      	ldr	r2, [pc, #444]	; (8000e3c <HAL_GPIO_EXTI_Callback+0x360>)
 8000c80:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f004 fb4d 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2140      	movs	r1, #64	; 0x40
 8000c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c96:	f004 fb47 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2140      	movs	r1, #64	; 0x40
 8000c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca2:	f004 fb41 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb0:	f004 fb3a 	bl	8005328 <HAL_GPIO_WritePin>
			break;
 8000cb4:	e038      	b.n	8000d28 <HAL_GPIO_EXTI_Callback+0x24c>
		case 7:
			RF_FREQUENCY = RF_FREQUENCY7
 8000cb6:	4b60      	ldr	r3, [pc, #384]	; (8000e38 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000cb8:	4a60      	ldr	r2, [pc, #384]	; (8000e3c <HAL_GPIO_EXTI_Callback+0x360>)
 8000cba:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2180      	movs	r1, #128	; 0x80
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc4:	f004 fb30 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2140      	movs	r1, #64	; 0x40
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd0:	f004 fb2a 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2140      	movs	r1, #64	; 0x40
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cdc:	f004 fb24 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cea:	f004 fb1d 	bl	8005328 <HAL_GPIO_WritePin>
			break;
 8000cee:	e01b      	b.n	8000d28 <HAL_GPIO_EXTI_Callback+0x24c>

		default:
			RF_FREQUENCY = RF_FREQUENCY0
 8000cf0:	4b51      	ldr	r3, [pc, #324]	; (8000e38 <HAL_GPIO_EXTI_Callback+0x35c>)
 8000cf2:	4a52      	ldr	r2, [pc, #328]	; (8000e3c <HAL_GPIO_EXTI_Callback+0x360>)
 8000cf4:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfe:	f004 fb13 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2140      	movs	r1, #64	; 0x40
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0a:	f004 fb0d 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2140      	movs	r1, #64	; 0x40
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d16:	f004 fb07 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f004 fb00 	bl	8005328 <HAL_GPIO_WritePin>

			//break
		}

		freChannel++;
 8000d28:	4b42      	ldr	r3, [pc, #264]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x358>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	3301      	adds	r3, #1
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4b40      	ldr	r3, [pc, #256]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x358>)
 8000d34:	701a      	strb	r2, [r3, #0]
		if (freChannel == FRE_CHANNEL_END)
 8000d36:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x358>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b07      	cmp	r3, #7
 8000d3e:	d102      	bne.n	8000d46 <HAL_GPIO_EXTI_Callback+0x26a>
			freChannel = FRE_CHANNEL_START;
 8000d40:	4b3c      	ldr	r3, [pc, #240]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x358>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_0) {
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	f040 80f2 	bne.w	8000f32 <HAL_GPIO_EXTI_Callback+0x456>

		switch (bauChannel) {
 8000d4e:	4b3c      	ldr	r3, [pc, #240]	; (8000e40 <HAL_GPIO_EXTI_Callback+0x364>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2b06      	cmp	r3, #6
 8000d56:	f200 80bd 	bhi.w	8000ed4 <HAL_GPIO_EXTI_Callback+0x3f8>
 8000d5a:	a201      	add	r2, pc, #4	; (adr r2, 8000d60 <HAL_GPIO_EXTI_Callback+0x284>)
 8000d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d60:	08000d7d 	.word	0x08000d7d
 8000d64:	08000dab 	.word	0x08000dab
 8000d68:	08000dd9 	.word	0x08000dd9
 8000d6c:	08000e07 	.word	0x08000e07
 8000d70:	08000e4d 	.word	0x08000e4d
 8000d74:	08000e7b 	.word	0x08000e7b
 8000d78:	08000ea9 	.word	0x08000ea9
		case 0:
			UART_BAUDRATE = BAUDRATE0;
 8000d7c:	4b31      	ldr	r3, [pc, #196]	; (8000e44 <HAL_GPIO_EXTI_Callback+0x368>)
 8000d7e:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000d82:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2104      	movs	r1, #4
 8000d88:	482f      	ldr	r0, [pc, #188]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x36c>)
 8000d8a:	f004 facd 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f004 fac6 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2110      	movs	r1, #16
 8000da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da4:	f004 fac0 	bl	8005328 <HAL_GPIO_WritePin>
			break;
 8000da8:	e0aa      	b.n	8000f00 <HAL_GPIO_EXTI_Callback+0x424>
		case 1:
			UART_BAUDRATE = BAUDRATE1;
 8000daa:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <HAL_GPIO_EXTI_Callback+0x368>)
 8000dac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000db0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2104      	movs	r1, #4
 8000db6:	4824      	ldr	r0, [pc, #144]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x36c>)
 8000db8:	f004 fab6 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc6:	f004 faaf 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2110      	movs	r1, #16
 8000dce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd2:	f004 faa9 	bl	8005328 <HAL_GPIO_WritePin>
			break;
 8000dd6:	e093      	b.n	8000f00 <HAL_GPIO_EXTI_Callback+0x424>
		case 2:
			UART_BAUDRATE = BAUDRATE2;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HAL_GPIO_EXTI_Callback+0x368>)
 8000dda:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000dde:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2104      	movs	r1, #4
 8000de4:	4818      	ldr	r0, [pc, #96]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x36c>)
 8000de6:	f004 fa9f 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df4:	f004 fa98 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_SET);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e00:	f004 fa92 	bl	8005328 <HAL_GPIO_WritePin>
			break;
 8000e04:	e07c      	b.n	8000f00 <HAL_GPIO_EXTI_Callback+0x424>
		case 3:
			UART_BAUDRATE = BAUDRATE3;
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <HAL_GPIO_EXTI_Callback+0x368>)
 8000e08:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e0c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2104      	movs	r1, #4
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x36c>)
 8000e14:	f004 fa88 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e22:	f004 fa81 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2110      	movs	r1, #16
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2e:	f004 fa7b 	bl	8005328 <HAL_GPIO_WritePin>
			break;
 8000e32:	e065      	b.n	8000f00 <HAL_GPIO_EXTI_Callback+0x424>
 8000e34:	200007b3 	.word	0x200007b3
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	19cf0e40 	.word	0x19cf0e40
 8000e40:	200007b4 	.word	0x200007b4
 8000e44:	20000004 	.word	0x20000004
 8000e48:	48000800 	.word	0x48000800
		case 4:
			UART_BAUDRATE = BAUDRATE4;
 8000e4c:	4b3b      	ldr	r3, [pc, #236]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x460>)
 8000e4e:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000e52:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2104      	movs	r1, #4
 8000e58:	4839      	ldr	r0, [pc, #228]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x464>)
 8000e5a:	f004 fa65 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f004 fa5e 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2110      	movs	r1, #16
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e74:	f004 fa58 	bl	8005328 <HAL_GPIO_WritePin>
			break;
 8000e78:	e042      	b.n	8000f00 <HAL_GPIO_EXTI_Callback+0x424>
		case 5:
			UART_BAUDRATE = BAUDRATE5;
 8000e7a:	4b30      	ldr	r3, [pc, #192]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x460>)
 8000e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e80:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_SET);
 8000e82:	2201      	movs	r2, #1
 8000e84:	2104      	movs	r1, #4
 8000e86:	482e      	ldr	r0, [pc, #184]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x464>)
 8000e88:	f004 fa4e 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_SET);
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e96:	f004 fa47 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f004 fa41 	bl	8005328 <HAL_GPIO_WritePin>
			break;
 8000ea6:	e02b      	b.n	8000f00 <HAL_GPIO_EXTI_Callback+0x424>
		case 6:
			UART_BAUDRATE = BAUDRATE6;
 8000ea8:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x460>)
 8000eaa:	4a26      	ldr	r2, [pc, #152]	; (8000f44 <HAL_GPIO_EXTI_Callback+0x468>)
 8000eac:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	4823      	ldr	r0, [pc, #140]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x464>)
 8000eb4:	f004 fa38 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f004 fa31 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	2110      	movs	r1, #16
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ece:	f004 fa2b 	bl	8005328 <HAL_GPIO_WritePin>
			break;
 8000ed2:	e015      	b.n	8000f00 <HAL_GPIO_EXTI_Callback+0x424>
		default:
			UART_BAUDRATE = BAUDRATE5;
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <HAL_GPIO_EXTI_Callback+0x460>)
 8000ed6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eda:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2104      	movs	r1, #4
 8000ee0:	4817      	ldr	r0, [pc, #92]	; (8000f40 <HAL_GPIO_EXTI_Callback+0x464>)
 8000ee2:	f004 fa21 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f004 fa1a 	bl	8005328 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efc:	f004 fa14 	bl	8005328 <HAL_GPIO_WritePin>
		}

		bauChannel++;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x46c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	3301      	adds	r3, #1
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x46c>)
 8000f0c:	701a      	strb	r2, [r3, #0]
		if (bauChannel == BAUD_CHANNEL_END)
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x46c>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	2b06      	cmp	r3, #6
 8000f16:	d102      	bne.n	8000f1e <HAL_GPIO_EXTI_Callback+0x442>
			bauChannel = BAUD_CHANNEL_START;
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_GPIO_EXTI_Callback+0x46c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Abort_IT(&huart2);
 8000f1e:	480b      	ldr	r0, [pc, #44]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x470>)
 8000f20:	f006 fe28 	bl	8007b74 <HAL_UART_Abort_IT>
		HAL_UART_DeInit(&huart2);
 8000f24:	4809      	ldr	r0, [pc, #36]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x470>)
 8000f26:	f006 fd5f 	bl	80079e8 <HAL_UART_DeInit>
		MX_USART2_UART_Init();
 8000f2a:	f000 fde1 	bl	8001af0 <MX_USART2_UART_Init>
		UartDmaStart();
 8000f2e:	f000 feed 	bl	8001d0c <UartDmaStart>
	}
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000004 	.word	0x20000004
 8000f40:	48000800 	.word	0x48000800
 8000f44:	0003d090 	.word	0x0003d090
 8000f48:	200007b4 	.word	0x200007b4
 8000f4c:	20000948 	.word	0x20000948

08000f50 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM17) {
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d101      	bne.n	8000f66 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000f62:	f002 f863 	bl	800302c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40014800 	.word	0x40014800

08000f74 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f7c:	e7fe      	b.n	8000f7c <Error_Handler+0x8>

08000f7e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b085      	sub	sp, #20
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4013      	ands	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
	...

08000fbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08e      	sub	sp, #56	; 0x38
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000fd2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000fd6:	f7ff ffd8 	bl	8000f8a <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fda:	f107 020c 	add.w	r2, r7, #12
 8000fde:	f107 0310 	add.w	r3, r7, #16
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f005 fa55 	bl	8006494 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fea:	f005 fa41 	bl	8006470 <HAL_RCC_GetPCLK2Freq>
 8000fee:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff2:	4a21      	ldr	r2, [pc, #132]	; (8001078 <HAL_InitTick+0xbc>)
 8000ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff8:	0c9b      	lsrs	r3, r3, #18
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <HAL_InitTick+0xc0>)
 8001000:	4a1f      	ldr	r2, [pc, #124]	; (8001080 <HAL_InitTick+0xc4>)
 8001002:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <HAL_InitTick+0xc0>)
 8001006:	f240 32e7 	movw	r2, #999	; 0x3e7
 800100a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800100c:	4a1b      	ldr	r2, [pc, #108]	; (800107c <HAL_InitTick+0xc0>)
 800100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001010:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_InitTick+0xc0>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_InitTick+0xc0>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 800101e:	4817      	ldr	r0, [pc, #92]	; (800107c <HAL_InitTick+0xc0>)
 8001020:	f006 fa04 	bl	800742c <HAL_TIM_Base_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 800102a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800102e:	2b00      	cmp	r3, #0
 8001030:	d11b      	bne.n	800106a <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001032:	4812      	ldr	r0, [pc, #72]	; (800107c <HAL_InitTick+0xc0>)
 8001034:	f006 fa5a 	bl	80074ec <HAL_TIM_Base_Start_IT>
 8001038:	4603      	mov	r3, r0
 800103a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 800103e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001042:	2b00      	cmp	r3, #0
 8001044:	d111      	bne.n	800106a <HAL_InitTick+0xae>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001046:	201d      	movs	r0, #29
 8001048:	f002 f923 	bl	8003292 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b0f      	cmp	r3, #15
 8001050:	d808      	bhi.n	8001064 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8001052:	2200      	movs	r2, #0
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	201d      	movs	r0, #29
 8001058:	f002 f901 	bl	800325e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800105c:	4a09      	ldr	r2, [pc, #36]	; (8001084 <HAL_InitTick+0xc8>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	e002      	b.n	800106a <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

 /* Return function status */
  return status;
 800106a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800106e:	4618      	mov	r0, r3
 8001070:	3738      	adds	r7, #56	; 0x38
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	431bde83 	.word	0x431bde83
 800107c:	200007b8 	.word	0x200007b8
 8001080:	40014800 	.word	0x40014800
 8001084:	20000120 	.word	0x20000120

08001088 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800108c:	e7fe      	b.n	800108c <NMI_Handler+0x4>

0800108e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <MemManage_Handler+0x4>

0800109a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr

080010ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr

080010d6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010da:	2001      	movs	r0, #1
 80010dc:	f004 f954 	bl	8005388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1C1_Pin);
 80010e8:	2002      	movs	r0, #2
 80010ea:	f004 f94d 	bl	8005388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <DMA1_Channel1_IRQHandler+0x10>)
 80010fa:	f003 fd49 	bl	8004b90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200009dc 	.word	0x200009dc

08001108 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 800110c:	2040      	movs	r0, #64	; 0x40
 800110e:	f004 f93b 	bl	8005388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <TIM17_IRQHandler+0x10>)
 800111e:	f006 fa31 	bl	8007584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200007b8 	.word	0x200007b8

0800112c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <USART2_IRQHandler+0x10>)
 8001132:	f006 fe5b 	bl	8007dec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000948 	.word	0x20000948

08001140 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B10_Pin);
 8001144:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001148:	f004 f91e 	bl	8005388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001156:	f005 ffc1 	bl	80070dc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000938 	.word	0x20000938

08001164 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800116c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001170:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001172:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800117c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001180:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4013      	ands	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001188:	68fb      	ldr	r3, [r7, #12]
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <MX_SUBGHZ_Init>:
/* USER CODE END 0 */

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	/* USER CODE END SUBGHZ_Init 0 */

	/* USER CODE BEGIN SUBGHZ_Init 1 */

	/* USER CODE END SUBGHZ_Init 1 */
	hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_SUBGHZ_Init+0x20>)
 800119a:	2208      	movs	r2, #8
 800119c:	601a      	str	r2, [r3, #0]
	if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_SUBGHZ_Init+0x20>)
 80011a0:	f005 fd1a 	bl	8006bd8 <HAL_SUBGHZ_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_SUBGHZ_Init+0x1a>
		Error_Handler();
 80011aa:	f7ff fee3 	bl	8000f74 <Error_Handler>
	}
	/* USER CODE BEGIN SUBGHZ_Init 2 */

	/* USER CODE END SUBGHZ_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000938 	.word	0x20000938

080011b8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef *subghzHandle) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN SUBGHZ_MspInit 0 */

	/* USER CODE END SUBGHZ_MspInit 0 */
	/* SUBGHZ clock enable */
	__HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff ffcf 	bl	8001164 <LL_APB3_GRP1_EnableClock>

	/* SUBGHZ interrupt Init */
	HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	2032      	movs	r0, #50	; 0x32
 80011cc:	f002 f847 	bl	800325e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80011d0:	2032      	movs	r0, #50	; 0x32
 80011d2:	f002 f85e 	bl	8003292 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN SUBGHZ_MspInit 1 */

	/* USER CODE END SUBGHZ_MspInit 1 */
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <radioInit>:

	/* USER CODE END SUBGHZ_MspDeInit 1 */
}

/* USER CODE BEGIN 1 */
void radioInit(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
	// Initialize the hardware (SPI bus, TCXO control, RF switch)
	SUBGRF_Init(RadioOnDioIrq);
 80011e6:	4831      	ldr	r0, [pc, #196]	; (80012ac <radioInit+0xcc>)
 80011e8:	f000 fefe 	bl	8001fe8 <SUBGRF_Init>

	// Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
	// "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
	SUBGRF_WriteRegister(SUBGHZ_SMPSC0R,
			(SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 80011ec:	f640 1016 	movw	r0, #2326	; 0x916
 80011f0:	f001 fcfe 	bl	8002bf0 <SUBGRF_ReadRegister>
 80011f4:	4603      	mov	r3, r0
	SUBGRF_WriteRegister(SUBGHZ_SMPSC0R,
 80011f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4619      	mov	r1, r3
 80011fe:	f640 1016 	movw	r0, #2326	; 0x916
 8001202:	f001 fce1 	bl	8002bc8 <SUBGRF_WriteRegister>
	SUBGRF_SetRegulatorMode();
 8001206:	f001 f878 	bl	80022fa <SUBGRF_SetRegulatorMode>

	// Use the whole 256-byte buffer for both TX and RX
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 800120a:	2100      	movs	r1, #0
 800120c:	2000      	movs	r0, #0
 800120e:	f001 fc45 	bl	8002a9c <SUBGRF_SetBufferBaseAddress>

	SUBGRF_SetRfFrequency(RF_FREQUENCY);
 8001212:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <radioInit+0xd0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f001 f994 	bl	8002544 <SUBGRF_SetRfFrequency>

	SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 800121c:	200e      	movs	r0, #14
 800121e:	f001 fdef 	bl	8002e00 <SUBGRF_SetRfTxPower>
	SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 8001222:	2000      	movs	r0, #0
 8001224:	f001 f85a 	bl	80022dc <SUBGRF_SetStopRxTimerOnPreambleDetect>

	SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8001228:	2001      	movs	r0, #1
 800122a:	f001 f9d1 	bl	80025d0 <SUBGRF_SetPacketType>

	SUBGRF_WriteRegister( REG_LR_SYNCWORD,
 800122e:	2114      	movs	r1, #20
 8001230:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8001234:	f001 fcc8 	bl	8002bc8 <SUBGRF_WriteRegister>
			( LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
	SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1,
 8001238:	2124      	movs	r1, #36	; 0x24
 800123a:	f240 7041 	movw	r0, #1857	; 0x741
 800123e:	f001 fcc3 	bl	8002bc8 <SUBGRF_WriteRegister>
	LORA_MAC_PRIVATE_SYNCWORD & 0xFF);

	ModulationParams_t modulationParams;
	modulationParams.PacketType = PACKET_TYPE_LORA;
 8001242:	2301      	movs	r3, #1
 8001244:	713b      	strb	r3, [r7, #4]
	modulationParams.Params.LoRa.Bandwidth = Bandwidths[LORA_BANDWIDTH];
 8001246:	2304      	movs	r3, #4
 8001248:	777b      	strb	r3, [r7, #29]
	modulationParams.Params.LoRa.CodingRate =
 800124a:	2301      	movs	r3, #1
 800124c:	77bb      	strb	r3, [r7, #30]
			(RadioLoRaCodingRates_t) LORA_CODINGRATE;
	modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800124e:	2300      	movs	r3, #0
 8001250:	77fb      	strb	r3, [r7, #31]
	modulationParams.Params.LoRa.SpreadingFactor =
 8001252:	2307      	movs	r3, #7
 8001254:	773b      	strb	r3, [r7, #28]
			(RadioLoRaSpreadingFactors_t) LORA_SPREADING_FACTOR;
	SUBGRF_SetModulationParams(&modulationParams);
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	4618      	mov	r0, r3
 800125a:	f001 faad 	bl	80027b8 <SUBGRF_SetModulationParams>

	packetParams.PacketType = PACKET_TYPE_LORA;
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <radioInit+0xd4>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
	packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <radioInit+0xd4>)
 8001266:	2201      	movs	r2, #1
 8001268:	761a      	strb	r2, [r3, #24]
	packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <radioInit+0xd4>)
 800126c:	2200      	movs	r2, #0
 800126e:	749a      	strb	r2, [r3, #18]
	packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <radioInit+0xd4>)
 8001272:	2200      	movs	r2, #0
 8001274:	765a      	strb	r2, [r3, #25]
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <radioInit+0xd4>)
 8001278:	22ff      	movs	r2, #255	; 0xff
 800127a:	615a      	str	r2, [r3, #20]

	packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <radioInit+0xd4>)
 800127e:	2208      	movs	r2, #8
 8001280:	821a      	strh	r2, [r3, #16]
	SUBGRF_SetPacketParams(&packetParams);
 8001282:	480c      	ldr	r0, [pc, #48]	; (80012b4 <radioInit+0xd4>)
 8001284:	f001 fb6a 	bl	800295c <SUBGRF_SetPacketParams>

	//SUBGRF_SetLoRaSymbNumTimeout(LORA_SYMBOL_TIMEOUT);

	// WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
	// RegIqPolaritySetup @address 0x0736
	SUBGRF_WriteRegister(0x0736, SUBGRF_ReadRegister(0x0736) | (1 << 2));
 8001288:	f240 7036 	movw	r0, #1846	; 0x736
 800128c:	f001 fcb0 	bl	8002bf0 <SUBGRF_ReadRegister>
 8001290:	4603      	mov	r3, r0
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	b2db      	uxtb	r3, r3
 8001298:	4619      	mov	r1, r3
 800129a:	f240 7036 	movw	r0, #1846	; 0x736
 800129e:	f001 fc93 	bl	8002bc8 <SUBGRF_WriteRegister>
}
 80012a2:	bf00      	nop
 80012a4:	3720      	adds	r7, #32
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	080012b9 	.word	0x080012b9
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000918 	.word	0x20000918

080012b8 <RadioOnDioIrq>:
void RadioOnDioIrq(RadioIrqMasks_t radioIrq) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	80fb      	strh	r3, [r7, #6]
	switch (radioIrq) {
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012c8:	d013      	beq.n	80012f2 <RadioOnDioIrq+0x3a>
 80012ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012ce:	dc26      	bgt.n	800131e <RadioOnDioIrq+0x66>
 80012d0:	2b40      	cmp	r3, #64	; 0x40
 80012d2:	d020      	beq.n	8001316 <RadioOnDioIrq+0x5e>
 80012d4:	2b40      	cmp	r3, #64	; 0x40
 80012d6:	dc22      	bgt.n	800131e <RadioOnDioIrq+0x66>
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d002      	beq.n	80012e2 <RadioOnDioIrq+0x2a>
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d004      	beq.n	80012ea <RadioOnDioIrq+0x32>
		break;
	case IRQ_CRC_ERROR:
		eventReceptor = eventRxError;
		break;
	default:
		break;
 80012e0:	e01d      	b.n	800131e <RadioOnDioIrq+0x66>
		eventReceptor = eventTxDone;
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <RadioOnDioIrq+0x74>)
 80012e4:	4a12      	ldr	r2, [pc, #72]	; (8001330 <RadioOnDioIrq+0x78>)
 80012e6:	601a      	str	r2, [r3, #0]
		break;
 80012e8:	e01c      	b.n	8001324 <RadioOnDioIrq+0x6c>
		eventReceptor = eventRxDone;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <RadioOnDioIrq+0x74>)
 80012ec:	4a11      	ldr	r2, [pc, #68]	; (8001334 <RadioOnDioIrq+0x7c>)
 80012ee:	601a      	str	r2, [r3, #0]
		break;
 80012f0:	e018      	b.n	8001324 <RadioOnDioIrq+0x6c>
		if (SUBGRF_GetOperatingMode() == MODE_TX) {
 80012f2:	f000 fec1 	bl	8002078 <SUBGRF_GetOperatingMode>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d103      	bne.n	8001304 <RadioOnDioIrq+0x4c>
			eventReceptor = eventTxTimeout;
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <RadioOnDioIrq+0x74>)
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <RadioOnDioIrq+0x80>)
 8001300:	601a      	str	r2, [r3, #0]
		break;
 8001302:	e00e      	b.n	8001322 <RadioOnDioIrq+0x6a>
		} else if (SUBGRF_GetOperatingMode() == MODE_RX) {
 8001304:	f000 feb8 	bl	8002078 <SUBGRF_GetOperatingMode>
 8001308:	4603      	mov	r3, r0
 800130a:	2b05      	cmp	r3, #5
 800130c:	d109      	bne.n	8001322 <RadioOnDioIrq+0x6a>
			eventReceptor = eventRxTimeout;
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <RadioOnDioIrq+0x74>)
 8001310:	4a0a      	ldr	r2, [pc, #40]	; (800133c <RadioOnDioIrq+0x84>)
 8001312:	601a      	str	r2, [r3, #0]
		break;
 8001314:	e005      	b.n	8001322 <RadioOnDioIrq+0x6a>
		eventReceptor = eventRxError;
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <RadioOnDioIrq+0x74>)
 8001318:	4a09      	ldr	r2, [pc, #36]	; (8001340 <RadioOnDioIrq+0x88>)
 800131a:	601a      	str	r2, [r3, #0]
		break;
 800131c:	e002      	b.n	8001324 <RadioOnDioIrq+0x6c>
		break;
 800131e:	bf00      	nop
 8001320:	e000      	b.n	8001324 <RadioOnDioIrq+0x6c>
		break;
 8001322:	bf00      	nop
	}
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000934 	.word	0x20000934
 8001330:	08001345 	.word	0x08001345
 8001334:	080013ad 	.word	0x080013ad
 8001338:	080014c5 	.word	0x080014c5
 800133c:	0800152d 	.word	0x0800152d
 8001340:	08001599 	.word	0x08001599

08001344 <eventTxDone>:
/**
 * @brief  Process the TX Done event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventTxDone(pingPongFSM_t *const fsm) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) "Event TX Done\r\n", 15,
 800134c:	f04f 33ff 	mov.w	r3, #4294967295
 8001350:	220f      	movs	r2, #15
 8001352:	4914      	ldr	r1, [pc, #80]	; (80013a4 <eventTxDone+0x60>)
 8001354:	4814      	ldr	r0, [pc, #80]	; (80013a8 <eventTxDone+0x64>)
 8001356:	f006 fb86 	bl	8007a66 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	switch (fsm->state) {
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d002      	beq.n	8001368 <eventTxDone+0x24>
 8001362:	2b02      	cmp	r3, #2
 8001364:	d00d      	beq.n	8001382 <eventTxDone+0x3e>
		default:
			break;
		}
		break;
	default:
		break;
 8001366:	e019      	b.n	800139c <eventTxDone+0x58>
		switch (fsm->subState) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	785b      	ldrb	r3, [r3, #1]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d106      	bne.n	800137e <eventTxDone+0x3a>
			enterMasterRx(fsm);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f947 	bl	8001604 <enterMasterRx>
			fsm->subState = SSTATE_RX;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	705a      	strb	r2, [r3, #1]
			break;
 800137c:	e000      	b.n	8001380 <eventTxDone+0x3c>
			break;
 800137e:	bf00      	nop
		break;
 8001380:	e00c      	b.n	800139c <eventTxDone+0x58>
		switch (fsm->subState) {
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	785b      	ldrb	r3, [r3, #1]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d106      	bne.n	8001398 <eventTxDone+0x54>
			enterSlaveRx(fsm);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f968 	bl	8001660 <enterSlaveRx>
			fsm->subState = SSTATE_RX;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	705a      	strb	r2, [r3, #1]
			break;
 8001396:	e000      	b.n	800139a <eventTxDone+0x56>
			break;
 8001398:	bf00      	nop
		break;
 800139a:	bf00      	nop
	}
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	0800aaa0 	.word	0x0800aaa0
 80013a8:	20000948 	.word	0x20000948

080013ac <eventRxDone>:
/**
 * @brief  Process the RX Done event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventRxDone(pingPongFSM_t *const fsm) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80013b8:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80013bc:	6018      	str	r0, [r3, #0]
	char DataREC[1023];
	HAL_UART_Transmit(&huart2, (uint8_t*) "Event RX Done\r\n", 15,
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	220f      	movs	r2, #15
 80013c4:	493a      	ldr	r1, [pc, #232]	; (80014b0 <eventRxDone+0x104>)
 80013c6:	483b      	ldr	r0, [pc, #236]	; (80014b4 <eventRxDone+0x108>)
 80013c8:	f006 fb4d 	bl	8007a66 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	switch (fsm->state) {
 80013cc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80013d0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d062      	beq.n	80014a2 <eventRxDone+0xf6>
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d000      	beq.n	80013e2 <eventRxDone+0x36>
		default:
			break;
		}
		break;
	default:
		break;
 80013e0:	e060      	b.n	80014a4 <eventRxDone+0xf8>
		switch (fsm->subState) {
 80013e2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80013e6:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	785b      	ldrb	r3, [r3, #1]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d155      	bne.n	800149e <eventRxDone+0xf2>
			transitionRxDone(fsm);
 80013f2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80013f6:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	f000 f9fe 	bl	80017fc <transitionRxDone>
			memcpy(rxBuffer_encypt_receive, fsm->rxBuffer,
 8001400:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001404:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	3310      	adds	r3, #16
 800140c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001410:	4619      	mov	r1, r3
 8001412:	4829      	ldr	r0, [pc, #164]	; (80014b8 <eventRxDone+0x10c>)
 8001414:	f008 f924 	bl	8009660 <memcpy>
			AES_decrypt_Packet();
 8001418:	f7ff f944 	bl	80006a4 <AES_decrypt_Packet>
			if (strncmp(rxBuffer_decypt, Node_id, 6) == 0) {
 800141c:	2206      	movs	r2, #6
 800141e:	4927      	ldr	r1, [pc, #156]	; (80014bc <eventRxDone+0x110>)
 8001420:	4827      	ldr	r0, [pc, #156]	; (80014c0 <eventRxDone+0x114>)
 8001422:	f008 f9f0 	bl	8009806 <strncmp>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d11d      	bne.n	8001468 <eventRxDone+0xbc>
				HAL_GPIO_WritePin(LEDD8_GPIO_Port, LEDD8_Pin, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001436:	f003 ff77 	bl	8005328 <HAL_GPIO_WritePin>
				BSP_LED_Toggle(LED_GREEN);
 800143a:	2001      	movs	r0, #1
 800143c:	f000 fca8 	bl	8001d90 <BSP_LED_Toggle>
				enterSlaveTx(fsm);
 8001440:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001444:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001448:	6818      	ldr	r0, [r3, #0]
 800144a:	f000 f97d 	bl	8001748 <enterSlaveTx>
				fsm->subState = SSTATE_TX;
 800144e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001452:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2202      	movs	r2, #2
 800145a:	705a      	strb	r2, [r3, #1]
				memset(rxBuffer_decypt, 0, sizeof(rxBuffer_decypt));
 800145c:	22ff      	movs	r2, #255	; 0xff
 800145e:	2100      	movs	r1, #0
 8001460:	4817      	ldr	r0, [pc, #92]	; (80014c0 <eventRxDone+0x114>)
 8001462:	f008 f90b 	bl	800967c <memset>
			break;
 8001466:	e01b      	b.n	80014a0 <eventRxDone+0xf4>
				HAL_GPIO_WritePin(LEDD8_GPIO_Port, LEDD8_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800146e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001472:	f003 ff59 	bl	8005328 <HAL_GPIO_WritePin>
				enterSlaveRx(fsm);
 8001476:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800147a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	f000 f8ee 	bl	8001660 <enterSlaveRx>
				fsm->subState = SSTATE_RX;
 8001484:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001488:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2201      	movs	r2, #1
 8001490:	705a      	strb	r2, [r3, #1]
				memset(rxBuffer_decypt, 0, sizeof(rxBuffer_decypt));
 8001492:	22ff      	movs	r2, #255	; 0xff
 8001494:	2100      	movs	r1, #0
 8001496:	480a      	ldr	r0, [pc, #40]	; (80014c0 <eventRxDone+0x114>)
 8001498:	f008 f8f0 	bl	800967c <memset>
			break;
 800149c:	e000      	b.n	80014a0 <eventRxDone+0xf4>
			break;
 800149e:	bf00      	nop
		break;
 80014a0:	e000      	b.n	80014a4 <eventRxDone+0xf8>
		break;
 80014a2:	bf00      	nop
	}
}
 80014a4:	bf00      	nop
 80014a6:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	0800aab0 	.word	0x0800aab0
 80014b4:	20000948 	.word	0x20000948
 80014b8:	200004b4 	.word	0x200004b4
 80014bc:	20000008 	.word	0x20000008
 80014c0:	200005b4 	.word	0x200005b4

080014c4 <eventTxTimeout>:
/**
 * @brief  Process the TX Timeout event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventTxTimeout(pingPongFSM_t *const fsm) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) "Event TX Timeout\r\n", 18,
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
 80014d0:	2212      	movs	r2, #18
 80014d2:	4914      	ldr	r1, [pc, #80]	; (8001524 <eventTxTimeout+0x60>)
 80014d4:	4814      	ldr	r0, [pc, #80]	; (8001528 <eventTxTimeout+0x64>)
 80014d6:	f006 fac6 	bl	8007a66 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	switch (fsm->state) {
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d002      	beq.n	80014e8 <eventTxTimeout+0x24>
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d00d      	beq.n	8001502 <eventTxTimeout+0x3e>
		default:
			break;
		}
		break;
	default:
		break;
 80014e6:	e019      	b.n	800151c <eventTxTimeout+0x58>
		switch (fsm->subState) {
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	785b      	ldrb	r3, [r3, #1]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d106      	bne.n	80014fe <eventTxTimeout+0x3a>
			enterMasterRx(fsm);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f887 	bl	8001604 <enterMasterRx>
			fsm->subState = SSTATE_RX;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	705a      	strb	r2, [r3, #1]
			break;
 80014fc:	e000      	b.n	8001500 <eventTxTimeout+0x3c>
			break;
 80014fe:	bf00      	nop
		break;
 8001500:	e00c      	b.n	800151c <eventTxTimeout+0x58>
		switch (fsm->subState) {
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	785b      	ldrb	r3, [r3, #1]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d106      	bne.n	8001518 <eventTxTimeout+0x54>
			enterSlaveRx(fsm);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f8a8 	bl	8001660 <enterSlaveRx>
			fsm->subState = SSTATE_RX;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	705a      	strb	r2, [r3, #1]
			break;
 8001516:	e000      	b.n	800151a <eventTxTimeout+0x56>
			break;
 8001518:	bf00      	nop
		break;
 800151a:	bf00      	nop
	}
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	0800aac0 	.word	0x0800aac0
 8001528:	20000948 	.word	0x20000948

0800152c <eventRxTimeout>:
/**
 * @brief  Process the RX Timeout event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventRxTimeout(pingPongFSM_t *const fsm) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) "Event RX Timeout\r\n", 18,
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	2212      	movs	r2, #18
 800153a:	4915      	ldr	r1, [pc, #84]	; (8001590 <eventRxTimeout+0x64>)
 800153c:	4815      	ldr	r0, [pc, #84]	; (8001594 <eventRxTimeout+0x68>)
 800153e:	f006 fa92 	bl	8007a66 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	switch (fsm->state) {
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d002      	beq.n	8001550 <eventRxTimeout+0x24>
 800154a:	2b02      	cmp	r3, #2
 800154c:	d012      	beq.n	8001574 <eventRxTimeout+0x48>
		default:
			break;
		}
		break;
	default:
		break;
 800154e:	e01b      	b.n	8001588 <eventRxTimeout+0x5c>
		switch (fsm->subState) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	785b      	ldrb	r3, [r3, #1]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d10b      	bne.n	8001570 <eventRxTimeout+0x44>
			HAL_Delay(fsm->randomDelay);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	4618      	mov	r0, r3
 800155e:	f001 fd81 	bl	8003064 <HAL_Delay>
			enterMasterTx(fsm);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f8aa 	bl	80016bc <enterMasterTx>
			fsm->subState = SSTATE_TX;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2202      	movs	r2, #2
 800156c:	705a      	strb	r2, [r3, #1]
			break;
 800156e:	e000      	b.n	8001572 <eventRxTimeout+0x46>
			break;
 8001570:	bf00      	nop
		break;
 8001572:	e009      	b.n	8001588 <eventRxTimeout+0x5c>
		switch (fsm->subState) {
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	785b      	ldrb	r3, [r3, #1]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d103      	bne.n	8001584 <eventRxTimeout+0x58>
			enterSlaveRx(fsm);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f86f 	bl	8001660 <enterSlaveRx>
			break;
 8001582:	e000      	b.n	8001586 <eventRxTimeout+0x5a>
			break;
 8001584:	bf00      	nop
		break;
 8001586:	bf00      	nop
	}
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	0800aad4 	.word	0x0800aad4
 8001594:	20000948 	.word	0x20000948

08001598 <eventRxError>:
/**
 * @brief  Process the RX Error event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventRxError(pingPongFSM_t *const fsm) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) "Event Rx Error\r\n", 16,
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295
 80015a4:	2210      	movs	r2, #16
 80015a6:	4915      	ldr	r1, [pc, #84]	; (80015fc <eventRxError+0x64>)
 80015a8:	4815      	ldr	r0, [pc, #84]	; (8001600 <eventRxError+0x68>)
 80015aa:	f006 fa5c 	bl	8007a66 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	switch (fsm->state) {
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d002      	beq.n	80015bc <eventRxError+0x24>
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d012      	beq.n	80015e0 <eventRxError+0x48>
		default:
			break;
		}
		break;
	default:
		break;
 80015ba:	e01b      	b.n	80015f4 <eventRxError+0x5c>
		switch (fsm->subState) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	785b      	ldrb	r3, [r3, #1]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d10b      	bne.n	80015dc <eventRxError+0x44>
			HAL_Delay(fsm->randomDelay);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f001 fd4b 	bl	8003064 <HAL_Delay>
			enterMasterTx(fsm);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f874 	bl	80016bc <enterMasterTx>
			fsm->subState = SSTATE_TX;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2202      	movs	r2, #2
 80015d8:	705a      	strb	r2, [r3, #1]
			break;
 80015da:	e000      	b.n	80015de <eventRxError+0x46>
			break;
 80015dc:	bf00      	nop
		break;
 80015de:	e009      	b.n	80015f4 <eventRxError+0x5c>
		switch (fsm->subState) {
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	785b      	ldrb	r3, [r3, #1]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d103      	bne.n	80015f0 <eventRxError+0x58>
			enterSlaveRx(fsm);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f839 	bl	8001660 <enterSlaveRx>
			break;
 80015ee:	e000      	b.n	80015f2 <eventRxError+0x5a>
			break;
 80015f0:	bf00      	nop
		break;
 80015f2:	bf00      	nop
	}
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	0800aae8 	.word	0x0800aae8
 8001600:	20000948 	.word	0x20000948

08001604 <enterMasterRx>:
/**
 * @brief  Entry actions for the RX sub-state of the Master state
 * @param  fsm pointer to FSM context
 * @retval None
 */
void enterMasterRx(pingPongFSM_t *const fsm) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) "Master Rx start\r\n", 17,
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
 8001610:	2211      	movs	r2, #17
 8001612:	4910      	ldr	r1, [pc, #64]	; (8001654 <enterMasterRx+0x50>)
 8001614:	4810      	ldr	r0, [pc, #64]	; (8001658 <enterMasterRx+0x54>)
 8001616:	f006 fa26 	bl	8007a66 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	SUBGRF_SetDioIrqParams(
 800161a:	2300      	movs	r3, #0
 800161c:	2200      	movs	r2, #0
 800161e:	f240 2162 	movw	r1, #610	; 0x262
 8001622:	f240 2062 	movw	r0, #610	; 0x262
 8001626:	f000 ff31 	bl	800248c <SUBGRF_SetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
			IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 800162a:	2100      	movs	r1, #0
 800162c:	2001      	movs	r0, #1
 800162e:	f001 fbbf 	bl	8002db0 <SUBGRF_SetSwitch>
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <enterMasterRx+0x58>)
 8001634:	22ff      	movs	r2, #255	; 0xff
 8001636:	615a      	str	r2, [r3, #20]
	SUBGRF_SetPacketParams(&packetParams);
 8001638:	4808      	ldr	r0, [pc, #32]	; (800165c <enterMasterRx+0x58>)
 800163a:	f001 f98f 	bl	800295c <SUBGRF_SetPacketParams>
	SUBGRF_SetRx(fsm->rxTimeout << 6);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	019b      	lsls	r3, r3, #6
 8001644:	4618      	mov	r0, r3
 8001646:	f000 fe29 	bl	800229c <SUBGRF_SetRx>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	0800aafc 	.word	0x0800aafc
 8001658:	20000948 	.word	0x20000948
 800165c:	20000918 	.word	0x20000918

08001660 <enterSlaveRx>:
/**
 * @brief  Entry actions for the RX sub-state of the Slave state
 * @param  fsm pointer to FSM context
 * @retval None
 */
void enterSlaveRx(pingPongFSM_t *const fsm) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) "Slave Rx start\r\n", 16,
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
 800166c:	2210      	movs	r2, #16
 800166e:	4910      	ldr	r1, [pc, #64]	; (80016b0 <enterSlaveRx+0x50>)
 8001670:	4810      	ldr	r0, [pc, #64]	; (80016b4 <enterSlaveRx+0x54>)
 8001672:	f006 f9f8 	bl	8007a66 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	SUBGRF_SetDioIrqParams(
 8001676:	2300      	movs	r3, #0
 8001678:	2200      	movs	r2, #0
 800167a:	f240 2162 	movw	r1, #610	; 0x262
 800167e:	f240 2062 	movw	r0, #610	; 0x262
 8001682:	f000 ff03 	bl	800248c <SUBGRF_SetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
			IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8001686:	2100      	movs	r1, #0
 8001688:	2001      	movs	r0, #1
 800168a:	f001 fb91 	bl	8002db0 <SUBGRF_SetSwitch>
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <enterSlaveRx+0x58>)
 8001690:	22ff      	movs	r2, #255	; 0xff
 8001692:	615a      	str	r2, [r3, #20]
	SUBGRF_SetPacketParams(&packetParams);
 8001694:	4808      	ldr	r0, [pc, #32]	; (80016b8 <enterSlaveRx+0x58>)
 8001696:	f001 f961 	bl	800295c <SUBGRF_SetPacketParams>
	SUBGRF_SetRx(fsm->rxTimeout << 6);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	019b      	lsls	r3, r3, #6
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 fdfb 	bl	800229c <SUBGRF_SetRx>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	0800ab10 	.word	0x0800ab10
 80016b4:	20000948 	.word	0x20000948
 80016b8:	20000918 	.word	0x20000918

080016bc <enterMasterTx>:
/**
 * @brief  Entry actions for the TX sub-state of the Master state
 * @param  fsm pointer to FSM context
 * @retval None
 */
void enterMasterTx(pingPongFSM_t *const fsm) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	HAL_Delay(fsm->rxMargin);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f001 fccb 	bl	8003064 <HAL_Delay>

	HAL_UART_Transmit(&huart2, (uint8_t*) "...PING\r\n", 9, HAL_MAX_DELAY);
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	2209      	movs	r2, #9
 80016d4:	4917      	ldr	r1, [pc, #92]	; (8001734 <enterMasterTx+0x78>)
 80016d6:	4818      	ldr	r0, [pc, #96]	; (8001738 <enterMasterTx+0x7c>)
 80016d8:	f006 f9c5 	bl	8007a66 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) "Master Tx start\r\n", 17,
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
 80016e0:	2211      	movs	r2, #17
 80016e2:	4916      	ldr	r1, [pc, #88]	; (800173c <enterMasterTx+0x80>)
 80016e4:	4814      	ldr	r0, [pc, #80]	; (8001738 <enterMasterTx+0x7c>)
 80016e6:	f006 f9be 	bl	8007a66 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	SUBGRF_SetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 80016ea:	2300      	movs	r3, #0
 80016ec:	2200      	movs	r2, #0
 80016ee:	f240 2101 	movw	r1, #513	; 0x201
 80016f2:	f240 2001 	movw	r0, #513	; 0x201
 80016f6:	f000 fec9 	bl	800248c <SUBGRF_SetDioIrqParams>
			IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 80016fa:	2101      	movs	r1, #1
 80016fc:	2001      	movs	r0, #1
 80016fe:	f001 fb57 	bl	8002db0 <SUBGRF_SetSwitch>
	// Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
	SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 255));
 8001702:	f640 0089 	movw	r0, #2185	; 0x889
 8001706:	f001 fa73 	bl	8002bf0 <SUBGRF_ReadRegister>
 800170a:	21ff      	movs	r1, #255	; 0xff
 800170c:	f640 0089 	movw	r0, #2185	; 0x889
 8001710:	f001 fa5a 	bl	8002bc8 <SUBGRF_WriteRegister>
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <enterMasterTx+0x84>)
 8001716:	22ff      	movs	r2, #255	; 0xff
 8001718:	615a      	str	r2, [r3, #20]
	SUBGRF_SetPacketParams(&packetParams);
 800171a:	4809      	ldr	r0, [pc, #36]	; (8001740 <enterMasterTx+0x84>)
 800171c:	f001 f91e 	bl	800295c <SUBGRF_SetPacketParams>
	SUBGRF_SendPayload(
 8001720:	2200      	movs	r2, #0
 8001722:	21ff      	movs	r1, #255	; 0xff
 8001724:	4807      	ldr	r0, [pc, #28]	; (8001744 <enterMasterTx+0x88>)
 8001726:	f000 fce3 	bl	80020f0 <SUBGRF_SendPayload>
			(uint8_t*) "PINGpppppppppppppppppppppppppppppppppppppppp", 255, 0);
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	0800ab24 	.word	0x0800ab24
 8001738:	20000948 	.word	0x20000948
 800173c:	0800ab30 	.word	0x0800ab30
 8001740:	20000918 	.word	0x20000918
 8001744:	0800ab44 	.word	0x0800ab44

08001748 <enterSlaveTx>:
/**
 * @brief  Entry actions for the TX sub-state of the Slave state
 * @param  fsm pointer to FSM context
 * @retval None
 */
void enterSlaveTx(pingPongFSM_t *const fsm) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	HAL_Delay(fsm->rxMargin);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4618      	mov	r0, r3
 8001756:	f001 fc85 	bl	8003064 <HAL_Delay>

	HAL_UART_Transmit(&huart2, (uint8_t*) "...PONG\r\n", 9, HAL_MAX_DELAY);
 800175a:	f04f 33ff 	mov.w	r3, #4294967295
 800175e:	2209      	movs	r2, #9
 8001760:	491f      	ldr	r1, [pc, #124]	; (80017e0 <enterSlaveTx+0x98>)
 8001762:	4820      	ldr	r0, [pc, #128]	; (80017e4 <enterSlaveTx+0x9c>)
 8001764:	f006 f97f 	bl	8007a66 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) "Slave Tx start\r\n", 16,
 8001768:	f04f 33ff 	mov.w	r3, #4294967295
 800176c:	2210      	movs	r2, #16
 800176e:	491e      	ldr	r1, [pc, #120]	; (80017e8 <enterSlaveTx+0xa0>)
 8001770:	481c      	ldr	r0, [pc, #112]	; (80017e4 <enterSlaveTx+0x9c>)
 8001772:	f006 f978 	bl	8007a66 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	SUBGRF_SetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8001776:	2300      	movs	r3, #0
 8001778:	2200      	movs	r2, #0
 800177a:	f240 2101 	movw	r1, #513	; 0x201
 800177e:	f240 2001 	movw	r0, #513	; 0x201
 8001782:	f000 fe83 	bl	800248c <SUBGRF_SetDioIrqParams>
			IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8001786:	2101      	movs	r1, #1
 8001788:	2001      	movs	r0, #1
 800178a:	f001 fb11 	bl	8002db0 <SUBGRF_SetSwitch>
	// Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
	SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0xFF));
 800178e:	f640 0089 	movw	r0, #2185	; 0x889
 8001792:	f001 fa2d 	bl	8002bf0 <SUBGRF_ReadRegister>
 8001796:	21ff      	movs	r1, #255	; 0xff
 8001798:	f640 0089 	movw	r0, #2185	; 0x889
 800179c:	f001 fa14 	bl	8002bc8 <SUBGRF_WriteRegister>
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <enterSlaveTx+0xa4>)
 80017a2:	22ff      	movs	r2, #255	; 0xff
 80017a4:	615a      	str	r2, [r3, #20]
	SUBGRF_SetPacketParams(&packetParams);
 80017a6:	4811      	ldr	r0, [pc, #68]	; (80017ec <enterSlaveTx+0xa4>)
 80017a8:	f001 f8d8 	bl	800295c <SUBGRF_SetPacketParams>
	//SUBGRF_SendPayload((uint8_t *)"PONGdsaaahhhhhhaaaaamnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\r\n", 255, 0);
	//SUBGRF_SendPayload(rxBuffer, 255, 0);
	//memset(rxBuffer,' ',sizeof(rxBuffer));
	AES_encrypt_Packet();
 80017ac:	f7fe ff56 	bl	800065c <AES_encrypt_Packet>
	SUBGRF_SendPayload(rxBuffer_encypt, 255, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	21ff      	movs	r1, #255	; 0xff
 80017b4:	480e      	ldr	r0, [pc, #56]	; (80017f0 <enterSlaveTx+0xa8>)
 80017b6:	f000 fc9b 	bl	80020f0 <SUBGRF_SendPayload>
	memset(rxBuffer_encypt, 0, sizeof(rxBuffer_encypt));
 80017ba:	22ff      	movs	r2, #255	; 0xff
 80017bc:	2100      	movs	r1, #0
 80017be:	480c      	ldr	r0, [pc, #48]	; (80017f0 <enterSlaveTx+0xa8>)
 80017c0:	f007 ff5c 	bl	800967c <memset>
	//strcpy(rxBuffer,"PONGnoLoad");
	memset(rxBuffer, 0, sizeof(rxBuffer));
 80017c4:	22ff      	movs	r2, #255	; 0xff
 80017c6:	2100      	movs	r1, #0
 80017c8:	480a      	ldr	r0, [pc, #40]	; (80017f4 <enterSlaveTx+0xac>)
 80017ca:	f007 ff57 	bl	800967c <memset>
	memset(rxBuffer_packet, 0, sizeof(rxBuffer_packet));
 80017ce:	22ff      	movs	r2, #255	; 0xff
 80017d0:	2100      	movs	r1, #0
 80017d2:	4809      	ldr	r0, [pc, #36]	; (80017f8 <enterSlaveTx+0xb0>)
 80017d4:	f007 ff52 	bl	800967c <memset>
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	0800ab74 	.word	0x0800ab74
 80017e4:	20000948 	.word	0x20000948
 80017e8:	0800ab80 	.word	0x0800ab80
 80017ec:	20000918 	.word	0x20000918
 80017f0:	200003b4 	.word	0x200003b4
 80017f4:	20000010 	.word	0x20000010
 80017f8:	200002b4 	.word	0x200002b4

080017fc <transitionRxDone>:
/**
 * @brief  Transition actions executed on every RX Done event (helper function)
 * @param  fsm pointer to FSM context
 * @retval None
 */
void transitionRxDone(pingPongFSM_t *const fsm) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b094      	sub	sp, #80	; 0x50
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	PacketStatus_t packetStatus;
	char uartBuff[50];

	// Workaround 15.3 in DS.SX1261-2.W.APP (because following RX w/ timeout sequence)
	SUBGRF_WriteRegister(0x0920, 0x00);
 8001804:	2100      	movs	r1, #0
 8001806:	f44f 6012 	mov.w	r0, #2336	; 0x920
 800180a:	f001 f9dd 	bl	8002bc8 <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister(0x0944, (SUBGRF_ReadRegister(0x0944) | 0x02));
 800180e:	f640 1044 	movw	r0, #2372	; 0x944
 8001812:	f001 f9ed 	bl	8002bf0 <SUBGRF_ReadRegister>
 8001816:	4603      	mov	r3, r0
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4619      	mov	r1, r3
 8001820:	f640 1044 	movw	r0, #2372	; 0x944
 8001824:	f001 f9d0 	bl	8002bc8 <SUBGRF_WriteRegister>

	SUBGRF_GetPayload((uint8_t*) fsm->rxBuffer, &fsm->rxSize, 0xFF);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f103 0010 	add.w	r0, r3, #16
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001834:	22ff      	movs	r2, #255	; 0xff
 8001836:	4619      	mov	r1, r3
 8001838:	f000 fc38 	bl	80020ac <SUBGRF_GetPayload>
	SUBGRF_GetPacketStatus(&packetStatus);
 800183c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001840:	4618      	mov	r0, r3
 8001842:	f001 f96f 	bl	8002b24 <SUBGRF_GetPacketStatus>

	sprintf(uartBuff, "RssiValue=%d dBm, SnrValue=%d Hz\r\n",
			packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt);
 8001846:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
	sprintf(uartBuff, "RssiValue=%d dBm, SnrValue=%d Hz\r\n",
 800184a:	461a      	mov	r2, r3
			packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt);
 800184c:	f997 3049 	ldrsb.w	r3, [r7, #73]	; 0x49
	sprintf(uartBuff, "RssiValue=%d dBm, SnrValue=%d Hz\r\n",
 8001850:	f107 0008 	add.w	r0, r7, #8
 8001854:	490a      	ldr	r1, [pc, #40]	; (8001880 <transitionRxDone+0x84>)
 8001856:	f007 ffa7 	bl	80097a8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) uartBuff, strlen(uartBuff),
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fc8e 	bl	8000180 <strlen>
 8001864:	4603      	mov	r3, r0
 8001866:	b29a      	uxth	r2, r3
 8001868:	f107 0108 	add.w	r1, r7, #8
 800186c:	f04f 33ff 	mov.w	r3, #4294967295
 8001870:	4804      	ldr	r0, [pc, #16]	; (8001884 <transitionRxDone+0x88>)
 8001872:	f006 f8f8 	bl	8007a66 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
}
 8001876:	bf00      	nop
 8001878:	3750      	adds	r7, #80	; 0x50
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	0800ab94 	.word	0x0800ab94
 8001884:	20000948 	.word	0x20000948

08001888 <fsmInit>:
void fsmInit(void) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0

	// get random number
	uint32_t rnd = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
	SUBGRF_SetDioIrqParams(IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE,
 8001892:	2300      	movs	r3, #0
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	2000      	movs	r0, #0
 800189a:	f000 fdf7 	bl	800248c <SUBGRF_SetDioIrqParams>
			IRQ_RADIO_NONE);
	rnd = SUBGRF_GetRandom();
 800189e:	f000 fc7a 	bl	8002196 <SUBGRF_GetRandom>
 80018a2:	6078      	str	r0, [r7, #4]

	fsm.state = STATE_NULL;
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <fsmInit+0x98>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
	fsm.subState = SSTATE_NULL;
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <fsmInit+0x98>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	705a      	strb	r2, [r3, #1]
	fsm.rxTimeout = 1000; // 3000 ms
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <fsmInit+0x98>)
 80018b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018b6:	605a      	str	r2, [r3, #4]
	fsm.rxMargin = 200;   // 200 ms
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <fsmInit+0x98>)
 80018ba:	22c8      	movs	r2, #200	; 0xc8
 80018bc:	609a      	str	r2, [r3, #8]
	fsm.randomDelay = rnd >> 22; // [0, 1023] ms
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	0d9b      	lsrs	r3, r3, #22
 80018c2:	4a17      	ldr	r2, [pc, #92]	; (8001920 <fsmInit+0x98>)
 80018c4:	60d3      	str	r3, [r2, #12]
	//sprintf(uartBuff, "rand=%lu\r\n", fsm.randomDelay);
	HAL_UART_Transmit(&huart2, (uint8_t*) uartBuff, strlen(uartBuff),
 80018c6:	4817      	ldr	r0, [pc, #92]	; (8001924 <fsmInit+0x9c>)
 80018c8:	f7fe fc5a 	bl	8000180 <strlen>
 80018cc:	4603      	mov	r3, r0
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
 80018d4:	4913      	ldr	r1, [pc, #76]	; (8001924 <fsmInit+0x9c>)
 80018d6:	4814      	ldr	r0, [pc, #80]	; (8001928 <fsmInit+0xa0>)
 80018d8:	f006 f8c5 	bl	8007a66 <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	HAL_Delay(fsm.randomDelay);
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <fsmInit+0x98>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 fbbf 	bl	8003064 <HAL_Delay>
	SUBGRF_SetDioIrqParams(IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
 80018e6:	2300      	movs	r3, #0
 80018e8:	2200      	movs	r2, #0
 80018ea:	f240 2142 	movw	r1, #578	; 0x242
 80018ee:	f240 2042 	movw	r0, #578	; 0x242
 80018f2:	f000 fdcb 	bl	800248c <SUBGRF_SetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 80018f6:	2100      	movs	r1, #0
 80018f8:	2001      	movs	r0, #1
 80018fa:	f001 fa59 	bl	8002db0 <SUBGRF_SetSwitch>
	SUBGRF_SetRx(fsm.rxTimeout << 6);
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <fsmInit+0x98>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	019b      	lsls	r3, r3, #6
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fcc9 	bl	800229c <SUBGRF_SetRx>
	fsm.state = STATE_SLAVE;
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <fsmInit+0x98>)
 800190c:	2202      	movs	r2, #2
 800190e:	701a      	strb	r2, [r3, #0]
	//fsm.subState = SSTATE_RX;
	//fsm.state = STATE_MASTER;
	fsm.subState = SSTATE_RX;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <fsmInit+0x98>)
 8001912:	2201      	movs	r2, #1
 8001914:	705a      	strb	r2, [r3, #1]
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000804 	.word	0x20000804
 8001924:	200006b4 	.word	0x200006b4
 8001928:	20000948 	.word	0x20000948

0800192c <SUBGHZ>:

	// RF_{IRQ0, IRQ1, IRQ2} pins
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
void SUBGHZ(void) {
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	eventReceptor = NULL;
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <SUBGHZ+0x24>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
	while (eventReceptor == NULL)
 8001936:	bf00      	nop
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <SUBGHZ+0x24>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0fb      	beq.n	8001938 <SUBGHZ+0xc>
		;
	{

		radioInit();
 8001940:	f7ff fc4e 	bl	80011e0 <radioInit>
		eventReceptor(&fsm);
 8001944:	4b02      	ldr	r3, [pc, #8]	; (8001950 <SUBGHZ+0x24>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <SUBGHZ+0x28>)
 800194a:	4798      	blx	r3
	}
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000934 	.word	0x20000934
 8001954:	20000804 	.word	0x20000804

08001958 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	e00a      	b.n	8001980 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800196a:	f3af 8000 	nop.w
 800196e:	4601      	mov	r1, r0
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	60ba      	str	r2, [r7, #8]
 8001976:	b2ca      	uxtb	r2, r1
 8001978:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	3301      	adds	r3, #1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	dbf0      	blt.n	800196a <_read+0x12>
  }

  return len;
 8001988:	687b      	ldr	r3, [r7, #4]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b8:	605a      	str	r2, [r3, #4]
  return 0;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <_isatty>:

int _isatty(int file)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019da:	b480      	push	{r7}
 80019dc:	b085      	sub	sp, #20
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
	...

080019f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019fc:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <_sbrk+0x5c>)
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <_sbrk+0x60>)
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <_sbrk+0x64>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	; (8001a5c <_sbrk+0x68>)
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d207      	bcs.n	8001a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a24:	f007 fdf2 	bl	800960c <__errno>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a32:	e009      	b.n	8001a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <_sbrk+0x64>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <_sbrk+0x64>)
 8001a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20010000 	.word	0x20010000
 8001a54:	00000400 	.word	0x00000400
 8001a58:	20000944 	.word	0x20000944
 8001a5c:	20000a60 	.word	0x20000a60

08001a60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <LL_AHB2_GRP1_EnableClock>:
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a90:	68fb      	ldr	r3, [r7, #12]
}
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <LL_APB1_GRP1_EnableClock>:
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001aaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4013      	ands	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <LL_APB1_GRP1_DisableClock>:
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <MX_USART2_UART_Init+0x90>)
 8001af6:	4a23      	ldr	r2, [pc, #140]	; (8001b84 <MX_USART2_UART_Init+0x94>)
 8001af8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = UART_BAUDRATE;//115200
 8001afa:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <MX_USART2_UART_Init+0x98>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a20      	ldr	r2, [pc, #128]	; (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b00:	6053      	str	r3, [r2, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b20:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b2c:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b38:	4811      	ldr	r0, [pc, #68]	; (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b3a:	f005 ff05 	bl	8007948 <HAL_UART_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b44:	f7ff fa16 	bl	8000f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b48:	2100      	movs	r1, #0
 8001b4a:	480d      	ldr	r0, [pc, #52]	; (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b4c:	f007 fc26 	bl	800939c <HAL_UARTEx_SetTxFifoThreshold>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b56:	f7ff fa0d 	bl	8000f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4808      	ldr	r0, [pc, #32]	; (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b5e:	f007 fc5b 	bl	8009418 <HAL_UARTEx_SetRxFifoThreshold>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b68:	f7ff fa04 	bl	8000f74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <MX_USART2_UART_Init+0x90>)
 8001b6e:	f007 fbdd 	bl	800932c <HAL_UARTEx_DisableFifoMode>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b78:	f7ff f9fc 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000948 	.word	0x20000948
 8001b84:	40004400 	.word	0x40004400
 8001b88:	20000004 	.word	0x20000004

08001b8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b096      	sub	sp, #88	; 0x58
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	2238      	movs	r2, #56	; 0x38
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f007 fd65 	bl	800967c <memset>
  if(uartHandle->Instance==USART2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a34      	ldr	r2, [pc, #208]	; (8001c88 <HAL_UART_MspInit+0xfc>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d161      	bne.n	8001c80 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bc0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001bc4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f004 fe50 	bl	8006870 <HAL_RCCEx_PeriphCLKConfig>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001bd6:	f7ff f9cd 	bl	8000f74 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bda:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001bde:	f7ff ff5d 	bl	8001a9c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	2001      	movs	r0, #1
 8001be4:	f7ff ff42 	bl	8001a6c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001be8:	230c      	movs	r3, #12
 8001bea:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c00:	4619      	mov	r1, r3
 8001c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c06:	f003 f961 	bl	8004ecc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_UART_MspInit+0x100>)
 8001c0c:	4a20      	ldr	r2, [pc, #128]	; (8001c90 <HAL_UART_MspInit+0x104>)
 8001c0e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_UART_MspInit+0x100>)
 8001c12:	2213      	movs	r2, #19
 8001c14:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c16:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <HAL_UART_MspInit+0x100>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_UART_MspInit+0x100>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <HAL_UART_MspInit+0x100>)
 8001c24:	2280      	movs	r2, #128	; 0x80
 8001c26:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_UART_MspInit+0x100>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c2e:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <HAL_UART_MspInit+0x100>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c34:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_UART_MspInit+0x100>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c3a:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_UART_MspInit+0x100>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c40:	4812      	ldr	r0, [pc, #72]	; (8001c8c <HAL_UART_MspInit+0x100>)
 8001c42:	f002 fd2b 	bl	800469c <HAL_DMA_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001c4c:	f7ff f992 	bl	8000f74 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001c50:	2110      	movs	r1, #16
 8001c52:	480e      	ldr	r0, [pc, #56]	; (8001c8c <HAL_UART_MspInit+0x100>)
 8001c54:	f003 f862 	bl	8004d1c <HAL_DMA_ConfigChannelAttributes>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_UART_MspInit+0xd6>
    {
      Error_Handler();
 8001c5e:	f7ff f989 	bl	8000f74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <HAL_UART_MspInit+0x100>)
 8001c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001c6a:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <HAL_UART_MspInit+0x100>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2100      	movs	r1, #0
 8001c74:	2025      	movs	r0, #37	; 0x25
 8001c76:	f001 faf2 	bl	800325e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c7a:	2025      	movs	r0, #37	; 0x25
 8001c7c:	f001 fb09 	bl	8003292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c80:	bf00      	nop
 8001c82:	3758      	adds	r7, #88	; 0x58
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40004400 	.word	0x40004400
 8001c8c:	200009dc 	.word	0x200009dc
 8001c90:	40020008 	.word	0x40020008

08001c94 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0c      	ldr	r2, [pc, #48]	; (8001cd4 <HAL_UART_MspDeInit+0x40>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d111      	bne.n	8001cca <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001ca6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001caa:	f7ff ff0f 	bl	8001acc <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, T_VCP_RX_Pin|T_VCP_RXA2_Pin);
 8001cae:	210c      	movs	r1, #12
 8001cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb4:	f003 fa6a 	bl	800518c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f002 fd94 	bl	80047ec <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001cc4:	2025      	movs	r0, #37	; 0x25
 8001cc6:	f001 faf2 	bl	80032ae <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40004400 	.word	0x40004400

08001cd8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 1 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, RX_SIZE);
 8001ce4:	22ff      	movs	r2, #255	; 0xff
 8001ce6:	4906      	ldr	r1, [pc, #24]	; (8001d00 <HAL_UARTEx_RxEventCallback+0x28>)
 8001ce8:	4806      	ldr	r0, [pc, #24]	; (8001d04 <HAL_UARTEx_RxEventCallback+0x2c>)
 8001cea:	f007 fbd3 	bl	8009494 <HAL_UARTEx_ReceiveToIdle_DMA>
    size = Size;
 8001cee:	887b      	ldrh	r3, [r7, #2]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_UARTEx_RxEventCallback+0x30>)
 8001cf4:	701a      	strb	r2, [r3, #0]
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000010 	.word	0x20000010
 8001d04:	20000948 	.word	0x20000948
 8001d08:	200006b3 	.word	0x200006b3

08001d0c <UartDmaStart>:
void UartDmaStart(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxBuffer, RX_SIZE);
 8001d10:	22ff      	movs	r2, #255	; 0xff
 8001d12:	4907      	ldr	r1, [pc, #28]	; (8001d30 <UartDmaStart+0x24>)
 8001d14:	4807      	ldr	r0, [pc, #28]	; (8001d34 <UartDmaStart+0x28>)
 8001d16:	f007 fbbd 	bl	8009494 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <UartDmaStart+0x2c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <UartDmaStart+0x2c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0204 	bic.w	r2, r2, #4
 8001d28:	601a      	str	r2, [r3, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000010 	.word	0x20000010
 8001d34:	20000948 	.word	0x20000948
 8001d38:	200009dc 	.word	0x200009dc

08001d3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d3c:	480d      	ldr	r0, [pc, #52]	; (8001d74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d40:	f7ff fe8e 	bl	8001a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d46:	490d      	ldr	r1, [pc, #52]	; (8001d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d48:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <LoopForever+0xe>)
  movs r3, #0
 8001d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d4c:	e002      	b.n	8001d54 <LoopCopyDataInit>

08001d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d52:	3304      	adds	r3, #4

08001d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d58:	d3f9      	bcc.n	8001d4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d5c:	4c0a      	ldr	r4, [pc, #40]	; (8001d88 <LoopForever+0x16>)
  movs r3, #0
 8001d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d60:	e001      	b.n	8001d66 <LoopFillZerobss>

08001d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d64:	3204      	adds	r2, #4

08001d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d68:	d3fb      	bcc.n	8001d62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d6a:	f007 fc55 	bl	8009618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d6e:	f7fe fe44 	bl	80009fa <main>

08001d72 <LoopForever>:

LoopForever:
    b LoopForever
 8001d72:	e7fe      	b.n	8001d72 <LoopForever>
  ldr   r0, =_estack
 8001d74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d7c:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8001d80:	0800adb0 	.word	0x0800adb0
  ldr r2, =_sbss
 8001d84:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8001d88:	20000a60 	.word	0x20000a60

08001d8c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC_IRQHandler>
	...

08001d90 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <BSP_LED_Toggle+0x2c>)
 8001d9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	4906      	ldr	r1, [pc, #24]	; (8001dc0 <BSP_LED_Toggle+0x30>)
 8001da6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001daa:	4619      	mov	r1, r3
 8001dac:	4610      	mov	r0, r2
 8001dae:	f003 fad2 	bl	8005356 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000114 	.word	0x20000114
 8001dc0:	0800acd8 	.word	0x0800acd8

08001dc4 <LL_AHB2_GRP1_EnableClock>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001de8:	68fb      	ldr	r3, [r7, #12]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001e08:	2004      	movs	r0, #4
 8001e0a:	f7ff ffdb 	bl	8001dc4 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001e0e:	2310      	movs	r3, #16
 8001e10:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	4619      	mov	r1, r3
 8001e22:	4812      	ldr	r0, [pc, #72]	; (8001e6c <BSP_RADIO_Init+0x78>)
 8001e24:	f003 f852 	bl	8004ecc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001e28:	2320      	movs	r3, #32
 8001e2a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480e      	ldr	r0, [pc, #56]	; (8001e6c <BSP_RADIO_Init+0x78>)
 8001e32:	f003 f84b 	bl	8004ecc <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8001e36:	2308      	movs	r3, #8
 8001e38:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480b      	ldr	r0, [pc, #44]	; (8001e6c <BSP_RADIO_Init+0x78>)
 8001e40:	f003 f844 	bl	8004ecc <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001e44:	2200      	movs	r2, #0
 8001e46:	2120      	movs	r1, #32
 8001e48:	4808      	ldr	r0, [pc, #32]	; (8001e6c <BSP_RADIO_Init+0x78>)
 8001e4a:	f003 fa6d 	bl	8005328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2110      	movs	r1, #16
 8001e52:	4806      	ldr	r0, [pc, #24]	; (8001e6c <BSP_RADIO_Init+0x78>)
 8001e54:	f003 fa68 	bl	8005328 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2108      	movs	r1, #8
 8001e5c:	4803      	ldr	r0, [pc, #12]	; (8001e6c <BSP_RADIO_Init+0x78>)
 8001e5e:	f003 fa63 	bl	8005328 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	48000800 	.word	0x48000800

08001e70 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	2b03      	cmp	r3, #3
 8001e7e:	d84b      	bhi.n	8001f18 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8001e80:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8001e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e86:	bf00      	nop
 8001e88:	08001e99 	.word	0x08001e99
 8001e8c:	08001eb9 	.word	0x08001eb9
 8001e90:	08001ed9 	.word	0x08001ed9
 8001e94:	08001ef9 	.word	0x08001ef9
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2108      	movs	r1, #8
 8001e9c:	4821      	ldr	r0, [pc, #132]	; (8001f24 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001e9e:	f003 fa43 	bl	8005328 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2110      	movs	r1, #16
 8001ea6:	481f      	ldr	r0, [pc, #124]	; (8001f24 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ea8:	f003 fa3e 	bl	8005328 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2120      	movs	r1, #32
 8001eb0:	481c      	ldr	r0, [pc, #112]	; (8001f24 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001eb2:	f003 fa39 	bl	8005328 <HAL_GPIO_WritePin>
      break;      
 8001eb6:	e030      	b.n	8001f1a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	2108      	movs	r1, #8
 8001ebc:	4819      	ldr	r0, [pc, #100]	; (8001f24 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ebe:	f003 fa33 	bl	8005328 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	2110      	movs	r1, #16
 8001ec6:	4817      	ldr	r0, [pc, #92]	; (8001f24 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ec8:	f003 fa2e 	bl	8005328 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2120      	movs	r1, #32
 8001ed0:	4814      	ldr	r0, [pc, #80]	; (8001f24 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ed2:	f003 fa29 	bl	8005328 <HAL_GPIO_WritePin>
      break;
 8001ed6:	e020      	b.n	8001f1a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2108      	movs	r1, #8
 8001edc:	4811      	ldr	r0, [pc, #68]	; (8001f24 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ede:	f003 fa23 	bl	8005328 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	2110      	movs	r1, #16
 8001ee6:	480f      	ldr	r0, [pc, #60]	; (8001f24 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ee8:	f003 fa1e 	bl	8005328 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001eec:	2201      	movs	r2, #1
 8001eee:	2120      	movs	r1, #32
 8001ef0:	480c      	ldr	r0, [pc, #48]	; (8001f24 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001ef2:	f003 fa19 	bl	8005328 <HAL_GPIO_WritePin>
      break;
 8001ef6:	e010      	b.n	8001f1a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	2108      	movs	r1, #8
 8001efc:	4809      	ldr	r0, [pc, #36]	; (8001f24 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001efe:	f003 fa13 	bl	8005328 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001f02:	2200      	movs	r2, #0
 8001f04:	2110      	movs	r1, #16
 8001f06:	4807      	ldr	r0, [pc, #28]	; (8001f24 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001f08:	f003 fa0e 	bl	8005328 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	2120      	movs	r1, #32
 8001f10:	4804      	ldr	r0, [pc, #16]	; (8001f24 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001f12:	f003 fa09 	bl	8005328 <HAL_GPIO_WritePin>
      break;
 8001f16:	e000      	b.n	8001f1a <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8001f18:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	48000800 	.word	0x48000800

08001f28 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr

08001f36 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8001f3a:	2301      	movs	r3, #1
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001f48:	2301      	movs	r3, #1
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b085      	sub	sp, #20
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d102      	bne.n	8001f68 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8001f62:	230f      	movs	r3, #15
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	e001      	b.n	8001f6c <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001f68:	2316      	movs	r3, #22
 8001f6a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8001f7c:	f7ff ff3a 	bl	8001df4 <BSP_RADIO_Init>
 8001f80:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff6c 	bl	8001e70 <BSP_RADIO_ConfigRFSwitch>
 8001f98:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8001fa6:	f7ff ffbf 	bl	8001f28 <BSP_RADIO_GetTxConfig>
 8001faa:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8001fb4:	f7ff ffbf 	bl	8001f36 <BSP_RADIO_IsTCXO>
 8001fb8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8001fc2:	f7ff ffbf 	bl	8001f44 <BSP_RADIO_IsDCDC>
 8001fc6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ffba 	bl	8001f52 <BSP_RADIO_GetRFOMaxPowerConfig>
 8001fde:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8001ff6:	4a1d      	ldr	r2, [pc, #116]	; (800206c <SUBGRF_Init+0x84>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8001ffc:	f7ff f8ca 	bl	8001194 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8002000:	2002      	movs	r0, #2
 8002002:	f000 ffd1 	bl	8002fa8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8002006:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <SUBGRF_Init+0x88>)
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800200c:	2000      	movs	r0, #0
 800200e:	f000 f909 	bl	8002224 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8002012:	f7ff ffcd 	bl	8001fb0 <RBI_IsTCXO>
 8002016:	4603      	mov	r3, r0
 8002018:	2b01      	cmp	r3, #1
 800201a:	d10e      	bne.n	800203a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800201c:	2140      	movs	r1, #64	; 0x40
 800201e:	2001      	movs	r0, #1
 8002020:	f000 fa6e 	bl	8002500 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8002024:	2100      	movs	r1, #0
 8002026:	f640 1011 	movw	r0, #2321	; 0x911
 800202a:	f000 fdcd 	bl	8002bc8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800202e:	237f      	movs	r3, #127	; 0x7f
 8002030:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8002032:	7b38      	ldrb	r0, [r7, #12]
 8002034:	f000 f978 	bl	8002328 <SUBGRF_Calibrate>
 8002038:	e009      	b.n	800204e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800203a:	2120      	movs	r1, #32
 800203c:	f640 1011 	movw	r0, #2321	; 0x911
 8002040:	f000 fdc2 	bl	8002bc8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8002044:	2120      	movs	r1, #32
 8002046:	f640 1012 	movw	r0, #2322	; 0x912
 800204a:	f000 fdbd 	bl	8002bc8 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800204e:	210e      	movs	r1, #14
 8002050:	f640 101f 	movw	r0, #2335	; 0x91f
 8002054:	f000 fdb8 	bl	8002bc8 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8002058:	f7ff ff8e 	bl	8001f78 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <SUBGRF_Init+0x8c>)
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000a48 	.word	0x20000a48
 8002070:	20000a44 	.word	0x20000a44
 8002074:	20000a3c 	.word	0x20000a3c

08002078 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
    return OperatingMode;
 800207c:	4b02      	ldr	r3, [pc, #8]	; (8002088 <SUBGRF_GetOperatingMode+0x10>)
 800207e:	781b      	ldrb	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	20000a3c 	.word	0x20000a3c

0800208c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	461a      	mov	r2, r3
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	2000      	movs	r0, #0
 80020a0:	f000 fdfe 	bl	8002ca0 <SUBGRF_WriteBuffer>
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	4613      	mov	r3, r2
 80020b8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80020be:	f107 0317 	add.w	r3, r7, #23
 80020c2:	4619      	mov	r1, r3
 80020c4:	68b8      	ldr	r0, [r7, #8]
 80020c6:	f000 fd01 	bl	8002acc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	79fa      	ldrb	r2, [r7, #7]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d201      	bcs.n	80020d8 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e007      	b.n	80020e8 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80020d8:	7df8      	ldrb	r0, [r7, #23]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	68f9      	ldr	r1, [r7, #12]
 80020e2:	f000 fdff 	bl	8002ce4 <SUBGRF_ReadBuffer>

    return 0;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	460b      	mov	r3, r1
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80020fe:	7afb      	ldrb	r3, [r7, #11]
 8002100:	4619      	mov	r1, r3
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f7ff ffc2 	bl	800208c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f8a7 	bl	800225c <SUBGRF_SetTx>
}
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	b29b      	uxth	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8002130:	f000 fa6a 	bl	8002608 <SUBGRF_GetPacketType>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d108      	bne.n	800214c <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800213a:	f107 030c 	add.w	r3, r7, #12
 800213e:	2202      	movs	r2, #2
 8002140:	4619      	mov	r1, r3
 8002142:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8002146:	f000 fd67 	bl	8002c18 <SUBGRF_WriteRegisters>
            break;
 800214a:	e000      	b.n	800214e <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800214c:	bf00      	nop
    }
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	0a1b      	lsrs	r3, r3, #8
 8002164:	b29b      	uxth	r3, r3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8002170:	f000 fa4a 	bl	8002608 <SUBGRF_GetPacketType>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d108      	bne.n	800218c <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	2202      	movs	r2, #2
 8002180:	4619      	mov	r1, r3
 8002182:	f240 60be 	movw	r0, #1726	; 0x6be
 8002186:	f000 fd47 	bl	8002c18 <SUBGRF_WriteRegisters>
            break;
 800218a:	e000      	b.n	800218e <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800218c:	bf00      	nop
    }
}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <SUBGRF_GetRandom>:
            break;
    }
}

uint32_t SUBGRF_GetRandom( void )
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 80021a8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80021ac:	f000 fd20 	bl	8002bf0 <SUBGRF_ReadRegister>
 80021b0:	4603      	mov	r3, r0
 80021b2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	f023 0301 	bic.w	r3, r3, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	4619      	mov	r1, r3
 80021be:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80021c2:	f000 fd01 	bl	8002bc8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80021c6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80021ca:	f000 fd11 	bl	8002bf0 <SUBGRF_ReadRegister>
 80021ce:	4603      	mov	r3, r0
 80021d0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80021d2:	79bb      	ldrb	r3, [r7, #6]
 80021d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	4619      	mov	r1, r3
 80021dc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80021e0:	f000 fcf2 	bl	8002bc8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80021e4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80021e8:	f000 f858 	bl	800229c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80021ec:	463b      	mov	r3, r7
 80021ee:	2204      	movs	r2, #4
 80021f0:	4619      	mov	r1, r3
 80021f2:	f640 0019 	movw	r0, #2073	; 0x819
 80021f6:	f000 fd31 	bl	8002c5c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80021fa:	2000      	movs	r0, #0
 80021fc:	f000 f812 	bl	8002224 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	4619      	mov	r1, r3
 8002204:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8002208:	f000 fcde 	bl	8002bc8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800220c:	79bb      	ldrb	r3, [r7, #6]
 800220e:	4619      	mov	r1, r3
 8002210:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8002214:	f000 fcd8 	bl	8002bc8 <SUBGRF_WriteRegister>

    return number;
 8002218:	683b      	ldr	r3, [r7, #0]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800222e:	1dfb      	adds	r3, r7, #7
 8002230:	2201      	movs	r2, #1
 8002232:	4619      	mov	r1, r3
 8002234:	2080      	movs	r0, #128	; 0x80
 8002236:	f000 fd77 	bl	8002d28 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d103      	bne.n	8002248 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <SUBGRF_SetStandby+0x34>)
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8002246:	e002      	b.n	800224e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <SUBGRF_SetStandby+0x34>)
 800224a:	2202      	movs	r2, #2
 800224c:	701a      	strb	r2, [r3, #0]
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000a3c 	.word	0x20000a3c

0800225c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <SUBGRF_SetTx+0x3c>)
 8002266:	2204      	movs	r2, #4
 8002268:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	0c1b      	lsrs	r3, r3, #16
 800226e:	b2db      	uxtb	r3, r3
 8002270:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	b2db      	uxtb	r3, r3
 8002278:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	2203      	movs	r2, #3
 8002286:	4619      	mov	r1, r3
 8002288:	2083      	movs	r0, #131	; 0x83
 800228a:	f000 fd4d 	bl	8002d28 <SUBGRF_WriteCommand>
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000a3c 	.word	0x20000a3c

0800229c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <SUBGRF_SetRx+0x3c>)
 80022a6:	2205      	movs	r2, #5
 80022a8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0c1b      	lsrs	r3, r3, #16
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	2203      	movs	r2, #3
 80022c6:	4619      	mov	r1, r3
 80022c8:	2082      	movs	r0, #130	; 0x82
 80022ca:	f000 fd2d 	bl	8002d28 <SUBGRF_WriteCommand>
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000a3c 	.word	0x20000a3c

080022dc <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80022e6:	1dfb      	adds	r3, r7, #7
 80022e8:	2201      	movs	r2, #1
 80022ea:	4619      	mov	r1, r3
 80022ec:	209f      	movs	r0, #159	; 0x9f
 80022ee:	f000 fd1b 	bl	8002d28 <SUBGRF_WriteCommand>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8002300:	f7ff fe5d 	bl	8001fbe <RBI_IsDCDC>
 8002304:	4603      	mov	r3, r0
 8002306:	2b01      	cmp	r3, #1
 8002308:	d102      	bne.n	8002310 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800230a:	2301      	movs	r3, #1
 800230c:	71fb      	strb	r3, [r7, #7]
 800230e:	e001      	b.n	8002314 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8002310:	2300      	movs	r3, #0
 8002312:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8002314:	1dfb      	adds	r3, r7, #7
 8002316:	2201      	movs	r2, #1
 8002318:	4619      	mov	r1, r3
 800231a:	2096      	movs	r0, #150	; 0x96
 800231c:	f000 fd04 	bl	8002d28 <SUBGRF_WriteCommand>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8002330:	793b      	ldrb	r3, [r7, #4]
 8002332:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002336:	b2db      	uxtb	r3, r3
 8002338:	019b      	lsls	r3, r3, #6
 800233a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800233c:	793b      	ldrb	r3, [r7, #4]
 800233e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8002346:	b25b      	sxtb	r3, r3
 8002348:	4313      	orrs	r3, r2
 800234a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800234c:	793b      	ldrb	r3, [r7, #4]
 800234e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002352:	b2db      	uxtb	r3, r3
 8002354:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8002356:	b25b      	sxtb	r3, r3
 8002358:	4313      	orrs	r3, r2
 800235a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800235c:	793b      	ldrb	r3, [r7, #4]
 800235e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8002366:	b25b      	sxtb	r3, r3
 8002368:	4313      	orrs	r3, r2
 800236a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800236c:	793b      	ldrb	r3, [r7, #4]
 800236e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002372:	b2db      	uxtb	r3, r3
 8002374:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8002376:	b25b      	sxtb	r3, r3
 8002378:	4313      	orrs	r3, r2
 800237a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800237c:	793b      	ldrb	r3, [r7, #4]
 800237e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8002386:	b25b      	sxtb	r3, r3
 8002388:	4313      	orrs	r3, r2
 800238a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800238c:	793b      	ldrb	r3, [r7, #4]
 800238e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002392:	b2db      	uxtb	r3, r3
 8002394:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8002396:	4313      	orrs	r3, r2
 8002398:	b25b      	sxtb	r3, r3
 800239a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800239c:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800239e:	f107 030f 	add.w	r3, r7, #15
 80023a2:	2201      	movs	r2, #1
 80023a4:	4619      	mov	r1, r3
 80023a6:	2089      	movs	r0, #137	; 0x89
 80023a8:	f000 fcbe 	bl	8002d28 <SUBGRF_WriteCommand>
}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <SUBGRF_CalibrateImage+0x80>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d904      	bls.n	80023ce <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80023c4:	23e1      	movs	r3, #225	; 0xe1
 80023c6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80023c8:	23e9      	movs	r3, #233	; 0xe9
 80023ca:	737b      	strb	r3, [r7, #13]
 80023cc:	e027      	b.n	800241e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a19      	ldr	r2, [pc, #100]	; (8002438 <SUBGRF_CalibrateImage+0x84>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d904      	bls.n	80023e0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80023d6:	23d7      	movs	r3, #215	; 0xd7
 80023d8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80023da:	23db      	movs	r3, #219	; 0xdb
 80023dc:	737b      	strb	r3, [r7, #13]
 80023de:	e01e      	b.n	800241e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a16      	ldr	r2, [pc, #88]	; (800243c <SUBGRF_CalibrateImage+0x88>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d904      	bls.n	80023f2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80023e8:	23c1      	movs	r3, #193	; 0xc1
 80023ea:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80023ec:	23c5      	movs	r3, #197	; 0xc5
 80023ee:	737b      	strb	r3, [r7, #13]
 80023f0:	e015      	b.n	800241e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a12      	ldr	r2, [pc, #72]	; (8002440 <SUBGRF_CalibrateImage+0x8c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d904      	bls.n	8002404 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80023fa:	2375      	movs	r3, #117	; 0x75
 80023fc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80023fe:	2381      	movs	r3, #129	; 0x81
 8002400:	737b      	strb	r3, [r7, #13]
 8002402:	e00c      	b.n	800241e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <SUBGRF_CalibrateImage+0x90>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d904      	bls.n	8002416 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800240c:	236b      	movs	r3, #107	; 0x6b
 800240e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8002410:	236f      	movs	r3, #111	; 0x6f
 8002412:	737b      	strb	r3, [r7, #13]
 8002414:	e003      	b.n	800241e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8002416:	2329      	movs	r3, #41	; 0x29
 8002418:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800241a:	232b      	movs	r3, #43	; 0x2b
 800241c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800241e:	f107 030c 	add.w	r3, r7, #12
 8002422:	2202      	movs	r2, #2
 8002424:	4619      	mov	r1, r3
 8002426:	2098      	movs	r0, #152	; 0x98
 8002428:	f000 fc7e 	bl	8002d28 <SUBGRF_WriteCommand>
}
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	35a4e900 	.word	0x35a4e900
 8002438:	32a9f880 	.word	0x32a9f880
 800243c:	2de54480 	.word	0x2de54480
 8002440:	1b6b0b00 	.word	0x1b6b0b00
 8002444:	1954fc40 	.word	0x1954fc40

08002448 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	4604      	mov	r4, r0
 8002450:	4608      	mov	r0, r1
 8002452:	4611      	mov	r1, r2
 8002454:	461a      	mov	r2, r3
 8002456:	4623      	mov	r3, r4
 8002458:	71fb      	strb	r3, [r7, #7]
 800245a:	4603      	mov	r3, r0
 800245c:	71bb      	strb	r3, [r7, #6]
 800245e:	460b      	mov	r3, r1
 8002460:	717b      	strb	r3, [r7, #5]
 8002462:	4613      	mov	r3, r2
 8002464:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800246a:	79bb      	ldrb	r3, [r7, #6]
 800246c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800246e:	797b      	ldrb	r3, [r7, #5]
 8002470:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8002472:	793b      	ldrb	r3, [r7, #4]
 8002474:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8002476:	f107 030c 	add.w	r3, r7, #12
 800247a:	2204      	movs	r2, #4
 800247c:	4619      	mov	r1, r3
 800247e:	2095      	movs	r0, #149	; 0x95
 8002480:	f000 fc52 	bl	8002d28 <SUBGRF_WriteCommand>
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bd90      	pop	{r4, r7, pc}

0800248c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	4604      	mov	r4, r0
 8002494:	4608      	mov	r0, r1
 8002496:	4611      	mov	r1, r2
 8002498:	461a      	mov	r2, r3
 800249a:	4623      	mov	r3, r4
 800249c:	80fb      	strh	r3, [r7, #6]
 800249e:	4603      	mov	r3, r0
 80024a0:	80bb      	strh	r3, [r7, #4]
 80024a2:	460b      	mov	r3, r1
 80024a4:	807b      	strh	r3, [r7, #2]
 80024a6:	4613      	mov	r3, r2
 80024a8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	0a1b      	lsrs	r3, r3, #8
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80024ba:	88bb      	ldrh	r3, [r7, #4]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	b29b      	uxth	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80024c4:	88bb      	ldrh	r3, [r7, #4]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80024d4:	887b      	ldrh	r3, [r7, #2]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80024da:	883b      	ldrh	r3, [r7, #0]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	b29b      	uxth	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80024e4:	883b      	ldrh	r3, [r7, #0]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80024ea:	f107 0308 	add.w	r3, r7, #8
 80024ee:	2208      	movs	r2, #8
 80024f0:	4619      	mov	r1, r3
 80024f2:	2008      	movs	r0, #8
 80024f4:	f000 fc18 	bl	8002d28 <SUBGRF_WriteCommand>
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd90      	pop	{r4, r7, pc}

08002500 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	b2db      	uxtb	r3, r3
 8002514:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	b2db      	uxtb	r3, r3
 800251c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	0a1b      	lsrs	r3, r3, #8
 8002522:	b2db      	uxtb	r3, r3
 8002524:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800252c:	f107 030c 	add.w	r3, r7, #12
 8002530:	2204      	movs	r2, #4
 8002532:	4619      	mov	r1, r3
 8002534:	2097      	movs	r0, #151	; 0x97
 8002536:	f000 fbf7 	bl	8002d28 <SUBGRF_WriteCommand>
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8002544:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002548:	b084      	sub	sp, #16
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <SUBGRF_SetRfFrequency+0x84>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	f083 0301 	eor.w	r3, r3, #1
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff ff27 	bl	80023b4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8002566:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <SUBGRF_SetRfFrequency+0x84>)
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	461c      	mov	r4, r3
 8002572:	4615      	mov	r5, r2
 8002574:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8002578:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800257c:	4a13      	ldr	r2, [pc, #76]	; (80025cc <SUBGRF_SetRfFrequency+0x88>)
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	4640      	mov	r0, r8
 8002584:	4649      	mov	r1, r9
 8002586:	f7fd fe53 	bl	8000230 <__aeabi_uldivmod>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4613      	mov	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	0e1b      	lsrs	r3, r3, #24
 8002596:	b2db      	uxtb	r3, r3
 8002598:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	0c1b      	lsrs	r3, r3, #16
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80025b0:	f107 0308 	add.w	r3, r7, #8
 80025b4:	2204      	movs	r2, #4
 80025b6:	4619      	mov	r1, r3
 80025b8:	2086      	movs	r0, #134	; 0x86
 80025ba:	f000 fbb5 	bl	8002d28 <SUBGRF_WriteCommand>
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025c8:	20000a44 	.word	0x20000a44
 80025cc:	01e84800 	.word	0x01e84800

080025d0 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80025da:	79fa      	ldrb	r2, [r7, #7]
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <SUBGRF_SetPacketType+0x34>)
 80025de:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d104      	bne.n	80025f0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80025e6:	2100      	movs	r1, #0
 80025e8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80025ec:	f000 faec 	bl	8002bc8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80025f0:	1dfb      	adds	r3, r7, #7
 80025f2:	2201      	movs	r2, #1
 80025f4:	4619      	mov	r1, r3
 80025f6:	208a      	movs	r0, #138	; 0x8a
 80025f8:	f000 fb96 	bl	8002d28 <SUBGRF_WriteCommand>
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20000a3d 	.word	0x20000a3d

08002608 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
    return PacketType;
 800260c:	4b02      	ldr	r3, [pc, #8]	; (8002618 <SUBGRF_GetPacketType+0x10>)
 800260e:	781b      	ldrb	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	20000a3d 	.word	0x20000a3d

0800261c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
 8002626:	460b      	mov	r3, r1
 8002628:	71bb      	strb	r3, [r7, #6]
 800262a:	4613      	mov	r3, r2
 800262c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d149      	bne.n	80026c8 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8002634:	2000      	movs	r0, #0
 8002636:	f7ff fcc9 	bl	8001fcc <RBI_GetRFOMaxPowerConfig>
 800263a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800263c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	429a      	cmp	r2, r3
 8002644:	da01      	bge.n	800264a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b0e      	cmp	r3, #14
 800264e:	d10e      	bne.n	800266e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8002650:	2301      	movs	r3, #1
 8002652:	2201      	movs	r2, #1
 8002654:	2100      	movs	r1, #0
 8002656:	2004      	movs	r0, #4
 8002658:	f7ff fef6 	bl	8002448 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800265c:	79ba      	ldrb	r2, [r7, #6]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	330e      	adds	r3, #14
 8002668:	b2db      	uxtb	r3, r3
 800266a:	71bb      	strb	r3, [r7, #6]
 800266c:	e01f      	b.n	80026ae <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b0a      	cmp	r3, #10
 8002672:	d10e      	bne.n	8002692 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8002674:	2301      	movs	r3, #1
 8002676:	2201      	movs	r2, #1
 8002678:	2100      	movs	r1, #0
 800267a:	2001      	movs	r0, #1
 800267c:	f7ff fee4 	bl	8002448 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8002680:	79ba      	ldrb	r2, [r7, #6]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	330d      	adds	r3, #13
 800268c:	b2db      	uxtb	r3, r3
 800268e:	71bb      	strb	r3, [r7, #6]
 8002690:	e00d      	b.n	80026ae <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8002692:	2301      	movs	r3, #1
 8002694:	2201      	movs	r2, #1
 8002696:	2100      	movs	r1, #0
 8002698:	2007      	movs	r0, #7
 800269a:	f7ff fed5 	bl	8002448 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800269e:	79ba      	ldrb	r2, [r7, #6]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	330e      	adds	r3, #14
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 80026ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80026b2:	f113 0f11 	cmn.w	r3, #17
 80026b6:	da01      	bge.n	80026bc <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80026b8:	23ef      	movs	r3, #239	; 0xef
 80026ba:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80026bc:	2118      	movs	r1, #24
 80026be:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80026c2:	f000 fa81 	bl	8002bc8 <SUBGRF_WriteRegister>
 80026c6:	e067      	b.n	8002798 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80026c8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80026cc:	f000 fa90 	bl	8002bf0 <SUBGRF_ReadRegister>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f043 031e 	orr.w	r3, r3, #30
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	4619      	mov	r1, r3
 80026da:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80026de:	f000 fa73 	bl	8002bc8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80026e2:	2001      	movs	r0, #1
 80026e4:	f7ff fc72 	bl	8001fcc <RBI_GetRFOMaxPowerConfig>
 80026e8:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80026ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	da01      	bge.n	80026f8 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b14      	cmp	r3, #20
 80026fc:	d10e      	bne.n	800271c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80026fe:	2301      	movs	r3, #1
 8002700:	2200      	movs	r2, #0
 8002702:	2105      	movs	r1, #5
 8002704:	2003      	movs	r0, #3
 8002706:	f7ff fe9f 	bl	8002448 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800270a:	79ba      	ldrb	r2, [r7, #6]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	3316      	adds	r3, #22
 8002716:	b2db      	uxtb	r3, r3
 8002718:	71bb      	strb	r3, [r7, #6]
 800271a:	e031      	b.n	8002780 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b11      	cmp	r3, #17
 8002720:	d10e      	bne.n	8002740 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8002722:	2301      	movs	r3, #1
 8002724:	2200      	movs	r2, #0
 8002726:	2103      	movs	r1, #3
 8002728:	2002      	movs	r0, #2
 800272a:	f7ff fe8d 	bl	8002448 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800272e:	79ba      	ldrb	r2, [r7, #6]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3316      	adds	r3, #22
 800273a:	b2db      	uxtb	r3, r3
 800273c:	71bb      	strb	r3, [r7, #6]
 800273e:	e01f      	b.n	8002780 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b0e      	cmp	r3, #14
 8002744:	d10e      	bne.n	8002764 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8002746:	2301      	movs	r3, #1
 8002748:	2200      	movs	r2, #0
 800274a:	2102      	movs	r1, #2
 800274c:	2002      	movs	r0, #2
 800274e:	f7ff fe7b 	bl	8002448 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8002752:	79ba      	ldrb	r2, [r7, #6]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	b2db      	uxtb	r3, r3
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	330e      	adds	r3, #14
 800275e:	b2db      	uxtb	r3, r3
 8002760:	71bb      	strb	r3, [r7, #6]
 8002762:	e00d      	b.n	8002780 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8002764:	2301      	movs	r3, #1
 8002766:	2200      	movs	r2, #0
 8002768:	2107      	movs	r1, #7
 800276a:	2004      	movs	r0, #4
 800276c:	f7ff fe6c 	bl	8002448 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8002770:	79ba      	ldrb	r2, [r7, #6]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3316      	adds	r3, #22
 800277c:	b2db      	uxtb	r3, r3
 800277e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8002780:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002784:	f113 0f09 	cmn.w	r3, #9
 8002788:	da01      	bge.n	800278e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800278a:	23f7      	movs	r3, #247	; 0xf7
 800278c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800278e:	2138      	movs	r1, #56	; 0x38
 8002790:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8002794:	f000 fa18 	bl	8002bc8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8002798:	79bb      	ldrb	r3, [r7, #6]
 800279a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800279c:	797b      	ldrb	r3, [r7, #5]
 800279e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80027a0:	f107 0308 	add.w	r3, r7, #8
 80027a4:	2202      	movs	r2, #2
 80027a6:	4619      	mov	r1, r3
 80027a8:	208e      	movs	r0, #142	; 0x8e
 80027aa:	f000 fabd 	bl	8002d28 <SUBGRF_WriteCommand>
}
 80027ae:	bf00      	nop
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80027b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80027c6:	4a61      	ldr	r2, [pc, #388]	; (800294c <SUBGRF_SetModulationParams+0x194>)
 80027c8:	f107 0308 	add.w	r3, r7, #8
 80027cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027d0:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	781a      	ldrb	r2, [r3, #0]
 80027d8:	4b5d      	ldr	r3, [pc, #372]	; (8002950 <SUBGRF_SetModulationParams+0x198>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d004      	beq.n	80027ea <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fef3 	bl	80025d0 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	f200 80a5 	bhi.w	800293e <SUBGRF_SetModulationParams+0x186>
 80027f4:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <SUBGRF_SetModulationParams+0x44>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	0800280d 	.word	0x0800280d
 8002800:	080028cd 	.word	0x080028cd
 8002804:	0800288f 	.word	0x0800288f
 8002808:	080028fb 	.word	0x080028fb
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800280c:	2308      	movs	r3, #8
 800280e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4a4f      	ldr	r2, [pc, #316]	; (8002954 <SUBGRF_SetModulationParams+0x19c>)
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	0c1b      	lsrs	r3, r3, #16
 8002820:	b2db      	uxtb	r3, r3
 8002822:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	b2db      	uxtb	r3, r3
 800282a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	7b1b      	ldrb	r3, [r3, #12]
 8002836:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7b5b      	ldrb	r3, [r3, #13]
 800283c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2200      	movs	r2, #0
 8002844:	461c      	mov	r4, r3
 8002846:	4615      	mov	r5, r2
 8002848:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800284c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8002850:	4a41      	ldr	r2, [pc, #260]	; (8002958 <SUBGRF_SetModulationParams+0x1a0>)
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	4640      	mov	r0, r8
 8002858:	4649      	mov	r1, r9
 800285a:	f7fd fce9 	bl	8000230 <__aeabi_uldivmod>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4613      	mov	r3, r2
 8002864:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	0c1b      	lsrs	r3, r3, #16
 800286a:	b2db      	uxtb	r3, r3
 800286c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	b2db      	uxtb	r3, r3
 8002874:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800287c:	7cfb      	ldrb	r3, [r7, #19]
 800287e:	b29a      	uxth	r2, r3
 8002880:	f107 0308 	add.w	r3, r7, #8
 8002884:	4619      	mov	r1, r3
 8002886:	208b      	movs	r0, #139	; 0x8b
 8002888:	f000 fa4e 	bl	8002d28 <SUBGRF_WriteCommand>
        break;
 800288c:	e058      	b.n	8002940 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800288e:	2304      	movs	r3, #4
 8002890:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	4a2f      	ldr	r2, [pc, #188]	; (8002954 <SUBGRF_SetModulationParams+0x19c>)
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	0c1b      	lsrs	r3, r3, #16
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7d1b      	ldrb	r3, [r3, #20]
 80028b8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80028ba:	7cfb      	ldrb	r3, [r7, #19]
 80028bc:	b29a      	uxth	r2, r3
 80028be:	f107 0308 	add.w	r3, r7, #8
 80028c2:	4619      	mov	r1, r3
 80028c4:	208b      	movs	r0, #139	; 0x8b
 80028c6:	f000 fa2f 	bl	8002d28 <SUBGRF_WriteCommand>
        break;
 80028ca:	e039      	b.n	8002940 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 80028cc:	2304      	movs	r3, #4
 80028ce:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7e1b      	ldrb	r3, [r3, #24]
 80028d4:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7e5b      	ldrb	r3, [r3, #25]
 80028da:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7e9b      	ldrb	r3, [r3, #26]
 80028e0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	7edb      	ldrb	r3, [r3, #27]
 80028e6:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	f107 0308 	add.w	r3, r7, #8
 80028f0:	4619      	mov	r1, r3
 80028f2:	208b      	movs	r0, #139	; 0x8b
 80028f4:	f000 fa18 	bl	8002d28 <SUBGRF_WriteCommand>

        break;
 80028f8:	e022      	b.n	8002940 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 80028fa:	2305      	movs	r3, #5
 80028fc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4a14      	ldr	r2, [pc, #80]	; (8002954 <SUBGRF_SetModulationParams+0x19c>)
 8002904:	fbb2 f3f3 	udiv	r3, r2, r3
 8002908:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	0c1b      	lsrs	r3, r3, #16
 800290e:	b2db      	uxtb	r3, r3
 8002910:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	b2db      	uxtb	r3, r3
 8002918:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	7b1b      	ldrb	r3, [r3, #12]
 8002924:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	7b5b      	ldrb	r3, [r3, #13]
 800292a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	b29a      	uxth	r2, r3
 8002930:	f107 0308 	add.w	r3, r7, #8
 8002934:	4619      	mov	r1, r3
 8002936:	208b      	movs	r0, #139	; 0x8b
 8002938:	f000 f9f6 	bl	8002d28 <SUBGRF_WriteCommand>
        break;
 800293c:	e000      	b.n	8002940 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800293e:	bf00      	nop
    }
}
 8002940:	bf00      	nop
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800294a:	bf00      	nop
 800294c:	0800abb8 	.word	0x0800abb8
 8002950:	20000a3d 	.word	0x20000a3d
 8002954:	3d090000 	.word	0x3d090000
 8002958:	01e84800 	.word	0x01e84800

0800295c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8002968:	4a49      	ldr	r2, [pc, #292]	; (8002a90 <SUBGRF_SetPacketParams+0x134>)
 800296a:	f107 030c 	add.w	r3, r7, #12
 800296e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002970:	c303      	stmia	r3!, {r0, r1}
 8002972:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	781a      	ldrb	r2, [r3, #0]
 8002978:	4b46      	ldr	r3, [pc, #280]	; (8002a94 <SUBGRF_SetPacketParams+0x138>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d004      	beq.n	800298a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fe23 	bl	80025d0 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d879      	bhi.n	8002a86 <SUBGRF_SetPacketParams+0x12a>
 8002992:	a201      	add	r2, pc, #4	; (adr r2, 8002998 <SUBGRF_SetPacketParams+0x3c>)
 8002994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002998:	080029a9 	.word	0x080029a9
 800299c:	08002a39 	.word	0x08002a39
 80029a0:	08002a2d 	.word	0x08002a2d
 80029a4:	080029a9 	.word	0x080029a9
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7adb      	ldrb	r3, [r3, #11]
 80029ac:	2bf1      	cmp	r3, #241	; 0xf1
 80029ae:	d10a      	bne.n	80029c6 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 80029b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80029b4:	f7ff fbaf 	bl	8002116 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80029b8:	f248 0005 	movw	r0, #32773	; 0x8005
 80029bc:	f7ff fbcb 	bl	8002156 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80029c0:	2302      	movs	r3, #2
 80029c2:	75bb      	strb	r3, [r7, #22]
 80029c4:	e011      	b.n	80029ea <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7adb      	ldrb	r3, [r3, #11]
 80029ca:	2bf2      	cmp	r3, #242	; 0xf2
 80029cc:	d10a      	bne.n	80029e4 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80029ce:	f641 500f 	movw	r0, #7439	; 0x1d0f
 80029d2:	f7ff fba0 	bl	8002116 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80029d6:	f241 0021 	movw	r0, #4129	; 0x1021
 80029da:	f7ff fbbc 	bl	8002156 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80029de:	2306      	movs	r3, #6
 80029e0:	75bb      	strb	r3, [r7, #22]
 80029e2:	e002      	b.n	80029ea <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	7adb      	ldrb	r3, [r3, #11]
 80029e8:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80029ea:	2309      	movs	r3, #9
 80029ec:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	889b      	ldrh	r3, [r3, #4]
 80029f2:	0a1b      	lsrs	r3, r3, #8
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	889b      	ldrh	r3, [r3, #4]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	799b      	ldrb	r3, [r3, #6]
 8002a06:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	79db      	ldrb	r3, [r3, #7]
 8002a0c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	7a1b      	ldrb	r3, [r3, #8]
 8002a12:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7a5b      	ldrb	r3, [r3, #9]
 8002a18:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	7a9b      	ldrb	r3, [r3, #10]
 8002a1e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8002a20:	7dbb      	ldrb	r3, [r7, #22]
 8002a22:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	7b1b      	ldrb	r3, [r3, #12]
 8002a28:	753b      	strb	r3, [r7, #20]
        break;
 8002a2a:	e023      	b.n	8002a74 <SUBGRF_SetPacketParams+0x118>
    case PACKET_TYPE_BPSK:
        n = 1;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	7b9b      	ldrb	r3, [r3, #14]
 8002a34:	733b      	strb	r3, [r7, #12]
        break;
 8002a36:	e01d      	b.n	8002a74 <SUBGRF_SetPacketParams+0x118>
    case PACKET_TYPE_LORA:
        n = 6;
 8002a38:	2306      	movs	r3, #6
 8002a3a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	8a1b      	ldrh	r3, [r3, #16]
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8a1b      	ldrh	r3, [r3, #16]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7c9a      	ldrb	r2, [r3, #18]
 8002a54:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <SUBGRF_SetPacketParams+0x13c>)
 8002a56:	4611      	mov	r1, r2
 8002a58:	7019      	strb	r1, [r3, #0]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7e1b      	ldrb	r3, [r3, #24]
 8002a6a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	7e5b      	ldrb	r3, [r3, #25]
 8002a70:	747b      	strb	r3, [r7, #17]
        break;
 8002a72:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	208c      	movs	r0, #140	; 0x8c
 8002a80:	f000 f952 	bl	8002d28 <SUBGRF_WriteCommand>
 8002a84:	e000      	b.n	8002a88 <SUBGRF_SetPacketParams+0x12c>
        return;
 8002a86:	bf00      	nop
}
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	0800abc0 	.word	0x0800abc0
 8002a94:	20000a3d 	.word	0x20000a3d
 8002a98:	20000a3e 	.word	0x20000a3e

08002a9c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	460a      	mov	r2, r1
 8002aa6:	71fb      	strb	r3, [r7, #7]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8002ab0:	79bb      	ldrb	r3, [r7, #6]
 8002ab2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8002ab4:	f107 030c 	add.w	r3, r7, #12
 8002ab8:	2202      	movs	r2, #2
 8002aba:	4619      	mov	r1, r3
 8002abc:	208f      	movs	r0, #143	; 0x8f
 8002abe:	f000 f933 	bl	8002d28 <SUBGRF_WriteCommand>
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8002ad6:	f107 030c 	add.w	r3, r7, #12
 8002ada:	2202      	movs	r2, #2
 8002adc:	4619      	mov	r1, r3
 8002ade:	2013      	movs	r0, #19
 8002ae0:	f000 f944 	bl	8002d6c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8002ae4:	f7ff fd90 	bl	8002608 <SUBGRF_GetPacketType>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d10d      	bne.n	8002b0a <SUBGRF_GetRxBufferStatus+0x3e>
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <SUBGRF_GetRxBufferStatus+0x54>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d108      	bne.n	8002b0a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8002af8:	f240 7002 	movw	r0, #1794	; 0x702
 8002afc:	f000 f878 	bl	8002bf0 <SUBGRF_ReadRegister>
 8002b00:	4603      	mov	r3, r0
 8002b02:	461a      	mov	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	701a      	strb	r2, [r3, #0]
 8002b08:	e002      	b.n	8002b10 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8002b0a:	7b3a      	ldrb	r2, [r7, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8002b10:	7b7a      	ldrb	r2, [r7, #13]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	701a      	strb	r2, [r3, #0]
}
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000a3e 	.word	0x20000a3e

08002b24 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8002b2c:	f107 030c 	add.w	r3, r7, #12
 8002b30:	2203      	movs	r2, #3
 8002b32:	4619      	mov	r1, r3
 8002b34:	2014      	movs	r0, #20
 8002b36:	f000 f919 	bl	8002d6c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8002b3a:	f7ff fd65 	bl	8002608 <SUBGRF_GetPacketType>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <SUBGRF_GetPacketStatus+0x30>
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d013      	beq.n	8002b7a <SUBGRF_GetPacketStatus+0x56>
 8002b52:	e02a      	b.n	8002baa <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8002b54:	7b3a      	ldrb	r2, [r7, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8002b5a:	7b7b      	ldrb	r3, [r7, #13]
 8002b5c:	425b      	negs	r3, r3
 8002b5e:	105b      	asrs	r3, r3, #1
 8002b60:	b25a      	sxtb	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8002b66:	7bbb      	ldrb	r3, [r7, #14]
 8002b68:	425b      	negs	r3, r3
 8002b6a:	105b      	asrs	r3, r3, #1
 8002b6c:	b25a      	sxtb	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	609a      	str	r2, [r3, #8]
            break;
 8002b78:	e020      	b.n	8002bbc <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8002b7a:	7b3b      	ldrb	r3, [r7, #12]
 8002b7c:	425b      	negs	r3, r3
 8002b7e:	105b      	asrs	r3, r3, #1
 8002b80:	b25a      	sxtb	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8002b86:	7b7b      	ldrb	r3, [r7, #13]
 8002b88:	b25b      	sxtb	r3, r3
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	109b      	asrs	r3, r3, #2
 8002b8e:	b25a      	sxtb	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8002b94:	7bbb      	ldrb	r3, [r7, #14]
 8002b96:	425b      	negs	r3, r3
 8002b98:	105b      	asrs	r3, r3, #1
 8002b9a:	b25a      	sxtb	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <SUBGRF_GetPacketStatus+0xa0>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	611a      	str	r2, [r3, #16]
            break;
 8002ba8:	e008      	b.n	8002bbc <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8002baa:	2214      	movs	r2, #20
 8002bac:	2100      	movs	r1, #0
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f006 fd10 	bl	80095d4 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	220f      	movs	r2, #15
 8002bb8:	701a      	strb	r2, [r3, #0]
            break;
 8002bba:	bf00      	nop
    }
}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	20000a40 	.word	0x20000a40

08002bc8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	80fb      	strh	r3, [r7, #6]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8002bd8:	1d7a      	adds	r2, r7, #5
 8002bda:	88f9      	ldrh	r1, [r7, #6]
 8002bdc:	2301      	movs	r3, #1
 8002bde:	4803      	ldr	r0, [pc, #12]	; (8002bec <SUBGRF_WriteRegister+0x24>)
 8002be0:	f004 f85e 	bl	8006ca0 <HAL_SUBGHZ_WriteRegisters>
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000938 	.word	0x20000938

08002bf0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8002bfa:	f107 020f 	add.w	r2, r7, #15
 8002bfe:	88f9      	ldrh	r1, [r7, #6]
 8002c00:	2301      	movs	r3, #1
 8002c02:	4804      	ldr	r0, [pc, #16]	; (8002c14 <SUBGRF_ReadRegister+0x24>)
 8002c04:	f004 f8ab 	bl	8006d5e <HAL_SUBGHZ_ReadRegisters>
    return data;
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000938 	.word	0x20000938

08002c18 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	6039      	str	r1, [r7, #0]
 8002c22:	80fb      	strh	r3, [r7, #6]
 8002c24:	4613      	mov	r3, r2
 8002c26:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c28:	f3ef 8310 	mrs	r3, PRIMASK
 8002c2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002c30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c32:	b672      	cpsid	i
}
 8002c34:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8002c36:	88bb      	ldrh	r3, [r7, #4]
 8002c38:	88f9      	ldrh	r1, [r7, #6]
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	4806      	ldr	r0, [pc, #24]	; (8002c58 <SUBGRF_WriteRegisters+0x40>)
 8002c3e:	f004 f82f 	bl	8006ca0 <HAL_SUBGHZ_WriteRegisters>
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f383 8810 	msr	PRIMASK, r3
}
 8002c4c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002c4e:	bf00      	nop
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000938 	.word	0x20000938

08002c5c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	6039      	str	r1, [r7, #0]
 8002c66:	80fb      	strh	r3, [r7, #6]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c70:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c72:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002c74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c76:	b672      	cpsid	i
}
 8002c78:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8002c7a:	88bb      	ldrh	r3, [r7, #4]
 8002c7c:	88f9      	ldrh	r1, [r7, #6]
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	4806      	ldr	r0, [pc, #24]	; (8002c9c <SUBGRF_ReadRegisters+0x40>)
 8002c82:	f004 f86c 	bl	8006d5e <HAL_SUBGHZ_ReadRegisters>
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f383 8810 	msr	PRIMASK, r3
}
 8002c90:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002c92:	bf00      	nop
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000938 	.word	0x20000938

08002ca0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	71fb      	strb	r3, [r7, #7]
 8002cac:	4613      	mov	r3, r2
 8002cae:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8002cb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002cb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cba:	b672      	cpsid	i
}
 8002cbc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8002cbe:	79bb      	ldrb	r3, [r7, #6]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	79f9      	ldrb	r1, [r7, #7]
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	4806      	ldr	r0, [pc, #24]	; (8002ce0 <SUBGRF_WriteBuffer+0x40>)
 8002cc8:	f004 f95d 	bl	8006f86 <HAL_SUBGHZ_WriteBuffer>
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f383 8810 	msr	PRIMASK, r3
}
 8002cd6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002cd8:	bf00      	nop
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20000938 	.word	0x20000938

08002ce4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	6039      	str	r1, [r7, #0]
 8002cee:	71fb      	strb	r3, [r7, #7]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002cfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cfe:	b672      	cpsid	i
}
 8002d00:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8002d02:	79bb      	ldrb	r3, [r7, #6]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	79f9      	ldrb	r1, [r7, #7]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	4806      	ldr	r0, [pc, #24]	; (8002d24 <SUBGRF_ReadBuffer+0x40>)
 8002d0c:	f004 f98e 	bl	800702c <HAL_SUBGHZ_ReadBuffer>
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f383 8810 	msr	PRIMASK, r3
}
 8002d1a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002d1c:	bf00      	nop
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000938 	.word	0x20000938

08002d28 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	6039      	str	r1, [r7, #0]
 8002d32:	71fb      	strb	r3, [r7, #7]
 8002d34:	4613      	mov	r3, r2
 8002d36:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d38:	f3ef 8310 	mrs	r3, PRIMASK
 8002d3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002d40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d42:	b672      	cpsid	i
}
 8002d44:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8002d46:	88bb      	ldrh	r3, [r7, #4]
 8002d48:	79f9      	ldrb	r1, [r7, #7]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	4806      	ldr	r0, [pc, #24]	; (8002d68 <SUBGRF_WriteCommand+0x40>)
 8002d4e:	f004 f867 	bl	8006e20 <HAL_SUBGHZ_ExecSetCmd>
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	f383 8810 	msr	PRIMASK, r3
}
 8002d5c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002d5e:	bf00      	nop
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000938 	.word	0x20000938

08002d6c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	6039      	str	r1, [r7, #0]
 8002d76:	71fb      	strb	r3, [r7, #7]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d80:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d82:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002d84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d86:	b672      	cpsid	i
}
 8002d88:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8002d8a:	88bb      	ldrh	r3, [r7, #4]
 8002d8c:	79f9      	ldrb	r1, [r7, #7]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	4806      	ldr	r0, [pc, #24]	; (8002dac <SUBGRF_ReadCommand+0x40>)
 8002d92:	f004 f8a4 	bl	8006ede <HAL_SUBGHZ_ExecGetCmd>
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f383 8810 	msr	PRIMASK, r3
}
 8002da0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002da2:	bf00      	nop
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000938 	.word	0x20000938

08002db0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	460a      	mov	r2, r1
 8002dba:	71fb      	strb	r3, [r7, #7]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8002dc4:	79bb      	ldrb	r3, [r7, #6]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d10d      	bne.n	8002de6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d104      	bne.n	8002dda <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8002dd4:	2004      	movs	r0, #4
 8002dd6:	f000 f8e7 	bl	8002fa8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d107      	bne.n	8002df0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8002de0:	2303      	movs	r3, #3
 8002de2:	73fb      	strb	r3, [r7, #15]
 8002de4:	e004      	b.n	8002df0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8002de6:	79bb      	ldrb	r3, [r7, #6]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff f8c7 	bl	8001f86 <RBI_ConfigRFSwitch>
}
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8002e0e:	f7ff f8c8 	bl	8001fa2 <RBI_GetTxConfig>
 8002e12:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d016      	beq.n	8002e48 <SUBGRF_SetRfTxPower+0x48>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	dc16      	bgt.n	8002e4e <SUBGRF_SetRfTxPower+0x4e>
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <SUBGRF_SetRfTxPower+0x2e>
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d00a      	beq.n	8002e42 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8002e2c:	e00f      	b.n	8002e4e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	2b0f      	cmp	r3, #15
 8002e34:	dd02      	ble.n	8002e3c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8002e36:	2302      	movs	r3, #2
 8002e38:	73fb      	strb	r3, [r7, #15]
            break;
 8002e3a:	e009      	b.n	8002e50 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
            break;
 8002e40:	e006      	b.n	8002e50 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8002e42:	2301      	movs	r3, #1
 8002e44:	73fb      	strb	r3, [r7, #15]
            break;
 8002e46:	e003      	b.n	8002e50 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	73fb      	strb	r3, [r7, #15]
            break;
 8002e4c:	e000      	b.n	8002e50 <SUBGRF_SetRfTxPower+0x50>
            break;
 8002e4e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8002e50:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2202      	movs	r2, #2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fbdf 	bl	800261c <SUBGRF_SetTxParams>
    //SUBGRF_SetTxParams( RFO_HP, power, RADIO_RAMP_40_US );
    return paSelect;
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2001      	movs	r0, #1
 8002e76:	4798      	blx	r3
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000a48 	.word	0x20000a48

08002e84 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8002e8c:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2002      	movs	r0, #2
 8002e92:	4798      	blx	r3
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000a48 	.word	0x20000a48

08002ea0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8002ea8:	4b03      	ldr	r3, [pc, #12]	; (8002eb8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2040      	movs	r0, #64	; 0x40
 8002eae:	4798      	blx	r3
}
 8002eb0:	bf00      	nop
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20000a48 	.word	0x20000a48

08002ebc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d005      	beq.n	8002ede <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8002ed2:	e00a      	b.n	8002eea <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8002ed4:	4b07      	ldr	r3, [pc, #28]	; (8002ef4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2080      	movs	r0, #128	; 0x80
 8002eda:	4798      	blx	r3
            break;
 8002edc:	e005      	b.n	8002eea <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8002ede:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ee6:	4798      	blx	r3
            break;
 8002ee8:	bf00      	nop
    }
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000a48 	.word	0x20000a48

08002ef8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8002f00:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002f08:	4798      	blx	r3
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000a48 	.word	0x20000a48

08002f18 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2020      	movs	r0, #32
 8002f26:	4798      	blx	r3
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20000a48 	.word	0x20000a48

08002f34 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8002f3c:	4b03      	ldr	r3, [pc, #12]	; (8002f4c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2004      	movs	r0, #4
 8002f42:	4798      	blx	r3
}
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20000a48 	.word	0x20000a48

08002f50 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8002f58:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2008      	movs	r0, #8
 8002f5e:	4798      	blx	r3
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000a48 	.word	0x20000a48

08002f6c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8002f74:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2010      	movs	r0, #16
 8002f7a:	4798      	blx	r3
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000a48 	.word	0x20000a48

08002f88 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8002f90:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f98:	4798      	blx	r3
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000a48 	.word	0x20000a48

08002fa8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8002fb2:	f7ff f804 	bl	8001fbe <RBI_IsDCDC>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d112      	bne.n	8002fe2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8002fbc:	f640 1023 	movw	r0, #2339	; 0x923
 8002fc0:	f7ff fe16 	bl	8002bf0 <SUBGRF_ReadRegister>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	f023 0306 	bic.w	r3, r3, #6
 8002fce:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f640 1023 	movw	r0, #2339	; 0x923
 8002fde:	f7ff fdf3 	bl	8002bc8 <SUBGRF_WriteRegister>
  }
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ff6:	2003      	movs	r0, #3
 8002ff8:	f000 f926 	bl	8003248 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ffc:	f003 fa12 	bl	8006424 <HAL_RCC_GetHCLKFreq>
 8003000:	4603      	mov	r3, r0
 8003002:	4a09      	ldr	r2, [pc, #36]	; (8003028 <HAL_Init+0x3c>)
 8003004:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003006:	200f      	movs	r0, #15
 8003008:	f7fd ffd8 	bl	8000fbc <HAL_InitTick>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	71fb      	strb	r3, [r7, #7]
 8003016:	e001      	b.n	800301c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003018:	f7fd ffb1 	bl	8000f7e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800301c:	79fb      	ldrb	r3, [r7, #7]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000110 	.word	0x20000110

0800302c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_IncTick+0x1c>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_IncTick+0x20>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4413      	add	r3, r2
 800303c:	4a03      	ldr	r2, [pc, #12]	; (800304c <HAL_IncTick+0x20>)
 800303e:	6013      	str	r3, [r2, #0]
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr
 8003048:	20000124 	.word	0x20000124
 800304c:	20000a4c 	.word	0x20000a4c

08003050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return uwTick;
 8003054:	4b02      	ldr	r3, [pc, #8]	; (8003060 <HAL_GetTick+0x10>)
 8003056:	681b      	ldr	r3, [r3, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	20000a4c 	.word	0x20000a4c

08003064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800306c:	f7ff fff0 	bl	8003050 <HAL_GetTick>
 8003070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d005      	beq.n	800308a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <HAL_Delay+0x44>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800308a:	bf00      	nop
 800308c:	f7ff ffe0 	bl	8003050 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	d8f7      	bhi.n	800308c <HAL_Delay+0x28>
  {
  }
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000124 	.word	0x20000124

080030ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <__NVIC_SetPriorityGrouping+0x44>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030c8:	4013      	ands	r3, r2
 80030ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030de:	4a04      	ldr	r2, [pc, #16]	; (80030f0 <__NVIC_SetPriorityGrouping+0x44>)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	60d3      	str	r3, [r2, #12]
}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030f8:	4b04      	ldr	r3, [pc, #16]	; (800310c <__NVIC_GetPriorityGrouping+0x18>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	0a1b      	lsrs	r3, r3, #8
 80030fe:	f003 0307 	and.w	r3, r3, #7
}
 8003102:	4618      	mov	r0, r3
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000ed00 	.word	0xe000ed00

08003110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	2b00      	cmp	r3, #0
 8003120:	db0b      	blt.n	800313a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	f003 021f 	and.w	r2, r3, #31
 8003128:	4906      	ldr	r1, [pc, #24]	; (8003144 <__NVIC_EnableIRQ+0x34>)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	2001      	movs	r0, #1
 8003132:	fa00 f202 	lsl.w	r2, r0, r2
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr
 8003144:	e000e100 	.word	0xe000e100

08003148 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	2b00      	cmp	r3, #0
 8003158:	db12      	blt.n	8003180 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	f003 021f 	and.w	r2, r3, #31
 8003160:	490a      	ldr	r1, [pc, #40]	; (800318c <__NVIC_DisableIRQ+0x44>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	2001      	movs	r0, #1
 800316a:	fa00 f202 	lsl.w	r2, r0, r2
 800316e:	3320      	adds	r3, #32
 8003170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003174:	f3bf 8f4f 	dsb	sy
}
 8003178:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800317a:	f3bf 8f6f 	isb	sy
}
 800317e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000e100 	.word	0xe000e100

08003190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	db0a      	blt.n	80031ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	490c      	ldr	r1, [pc, #48]	; (80031dc <__NVIC_SetPriority+0x4c>)
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	0112      	lsls	r2, r2, #4
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	440b      	add	r3, r1
 80031b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b8:	e00a      	b.n	80031d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	4908      	ldr	r1, [pc, #32]	; (80031e0 <__NVIC_SetPriority+0x50>)
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	3b04      	subs	r3, #4
 80031c8:	0112      	lsls	r2, r2, #4
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	440b      	add	r3, r1
 80031ce:	761a      	strb	r2, [r3, #24]
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	e000e100 	.word	0xe000e100
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f1c3 0307 	rsb	r3, r3, #7
 80031fe:	2b04      	cmp	r3, #4
 8003200:	bf28      	it	cs
 8003202:	2304      	movcs	r3, #4
 8003204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3304      	adds	r3, #4
 800320a:	2b06      	cmp	r3, #6
 800320c:	d902      	bls.n	8003214 <NVIC_EncodePriority+0x30>
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3b03      	subs	r3, #3
 8003212:	e000      	b.n	8003216 <NVIC_EncodePriority+0x32>
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003218:	f04f 32ff 	mov.w	r2, #4294967295
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	401a      	ands	r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800322c:	f04f 31ff 	mov.w	r1, #4294967295
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	fa01 f303 	lsl.w	r3, r1, r3
 8003236:	43d9      	mvns	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	4313      	orrs	r3, r2
         );
}
 800323e:	4618      	mov	r0, r3
 8003240:	3724      	adds	r7, #36	; 0x24
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7ff ff2b 	bl	80030ac <__NVIC_SetPriorityGrouping>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b086      	sub	sp, #24
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800326c:	f7ff ff42 	bl	80030f4 <__NVIC_GetPriorityGrouping>
 8003270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	6978      	ldr	r0, [r7, #20]
 8003278:	f7ff ffb4 	bl	80031e4 <NVIC_EncodePriority>
 800327c:	4602      	mov	r2, r0
 800327e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003282:	4611      	mov	r1, r2
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff ff83 	bl	8003190 <__NVIC_SetPriority>
}
 800328a:	bf00      	nop
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	4603      	mov	r3, r0
 800329a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800329c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff ff35 	bl	8003110 <__NVIC_EnableIRQ>
}
 80032a6:	bf00      	nop
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	4603      	mov	r3, r0
 80032b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80032b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff43 	bl	8003148 <__NVIC_DisableIRQ>
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e02d      	b.n	8003338 <HAL_CRYP_Init+0x6e>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d106      	bne.n	80032f6 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7fd f98b 	bl	800060c <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size (This bit field is do not care in the DES or TDES modes), data type and Algorithm */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 8003300:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6851      	ldr	r1, [r2, #4]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6892      	ldr	r2, [r2, #8]
 800330c:	4311      	orrs	r1, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6952      	ldr	r2, [r2, #20]
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	430b      	orrs	r3, r1
 800331a:	6013      	str	r3, [r2, #0]

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_CRYP_DeInit>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_CRYP_DeInit(CRYP_HandleTypeDef *hcryp)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_CRYP_DeInit+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e020      	b.n	8003394 <HAL_CRYP_DeInit+0x54>
  }

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset CrypInCount and CrypOutCount */
  hcryp->CrypInCount = 0;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->CrypOutCount = 0;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  hcryp->CrypHeaderCount = 0;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /* Disable the CRYP peripheral clock */
  __HAL_CRYP_DISABLE(hcryp);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0201 	bic.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]
  hcryp->MspDeInitCallback(hcryp);

#else

  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_CRYP_MspDeInit(hcryp);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7fd f959 	bl	8000634 <HAL_CRYP_MspDeInit>

#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_RESET;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hcryp);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_CRYP_Encrypt>:
  * @param  Output Pointer to the output buffer(ciphertext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	4613      	mov	r3, r2
 80033aa:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d17c      	bne.n	80034b2 <HAL_CRYP_Encrypt+0x116>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process locked */
    __HAL_LOCK(hcryp);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_CRYP_Encrypt+0x32>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e07a      	b.n	80034c4 <HAL_CRYP_Encrypt+0x128>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/
    hcryp->CrypInCount = 0U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hcryp->pCrypInBuffPtr = Input;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d106      	bne.n	8003406 <HAL_CRYP_Encrypt+0x6a>
    {
      hcryp->Size = Size * 4U;
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8003404:	e003      	b.n	800340e <HAL_CRYP_Encrypt+0x72>
    }
    else
    {
      hcryp->Size = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	88fa      	ldrh	r2, [r7, #6]
 800340a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }

    /* Set the operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0218 	bic.w	r2, r2, #24
 800341c:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b29      	ldr	r3, [pc, #164]	; (80034cc <HAL_CRYP_Encrypt+0x130>)
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]

    switch (algo)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003430:	d023      	beq.n	800347a <HAL_CRYP_Encrypt+0xde>
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003438:	d826      	bhi.n	8003488 <HAL_CRYP_Encrypt+0xec>
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b60      	cmp	r3, #96	; 0x60
 800343e:	d015      	beq.n	800346c <HAL_CRYP_Encrypt+0xd0>
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	2b60      	cmp	r3, #96	; 0x60
 8003444:	d820      	bhi.n	8003488 <HAL_CRYP_Encrypt+0xec>
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b40      	cmp	r3, #64	; 0x40
 800344a:	d008      	beq.n	800345e <HAL_CRYP_Encrypt+0xc2>
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d81a      	bhi.n	8003488 <HAL_CRYP_Encrypt+0xec>
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d002      	beq.n	800345e <HAL_CRYP_Encrypt+0xc2>
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	2b20      	cmp	r3, #32
 800345c:	d114      	bne.n	8003488 <HAL_CRYP_Encrypt+0xec>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 800345e:	6a39      	ldr	r1, [r7, #32]
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 f8da 	bl	800361a <CRYP_AES_Encrypt>
 8003466:	4603      	mov	r3, r0
 8003468:	75fb      	strb	r3, [r7, #23]
        break;
 800346a:	e016      	b.n	800349a <HAL_CRYP_Encrypt+0xfe>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 800346c:	6a39      	ldr	r1, [r7, #32]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fbc3 	bl	8003bfa <CRYP_AESGCM_Process>
 8003474:	4603      	mov	r3, r0
 8003476:	75fb      	strb	r3, [r7, #23]
        break;
 8003478:	e00f      	b.n	800349a <HAL_CRYP_Encrypt+0xfe>

      case CRYP_AES_CCM:

        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 800347a:	6a39      	ldr	r1, [r7, #32]
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 fd64 	bl	8003f4a <CRYP_AESCCM_Process>
 8003482:	4603      	mov	r3, r0
 8003484:	75fb      	strb	r3, [r7, #23]
        break;
 8003486:	e008      	b.n	800349a <HAL_CRYP_Encrypt+0xfe>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348c:	f043 0220 	orr.w	r2, r3, #32
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	75fb      	strb	r3, [r7, #23]
        break;
 8003498:	bf00      	nop
    }

    if (status == HAL_OK)
 800349a:	7dfb      	ldrb	r3, [r7, #23]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d110      	bne.n	80034c2 <HAL_CRYP_Encrypt+0x126>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80034b0:	e007      	b.n	80034c2 <HAL_CRYP_Encrypt+0x126>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b6:	f043 0208 	orr.w	r2, r3, #8
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	00010060 	.word	0x00010060

080034d0 <HAL_CRYP_Decrypt>:
  * @param  Output Pointer to the output buffer(plaintext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	4613      	mov	r3, r2
 80034de:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d17e      	bne.n	80035ea <HAL_CRYP_Decrypt+0x11a>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process locked */
    __HAL_LOCK(hcryp);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_CRYP_Decrypt+0x32>
 80034fe:	2302      	movs	r3, #2
 8003500:	e07c      	b.n	80035fc <HAL_CRYP_Decrypt+0x12c>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/
    hcryp->CrypInCount = 0U;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hcryp->pCrypInBuffPtr = Input;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	2b00      	cmp	r3, #0
 800352a:	d106      	bne.n	800353a <HAL_CRYP_Decrypt+0x6a>
    {
      hcryp->Size = Size * 4U;
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8003538:	e003      	b.n	8003542 <HAL_CRYP_Decrypt+0x72>
    }
    else
    {
      hcryp->Size = Size;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	88fa      	ldrh	r2, [r7, #6]
 800353e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }

    /* Set Decryption operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 0218 	bic.w	r2, r3, #24
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0210 	orr.w	r2, r2, #16
 8003554:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b29      	ldr	r3, [pc, #164]	; (8003604 <HAL_CRYP_Decrypt+0x134>)
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]

    switch (algo)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003568:	d023      	beq.n	80035b2 <HAL_CRYP_Decrypt+0xe2>
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003570:	d826      	bhi.n	80035c0 <HAL_CRYP_Decrypt+0xf0>
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	2b60      	cmp	r3, #96	; 0x60
 8003576:	d015      	beq.n	80035a4 <HAL_CRYP_Decrypt+0xd4>
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	2b60      	cmp	r3, #96	; 0x60
 800357c:	d820      	bhi.n	80035c0 <HAL_CRYP_Decrypt+0xf0>
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b40      	cmp	r3, #64	; 0x40
 8003582:	d008      	beq.n	8003596 <HAL_CRYP_Decrypt+0xc6>
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	d81a      	bhi.n	80035c0 <HAL_CRYP_Decrypt+0xf0>
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_CRYP_Decrypt+0xc6>
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	2b20      	cmp	r3, #32
 8003594:	d114      	bne.n	80035c0 <HAL_CRYP_Decrypt+0xf0>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES decryption */
        status = CRYP_AES_Decrypt(hcryp, Timeout);
 8003596:	6a39      	ldr	r1, [r7, #32]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f8c6 	bl	800372a <CRYP_AES_Decrypt>
 800359e:	4603      	mov	r3, r0
 80035a0:	75fb      	strb	r3, [r7, #23]
        break;
 80035a2:	e016      	b.n	80035d2 <HAL_CRYP_Decrypt+0x102>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM decryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 80035a4:	6a39      	ldr	r1, [r7, #32]
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fb27 	bl	8003bfa <CRYP_AESGCM_Process>
 80035ac:	4603      	mov	r3, r0
 80035ae:	75fb      	strb	r3, [r7, #23]
        break;
 80035b0:	e00f      	b.n	80035d2 <HAL_CRYP_Decrypt+0x102>

      case CRYP_AES_CCM:

        /* AES CCM decryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 80035b2:	6a39      	ldr	r1, [r7, #32]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 fcc8 	bl	8003f4a <CRYP_AESCCM_Process>
 80035ba:	4603      	mov	r3, r0
 80035bc:	75fb      	strb	r3, [r7, #23]
        break;
 80035be:	e008      	b.n	80035d2 <HAL_CRYP_Decrypt+0x102>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	f043 0220 	orr.w	r2, r3, #32
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	75fb      	strb	r3, [r7, #23]
        break;
 80035d0:	bf00      	nop
    }

    if (status == HAL_OK)
 80035d2:	7dfb      	ldrb	r3, [r7, #23]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d110      	bne.n	80035fa <HAL_CRYP_Decrypt+0x12a>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80035e8:	e007      	b.n	80035fa <HAL_CRYP_Decrypt+0x12a>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ee:	f043 0208 	orr.w	r2, r3, #8
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	00010060 	.word	0x00010060

08003608 <HAL_CRYP_ErrorCallback>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CRYP_ErrorCallback can be implemented in the user file
   */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr

0800361a <CRYP_AES_Encrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8003624:	2301      	movs	r3, #1
 8003626:	60bb      	str	r3, [r7, #8]

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)|| (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	2b01      	cmp	r3, #1
 800362e:	d003      	beq.n	8003638 <CRYP_AES_Encrypt+0x1e>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003634:	2b04      	cmp	r3, #4
 8003636:	d109      	bne.n	800364c <CRYP_AES_Encrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	2b01      	cmp	r3, #1
 800363e:	d102      	bne.n	8003646 <CRYP_AES_Encrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	e002      	b.n	800364c <CRYP_AES_Encrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d122      	bne.n	8003698 <CRYP_AES_Encrypt+0x7e>
  {
    /*  Set the Key*/
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	4619      	mov	r1, r3
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fa6c 	bl	8003b36 <CRYP_SetKey>

    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d022      	beq.n	80036ac <CRYP_AES_Encrypt+0x92>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6852      	ldr	r2, [r2, #4]
 800367c:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6892      	ldr	r2, [r2, #8]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68d2      	ldr	r2, [r2, #12]
 8003694:	621a      	str	r2, [r3, #32]
 8003696:	e009      	b.n	80036ac <CRYP_AES_Encrypt+0x92>
    }
  } /* if (DoKeyIVConfig == 1U) */
  else
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	2b04      	cmp	r3, #4
 800369e:	d105      	bne.n	80036ac <CRYP_AES_Encrypt+0x92>
    {
      /* Set the Key */
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4619      	mov	r1, r3
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fa45 	bl	8003b36 <CRYP_SetKey>
    }
  }
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c6:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036ce:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80036d0:	e00a      	b.n	80036e8 <CRYP_AES_Encrypt+0xce>
  {
    /* Write plain Ddta and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80036d2:	6839      	ldr	r1, [r7, #0]
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f976 	bl	80039c6 <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036de:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80036e6:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80036ee:	089b      	lsrs	r3, r3, #2
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	89fa      	ldrh	r2, [r7, #14]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d207      	bcs.n	8003708 <CRYP_AES_Encrypt+0xee>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80036fe:	089b      	lsrs	r3, r3, #2
 8003700:	b29b      	uxth	r3, r3
 8003702:	89ba      	ldrh	r2, [r7, #12]
 8003704:	429a      	cmp	r2, r3
 8003706:	d3e4      	bcc.n	80036d2 <CRYP_AES_Encrypt+0xb8>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Return function status */
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <CRYP_AES_Decrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout Specify Timeout value
  * @retval HAL status
*/
static HAL_StatusTypeDef CRYP_AES_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
 8003732:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8003734:	2301      	movs	r3, #1
 8003736:	60bb      	str	r3, [r7, #8]

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	2b01      	cmp	r3, #1
 800373e:	d003      	beq.n	8003748 <CRYP_AES_Decrypt+0x1e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	2b04      	cmp	r3, #4
 8003746:	d109      	bne.n	800375c <CRYP_AES_Decrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374c:	2b01      	cmp	r3, #1
 800374e:	d102      	bne.n	8003756 <CRYP_AES_Decrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	e002      	b.n	800375c <CRYP_AES_Decrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2b01      	cmp	r3, #1
 8003760:	f040 8086 	bne.w	8003870 <CRYP_AES_Decrypt+0x146>
  {
    /*  Key preparation for ECB/CBC */
    if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d05d      	beq.n	8003828 <CRYP_AES_Decrypt+0xfe>
    {
      if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003772:	2b00      	cmp	r3, #0
 8003774:	d149      	bne.n	800380a <CRYP_AES_Decrypt+0xe0>
      {
        /* Set key preparation for decryption operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f023 0218 	bic.w	r2, r3, #24
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0208 	orr.w	r2, r2, #8
 8003788:	601a      	str	r2, [r3, #0]

        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	4619      	mov	r1, r3
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f9d0 	bl	8003b36 <CRYP_SetKey>

        /* Enable CRYP */
        __HAL_CRYP_ENABLE(hcryp);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 0201 	orr.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80037a6:	6839      	ldr	r1, [r7, #0]
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 ff51 	bl	8004650 <CRYP_WaitOnCCFlag>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d017      	beq.n	80037e4 <CRYP_AES_Decrypt+0xba>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0201 	bic.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

          /* Change state & error code*/
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c8:	f043 0210 	orr.w	r2, r3, #16
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0ec      	b.n	80039be <CRYP_AES_Decrypt+0x294>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037f2:	601a      	str	r2, [r3, #0]

        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 0218 	bic.w	r2, r3, #24
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0210 	orr.w	r2, r2, #16
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e014      	b.n	8003834 <CRYP_AES_Decrypt+0x10a>
      }
      else /*Mode 4 : decryption & Key preparation*/
      {
        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	4619      	mov	r1, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f990 	bl	8003b36 <CRYP_SetKey>

        /* Set decryption & Key preparation operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0218 	orr.w	r2, r2, #24
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	e005      	b.n	8003834 <CRYP_AES_Decrypt+0x10a>
      }
    }
    else  /*Algorithm CTR */
    {
      /*  Set the Key*/
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	4619      	mov	r1, r3
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f981 	bl	8003b36 <CRYP_SetKey>
    }

    /* Set IV */
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8085 	beq.w	8003948 <CRYP_AES_Decrypt+0x21e>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6852      	ldr	r2, [r2, #4]
 8003854:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6892      	ldr	r2, [r2, #8]
 8003860:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68d2      	ldr	r2, [r2, #12]
 800386c:	621a      	str	r2, [r3, #32]
 800386e:	e06b      	b.n	8003948 <CRYP_AES_Decrypt+0x21e>
    }
  } /* if (DoKeyIVConfig == 1U) */
  else /* if (dokeyivconfig == 0U) */
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	2b04      	cmp	r3, #4
 8003876:	d167      	bne.n	8003948 <CRYP_AES_Decrypt+0x21e>
    {
      /*  Key preparation for ECB/CBC */
      if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	d05d      	beq.n	800393c <CRYP_AES_Decrypt+0x212>
      {
        if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003886:	2b00      	cmp	r3, #0
 8003888:	d149      	bne.n	800391e <CRYP_AES_Decrypt+0x1f4>
        {
          /* Set key preparation for decryption operating mode*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f023 0218 	bic.w	r2, r3, #24
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0208 	orr.w	r2, r2, #8
 800389c:	601a      	str	r2, [r3, #0]
          
          /*  Set the Key*/
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	4619      	mov	r1, r3
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f946 	bl	8003b36 <CRYP_SetKey>
          
          /* Enable CRYP */
          __HAL_CRYP_ENABLE(hcryp);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0201 	orr.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
          
          /* Wait for CCF flag to be raised */
          if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80038ba:	6839      	ldr	r1, [r7, #0]
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 fec7 	bl	8004650 <CRYP_WaitOnCCFlag>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d017      	beq.n	80038f8 <CRYP_AES_Decrypt+0x1ce>
          {
            /* Disable the CRYP peripheral clock */
            __HAL_CRYP_DISABLE(hcryp);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0201 	bic.w	r2, r2, #1
 80038d6:	601a      	str	r2, [r3, #0]
            
            /* Change state & error code*/
            hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038dc:	f043 0210 	orr.w	r2, r3, #16
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	655a      	str	r2, [r3, #84]	; 0x54
            hcryp->State = HAL_CRYP_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            /* Process unlocked */
            __HAL_UNLOCK(hcryp);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e062      	b.n	80039be <CRYP_AES_Decrypt+0x294>
          }
          /* Clear CCF Flag */
          __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003906:	601a      	str	r2, [r3, #0]
          
          /* Return to decryption operating mode(Mode 3)*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 0218 	bic.w	r2, r3, #24
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0210 	orr.w	r2, r2, #16
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	e014      	b.n	8003948 <CRYP_AES_Decrypt+0x21e>
        }
        else /*Mode 4 : decryption & Key preparation*/
        {
          /*  Set the Key*/
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	4619      	mov	r1, r3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f906 	bl	8003b36 <CRYP_SetKey>
          
          /* Set decryption & Key preparation operating mode*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0218 	orr.w	r2, r2, #24
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	e005      	b.n	8003948 <CRYP_AES_Decrypt+0x21e>
        }
      }
      else  /*Algorithm CTR */
      {
        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4619      	mov	r1, r3
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f8f7 	bl	8003b36 <CRYP_SetKey>
      }
    }
  }
 
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0201 	orr.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003962:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800396a:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 800396c:	e00a      	b.n	8003984 <CRYP_AES_Decrypt+0x25a>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 800396e:	6839      	ldr	r1, [r7, #0]
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f828 	bl	80039c6 <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397a:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003982:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800398a:	089b      	lsrs	r3, r3, #2
 800398c:	b29b      	uxth	r3, r3
 800398e:	89fa      	ldrh	r2, [r7, #14]
 8003990:	429a      	cmp	r2, r3
 8003992:	d207      	bcs.n	80039a4 <CRYP_AES_Decrypt+0x27a>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	b29b      	uxth	r3, r3
 800399e:	89ba      	ldrh	r2, [r7, #12]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d3e4      	bcc.n	800396e <CRYP_AES_Decrypt+0x244>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0201 	bic.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Return function status */
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b088      	sub	sp, #32
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]

  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t i;

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d8:	b29b      	uxth	r3, r3
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3301      	adds	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	441a      	add	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3301      	adds	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	441a      	add	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3301      	adds	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	441a      	add	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3301      	adds	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003a60:	6839      	ldr	r1, [r7, #0]
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fdf4 	bl	8004650 <CRYP_WaitOnCCFlag>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d018      	beq.n	8003aa0 <CRYP_AES_ProcessData+0xda>
  {
    /* Disable the CRYP peripheral clock */
    __HAL_CRYP_DISABLE(hcryp);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

    /* Change state */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a82:	f043 0210 	orr.w	r2, r3, #16
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	655a      	str	r2, [r3, #84]	; 0x54
    hcryp->State = HAL_CRYP_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /*Call registered error callback*/
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff fdb4 	bl	8003608 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aae:	601a      	str	r2, [r3, #0]

  /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	61fb      	str	r3, [r7, #28]
 8003ab4:	e00b      	b.n	8003ace <CRYP_AES_ProcessData+0x108>
  {
    temp[i] = hcryp->Instance->DOUTR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	3320      	adds	r3, #32
 8003ac2:	443b      	add	r3, r7
 8003ac4:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < 4U; i++)
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	3301      	adds	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d9f0      	bls.n	8003ab6 <CRYP_AES_ProcessData+0xf0>
  }
  i= 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8003ad8:	e01a      	b.n	8003b10 <CRYP_AES_ProcessData+0x14a>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	441a      	add	r2, r3
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	3320      	adds	r3, #32
 8003af0:	443b      	add	r3, r7
 8003af2:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8003af6:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3301      	adds	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    i++;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003b20:	3303      	adds	r3, #3
 8003b22:	089b      	lsrs	r3, r3, #2
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d202      	bcs.n	8003b2e <CRYP_AES_ProcessData+0x168>
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d9d5      	bls.n	8003ada <CRYP_AES_ProcessData+0x114>
  }
}
 8003b2e:	bf00      	nop
 8003b30:	3720      	adds	r7, #32
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <CRYP_SetKey>:
  * @note   If pKey is NULL, the Key registers are not written. This configuration
  *         occurs when the key is written out of HAL scope.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	6039      	str	r1, [r7, #0]
  if (hcryp->Init.pKey != NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d050      	beq.n	8003bea <CRYP_SetKey+0xb4>
  {
    switch (KeySize)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d034      	beq.n	8003bb8 <CRYP_SetKey+0x82>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b54:	d14b      	bne.n	8003bee <CRYP_SetKey+0xb8>
    {
      case CRYP_KEYSIZE_256B:
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	63da      	str	r2, [r3, #60]	; 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6852      	ldr	r2, [r2, #4]
 8003b6c:	639a      	str	r2, [r3, #56]	; 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6892      	ldr	r2, [r2, #8]
 8003b78:	635a      	str	r2, [r3, #52]	; 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68d2      	ldr	r2, [r2, #12]
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6912      	ldr	r2, [r2, #16]
 8003b90:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6952      	ldr	r2, [r2, #20]
 8003b9c:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6992      	ldr	r2, [r2, #24]
 8003ba8:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69d2      	ldr	r2, [r2, #28]
 8003bb4:	611a      	str	r2, [r3, #16]
        break;
 8003bb6:	e01b      	b.n	8003bf0 <CRYP_SetKey+0xba>
      case CRYP_KEYSIZE_128B:
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6852      	ldr	r2, [r2, #4]
 8003bce:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6892      	ldr	r2, [r2, #8]
 8003bda:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68d2      	ldr	r2, [r2, #12]
 8003be6:	611a      	str	r2, [r3, #16]

        break;
 8003be8:	e002      	b.n	8003bf0 <CRYP_SetKey+0xba>
      default:
        break;
    }
  }
 8003bea:	bf00      	nop
 8003bec:	e000      	b.n	8003bf0 <CRYP_SetKey+0xba>
        break;
 8003bee:	bf00      	nop
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr

08003bfa <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b08e      	sub	sp, #56	; 0x38
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
 8003c02:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003c0a:	089b      	lsrs	r3, r3, #2
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8003c10:	2301      	movs	r3, #1
 8003c12:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d118      	bne.n	8003c4e <CRYP_AESGCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d10a      	bne.n	8003c3a <CRYP_AESGCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8003c32:	441a      	add	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c38:	e00f      	b.n	8003c5a <CRYP_AESGCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003c46:	461a      	mov	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c4c:	e005      	b.n	8003c5a <CRYP_AESGCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003c54:	461a      	mov	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d16d      	bne.n	8003d3c <CRYP_AESGCM_Process+0x142>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	879a      	strh	r2, [r3, #60]	; 0x3c

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8003c74:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff ff5a 	bl	8003b36 <CRYP_SetKey>

    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691a      	ldr	r2, [r3, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6812      	ldr	r2, [r2, #0]
 8003c8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6852      	ldr	r2, [r2, #4]
 8003c98:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6892      	ldr	r2, [r2, #8]
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68d2      	ldr	r2, [r2, #12]
 8003cb0:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0201 	orr.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003cc2:	6839      	ldr	r1, [r7, #0]
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fcc3 	bl	8004650 <CRYP_WaitOnCCFlag>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00f      	beq.n	8003cf0 <CRYP_AESGCM_Process+0xf6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd4:	f043 0210 	orr.w	r2, r3, #16
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e128      	b.n	8003f42 <CRYP_AESGCM_Process+0x348>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cfe:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8003d00:	6839      	ldr	r1, [r7, #0]
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 face 	bl	80042a4 <CRYP_GCMCCM_SetHeaderPhase>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <CRYP_AESGCM_Process+0x118>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e117      	b.n	8003f42 <CRYP_AESGCM_Process+0x348>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2202      	movs	r2, #2
 8003d16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d2a:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d3a:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <CRYP_AESGCM_Process+0x15a>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 8003d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4e:	f023 0303 	bic.w	r3, r3, #3
 8003d52:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d54:	f7ff f97c 	bl	8003050 <HAL_GetTick>
 8003d58:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output Data */
  incount = hcryp->CrypInCount;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8003d6c:	e033      	b.n	8003dd6 <CRYP_AESGCM_Process+0x1dc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8003d6e:	6839      	ldr	r1, [r7, #0]
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff fe28 	bl	80039c6 <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7c:	d022      	beq.n	8003dc4 <CRYP_AESGCM_Process+0x1ca>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d7e:	f7ff f967 	bl	8003050 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d302      	bcc.n	8003d94 <CRYP_AESGCM_Process+0x19a>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d117      	bne.n	8003dc4 <CRYP_AESGCM_Process+0x1ca>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0201 	bic.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da8:	f043 0210 	orr.w	r2, r3, #16
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0be      	b.n	8003f42 <CRYP_AESGCM_Process+0x348>
      }
    }
    incount = hcryp->CrypInCount;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8003dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d203      	bcs.n	8003de6 <CRYP_AESGCM_Process+0x1ec>
 8003dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d3c3      	bcc.n	8003d6e <CRYP_AESGCM_Process+0x174>
  }

  if ((hcryp->Size % 16U) != 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 80a4 	beq.w	8003f40 <CRYP_AESGCM_Process+0x346>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003dfe:	091b      	lsrs	r3, r3, #4
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3301      	adds	r3, #1
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]

    /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0318 	and.w	r3, r3, #24
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <CRYP_AESGCM_Process+0x23a>
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	051a      	lsls	r2, r3, #20
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]
    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d105      	bne.n	8003e4a <CRYP_AESGCM_Process+0x250>
    {
      lastwordsize = (16U - npblb) / 4U;
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	f1c3 0310 	rsb	r3, r3, #16
 8003e44:	089b      	lsrs	r3, r3, #2
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e48:	e005      	b.n	8003e56 <CRYP_AESGCM_Process+0x25c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	f1c3 0310 	rsb	r3, r3, #16
 8003e50:	089b      	lsrs	r3, r3, #2
 8003e52:	3301      	adds	r3, #1
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /*  last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 8003e56:	2300      	movs	r3, #0
 8003e58:	633b      	str	r3, [r7, #48]	; 0x30
 8003e5a:	e014      	b.n	8003e86 <CRYP_AESGCM_Process+0x28c>
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	441a      	add	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3301      	adds	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (index = 0U; index < lastwordsize; index ++)
 8003e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e82:	3301      	adds	r3, #1
 8003e84:	633b      	str	r3, [r7, #48]	; 0x30
 8003e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d3e6      	bcc.n	8003e5c <CRYP_AESGCM_Process+0x262>
    }
    while (index < 4U)
 8003e8e:	e006      	b.n	8003e9e <CRYP_AESGCM_Process+0x2a4>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR  = 0U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2200      	movs	r2, #0
 8003e96:	609a      	str	r2, [r3, #8]
      index++;
 8003e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	633b      	str	r3, [r7, #48]	; 0x30
    while (index < 4U)
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d9f5      	bls.n	8003e90 <CRYP_AESGCM_Process+0x296>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003ea4:	6839      	ldr	r1, [r7, #0]
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 fbd2 	bl	8004650 <CRYP_WaitOnCCFlag>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <CRYP_AESGCM_Process+0x2ce>
    {
      hcryp->State = HAL_CRYP_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff fba0 	bl	8003608 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ed6:	601a      	str	r2, [r3, #0]

    /*Read the output block from the output FIFO */
    for (index = 0U; index < 4U; index++)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	633b      	str	r3, [r7, #48]	; 0x30
 8003edc:	e00b      	b.n	8003ef6 <CRYP_AESGCM_Process+0x2fc>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[index] = hcryp->Instance->DOUTR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	3338      	adds	r3, #56	; 0x38
 8003eea:	443b      	add	r3, r7
 8003eec:	f843 2c30 	str.w	r2, [r3, #-48]
    for (index = 0U; index < 4U; index++)
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d9f0      	bls.n	8003ede <CRYP_AESGCM_Process+0x2e4>
    }
    for (index = 0U; index < lastwordsize; index++)
 8003efc:	2300      	movs	r3, #0
 8003efe:	633b      	str	r3, [r7, #48]	; 0x30
 8003f00:	e01a      	b.n	8003f38 <CRYP_AESGCM_Process+0x33e>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	441a      	add	r2, r3
 8003f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	3338      	adds	r3, #56	; 0x38
 8003f18:	443b      	add	r3, r7
 8003f1a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8003f1e:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3301      	adds	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (index = 0U; index < lastwordsize; index++)
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	3301      	adds	r3, #1
 8003f36:	633b      	str	r3, [r7, #48]	; 0x30
 8003f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d3e0      	bcc.n	8003f02 <CRYP_AESGCM_Process+0x308>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3738      	adds	r7, #56	; 0x38
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b08e      	sub	sp, #56	; 0x38
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003f5a:	089b      	lsrs	r3, r3, #2
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t npblb;
  uint32_t lastwordsize;
  uint32_t temp[4] ;  /* Temporary CrypOutBuff */
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8003f60:	2301      	movs	r3, #1
 8003f62:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d118      	bne.n	8003f9e <CRYP_AESCCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d10a      	bne.n	8003f8a <CRYP_AESCCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8003f82:	441a      	add	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f88:	e00f      	b.n	8003faa <CRYP_AESCCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003f96:	461a      	mov	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f9c:	e005      	b.n	8003faa <CRYP_AESCCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d16d      	bne.n	800408c <CRYP_AESCCM_Process+0x142>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	879a      	strh	r2, [r3, #60]	; 0x3c

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8003fc4:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f7ff fdb2 	bl	8003b36 <CRYP_SetKey>

    /* Set the initialization vector (IV) with B0 */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1a      	ldr	r2, [r3, #32]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1a      	ldr	r2, [r3, #32]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6852      	ldr	r2, [r2, #4]
 8003fe8:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1a      	ldr	r2, [r3, #32]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6892      	ldr	r2, [r2, #8]
 8003ff4:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1a      	ldr	r2, [r3, #32]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68d2      	ldr	r2, [r2, #12]
 8004000:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0201 	orr.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8004012:	6839      	ldr	r1, [r7, #0]
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fb1b 	bl	8004650 <CRYP_WaitOnCCFlag>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00f      	beq.n	8004040 <CRYP_AESCCM_Process+0xf6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004024:	f043 0210 	orr.w	r2, r3, #16
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e12d      	b.n	800429c <CRYP_AESCCM_Process+0x352>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800404e:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8004050:	6839      	ldr	r1, [r7, #0]
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f926 	bl	80042a4 <CRYP_GCMCCM_SetHeaderPhase>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <CRYP_AESCCM_Process+0x118>
    {
      return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e11c      	b.n	800429c <CRYP_AESCCM_Process+0x352>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2202      	movs	r2, #2
 8004066:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800407a:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800408a:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <CRYP_AESCCM_Process+0x15a>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 800409c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409e:	f023 0303 	bic.w	r3, r3, #3
 80040a2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80040a4:	f7fe ffd4 	bl	8003050 <HAL_GetTick>
 80040a8:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output data */
  incount = hcryp->CrypInCount;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 80040bc:	e033      	b.n	8004126 <CRYP_AESCCM_Process+0x1dc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80040be:	6839      	ldr	r1, [r7, #0]
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff fc80 	bl	80039c6 <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d022      	beq.n	8004114 <CRYP_AESCCM_Process+0x1ca>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) ||(Timeout == 0U))
 80040ce:	f7fe ffbf 	bl	8003050 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <CRYP_AESCCM_Process+0x19a>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d117      	bne.n	8004114 <CRYP_AESCCM_Process+0x1ca>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f8:	f043 0210 	orr.w	r2, r3, #16
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0c3      	b.n	800429c <CRYP_AESCCM_Process+0x352>
      }
    }
    incount = hcryp->CrypInCount;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004118:	b29b      	uxth	r3, r3
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004122:	b29b      	uxth	r3, r3
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8004126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412a:	429a      	cmp	r2, r3
 800412c:	d203      	bcs.n	8004136 <CRYP_AESCCM_Process+0x1ec>
 800412e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004132:	429a      	cmp	r2, r3
 8004134:	d3c3      	bcc.n	80040be <CRYP_AESCCM_Process+0x174>
  }

  if ((hcryp->Size % 16U) != 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800413c:	f003 030f 	and.w	r3, r3, #15
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 80a9 	beq.w	800429a <CRYP_AESCCM_Process+0x350>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800414e:	091b      	lsrs	r3, r3, #4
 8004150:	b29b      	uxth	r3, r3
 8004152:	3301      	adds	r3, #1
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	61bb      	str	r3, [r7, #24]

    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0318 	and.w	r3, r3, #24
 800416a:	2b10      	cmp	r3, #16
 800416c:	d10a      	bne.n	8004184 <CRYP_AESCCM_Process+0x23a>
    {
      /* Set Npblb in case of AES CCM payload decryption to get right tag  */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	051a      	lsls	r2, r3, #20
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	601a      	str	r2, [r3, #0]

    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d105      	bne.n	800419a <CRYP_AESCCM_Process+0x250>
    {
      lastwordsize = (16U - npblb) / 4U;
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f1c3 0310 	rsb	r3, r3, #16
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004198:	e005      	b.n	80041a6 <CRYP_AESCCM_Process+0x25c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	f1c3 0310 	rsb	r3, r3, #16
 80041a0:	089b      	lsrs	r3, r3, #2
 80041a2:	3301      	adds	r3, #1
 80041a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Write the last input block in the IN FIFO */
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 80041a6:	2300      	movs	r3, #0
 80041a8:	633b      	str	r3, [r7, #48]	; 0x30
 80041aa:	e014      	b.n	80041d6 <CRYP_AESCCM_Process+0x28c>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	441a      	add	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3301      	adds	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	3301      	adds	r3, #1
 80041d4:	633b      	str	r3, [r7, #48]	; 0x30
 80041d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041da:	429a      	cmp	r2, r3
 80041dc:	d3e6      	bcc.n	80041ac <CRYP_AESCCM_Process+0x262>
    }

    /* Pad the data with zeros to have a complete block */
    while (loopcounter < 4U)
 80041de:	e006      	b.n	80041ee <CRYP_AESCCM_Process+0x2a4>
    {
      hcryp->Instance->DINR  = 0U;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2200      	movs	r2, #0
 80041e6:	609a      	str	r2, [r3, #8]
      loopcounter++;
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	3301      	adds	r3, #1
 80041ec:	633b      	str	r3, [r7, #48]	; 0x30
    while (loopcounter < 4U)
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d9f5      	bls.n	80041e0 <CRYP_AESCCM_Process+0x296>
    }
    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80041f4:	6839      	ldr	r1, [r7, #0]
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 fa2a 	bl	8004650 <CRYP_WaitOnCCFlag>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00f      	beq.n	8004222 <CRYP_AESCCM_Process+0x2d8>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f043 0210 	orr.w	r2, r3, #16
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e03c      	b.n	800429c <CRYP_AESCCM_Process+0x352>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004230:	601a      	str	r2, [r3, #0]

    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8004232:	2300      	movs	r3, #0
 8004234:	633b      	str	r3, [r7, #48]	; 0x30
 8004236:	e00b      	b.n	8004250 <CRYP_AESCCM_Process+0x306>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[loopcounter] = hcryp->Instance->DOUTR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	3338      	adds	r3, #56	; 0x38
 8004244:	443b      	add	r3, r7
 8004246:	f843 2c30 	str.w	r2, [r3, #-48]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	3301      	adds	r3, #1
 800424e:	633b      	str	r3, [r7, #48]	; 0x30
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	2b03      	cmp	r3, #3
 8004254:	d9f0      	bls.n	8004238 <CRYP_AESCCM_Process+0x2ee>
    }
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 8004256:	2300      	movs	r3, #0
 8004258:	633b      	str	r3, [r7, #48]	; 0x30
 800425a:	e01a      	b.n	8004292 <CRYP_AESCCM_Process+0x348>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004266:	b29b      	uxth	r3, r3
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	441a      	add	r2, r3
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	3338      	adds	r3, #56	; 0x38
 8004272:	443b      	add	r3, r7
 8004274:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8004278:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004280:	b29b      	uxth	r3, r3
 8004282:	3301      	adds	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	3301      	adds	r3, #1
 8004290:	633b      	str	r3, [r7, #48]	; 0x30
 8004292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004296:	429a      	cmp	r2, r3
 8004298:	d3e0      	bcc.n	800425c <CRYP_AESCCM_Process+0x312>
    }
  }

  /* Return function status */
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3738      	adds	r7, #56	; 0x38
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80042a4:	b5b0      	push	{r4, r5, r7, lr}
 80042a6:	b092      	sub	sp, #72	; 0x48
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 80042ae:	4b8c      	ldr	r3, [pc, #560]	; (80044e0 <CRYP_GCMCCM_SetHeaderPhase+0x23c>)
 80042b0:	f107 040c 	add.w	r4, r7, #12
 80042b4:	461d      	mov	r5, r3
 80042b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80042c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                       0x0U, 0x0000FF00U, 0x0000FFFFU, 0xFF00FFFFU,  /* 16-bit data type */
                       0x0U, 0x000000FFU, 0x0000FFFFU, 0x00FFFFFFU}; /*  8-bit data type */

  /***************************** Header phase for GCM/GMAC or CCM *********************************/
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d104      	bne.n	80042d8 <CRYP_GCMCCM_SetHeaderPhase+0x34>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	643b      	str	r3, [r7, #64]	; 0x40
 80042d6:	e002      	b.n	80042de <CRYP_GCMCCM_SetHeaderPhase+0x3a>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	643b      	str	r3, [r7, #64]	; 0x40
  }

  if ((size_in_bytes != 0U))
 80042de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8192 	beq.w	800460a <CRYP_GCMCCM_SetHeaderPhase+0x366>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042f8:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 800430a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	2b00      	cmp	r3, #0
 8004312:	d17a      	bne.n	800440a <CRYP_GCMCCM_SetHeaderPhase+0x166>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8004314:	2300      	movs	r3, #0
 8004316:	647b      	str	r3, [r7, #68]	; 0x44
 8004318:	e071      	b.n	80043fe <CRYP_GCMCCM_SetHeaderPhase+0x15a>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004322:	b29b      	uxth	r3, r3
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	441a      	add	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004334:	b29b      	uxth	r3, r3
 8004336:	3301      	adds	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004346:	b29b      	uxth	r3, r3
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	441a      	add	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6812      	ldr	r2, [r2, #0]
 8004352:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004358:	b29b      	uxth	r3, r3
 800435a:	3301      	adds	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800436a:	b29b      	uxth	r3, r3
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	441a      	add	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800437c:	b29b      	uxth	r3, r3
 800437e:	3301      	adds	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699a      	ldr	r2, [r3, #24]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800438e:	b29b      	uxth	r3, r3
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	441a      	add	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3301      	adds	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80043aa:	6839      	ldr	r1, [r7, #0]
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f94f 	bl	8004650 <CRYP_WaitOnCCFlag>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d017      	beq.n	80043e8 <CRYP_GCMCCM_SetHeaderPhase+0x144>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0201 	bic.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	f043 0210 	orr.w	r2, r3, #16
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e12e      	b.n	8004646 <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043f6:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 80043f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043fa:	3304      	adds	r3, #4
 80043fc:	647b      	str	r3, [r7, #68]	; 0x44
 80043fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004400:	089b      	lsrs	r3, r3, #2
 8004402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004404:	429a      	cmp	r2, r3
 8004406:	d388      	bcc.n	800431a <CRYP_GCMCCM_SetHeaderPhase+0x76>
 8004408:	e11c      	b.n	8004644 <CRYP_GCMCCM_SetHeaderPhase+0x3a0>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 800440a:	2300      	movs	r3, #0
 800440c:	647b      	str	r3, [r7, #68]	; 0x44
 800440e:	e074      	b.n	80044fa <CRYP_GCMCCM_SetHeaderPhase+0x256>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699a      	ldr	r2, [r3, #24]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004418:	b29b      	uxth	r3, r3
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	441a      	add	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800442a:	b29b      	uxth	r3, r3
 800442c:	3301      	adds	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699a      	ldr	r2, [r3, #24]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800443c:	b29b      	uxth	r3, r3
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	441a      	add	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800444e:	b29b      	uxth	r3, r3
 8004450:	3301      	adds	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699a      	ldr	r2, [r3, #24]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004460:	b29b      	uxth	r3, r3
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	441a      	add	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004472:	b29b      	uxth	r3, r3
 8004474:	3301      	adds	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699a      	ldr	r2, [r3, #24]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004484:	b29b      	uxth	r3, r3
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	441a      	add	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004496:	b29b      	uxth	r3, r3
 8004498:	3301      	adds	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80044a0:	6839      	ldr	r1, [r7, #0]
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f8d4 	bl	8004650 <CRYP_WaitOnCCFlag>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d01a      	beq.n	80044e4 <CRYP_GCMCCM_SetHeaderPhase+0x240>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0201 	bic.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c2:	f043 0210 	orr.w	r2, r3, #16
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e0b3      	b.n	8004646 <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
 80044de:	bf00      	nop
 80044e0:	0800abcc 	.word	0x0800abcc
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044f2:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 80044f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f6:	3304      	adds	r3, #4
 80044f8:	647b      	str	r3, [r7, #68]	; 0x44
 80044fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004502:	429a      	cmp	r2, r3
 8004504:	d384      	bcc.n	8004410 <CRYP_GCMCCM_SetHeaderPhase+0x16c>
      }
      /* Write last complete words */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8004506:	2300      	movs	r3, #0
 8004508:	647b      	str	r3, [r7, #68]	; 0x44
 800450a:	e014      	b.n	8004536 <CRYP_GCMCCM_SetHeaderPhase+0x292>
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699a      	ldr	r2, [r3, #24]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004514:	b29b      	uxth	r3, r3
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	441a      	add	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004526:	b29b      	uxth	r3, r3
 8004528:	3301      	adds	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	879a      	strh	r2, [r3, #60]	; 0x3c
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8004530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004532:	3301      	adds	r3, #1
 8004534:	647b      	str	r3, [r7, #68]	; 0x44
 8004536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004538:	089b      	lsrs	r3, r3, #2
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004540:	429a      	cmp	r2, r3
 8004542:	d3e3      	bcc.n	800450c <CRYP_GCMCCM_SetHeaderPhase+0x268>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 8004544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10b      	bne.n	8004566 <CRYP_GCMCCM_SetHeaderPhase+0x2c2>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 800454e:	e006      	b.n	800455e <CRYP_GCMCCM_SetHeaderPhase+0x2ba>
        {
          hcryp->Instance->DINR = 0x0U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2200      	movs	r2, #0
 8004556:	609a      	str	r2, [r3, #8]
          loopcounter++;
 8004558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800455a:	3301      	adds	r3, #1
 800455c:	647b      	str	r3, [r7, #68]	; 0x44
        while (loopcounter < 4U)
 800455e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004560:	2b03      	cmp	r3, #3
 8004562:	d9f5      	bls.n	8004550 <CRYP_GCMCCM_SetHeaderPhase+0x2ac>
 8004564:	e029      	b.n	80045ba <CRYP_GCMCCM_SetHeaderPhase+0x316>
        }
      }
      else
      {
         /* Enter last bytes, padded with zeros */
         tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800456e:	b29b      	uxth	r3, r3
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	63fb      	str	r3, [r7, #60]	; 0x3c
         tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	005a      	lsls	r2, r3, #1
 800457e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	3348      	adds	r3, #72	; 0x48
 800458a:	443b      	add	r3, r7
 800458c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004590:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004592:	4013      	ands	r3, r2
 8004594:	63fb      	str	r3, [r7, #60]	; 0x3c
         hcryp->Instance->DINR = tmp;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800459c:	609a      	str	r2, [r3, #8]
         loopcounter++;
 800459e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a0:	3301      	adds	r3, #1
 80045a2:	647b      	str	r3, [r7, #68]	; 0x44
         /* Pad the data with zeros to have a complete block */
         while (loopcounter < 4U)
 80045a4:	e006      	b.n	80045b4 <CRYP_GCMCCM_SetHeaderPhase+0x310>
         {
           hcryp->Instance->DINR = 0x0U;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2200      	movs	r2, #0
 80045ac:	609a      	str	r2, [r3, #8]
           loopcounter++;
 80045ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b0:	3301      	adds	r3, #1
 80045b2:	647b      	str	r3, [r7, #68]	; 0x44
         while (loopcounter < 4U)
 80045b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d9f5      	bls.n	80045a6 <CRYP_GCMCCM_SetHeaderPhase+0x302>
         }
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80045ba:	6839      	ldr	r1, [r7, #0]
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f847 	bl	8004650 <CRYP_WaitOnCCFlag>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d017      	beq.n	80045f8 <CRYP_GCMCCM_SetHeaderPhase+0x354>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045dc:	f043 0210 	orr.w	r2, r3, #16
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e026      	b.n	8004646 <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e01c      	b.n	8004644 <CRYP_GCMCCM_SetHeaderPhase+0x3a0>
    }
  }
  else
  {
    /*Workaround 1: only AES, before re-enabling the peripheral, datatype can be configured.*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f023 0106 	bic.w	r1, r3, #6
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	601a      	str	r2, [r3, #0]

    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004632:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]
  }
  /* Return function status */
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3748      	adds	r7, #72	; 0x48
 800464a:	46bd      	mov	sp, r7
 800464c:	bdb0      	pop	{r4, r5, r7, pc}
 800464e:	bf00      	nop

08004650 <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 800465a:	f7fe fcf9 	bl	8003050 <HAL_GetTick>
 800465e:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8004660:	e010      	b.n	8004684 <CRYP_WaitOnCCFlag+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004668:	d00c      	beq.n	8004684 <CRYP_WaitOnCCFlag+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800466a:	f7fe fcf1 	bl	8003050 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d302      	bcc.n	8004680 <CRYP_WaitOnCCFlag+0x30>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <CRYP_WaitOnCCFlag+0x34>
      {
        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e007      	b.n	8004694 <CRYP_WaitOnCCFlag+0x44>
  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0e7      	beq.n	8004662 <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e08e      	b.n	80047cc <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	4b47      	ldr	r3, [pc, #284]	; (80047d4 <HAL_DMA_Init+0x138>)
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d80f      	bhi.n	80046da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	4b45      	ldr	r3, [pc, #276]	; (80047d8 <HAL_DMA_Init+0x13c>)
 80046c2:	4413      	add	r3, r2
 80046c4:	4a45      	ldr	r2, [pc, #276]	; (80047dc <HAL_DMA_Init+0x140>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	009a      	lsls	r2, r3, #2
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a42      	ldr	r2, [pc, #264]	; (80047e0 <HAL_DMA_Init+0x144>)
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40
 80046d8:	e00e      	b.n	80046f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	4b40      	ldr	r3, [pc, #256]	; (80047e4 <HAL_DMA_Init+0x148>)
 80046e2:	4413      	add	r3, r2
 80046e4:	4a3d      	ldr	r2, [pc, #244]	; (80047dc <HAL_DMA_Init+0x140>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	091b      	lsrs	r3, r3, #4
 80046ec:	009a      	lsls	r2, r3, #2
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a3c      	ldr	r2, [pc, #240]	; (80047e8 <HAL_DMA_Init+0x14c>)
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800470e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004712:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6819      	ldr	r1, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689a      	ldr	r2, [r3, #8]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	431a      	orrs	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fb52 	bl	8004df4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004758:	d102      	bne.n	8004760 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685a      	ldr	r2, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004768:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800476c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004776:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d010      	beq.n	80047a2 <HAL_DMA_Init+0x106>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b04      	cmp	r3, #4
 8004786:	d80c      	bhi.n	80047a2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fb7b 	bl	8004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800479e:	605a      	str	r2, [r3, #4]
 80047a0:	e008      	b.n	80047b4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40020407 	.word	0x40020407
 80047d8:	bffdfff8 	.word	0xbffdfff8
 80047dc:	cccccccd 	.word	0xcccccccd
 80047e0:	40020000 	.word	0x40020000
 80047e4:	bffdfbf8 	.word	0xbffdfbf8
 80047e8:	40020400 	.word	0x40020400

080047ec <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e07b      	b.n	80048f6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0201 	bic.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	461a      	mov	r2, r3
 8004814:	4b3a      	ldr	r3, [pc, #232]	; (8004900 <HAL_DMA_DeInit+0x114>)
 8004816:	429a      	cmp	r2, r3
 8004818:	d80f      	bhi.n	800483a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	4b38      	ldr	r3, [pc, #224]	; (8004904 <HAL_DMA_DeInit+0x118>)
 8004822:	4413      	add	r3, r2
 8004824:	4a38      	ldr	r2, [pc, #224]	; (8004908 <HAL_DMA_DeInit+0x11c>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	009a      	lsls	r2, r3, #2
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a35      	ldr	r2, [pc, #212]	; (800490c <HAL_DMA_DeInit+0x120>)
 8004836:	641a      	str	r2, [r3, #64]	; 0x40
 8004838:	e00e      	b.n	8004858 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	461a      	mov	r2, r3
 8004840:	4b33      	ldr	r3, [pc, #204]	; (8004910 <HAL_DMA_DeInit+0x124>)
 8004842:	4413      	add	r3, r2
 8004844:	4a30      	ldr	r2, [pc, #192]	; (8004908 <HAL_DMA_DeInit+0x11c>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	009a      	lsls	r2, r3, #2
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a2f      	ldr	r2, [pc, #188]	; (8004914 <HAL_DMA_DeInit+0x128>)
 8004856:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004864:	f003 021c 	and.w	r2, r3, #28
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	2101      	movs	r1, #1
 800486e:	fa01 f202 	lsl.w	r2, r1, r2
 8004872:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 fabd 	bl	8004df4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800488a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00f      	beq.n	80048b4 <HAL_DMA_DeInit+0xc8>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b04      	cmp	r3, #4
 800489a:	d80b      	bhi.n	80048b4 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 faf1 	bl	8004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048b2:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40020407 	.word	0x40020407
 8004904:	bffdfff8 	.word	0xbffdfff8
 8004908:	cccccccd 	.word	0xcccccccd
 800490c:	40020000 	.word	0x40020000
 8004910:	bffdfbf8 	.word	0xbffdfbf8
 8004914:	40020400 	.word	0x40020400

08004918 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
 8004924:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <HAL_DMA_Start_IT+0x20>
 8004934:	2302      	movs	r3, #2
 8004936:	e069      	b.n	8004a0c <HAL_DMA_Start_IT+0xf4>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	d155      	bne.n	80049f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0201 	bic.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 fa02 	bl	8004d7a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	2b00      	cmp	r3, #0
 800497c:	d008      	beq.n	8004990 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 020e 	orr.w	r2, r2, #14
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	e00f      	b.n	80049b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0204 	bic.w	r2, r2, #4
 800499e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 020a 	orr.w	r2, r2, #10
 80049ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d007      	beq.n	80049ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d007      	beq.n	80049e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f042 0201 	orr.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e008      	b.n	8004a0a <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2280      	movs	r2, #128	; 0x80
 80049fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e04f      	b.n	8004ac6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d008      	beq.n	8004a44 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2204      	movs	r2, #4
 8004a36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e040      	b.n	8004ac6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 020e 	bic.w	r2, r2, #14
 8004a52:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0201 	bic.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a78:	f003 021c 	and.w	r2, r3, #28
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	2101      	movs	r1, #1
 8004a82:	fa01 f202 	lsl.w	r2, r1, r2
 8004a86:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a90:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00c      	beq.n	8004ab4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aa8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ab2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	4770      	bx	lr

08004ad0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d005      	beq.n	8004af4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2204      	movs	r2, #4
 8004aec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
 8004af2:	e047      	b.n	8004b84 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 020e 	bic.w	r2, r2, #14
 8004b02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b28:	f003 021c 	and.w	r2, r3, #28
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	2101      	movs	r1, #1
 8004b32:	fa01 f202 	lsl.w	r2, r1, r2
 8004b36:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b40:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00c      	beq.n	8004b64 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b58:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b62:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	4798      	blx	r3
    }
  }
  return status;
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bac:	f003 031c 	and.w	r3, r3, #28
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	409a      	lsls	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d027      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x7c>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d022      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d107      	bne.n	8004be4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0204 	bic.w	r2, r2, #4
 8004be2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be8:	f003 021c 	and.w	r2, r3, #28
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	2104      	movs	r1, #4
 8004bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8004bf6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 8081 	beq.w	8004d04 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004c0a:	e07b      	b.n	8004d04 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c10:	f003 031c 	and.w	r3, r3, #28
 8004c14:	2202      	movs	r2, #2
 8004c16:	409a      	lsls	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d03d      	beq.n	8004c9c <HAL_DMA_IRQHandler+0x10c>
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d038      	beq.n	8004c9c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0320 	and.w	r3, r3, #32
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10b      	bne.n	8004c50 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 020a 	bic.w	r2, r2, #10
 8004c46:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	4b2e      	ldr	r3, [pc, #184]	; (8004d10 <HAL_DMA_IRQHandler+0x180>)
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d909      	bls.n	8004c70 <HAL_DMA_IRQHandler+0xe0>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c60:	f003 031c 	and.w	r3, r3, #28
 8004c64:	4a2b      	ldr	r2, [pc, #172]	; (8004d14 <HAL_DMA_IRQHandler+0x184>)
 8004c66:	2102      	movs	r1, #2
 8004c68:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6c:	6053      	str	r3, [r2, #4]
 8004c6e:	e008      	b.n	8004c82 <HAL_DMA_IRQHandler+0xf2>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c74:	f003 031c 	and.w	r3, r3, #28
 8004c78:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <HAL_DMA_IRQHandler+0x188>)
 8004c7a:	2102      	movs	r1, #2
 8004c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c80:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d038      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004c9a:	e033      	b.n	8004d04 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca0:	f003 031c 	and.w	r3, r3, #28
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d02a      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x176>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d025      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 020e 	bic.w	r2, r2, #14
 8004cc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cce:	f003 021c 	and.w	r2, r3, #28
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8004cdc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop
}
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40020080 	.word	0x40020080
 8004d14:	40020400 	.word	0x40020400
 8004d18:	40020000 	.word	0x40020000

08004d1c <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d103      	bne.n	8004d38 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	72fb      	strb	r3, [r7, #11]
    return status;
 8004d34:	7afb      	ldrb	r3, [r7, #11]
 8004d36:	e01b      	b.n	8004d70 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	f003 0310 	and.w	r3, r3, #16
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00d      	beq.n	8004d66 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d004      	beq.n	8004d5e <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e003      	b.n	8004d66 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d64:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	601a      	str	r2, [r3, #0]

  return status;
 8004d6e:	7afb      	ldrb	r3, [r7, #11]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr

08004d7a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	60f8      	str	r0, [r7, #12]
 8004d82:	60b9      	str	r1, [r7, #8]
 8004d84:	607a      	str	r2, [r7, #4]
 8004d86:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d90:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d004      	beq.n	8004da4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004da2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da8:	f003 021c 	and.w	r2, r3, #28
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	2101      	movs	r1, #1
 8004db2:	fa01 f202 	lsl.w	r2, r1, r2
 8004db6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d108      	bne.n	8004dda <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004dd8:	e007      	b.n	8004dea <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	60da      	str	r2, [r3, #12]
}
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr

08004df4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	4b1c      	ldr	r3, [pc, #112]	; (8004e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d813      	bhi.n	8004e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0c:	089b      	lsrs	r3, r3, #2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e14:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	3b08      	subs	r3, #8
 8004e24:	4a14      	ldr	r2, [pc, #80]	; (8004e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	091b      	lsrs	r3, r3, #4
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e011      	b.n	8004e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e34:	089b      	lsrs	r3, r3, #2
 8004e36:	009a      	lsls	r2, r3, #2
 8004e38:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004e3a:	4413      	add	r3, r2
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	3b08      	subs	r3, #8
 8004e48:	4a0b      	ldr	r2, [pc, #44]	; (8004e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4e:	091b      	lsrs	r3, r3, #4
 8004e50:	3307      	adds	r3, #7
 8004e52:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a0a      	ldr	r2, [pc, #40]	; (8004e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004e58:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f003 031f 	and.w	r3, r3, #31
 8004e60:	2201      	movs	r2, #1
 8004e62:	409a      	lsls	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40020407 	.word	0x40020407
 8004e78:	cccccccd 	.word	0xcccccccd
 8004e7c:	4002081c 	.word	0x4002081c
 8004e80:	40020880 	.word	0x40020880

08004e84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e94:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a08      	ldr	r2, [pc, #32]	; (8004ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ea8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	409a      	lsls	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr
 8004ec4:	1000823f 	.word	0x1000823f
 8004ec8:	40020940 	.word	0x40020940

08004ecc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004eda:	e140      	b.n	800515e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee8:	4013      	ands	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 8132 	beq.w	8005158 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f003 0303 	and.w	r3, r3, #3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d005      	beq.n	8004f0c <HAL_GPIO_Init+0x40>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f003 0303 	and.w	r3, r3, #3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d130      	bne.n	8004f6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	2203      	movs	r2, #3
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4013      	ands	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f42:	2201      	movs	r2, #1
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	091b      	lsrs	r3, r3, #4
 8004f58:	f003 0201 	and.w	r2, r3, #1
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d017      	beq.n	8004faa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	2203      	movs	r2, #3
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d123      	bne.n	8004ffe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	08da      	lsrs	r2, r3, #3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	3208      	adds	r2, #8
 8004fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	220f      	movs	r2, #15
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	08da      	lsrs	r2, r3, #3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3208      	adds	r2, #8
 8004ff8:	6939      	ldr	r1, [r7, #16]
 8004ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	2203      	movs	r2, #3
 800500a:	fa02 f303 	lsl.w	r3, r2, r3
 800500e:	43db      	mvns	r3, r3
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4013      	ands	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f003 0203 	and.w	r2, r3, #3
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 808c 	beq.w	8005158 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005040:	4a4e      	ldr	r2, [pc, #312]	; (800517c <HAL_GPIO_Init+0x2b0>)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	089b      	lsrs	r3, r3, #2
 8005046:	3302      	adds	r3, #2
 8005048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800504c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f003 0303 	and.w	r3, r3, #3
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	2207      	movs	r2, #7
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	43db      	mvns	r3, r3
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4013      	ands	r3, r2
 8005062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800506a:	d00d      	beq.n	8005088 <HAL_GPIO_Init+0x1bc>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a44      	ldr	r2, [pc, #272]	; (8005180 <HAL_GPIO_Init+0x2b4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d007      	beq.n	8005084 <HAL_GPIO_Init+0x1b8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a43      	ldr	r2, [pc, #268]	; (8005184 <HAL_GPIO_Init+0x2b8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d101      	bne.n	8005080 <HAL_GPIO_Init+0x1b4>
 800507c:	2302      	movs	r3, #2
 800507e:	e004      	b.n	800508a <HAL_GPIO_Init+0x1be>
 8005080:	2307      	movs	r3, #7
 8005082:	e002      	b.n	800508a <HAL_GPIO_Init+0x1be>
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <HAL_GPIO_Init+0x1be>
 8005088:	2300      	movs	r3, #0
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	f002 0203 	and.w	r2, r2, #3
 8005090:	0092      	lsls	r2, r2, #2
 8005092:	4093      	lsls	r3, r2
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800509a:	4938      	ldr	r1, [pc, #224]	; (800517c <HAL_GPIO_Init+0x2b0>)
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	089b      	lsrs	r3, r3, #2
 80050a0:	3302      	adds	r3, #2
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050a8:	4b37      	ldr	r3, [pc, #220]	; (8005188 <HAL_GPIO_Init+0x2bc>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4013      	ands	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80050cc:	4a2e      	ldr	r2, [pc, #184]	; (8005188 <HAL_GPIO_Init+0x2bc>)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80050d2:	4b2d      	ldr	r3, [pc, #180]	; (8005188 <HAL_GPIO_Init+0x2bc>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	43db      	mvns	r3, r3
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4013      	ands	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050f6:	4a24      	ldr	r2, [pc, #144]	; (8005188 <HAL_GPIO_Init+0x2bc>)
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80050fc:	4b22      	ldr	r3, [pc, #136]	; (8005188 <HAL_GPIO_Init+0x2bc>)
 80050fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005102:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	43db      	mvns	r3, r3
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4013      	ands	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8005122:	4a19      	ldr	r2, [pc, #100]	; (8005188 <HAL_GPIO_Init+0x2bc>)
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800512a:	4b17      	ldr	r3, [pc, #92]	; (8005188 <HAL_GPIO_Init+0x2bc>)
 800512c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005130:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	43db      	mvns	r3, r3
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4013      	ands	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005150:	4a0d      	ldr	r2, [pc, #52]	; (8005188 <HAL_GPIO_Init+0x2bc>)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	3301      	adds	r3, #1
 800515c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	fa22 f303 	lsr.w	r3, r2, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	f47f aeb7 	bne.w	8004edc <HAL_GPIO_Init+0x10>
  }
}
 800516e:	bf00      	nop
 8005170:	bf00      	nop
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40010000 	.word	0x40010000
 8005180:	48000400 	.word	0x48000400
 8005184:	48000800 	.word	0x48000800
 8005188:	58000800 	.word	0x58000800

0800518c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800519a:	e0af      	b.n	80052fc <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800519c:	2201      	movs	r2, #1
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	fa02 f303 	lsl.w	r3, r2, r3
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	4013      	ands	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 80a2 	beq.w	80052f6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80051b2:	4a59      	ldr	r2, [pc, #356]	; (8005318 <HAL_GPIO_DeInit+0x18c>)
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	089b      	lsrs	r3, r3, #2
 80051b8:	3302      	adds	r3, #2
 80051ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051be:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	2207      	movs	r2, #7
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4013      	ands	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80051da:	d00d      	beq.n	80051f8 <HAL_GPIO_DeInit+0x6c>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a4f      	ldr	r2, [pc, #316]	; (800531c <HAL_GPIO_DeInit+0x190>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d007      	beq.n	80051f4 <HAL_GPIO_DeInit+0x68>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a4e      	ldr	r2, [pc, #312]	; (8005320 <HAL_GPIO_DeInit+0x194>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d101      	bne.n	80051f0 <HAL_GPIO_DeInit+0x64>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e004      	b.n	80051fa <HAL_GPIO_DeInit+0x6e>
 80051f0:	2307      	movs	r3, #7
 80051f2:	e002      	b.n	80051fa <HAL_GPIO_DeInit+0x6e>
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <HAL_GPIO_DeInit+0x6e>
 80051f8:	2300      	movs	r3, #0
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	f002 0203 	and.w	r2, r2, #3
 8005200:	0092      	lsls	r2, r2, #2
 8005202:	4093      	lsls	r3, r2
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	429a      	cmp	r2, r3
 8005208:	d136      	bne.n	8005278 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800520a:	4b46      	ldr	r3, [pc, #280]	; (8005324 <HAL_GPIO_DeInit+0x198>)
 800520c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	43db      	mvns	r3, r3
 8005214:	4943      	ldr	r1, [pc, #268]	; (8005324 <HAL_GPIO_DeInit+0x198>)
 8005216:	4013      	ands	r3, r2
 8005218:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800521c:	4b41      	ldr	r3, [pc, #260]	; (8005324 <HAL_GPIO_DeInit+0x198>)
 800521e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	43db      	mvns	r3, r3
 8005226:	493f      	ldr	r1, [pc, #252]	; (8005324 <HAL_GPIO_DeInit+0x198>)
 8005228:	4013      	ands	r3, r2
 800522a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800522e:	4b3d      	ldr	r3, [pc, #244]	; (8005324 <HAL_GPIO_DeInit+0x198>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	43db      	mvns	r3, r3
 8005236:	493b      	ldr	r1, [pc, #236]	; (8005324 <HAL_GPIO_DeInit+0x198>)
 8005238:	4013      	ands	r3, r2
 800523a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800523c:	4b39      	ldr	r3, [pc, #228]	; (8005324 <HAL_GPIO_DeInit+0x198>)
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	43db      	mvns	r3, r3
 8005244:	4937      	ldr	r1, [pc, #220]	; (8005324 <HAL_GPIO_DeInit+0x198>)
 8005246:	4013      	ands	r3, r2
 8005248:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f003 0303 	and.w	r3, r3, #3
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	2207      	movs	r2, #7
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800525a:	4a2f      	ldr	r2, [pc, #188]	; (8005318 <HAL_GPIO_DeInit+0x18c>)
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	089b      	lsrs	r3, r3, #2
 8005260:	3302      	adds	r3, #2
 8005262:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	43da      	mvns	r2, r3
 800526a:	482b      	ldr	r0, [pc, #172]	; (8005318 <HAL_GPIO_DeInit+0x18c>)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	089b      	lsrs	r3, r3, #2
 8005270:	400a      	ands	r2, r1
 8005272:	3302      	adds	r3, #2
 8005274:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	2103      	movs	r1, #3
 8005282:	fa01 f303 	lsl.w	r3, r1, r3
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	08da      	lsrs	r2, r3, #3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3208      	adds	r2, #8
 8005294:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	220f      	movs	r2, #15
 80052a2:	fa02 f303 	lsl.w	r3, r2, r3
 80052a6:	43db      	mvns	r3, r3
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	08d2      	lsrs	r2, r2, #3
 80052ac:	4019      	ands	r1, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3208      	adds	r2, #8
 80052b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	2103      	movs	r1, #3
 80052c0:	fa01 f303 	lsl.w	r3, r1, r3
 80052c4:	43db      	mvns	r3, r3
 80052c6:	401a      	ands	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	2101      	movs	r1, #1
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	fa01 f303 	lsl.w	r3, r1, r3
 80052d8:	43db      	mvns	r3, r3
 80052da:	401a      	ands	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	2103      	movs	r1, #3
 80052ea:	fa01 f303 	lsl.w	r3, r1, r3
 80052ee:	43db      	mvns	r3, r3
 80052f0:	401a      	ands	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	60da      	str	r2, [r3, #12]
    }

    position++;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	3301      	adds	r3, #1
 80052fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	fa22 f303 	lsr.w	r3, r2, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	f47f af49 	bne.w	800519c <HAL_GPIO_DeInit+0x10>
  }
}
 800530a:	bf00      	nop
 800530c:	bf00      	nop
 800530e:	371c      	adds	r7, #28
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40010000 	.word	0x40010000
 800531c:	48000400 	.word	0x48000400
 8005320:	48000800 	.word	0x48000800
 8005324:	58000800 	.word	0x58000800

08005328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	807b      	strh	r3, [r7, #2]
 8005334:	4613      	mov	r3, r2
 8005336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005338:	787b      	ldrb	r3, [r7, #1]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800533e:	887a      	ldrh	r2, [r7, #2]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005344:	e002      	b.n	800534c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005346:	887a      	ldrh	r2, [r7, #2]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr

08005356 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005356:	b480      	push	{r7}
 8005358:	b085      	sub	sp, #20
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	460b      	mov	r3, r1
 8005360:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005368:	887a      	ldrh	r2, [r7, #2]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4013      	ands	r3, r2
 800536e:	041a      	lsls	r2, r3, #16
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	43d9      	mvns	r1, r3
 8005374:	887b      	ldrh	r3, [r7, #2]
 8005376:	400b      	ands	r3, r1
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	619a      	str	r2, [r3, #24]
}
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	4603      	mov	r3, r0
 8005390:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005392:	4b08      	ldr	r3, [pc, #32]	; (80053b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	4013      	ands	r3, r2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d006      	beq.n	80053ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800539e:	4a05      	ldr	r2, [pc, #20]	; (80053b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80053a4:	88fb      	ldrh	r3, [r7, #6]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fb fb98 	bl	8000adc <HAL_GPIO_EXTI_Callback>
  }
}
 80053ac:	bf00      	nop
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	58000800 	.word	0x58000800

080053b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053bc:	4b04      	ldr	r3, [pc, #16]	; (80053d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a03      	ldr	r2, [pc, #12]	; (80053d0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80053c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c6:	6013      	str	r3, [r2, #0]
}
 80053c8:	bf00      	nop
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bc80      	pop	{r7}
 80053ce:	4770      	bx	lr
 80053d0:	58000400 	.word	0x58000400

080053d4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80053d8:	4b03      	ldr	r3, [pc, #12]	; (80053e8 <HAL_PWREx_GetVoltageRange+0x14>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr
 80053e8:	58000400 	.word	0x58000400

080053ec <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80053f0:	4b06      	ldr	r3, [pc, #24]	; (800540c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053fc:	d101      	bne.n	8005402 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr
 800540c:	58000400 	.word	0x58000400

08005410 <LL_RCC_HSE_EnableTcxo>:
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800541e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005422:	6013      	str	r3, [r2, #0]
}
 8005424:	bf00      	nop
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr

0800542c <LL_RCC_HSE_DisableTcxo>:
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800543a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800543e:	6013      	str	r3, [r2, #0]
}
 8005440:	bf00      	nop
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800544c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800545a:	d101      	bne.n	8005460 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr

0800546a <LL_RCC_HSE_Enable>:
{
 800546a:	b480      	push	{r7}
 800546c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800546e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800547c:	6013      	str	r3, [r2, #0]
}
 800547e:	bf00      	nop
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <LL_RCC_HSE_Disable>:
{
 8005486:	b480      	push	{r7}
 8005488:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800548a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005498:	6013      	str	r3, [r2, #0]
}
 800549a:	bf00      	nop
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr

080054a2 <LL_RCC_HSE_IsReady>:
{
 80054a2:	b480      	push	{r7}
 80054a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80054a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054b4:	d101      	bne.n	80054ba <LL_RCC_HSE_IsReady+0x18>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <LL_RCC_HSE_IsReady+0x1a>
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr

080054c4 <LL_RCC_HSI_Enable>:
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80054c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d6:	6013      	str	r3, [r2, #0]
}
 80054d8:	bf00      	nop
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr

080054e0 <LL_RCC_HSI_Disable>:
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80054e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054f2:	6013      	str	r3, [r2, #0]
}
 80054f4:	bf00      	nop
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr

080054fc <LL_RCC_HSI_IsReady>:
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800550a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550e:	d101      	bne.n	8005514 <LL_RCC_HSI_IsReady+0x18>
 8005510:	2301      	movs	r3, #1
 8005512:	e000      	b.n	8005516 <LL_RCC_HSI_IsReady+0x1a>
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr

0800551e <LL_RCC_HSI_SetCalibTrimming>:
{
 800551e:	b480      	push	{r7}
 8005520:	b083      	sub	sp, #12
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	061b      	lsls	r3, r3, #24
 8005534:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005538:	4313      	orrs	r3, r2
 800553a:	604b      	str	r3, [r1, #4]
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr

08005546 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8005546:	b480      	push	{r7}
 8005548:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800554a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b02      	cmp	r3, #2
 8005558:	d101      	bne.n	800555e <LL_RCC_LSE_IsReady+0x18>
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <LL_RCC_LSE_IsReady+0x1a>
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	bc80      	pop	{r7}
 8005566:	4770      	bx	lr

08005568 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800556c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005574:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005580:	bf00      	nop
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr

08005588 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800558c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005594:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005598:	f023 0301 	bic.w	r3, r3, #1
 800559c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80055a0:	bf00      	nop
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr

080055a8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80055ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d101      	bne.n	80055c0 <LL_RCC_LSI_IsReady+0x18>
 80055bc:	2301      	movs	r3, #1
 80055be:	e000      	b.n	80055c2 <LL_RCC_LSI_IsReady+0x1a>
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bc80      	pop	{r7}
 80055c8:	4770      	bx	lr

080055ca <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80055ca:	b480      	push	{r7}
 80055cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80055ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	6013      	str	r3, [r2, #0]
}
 80055de:	bf00      	nop
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr

080055e6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80055e6:	b480      	push	{r7}
 80055e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80055ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	6013      	str	r3, [r2, #0]
}
 80055fa:	bf00      	nop
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bc80      	pop	{r7}
 8005600:	4770      	bx	lr

08005602 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8005602:	b480      	push	{r7}
 8005604:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b02      	cmp	r3, #2
 8005612:	d101      	bne.n	8005618 <LL_RCC_MSI_IsReady+0x16>
 8005614:	2301      	movs	r3, #1
 8005616:	e000      	b.n	800561a <LL_RCC_MSI_IsReady+0x18>
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr

08005622 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8005622:	b480      	push	{r7}
 8005624:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b08      	cmp	r3, #8
 8005632:	d101      	bne.n	8005638 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr

08005642 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8005642:	b480      	push	{r7}
 8005644:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005650:	4618      	mov	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr

08005658 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800565c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005664:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005668:	4618      	mov	r0, r3
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800568a:	4313      	orrs	r3, r2
 800568c:	604b      	str	r3, [r1, #4]
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	bc80      	pop	{r7}
 8005696:	4770      	bx	lr

08005698 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80056a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f023 0203 	bic.w	r2, r3, #3
 80056aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	608b      	str	r3, [r1, #8]
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bc80      	pop	{r7}
 80056bc:	4770      	bx	lr

080056be <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80056be:	b480      	push	{r7}
 80056c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80056c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f003 030c 	and.w	r3, r3, #12
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr

080056d4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80056dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	608b      	str	r3, [r1, #8]
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bc80      	pop	{r7}
 80056f8:	4770      	bx	lr

080056fa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b083      	sub	sp, #12
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005706:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800570a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800570e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr

08005724 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800572c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005730:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005734:	f023 020f 	bic.w	r2, r3, #15
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	091b      	lsrs	r3, r3, #4
 800573c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005740:	4313      	orrs	r3, r2
 8005742:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr

08005750 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4313      	orrs	r3, r2
 800576a:	608b      	str	r3, [r1, #8]
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	bc80      	pop	{r7}
 8005774:	4770      	bx	lr

08005776 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800577e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005788:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4313      	orrs	r3, r2
 8005790:	608b      	str	r3, [r1, #8]
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	bc80      	pop	{r7}
 800579a:	4770      	bx	lr

0800579c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80057a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr

080057b2 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80057b2:	b480      	push	{r7}
 80057b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80057b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc80      	pop	{r7}
 80057ca:	4770      	bx	lr

080057cc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80057d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80057da:	4618      	mov	r0, r3
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr

080057e2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80057e2:	b480      	push	{r7}
 80057e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80057e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bc80      	pop	{r7}
 80057f6:	4770      	bx	lr

080057f8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80057fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800580a:	6013      	str	r3, [r2, #0]
}
 800580c:	bf00      	nop
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005826:	6013      	str	r3, [r2, #0]
}
 8005828:	bf00      	nop
 800582a:	46bd      	mov	sp, r7
 800582c:	bc80      	pop	{r7}
 800582e:	4770      	bx	lr

08005830 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005842:	d101      	bne.n	8005848 <LL_RCC_PLL_IsReady+0x18>
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <LL_RCC_PLL_IsReady+0x1a>
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr

08005852 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005852:	b480      	push	{r7}
 8005854:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	0a1b      	lsrs	r3, r3, #8
 800585e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005862:	4618      	mov	r0, r3
 8005864:	46bd      	mov	sp, r7
 8005866:	bc80      	pop	{r7}
 8005868:	4770      	bx	lr

0800586a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800586a:	b480      	push	{r7}
 800586c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800586e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005878:	4618      	mov	r0, r3
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr

08005880 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800588e:	4618      	mov	r0, r3
 8005890:	46bd      	mov	sp, r7
 8005892:	bc80      	pop	{r7}
 8005894:	4770      	bx	lr

08005896 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005896:	b480      	push	{r7}
 8005898:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800589a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0303 	and.w	r3, r3, #3
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bc80      	pop	{r7}
 80058aa:	4770      	bx	lr

080058ac <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80058b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058be:	d101      	bne.n	80058c4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc80      	pop	{r7}
 80058cc:	4770      	bx	lr

080058ce <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80058ce:	b480      	push	{r7}
 80058d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80058d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80058da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058e2:	d101      	bne.n	80058e8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80058f2:	b480      	push	{r7}
 80058f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80058f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80058fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005906:	d101      	bne.n	800590c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005908:	2301      	movs	r3, #1
 800590a:	e000      	b.n	800590e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr

08005916 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005916:	b480      	push	{r7}
 8005918:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800591a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005924:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005928:	d101      	bne.n	800592e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr

08005938 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005938:	b480      	push	{r7}
 800593a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800593c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005946:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800594a:	d101      	bne.n	8005950 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr
	...

0800595c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e36f      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800596e:	f7ff fea6 	bl	80056be <LL_RCC_GetSysClkSource>
 8005972:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005974:	f7ff ff8f 	bl	8005896 <LL_RCC_PLL_GetMainSource>
 8005978:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 80c4 	beq.w	8005b10 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d005      	beq.n	800599a <HAL_RCC_OscConfig+0x3e>
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	2b0c      	cmp	r3, #12
 8005992:	d176      	bne.n	8005a82 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d173      	bne.n	8005a82 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e353      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_RCC_OscConfig+0x68>
 80059b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059c2:	e006      	b.n	80059d2 <HAL_RCC_OscConfig+0x76>
 80059c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059cc:	091b      	lsrs	r3, r3, #4
 80059ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d222      	bcs.n	8005a1c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fda2 	bl	8006524 <RCC_SetFlashLatencyFromMSIRange>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e331      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059f4:	f043 0308 	orr.w	r3, r3, #8
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff fe2b 	bl	8005670 <LL_RCC_MSI_SetCalibTrimming>
 8005a1a:	e021      	b.n	8005a60 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a26:	f043 0308 	orr.w	r3, r3, #8
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff fe12 	bl	8005670 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fd67 	bl	8006524 <RCC_SetFlashLatencyFromMSIRange>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e2f6      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005a60:	f000 fce0 	bl	8006424 <HAL_RCC_GetHCLKFreq>
 8005a64:	4603      	mov	r3, r0
 8005a66:	4aa7      	ldr	r2, [pc, #668]	; (8005d04 <HAL_RCC_OscConfig+0x3a8>)
 8005a68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8005a6a:	4ba7      	ldr	r3, [pc, #668]	; (8005d08 <HAL_RCC_OscConfig+0x3ac>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fb faa4 	bl	8000fbc <HAL_InitTick>
 8005a74:	4603      	mov	r3, r0
 8005a76:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005a78:	7cfb      	ldrb	r3, [r7, #19]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d047      	beq.n	8005b0e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8005a7e:	7cfb      	ldrb	r3, [r7, #19]
 8005a80:	e2e5      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d02c      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a8a:	f7ff fd9e 	bl	80055ca <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a8e:	f7fd fadf 	bl	8003050 <HAL_GetTick>
 8005a92:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a96:	f7fd fadb 	bl	8003050 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e2d2      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005aa8:	f7ff fdab 	bl	8005602 <LL_RCC_MSI_IsReady>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0f1      	beq.n	8005a96 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005abc:	f043 0308 	orr.w	r3, r3, #8
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff fdc7 	bl	8005670 <LL_RCC_MSI_SetCalibTrimming>
 8005ae2:	e015      	b.n	8005b10 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ae4:	f7ff fd7f 	bl	80055e6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ae8:	f7fd fab2 	bl	8003050 <HAL_GetTick>
 8005aec:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005af0:	f7fd faae 	bl	8003050 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e2a5      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005b02:	f7ff fd7e 	bl	8005602 <LL_RCC_MSI_IsReady>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1f1      	bne.n	8005af0 <HAL_RCC_OscConfig+0x194>
 8005b0c:	e000      	b.n	8005b10 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005b0e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d058      	beq.n	8005bce <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	2b08      	cmp	r3, #8
 8005b20:	d005      	beq.n	8005b2e <HAL_RCC_OscConfig+0x1d2>
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	2b0c      	cmp	r3, #12
 8005b26:	d108      	bne.n	8005b3a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d105      	bne.n	8005b3a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d14b      	bne.n	8005bce <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e289      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b58:	d102      	bne.n	8005b60 <HAL_RCC_OscConfig+0x204>
 8005b5a:	f7ff fc86 	bl	800546a <LL_RCC_HSE_Enable>
 8005b5e:	e00d      	b.n	8005b7c <HAL_RCC_OscConfig+0x220>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005b68:	d104      	bne.n	8005b74 <HAL_RCC_OscConfig+0x218>
 8005b6a:	f7ff fc51 	bl	8005410 <LL_RCC_HSE_EnableTcxo>
 8005b6e:	f7ff fc7c 	bl	800546a <LL_RCC_HSE_Enable>
 8005b72:	e003      	b.n	8005b7c <HAL_RCC_OscConfig+0x220>
 8005b74:	f7ff fc87 	bl	8005486 <LL_RCC_HSE_Disable>
 8005b78:	f7ff fc58 	bl	800542c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d012      	beq.n	8005baa <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b84:	f7fd fa64 	bl	8003050 <HAL_GetTick>
 8005b88:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b8c:	f7fd fa60 	bl	8003050 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b64      	cmp	r3, #100	; 0x64
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e257      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005b9e:	f7ff fc80 	bl	80054a2 <LL_RCC_HSE_IsReady>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0f1      	beq.n	8005b8c <HAL_RCC_OscConfig+0x230>
 8005ba8:	e011      	b.n	8005bce <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005baa:	f7fd fa51 	bl	8003050 <HAL_GetTick>
 8005bae:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bb2:	f7fd fa4d 	bl	8003050 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b64      	cmp	r3, #100	; 0x64
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e244      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005bc4:	f7ff fc6d 	bl	80054a2 <LL_RCC_HSE_IsReady>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f1      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d046      	beq.n	8005c68 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	d005      	beq.n	8005bec <HAL_RCC_OscConfig+0x290>
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	2b0c      	cmp	r3, #12
 8005be4:	d10e      	bne.n	8005c04 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d10b      	bne.n	8005c04 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e22a      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff fc8e 	bl	800551e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005c02:	e031      	b.n	8005c68 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d019      	beq.n	8005c40 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c0c:	f7ff fc5a 	bl	80054c4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c10:	f7fd fa1e 	bl	8003050 <HAL_GetTick>
 8005c14:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c18:	f7fd fa1a 	bl	8003050 <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e211      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005c2a:	f7ff fc67 	bl	80054fc <LL_RCC_HSI_IsReady>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d0f1      	beq.n	8005c18 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff fc70 	bl	800551e <LL_RCC_HSI_SetCalibTrimming>
 8005c3e:	e013      	b.n	8005c68 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c40:	f7ff fc4e 	bl	80054e0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c44:	f7fd fa04 	bl	8003050 <HAL_GetTick>
 8005c48:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c4c:	f7fd fa00 	bl	8003050 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e1f7      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005c5e:	f7ff fc4d 	bl	80054fc <LL_RCC_HSI_IsReady>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1f1      	bne.n	8005c4c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0308 	and.w	r3, r3, #8
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d06e      	beq.n	8005d52 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d056      	beq.n	8005d2a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8005c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c84:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69da      	ldr	r2, [r3, #28]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f003 0310 	and.w	r3, r3, #16
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d031      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d006      	beq.n	8005cac <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e1d0      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d013      	beq.n	8005cde <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8005cb6:	f7ff fc67 	bl	8005588 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cba:	f7fd f9c9 	bl	8003050 <HAL_GetTick>
 8005cbe:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cc2:	f7fd f9c5 	bl	8003050 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b11      	cmp	r3, #17
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e1bc      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005cd4:	f7ff fc68 	bl	80055a8 <LL_RCC_LSI_IsReady>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1f1      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ce6:	f023 0210 	bic.w	r2, r3, #16
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cf8:	f7ff fc36 	bl	8005568 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cfc:	f7fd f9a8 	bl	8003050 <HAL_GetTick>
 8005d00:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005d02:	e00c      	b.n	8005d1e <HAL_RCC_OscConfig+0x3c2>
 8005d04:	20000110 	.word	0x20000110
 8005d08:	20000120 	.word	0x20000120
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d0c:	f7fd f9a0 	bl	8003050 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b11      	cmp	r3, #17
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e197      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005d1e:	f7ff fc43 	bl	80055a8 <LL_RCC_LSI_IsReady>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0f1      	beq.n	8005d0c <HAL_RCC_OscConfig+0x3b0>
 8005d28:	e013      	b.n	8005d52 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d2a:	f7ff fc2d 	bl	8005588 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d2e:	f7fd f98f 	bl	8003050 <HAL_GetTick>
 8005d32:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005d34:	e008      	b.n	8005d48 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d36:	f7fd f98b 	bl	8003050 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b11      	cmp	r3, #17
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e182      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005d48:	f7ff fc2e 	bl	80055a8 <LL_RCC_LSI_IsReady>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1f1      	bne.n	8005d36 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0304 	and.w	r3, r3, #4
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 80d8 	beq.w	8005f10 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005d60:	f7ff fb44 	bl	80053ec <LL_PWR_IsEnabledBkUpAccess>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d113      	bne.n	8005d92 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005d6a:	f7ff fb25 	bl	80053b8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d6e:	f7fd f96f 	bl	8003050 <HAL_GetTick>
 8005d72:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005d74:	e008      	b.n	8005d88 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d76:	f7fd f96b 	bl	8003050 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e162      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005d88:	f7ff fb30 	bl	80053ec <LL_PWR_IsEnabledBkUpAccess>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0f1      	beq.n	8005d76 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d07b      	beq.n	8005e92 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	2b85      	cmp	r3, #133	; 0x85
 8005da0:	d003      	beq.n	8005daa <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	2b05      	cmp	r3, #5
 8005da8:	d109      	bne.n	8005dbe <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005db6:	f043 0304 	orr.w	r3, r3, #4
 8005dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dbe:	f7fd f947 	bl	8003050 <HAL_GetTick>
 8005dc2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd0:	f043 0301 	orr.w	r3, r3, #1
 8005dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005dd8:	e00a      	b.n	8005df0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dda:	f7fd f939 	bl	8003050 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e12e      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005df0:	f7ff fba9 	bl	8005546 <LL_RCC_LSE_IsReady>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0ef      	beq.n	8005dda <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	2b81      	cmp	r3, #129	; 0x81
 8005e00:	d003      	beq.n	8005e0a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	2b85      	cmp	r3, #133	; 0x85
 8005e08:	d121      	bne.n	8005e4e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e0a:	f7fd f921 	bl	8003050 <HAL_GetTick>
 8005e0e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005e24:	e00a      	b.n	8005e3c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e26:	f7fd f913 	bl	8003050 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e108      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d0ec      	beq.n	8005e26 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005e4c:	e060      	b.n	8005f10 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e4e:	f7fd f8ff 	bl	8003050 <HAL_GetTick>
 8005e52:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005e68:	e00a      	b.n	8005e80 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e6a:	f7fd f8f1 	bl	8003050 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d901      	bls.n	8005e80 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	e0e6      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1ec      	bne.n	8005e6a <HAL_RCC_OscConfig+0x50e>
 8005e90:	e03e      	b.n	8005f10 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e92:	f7fd f8dd 	bl	8003050 <HAL_GetTick>
 8005e96:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005eac:	e00a      	b.n	8005ec4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eae:	f7fd f8cf 	bl	8003050 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d901      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e0c4      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1ec      	bne.n	8005eae <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ed4:	f7fd f8bc 	bl	8003050 <HAL_GetTick>
 8005ed8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ee6:	f023 0301 	bic.w	r3, r3, #1
 8005eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005eee:	e00a      	b.n	8005f06 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ef0:	f7fd f8ae 	bl	8003050 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e0a3      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005f06:	f7ff fb1e 	bl	8005546 <LL_RCC_LSE_IsReady>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1ef      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 8099 	beq.w	800604c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	2b0c      	cmp	r3, #12
 8005f1e:	d06c      	beq.n	8005ffa <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d14b      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f28:	f7ff fc74 	bl	8005814 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f2c:	f7fd f890 	bl	8003050 <HAL_GetTick>
 8005f30:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f34:	f7fd f88c 	bl	8003050 <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b0a      	cmp	r3, #10
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e083      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005f46:	f7ff fc73 	bl	8005830 <LL_RCC_PLL_IsReady>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1f1      	bne.n	8005f34 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	4b40      	ldr	r3, [pc, #256]	; (8006058 <HAL_RCC_OscConfig+0x6fc>)
 8005f58:	4013      	ands	r3, r2
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f62:	4311      	orrs	r1, r2
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f68:	0212      	lsls	r2, r2, #8
 8005f6a:	4311      	orrs	r1, r2
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f70:	4311      	orrs	r1, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005f76:	4311      	orrs	r1, r2
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f86:	f7ff fc37 	bl	80057f8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f98:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f9a:	f7fd f859 	bl	8003050 <HAL_GetTick>
 8005f9e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fa2:	f7fd f855 	bl	8003050 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b0a      	cmp	r3, #10
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e04c      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005fb4:	f7ff fc3c 	bl	8005830 <LL_RCC_PLL_IsReady>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0f1      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x646>
 8005fbe:	e045      	b.n	800604c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fc0:	f7ff fc28 	bl	8005814 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc4:	f7fd f844 	bl	8003050 <HAL_GetTick>
 8005fc8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fcc:	f7fd f840 	bl	8003050 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b0a      	cmp	r3, #10
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e037      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005fde:	f7ff fc27 	bl	8005830 <LL_RCC_PLL_IsReady>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1f1      	bne.n	8005fcc <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ff2:	4b1a      	ldr	r3, [pc, #104]	; (800605c <HAL_RCC_OscConfig+0x700>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	60cb      	str	r3, [r1, #12]
 8005ff8:	e028      	b.n	800604c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d101      	bne.n	8006006 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e023      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	f003 0203 	and.w	r2, r3, #3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	429a      	cmp	r2, r3
 800601a:	d115      	bne.n	8006048 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006026:	429a      	cmp	r2, r3
 8006028:	d10e      	bne.n	8006048 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	021b      	lsls	r3, r3, #8
 8006036:	429a      	cmp	r2, r3
 8006038:	d106      	bne.n	8006048 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006044:	429a      	cmp	r2, r3
 8006046:	d001      	beq.n	800604c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e000      	b.n	800604e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	11c1808c 	.word	0x11c1808c
 800605c:	eefefffc 	.word	0xeefefffc

08006060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e12c      	b.n	80062ce <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006074:	4b98      	ldr	r3, [pc, #608]	; (80062d8 <HAL_RCC_ClockConfig+0x278>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d91b      	bls.n	80060ba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006082:	4b95      	ldr	r3, [pc, #596]	; (80062d8 <HAL_RCC_ClockConfig+0x278>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f023 0207 	bic.w	r2, r3, #7
 800608a:	4993      	ldr	r1, [pc, #588]	; (80062d8 <HAL_RCC_ClockConfig+0x278>)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	4313      	orrs	r3, r2
 8006090:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006092:	f7fc ffdd 	bl	8003050 <HAL_GetTick>
 8006096:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006098:	e008      	b.n	80060ac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800609a:	f7fc ffd9 	bl	8003050 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d901      	bls.n	80060ac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e110      	b.n	80062ce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ac:	4b8a      	ldr	r3, [pc, #552]	; (80062d8 <HAL_RCC_ClockConfig+0x278>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d1ef      	bne.n	800609a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d016      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff fb02 	bl	80056d4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80060d0:	f7fc ffbe 	bl	8003050 <HAL_GetTick>
 80060d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80060d8:	f7fc ffba 	bl	8003050 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e0f1      	b.n	80062ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80060ea:	f7ff fbdf 	bl	80058ac <LL_RCC_IsActiveFlag_HPRE>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0f1      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0320 	and.w	r3, r3, #32
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d016      	beq.n	800612e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff faf8 	bl	80056fa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800610a:	f7fc ffa1 	bl	8003050 <HAL_GetTick>
 800610e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006110:	e008      	b.n	8006124 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006112:	f7fc ff9d 	bl	8003050 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d901      	bls.n	8006124 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e0d4      	b.n	80062ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006124:	f7ff fbd3 	bl	80058ce <LL_RCC_IsActiveFlag_C2HPRE>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0f1      	beq.n	8006112 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006136:	2b00      	cmp	r3, #0
 8006138:	d016      	beq.n	8006168 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff faf0 	bl	8005724 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006144:	f7fc ff84 	bl	8003050 <HAL_GetTick>
 8006148:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800614a:	e008      	b.n	800615e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800614c:	f7fc ff80 	bl	8003050 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e0b7      	b.n	80062ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800615e:	f7ff fbc8 	bl	80058f2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0f1      	beq.n	800614c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d016      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff fae9 	bl	8005750 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800617e:	f7fc ff67 	bl	8003050 <HAL_GetTick>
 8006182:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006184:	e008      	b.n	8006198 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006186:	f7fc ff63 	bl	8003050 <HAL_GetTick>
 800618a:	4602      	mov	r2, r0
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d901      	bls.n	8006198 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e09a      	b.n	80062ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006198:	f7ff fbbd 	bl	8005916 <LL_RCC_IsActiveFlag_PPRE1>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0f1      	beq.n	8006186 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0308 	and.w	r3, r3, #8
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d017      	beq.n	80061de <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff fade 	bl	8005776 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80061ba:	f7fc ff49 	bl	8003050 <HAL_GetTick>
 80061be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80061c0:	e008      	b.n	80061d4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061c2:	f7fc ff45 	bl	8003050 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d901      	bls.n	80061d4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e07c      	b.n	80062ce <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80061d4:	f7ff fbb0 	bl	8005938 <LL_RCC_IsActiveFlag_PPRE2>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0f1      	beq.n	80061c2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d043      	beq.n	8006272 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d106      	bne.n	8006200 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80061f2:	f7ff f956 	bl	80054a2 <LL_RCC_HSE_IsReady>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d11e      	bne.n	800623a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e066      	b.n	80062ce <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	2b03      	cmp	r3, #3
 8006206:	d106      	bne.n	8006216 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006208:	f7ff fb12 	bl	8005830 <LL_RCC_PLL_IsReady>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d113      	bne.n	800623a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e05b      	b.n	80062ce <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800621e:	f7ff f9f0 	bl	8005602 <LL_RCC_MSI_IsReady>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d108      	bne.n	800623a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e050      	b.n	80062ce <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800622c:	f7ff f966 	bl	80054fc <LL_RCC_HSI_IsReady>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e049      	b.n	80062ce <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	4618      	mov	r0, r3
 8006240:	f7ff fa2a 	bl	8005698 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006244:	f7fc ff04 	bl	8003050 <HAL_GetTick>
 8006248:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800624a:	e00a      	b.n	8006262 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800624c:	f7fc ff00 	bl	8003050 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	f241 3288 	movw	r2, #5000	; 0x1388
 800625a:	4293      	cmp	r3, r2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e035      	b.n	80062ce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006262:	f7ff fa2c 	bl	80056be <LL_RCC_GetSysClkSource>
 8006266:	4602      	mov	r2, r0
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	429a      	cmp	r2, r3
 8006270:	d1ec      	bne.n	800624c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006272:	4b19      	ldr	r3, [pc, #100]	; (80062d8 <HAL_RCC_ClockConfig+0x278>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0307 	and.w	r3, r3, #7
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d21b      	bcs.n	80062b8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006280:	4b15      	ldr	r3, [pc, #84]	; (80062d8 <HAL_RCC_ClockConfig+0x278>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f023 0207 	bic.w	r2, r3, #7
 8006288:	4913      	ldr	r1, [pc, #76]	; (80062d8 <HAL_RCC_ClockConfig+0x278>)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	4313      	orrs	r3, r2
 800628e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006290:	f7fc fede 	bl	8003050 <HAL_GetTick>
 8006294:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006296:	e008      	b.n	80062aa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006298:	f7fc feda 	bl	8003050 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e011      	b.n	80062ce <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062aa:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <HAL_RCC_ClockConfig+0x278>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d1ef      	bne.n	8006298 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80062b8:	f000 f8b4 	bl	8006424 <HAL_RCC_GetHCLKFreq>
 80062bc:	4603      	mov	r3, r0
 80062be:	4a07      	ldr	r2, [pc, #28]	; (80062dc <HAL_RCC_ClockConfig+0x27c>)
 80062c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80062c2:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <HAL_RCC_ClockConfig+0x280>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fa fe78 	bl	8000fbc <HAL_InitTick>
 80062cc:	4603      	mov	r3, r0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	58004000 	.word	0x58004000
 80062dc:	20000110 	.word	0x20000110
 80062e0:	20000120 	.word	0x20000120

080062e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062e4:	b590      	push	{r4, r7, lr}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062f2:	f7ff f9e4 	bl	80056be <LL_RCC_GetSysClkSource>
 80062f6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062f8:	f7ff facd 	bl	8005896 <LL_RCC_PLL_GetMainSource>
 80062fc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d005      	beq.n	8006310 <HAL_RCC_GetSysClockFreq+0x2c>
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b0c      	cmp	r3, #12
 8006308:	d139      	bne.n	800637e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d136      	bne.n	800637e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006310:	f7ff f987 	bl	8005622 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d115      	bne.n	8006346 <HAL_RCC_GetSysClockFreq+0x62>
 800631a:	f7ff f982 	bl	8005622 <LL_RCC_MSI_IsEnabledRangeSelect>
 800631e:	4603      	mov	r3, r0
 8006320:	2b01      	cmp	r3, #1
 8006322:	d106      	bne.n	8006332 <HAL_RCC_GetSysClockFreq+0x4e>
 8006324:	f7ff f98d 	bl	8005642 <LL_RCC_MSI_GetRange>
 8006328:	4603      	mov	r3, r0
 800632a:	0a1b      	lsrs	r3, r3, #8
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	e005      	b.n	800633e <HAL_RCC_GetSysClockFreq+0x5a>
 8006332:	f7ff f991 	bl	8005658 <LL_RCC_MSI_GetRangeAfterStandby>
 8006336:	4603      	mov	r3, r0
 8006338:	0a1b      	lsrs	r3, r3, #8
 800633a:	f003 030f 	and.w	r3, r3, #15
 800633e:	4a36      	ldr	r2, [pc, #216]	; (8006418 <HAL_RCC_GetSysClockFreq+0x134>)
 8006340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006344:	e014      	b.n	8006370 <HAL_RCC_GetSysClockFreq+0x8c>
 8006346:	f7ff f96c 	bl	8005622 <LL_RCC_MSI_IsEnabledRangeSelect>
 800634a:	4603      	mov	r3, r0
 800634c:	2b01      	cmp	r3, #1
 800634e:	d106      	bne.n	800635e <HAL_RCC_GetSysClockFreq+0x7a>
 8006350:	f7ff f977 	bl	8005642 <LL_RCC_MSI_GetRange>
 8006354:	4603      	mov	r3, r0
 8006356:	091b      	lsrs	r3, r3, #4
 8006358:	f003 030f 	and.w	r3, r3, #15
 800635c:	e005      	b.n	800636a <HAL_RCC_GetSysClockFreq+0x86>
 800635e:	f7ff f97b 	bl	8005658 <LL_RCC_MSI_GetRangeAfterStandby>
 8006362:	4603      	mov	r3, r0
 8006364:	091b      	lsrs	r3, r3, #4
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	4a2b      	ldr	r2, [pc, #172]	; (8006418 <HAL_RCC_GetSysClockFreq+0x134>)
 800636c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006370:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d115      	bne.n	80063a4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800637c:	e012      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2b04      	cmp	r3, #4
 8006382:	d102      	bne.n	800638a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006384:	4b25      	ldr	r3, [pc, #148]	; (800641c <HAL_RCC_GetSysClockFreq+0x138>)
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	e00c      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	2b08      	cmp	r3, #8
 800638e:	d109      	bne.n	80063a4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006390:	f7ff f85a 	bl	8005448 <LL_RCC_HSE_IsEnabledDiv2>
 8006394:	4603      	mov	r3, r0
 8006396:	2b01      	cmp	r3, #1
 8006398:	d102      	bne.n	80063a0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800639a:	4b20      	ldr	r3, [pc, #128]	; (800641c <HAL_RCC_GetSysClockFreq+0x138>)
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	e001      	b.n	80063a4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80063a0:	4b1f      	ldr	r3, [pc, #124]	; (8006420 <HAL_RCC_GetSysClockFreq+0x13c>)
 80063a2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063a4:	f7ff f98b 	bl	80056be <LL_RCC_GetSysClkSource>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b0c      	cmp	r3, #12
 80063ac:	d12f      	bne.n	800640e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80063ae:	f7ff fa72 	bl	8005896 <LL_RCC_PLL_GetMainSource>
 80063b2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d003      	beq.n	80063c2 <HAL_RCC_GetSysClockFreq+0xde>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d003      	beq.n	80063c8 <HAL_RCC_GetSysClockFreq+0xe4>
 80063c0:	e00d      	b.n	80063de <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80063c2:	4b16      	ldr	r3, [pc, #88]	; (800641c <HAL_RCC_GetSysClockFreq+0x138>)
 80063c4:	60fb      	str	r3, [r7, #12]
        break;
 80063c6:	e00d      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80063c8:	f7ff f83e 	bl	8005448 <LL_RCC_HSE_IsEnabledDiv2>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d102      	bne.n	80063d8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80063d2:	4b12      	ldr	r3, [pc, #72]	; (800641c <HAL_RCC_GetSysClockFreq+0x138>)
 80063d4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80063d6:	e005      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80063d8:	4b11      	ldr	r3, [pc, #68]	; (8006420 <HAL_RCC_GetSysClockFreq+0x13c>)
 80063da:	60fb      	str	r3, [r7, #12]
        break;
 80063dc:	e002      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	60fb      	str	r3, [r7, #12]
        break;
 80063e2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80063e4:	f7ff fa35 	bl	8005852 <LL_RCC_PLL_GetN>
 80063e8:	4602      	mov	r2, r0
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	fb03 f402 	mul.w	r4, r3, r2
 80063f0:	f7ff fa46 	bl	8005880 <LL_RCC_PLL_GetDivider>
 80063f4:	4603      	mov	r3, r0
 80063f6:	091b      	lsrs	r3, r3, #4
 80063f8:	3301      	adds	r3, #1
 80063fa:	fbb4 f4f3 	udiv	r4, r4, r3
 80063fe:	f7ff fa34 	bl	800586a <LL_RCC_PLL_GetR>
 8006402:	4603      	mov	r3, r0
 8006404:	0f5b      	lsrs	r3, r3, #29
 8006406:	3301      	adds	r3, #1
 8006408:	fbb4 f3f3 	udiv	r3, r4, r3
 800640c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800640e:	697b      	ldr	r3, [r7, #20]
}
 8006410:	4618      	mov	r0, r3
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	bd90      	pop	{r4, r7, pc}
 8006418:	0800ac98 	.word	0x0800ac98
 800641c:	00f42400 	.word	0x00f42400
 8006420:	01e84800 	.word	0x01e84800

08006424 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006424:	b598      	push	{r3, r4, r7, lr}
 8006426:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006428:	f7ff ff5c 	bl	80062e4 <HAL_RCC_GetSysClockFreq>
 800642c:	4604      	mov	r4, r0
 800642e:	f7ff f9b5 	bl	800579c <LL_RCC_GetAHBPrescaler>
 8006432:	4603      	mov	r3, r0
 8006434:	091b      	lsrs	r3, r3, #4
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	4a03      	ldr	r2, [pc, #12]	; (8006448 <HAL_RCC_GetHCLKFreq+0x24>)
 800643c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006440:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006444:	4618      	mov	r0, r3
 8006446:	bd98      	pop	{r3, r4, r7, pc}
 8006448:	0800ac38 	.word	0x0800ac38

0800644c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800644c:	b598      	push	{r3, r4, r7, lr}
 800644e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006450:	f7ff ffe8 	bl	8006424 <HAL_RCC_GetHCLKFreq>
 8006454:	4604      	mov	r4, r0
 8006456:	f7ff f9b9 	bl	80057cc <LL_RCC_GetAPB1Prescaler>
 800645a:	4603      	mov	r3, r0
 800645c:	0a1b      	lsrs	r3, r3, #8
 800645e:	4a03      	ldr	r2, [pc, #12]	; (800646c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006464:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006468:	4618      	mov	r0, r3
 800646a:	bd98      	pop	{r3, r4, r7, pc}
 800646c:	0800ac78 	.word	0x0800ac78

08006470 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006470:	b598      	push	{r3, r4, r7, lr}
 8006472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006474:	f7ff ffd6 	bl	8006424 <HAL_RCC_GetHCLKFreq>
 8006478:	4604      	mov	r4, r0
 800647a:	f7ff f9b2 	bl	80057e2 <LL_RCC_GetAPB2Prescaler>
 800647e:	4603      	mov	r3, r0
 8006480:	0adb      	lsrs	r3, r3, #11
 8006482:	4a03      	ldr	r2, [pc, #12]	; (8006490 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006488:	fa24 f303 	lsr.w	r3, r4, r3
}
 800648c:	4618      	mov	r0, r3
 800648e:	bd98      	pop	{r3, r4, r7, pc}
 8006490:	0800ac78 	.word	0x0800ac78

08006494 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d038      	beq.n	8006516 <HAL_RCC_GetClockConfig+0x82>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d035      	beq.n	8006516 <HAL_RCC_GetClockConfig+0x82>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	224f      	movs	r2, #79	; 0x4f
 80064ae:	601a      	str	r2, [r3, #0]
                                    | RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_HCLK3);
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f043 0220 	orr.w	r2, r3, #32
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	601a      	str	r2, [r3, #0]
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 80064bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f003 020c 	and.w	r2, r3, #12
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 80064ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80064f4:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	615a      	str	r2, [r3, #20]
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	b2da      	uxtb	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	619a      	str	r2, [r3, #24]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 800650a:	4b05      	ldr	r3, [pc, #20]	; (8006520 <HAL_RCC_GetClockConfig+0x8c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0207 	and.w	r2, r3, #7
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	601a      	str	r2, [r3, #0]
  }
}
 8006516:	bf00      	nop
 8006518:	3714      	adds	r7, #20
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr
 8006520:	58004000 	.word	0x58004000

08006524 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006524:	b590      	push	{r4, r7, lr}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	091b      	lsrs	r3, r3, #4
 8006530:	f003 030f 	and.w	r3, r3, #15
 8006534:	4a10      	ldr	r2, [pc, #64]	; (8006578 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800653a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800653c:	f7ff f939 	bl	80057b2 <LL_RCC_GetAHB3Prescaler>
 8006540:	4603      	mov	r3, r0
 8006542:	091b      	lsrs	r3, r3, #4
 8006544:	f003 030f 	and.w	r3, r3, #15
 8006548:	4a0c      	ldr	r2, [pc, #48]	; (800657c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800654a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	fbb2 f3f3 	udiv	r3, r2, r3
 8006554:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	4a09      	ldr	r2, [pc, #36]	; (8006580 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800655a:	fba2 2303 	umull	r2, r3, r2, r3
 800655e:	0c9c      	lsrs	r4, r3, #18
 8006560:	f7fe ff38 	bl	80053d4 <HAL_PWREx_GetVoltageRange>
 8006564:	4603      	mov	r3, r0
 8006566:	4619      	mov	r1, r3
 8006568:	4620      	mov	r0, r4
 800656a:	f000 f80b 	bl	8006584 <RCC_SetFlashLatency>
 800656e:	4603      	mov	r3, r0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	bd90      	pop	{r4, r7, pc}
 8006578:	0800ac98 	.word	0x0800ac98
 800657c:	0800ac38 	.word	0x0800ac38
 8006580:	431bde83 	.word	0x431bde83

08006584 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08e      	sub	sp, #56	; 0x38
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800658e:	4a3a      	ldr	r2, [pc, #232]	; (8006678 <RCC_SetFlashLatency+0xf4>)
 8006590:	f107 0320 	add.w	r3, r7, #32
 8006594:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006598:	6018      	str	r0, [r3, #0]
 800659a:	3304      	adds	r3, #4
 800659c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800659e:	4a37      	ldr	r2, [pc, #220]	; (800667c <RCC_SetFlashLatency+0xf8>)
 80065a0:	f107 0318 	add.w	r3, r7, #24
 80065a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065a8:	6018      	str	r0, [r3, #0]
 80065aa:	3304      	adds	r3, #4
 80065ac:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80065ae:	4a34      	ldr	r2, [pc, #208]	; (8006680 <RCC_SetFlashLatency+0xfc>)
 80065b0:	f107 030c 	add.w	r3, r7, #12
 80065b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80065b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80065ba:	2300      	movs	r3, #0
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065c4:	d11b      	bne.n	80065fe <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80065c6:	2300      	movs	r3, #0
 80065c8:	633b      	str	r3, [r7, #48]	; 0x30
 80065ca:	e014      	b.n	80065f6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	3338      	adds	r3, #56	; 0x38
 80065d2:	443b      	add	r3, r7
 80065d4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80065d8:	461a      	mov	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4293      	cmp	r3, r2
 80065de:	d807      	bhi.n	80065f0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	3338      	adds	r3, #56	; 0x38
 80065e6:	443b      	add	r3, r7
 80065e8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80065ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065ee:	e021      	b.n	8006634 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80065f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f2:	3301      	adds	r3, #1
 80065f4:	633b      	str	r3, [r7, #48]	; 0x30
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d9e7      	bls.n	80065cc <RCC_SetFlashLatency+0x48>
 80065fc:	e01a      	b.n	8006634 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80065fe:	2300      	movs	r3, #0
 8006600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006602:	e014      	b.n	800662e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	3338      	adds	r3, #56	; 0x38
 800660a:	443b      	add	r3, r7
 800660c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006610:	461a      	mov	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4293      	cmp	r3, r2
 8006616:	d807      	bhi.n	8006628 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	3338      	adds	r3, #56	; 0x38
 800661e:	443b      	add	r3, r7
 8006620:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006626:	e005      	b.n	8006634 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	3301      	adds	r3, #1
 800662c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	2b02      	cmp	r3, #2
 8006632:	d9e7      	bls.n	8006604 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006634:	4b13      	ldr	r3, [pc, #76]	; (8006684 <RCC_SetFlashLatency+0x100>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f023 0207 	bic.w	r2, r3, #7
 800663c:	4911      	ldr	r1, [pc, #68]	; (8006684 <RCC_SetFlashLatency+0x100>)
 800663e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006640:	4313      	orrs	r3, r2
 8006642:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006644:	f7fc fd04 	bl	8003050 <HAL_GetTick>
 8006648:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800664a:	e008      	b.n	800665e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800664c:	f7fc fd00 	bl	8003050 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e007      	b.n	800666e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800665e:	4b09      	ldr	r3, [pc, #36]	; (8006684 <RCC_SetFlashLatency+0x100>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0307 	and.w	r3, r3, #7
 8006666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006668:	429a      	cmp	r2, r3
 800666a:	d1ef      	bne.n	800664c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3738      	adds	r7, #56	; 0x38
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	0800abfc 	.word	0x0800abfc
 800667c:	0800ac04 	.word	0x0800ac04
 8006680:	0800ac0c 	.word	0x0800ac0c
 8006684:	58004000 	.word	0x58004000

08006688 <LL_RCC_LSE_IsReady>:
{
 8006688:	b480      	push	{r7}
 800668a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800668c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b02      	cmp	r3, #2
 800669a:	d101      	bne.n	80066a0 <LL_RCC_LSE_IsReady+0x18>
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <LL_RCC_LSE_IsReady+0x1a>
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bc80      	pop	{r7}
 80066a8:	4770      	bx	lr

080066aa <LL_RCC_SetUSARTClockSource>:
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80066b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	0c1b      	lsrs	r3, r3, #16
 80066be:	43db      	mvns	r3, r3
 80066c0:	401a      	ands	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bc80      	pop	{r7}
 80066d8:	4770      	bx	lr

080066da <LL_RCC_SetI2SClockSource>:
{
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80066e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr

08006704 <LL_RCC_SetLPUARTClockSource>:
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800670c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006714:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006718:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4313      	orrs	r3, r2
 8006720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	bc80      	pop	{r7}
 800672c:	4770      	bx	lr

0800672e <LL_RCC_SetI2CClockSource>:
{
 800672e:	b480      	push	{r7}
 8006730:	b083      	sub	sp, #12
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800673a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	091b      	lsrs	r3, r3, #4
 8006742:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006746:	43db      	mvns	r3, r3
 8006748:	401a      	ands	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	011b      	lsls	r3, r3, #4
 800674e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006752:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006756:	4313      	orrs	r3, r2
 8006758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	bc80      	pop	{r7}
 8006764:	4770      	bx	lr

08006766 <LL_RCC_SetLPTIMClockSource>:
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800676e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006772:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	0c1b      	lsrs	r3, r3, #16
 800677a:	041b      	lsls	r3, r3, #16
 800677c:	43db      	mvns	r3, r3
 800677e:	401a      	ands	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	041b      	lsls	r3, r3, #16
 8006784:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006788:	4313      	orrs	r3, r2
 800678a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr

08006798 <LL_RCC_SetRNGClockSource>:
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80067a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80067ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr

080067c2 <LL_RCC_SetADCClockSource>:
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80067ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4313      	orrs	r3, r2
 80067de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr

080067ec <LL_RCC_SetRTCClockSource>:
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80067f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006800:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4313      	orrs	r3, r2
 8006808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	bc80      	pop	{r7}
 8006814:	4770      	bx	lr

08006816 <LL_RCC_GetRTCClockSource>:
{
 8006816:	b480      	push	{r7}
 8006818:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800681a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800681e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006822:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006826:	4618      	mov	r0, r3
 8006828:	46bd      	mov	sp, r7
 800682a:	bc80      	pop	{r7}
 800682c:	4770      	bx	lr

0800682e <LL_RCC_ForceBackupDomainReset>:
{
 800682e:	b480      	push	{r7}
 8006830:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800683e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006846:	bf00      	nop
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr

0800684e <LL_RCC_ReleaseBackupDomainReset>:
{
 800684e:	b480      	push	{r7}
 8006850:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800685e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006866:	bf00      	nop
 8006868:	46bd      	mov	sp, r7
 800686a:	bc80      	pop	{r7}
 800686c:	4770      	bx	lr
	...

08006870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800687c:	2300      	movs	r3, #0
 800687e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006880:	2300      	movs	r3, #0
 8006882:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d058      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006890:	f7fe fd92 	bl	80053b8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006894:	f7fc fbdc 	bl	8003050 <HAL_GetTick>
 8006898:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800689a:	e009      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800689c:	f7fc fbd8 	bl	8003050 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d902      	bls.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	74fb      	strb	r3, [r7, #19]
        break;
 80068ae:	e006      	b.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80068b0:	4b7b      	ldr	r3, [pc, #492]	; (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068bc:	d1ee      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80068be:	7cfb      	ldrb	r3, [r7, #19]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d13c      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80068c4:	f7ff ffa7 	bl	8006816 <LL_RCC_GetRTCClockSource>
 80068c8:	4602      	mov	r2, r0
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d00f      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068de:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068e0:	f7ff ffa5 	bl	800682e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068e4:	f7ff ffb3 	bl	800684e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d014      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068fc:	f7fc fba8 	bl	8003050 <HAL_GetTick>
 8006900:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006902:	e00b      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006904:	f7fc fba4 	bl	8003050 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006912:	4293      	cmp	r3, r2
 8006914:	d902      	bls.n	800691c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	74fb      	strb	r3, [r7, #19]
            break;
 800691a:	e004      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800691c:	f7ff feb4 	bl	8006688 <LL_RCC_LSE_IsReady>
 8006920:	4603      	mov	r3, r0
 8006922:	2b01      	cmp	r3, #1
 8006924:	d1ee      	bne.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006926:	7cfb      	ldrb	r3, [r7, #19]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d105      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff ff5b 	bl	80067ec <LL_RCC_SetRTCClockSource>
 8006936:	e004      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006938:	7cfb      	ldrb	r3, [r7, #19]
 800693a:	74bb      	strb	r3, [r7, #18]
 800693c:	e001      	b.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693e:	7cfb      	ldrb	r3, [r7, #19]
 8006940:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d004      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	4618      	mov	r0, r3
 8006954:	f7ff fea9 	bl	80066aa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b00      	cmp	r3, #0
 8006962:	d004      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	4618      	mov	r0, r3
 800696a:	f7ff fe9e 	bl	80066aa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0320 	and.w	r3, r3, #32
 8006976:	2b00      	cmp	r3, #0
 8006978:	d004      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff fec0 	bl	8006704 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800698c:	2b00      	cmp	r3, #0
 800698e:	d004      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	4618      	mov	r0, r3
 8006996:	f7ff fee6 	bl	8006766 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d004      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff fedb 	bl	8006766 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d004      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7ff fed0 	bl	8006766 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d004      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff fea9 	bl	800672e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff fe9e 	bl	800672e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d004      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff fe93 	bl	800672e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d011      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7ff fe5e 	bl	80066da <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a26:	d107      	bne.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a36:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d010      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff fea5 	bl	8006798 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d107      	bne.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a64:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d011      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff fea3 	bl	80067c2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a84:	d107      	bne.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a94:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006a96:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3718      	adds	r7, #24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	58000400 	.word	0x58000400

08006aa4 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006aac:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ab4:	4904      	ldr	r1, [pc, #16]	; (8006ac8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	608b      	str	r3, [r1, #8]
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	58000400 	.word	0x58000400

08006acc <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006ad0:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad6:	4a04      	ldr	r2, [pc, #16]	; (8006ae8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006ae0:	bf00      	nop
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bc80      	pop	{r7}
 8006ae6:	4770      	bx	lr
 8006ae8:	58000400 	.word	0x58000400

08006aec <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006af0:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af6:	4a04      	ldr	r2, [pc, #16]	; (8006b08 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006af8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006b00:	bf00      	nop
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bc80      	pop	{r7}
 8006b06:	4770      	bx	lr
 8006b08:	58000400 	.word	0x58000400

08006b0c <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006b10:	4b03      	ldr	r3, [pc, #12]	; (8006b20 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b16:	619a      	str	r2, [r3, #24]
}
 8006b18:	bf00      	nop
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bc80      	pop	{r7}
 8006b1e:	4770      	bx	lr
 8006b20:	58000400 	.word	0x58000400

08006b24 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8006b24:	b480      	push	{r7}
 8006b26:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006b28:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d101      	bne.n	8006b38 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006b34:	2301      	movs	r3, #1
 8006b36:	e000      	b.n	8006b3a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	58000400 	.word	0x58000400

08006b48 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006b4c:	4b06      	ldr	r3, [pc, #24]	; (8006b68 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	f003 0304 	and.w	r3, r3, #4
 8006b54:	2b04      	cmp	r3, #4
 8006b56:	d101      	bne.n	8006b5c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e000      	b.n	8006b5e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bc80      	pop	{r7}
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	58000400 	.word	0x58000400

08006b6c <LL_RCC_RF_DisableReset>:
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006b84:	bf00      	nop
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr

08006b8c <LL_RCC_IsRFUnderReset>:
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ba0:	d101      	bne.n	8006ba6 <LL_RCC_IsRFUnderReset+0x1a>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e000      	b.n	8006ba8 <LL_RCC_IsRFUnderReset+0x1c>
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bc80      	pop	{r7}
 8006bae:	4770      	bx	lr

08006bb0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006bb8:	4b06      	ldr	r3, [pc, #24]	; (8006bd4 <LL_EXTI_EnableIT_32_63+0x24>)
 8006bba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006bbe:	4905      	ldr	r1, [pc, #20]	; (8006bd4 <LL_EXTI_EnableIT_32_63+0x24>)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	58000800 	.word	0x58000800

08006bd8 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d103      	bne.n	8006bee <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	73fb      	strb	r3, [r7, #15]
    return status;
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	e052      	b.n	8006c94 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	799b      	ldrb	r3, [r3, #6]
 8006bf6:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <HAL_SUBGHZ_Init+0x2c>
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d109      	bne.n	8006c18 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7fa fad4 	bl	80011b8 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006c10:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006c14:	f7ff ffcc 	bl	8006bb0 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d126      	bne.n	8006c6c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2202      	movs	r2, #2
 8006c22:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8006c24:	f7ff ffa2 	bl	8006b6c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006c28:	4b1c      	ldr	r3, [pc, #112]	; (8006c9c <HAL_SUBGHZ_Init+0xc4>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	1a9b      	subs	r3, r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	0cdb      	lsrs	r3, r3, #19
 8006c36:	2264      	movs	r2, #100	; 0x64
 8006c38:	fb02 f303 	mul.w	r3, r2, r3
 8006c3c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d105      	bne.n	8006c50 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	609a      	str	r2, [r3, #8]
        break;
 8006c4e:	e007      	b.n	8006c60 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006c56:	f7ff ff99 	bl	8006b8c <LL_RCC_IsRFUnderReset>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1ee      	bne.n	8006c3e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006c60:	f7ff ff34 	bl	8006acc <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006c64:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006c68:	f7ff ff1c 	bl	8006aa4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006c6c:	f7ff ff4e 	bl	8006b0c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10a      	bne.n	8006c8c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fab6 	bl	80071ec <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	719a      	strb	r2, [r3, #6]

  return status;
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	20000110 	.word	0x20000110

08006ca0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	607a      	str	r2, [r7, #4]
 8006caa:	461a      	mov	r2, r3
 8006cac:	460b      	mov	r3, r1
 8006cae:	817b      	strh	r3, [r7, #10]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	799b      	ldrb	r3, [r3, #6]
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d14a      	bne.n	8006d54 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	795b      	ldrb	r3, [r3, #5]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d101      	bne.n	8006cca <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	e045      	b.n	8006d56 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f000 fb56 	bl	8007388 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006cdc:	f7ff ff06 	bl	8006aec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006ce0:	210d      	movs	r1, #13
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f000 faa2 	bl	800722c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006ce8:	897b      	ldrh	r3, [r7, #10]
 8006cea:	0a1b      	lsrs	r3, r3, #8
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 fa9a 	bl	800722c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006cf8:	897b      	ldrh	r3, [r7, #10]
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 fa94 	bl	800722c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006d04:	2300      	movs	r3, #0
 8006d06:	82bb      	strh	r3, [r7, #20]
 8006d08:	e00a      	b.n	8006d20 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006d0a:	8abb      	ldrh	r3, [r7, #20]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	4413      	add	r3, r2
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	4619      	mov	r1, r3
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 fa89 	bl	800722c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006d1a:	8abb      	ldrh	r3, [r7, #20]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	82bb      	strh	r3, [r7, #20]
 8006d20:	8aba      	ldrh	r2, [r7, #20]
 8006d22:	893b      	ldrh	r3, [r7, #8]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d3f0      	bcc.n	8006d0a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006d28:	f7ff fed0 	bl	8006acc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 fb4f 	bl	80073d0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	75fb      	strb	r3, [r7, #23]
 8006d3e:	e001      	b.n	8006d44 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2201      	movs	r2, #1
 8006d48:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	715a      	strb	r2, [r3, #5]

    return status;
 8006d50:	7dfb      	ldrb	r3, [r7, #23]
 8006d52:	e000      	b.n	8006d56 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006d54:	2302      	movs	r3, #2
  }
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b088      	sub	sp, #32
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	60f8      	str	r0, [r7, #12]
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	817b      	strh	r3, [r7, #10]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	799b      	ldrb	r3, [r3, #6]
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d14a      	bne.n	8006e16 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	795b      	ldrb	r3, [r3, #5]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d101      	bne.n	8006d8c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e045      	b.n	8006e18 <HAL_SUBGHZ_ReadRegisters+0xba>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 faf8 	bl	8007388 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006d98:	f7ff fea8 	bl	8006aec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006d9c:	211d      	movs	r1, #29
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 fa44 	bl	800722c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006da4:	897b      	ldrh	r3, [r7, #10]
 8006da6:	0a1b      	lsrs	r3, r3, #8
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	4619      	mov	r1, r3
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f000 fa3c 	bl	800722c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006db4:	897b      	ldrh	r3, [r7, #10]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	4619      	mov	r1, r3
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 fa36 	bl	800722c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 fa32 	bl	800722c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006dc8:	2300      	movs	r3, #0
 8006dca:	82fb      	strh	r3, [r7, #22]
 8006dcc:	e009      	b.n	8006de2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006dce:	69b9      	ldr	r1, [r7, #24]
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 fa81 	bl	80072d8 <SUBGHZSPI_Receive>
      pData++;
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006ddc:	8afb      	ldrh	r3, [r7, #22]
 8006dde:	3301      	adds	r3, #1
 8006de0:	82fb      	strh	r3, [r7, #22]
 8006de2:	8afa      	ldrh	r2, [r7, #22]
 8006de4:	893b      	ldrh	r3, [r7, #8]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d3f1      	bcc.n	8006dce <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006dea:	f7ff fe6f 	bl	8006acc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 faee 	bl	80073d0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	77fb      	strb	r3, [r7, #31]
 8006e00:	e001      	b.n	8006e06 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	715a      	strb	r2, [r3, #5]

    return status;
 8006e12:	7ffb      	ldrb	r3, [r7, #31]
 8006e14:	e000      	b.n	8006e18 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006e16:	2302      	movs	r3, #2
  }
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3720      	adds	r7, #32
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	607a      	str	r2, [r7, #4]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	72fb      	strb	r3, [r7, #11]
 8006e30:	4613      	mov	r3, r2
 8006e32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	799b      	ldrb	r3, [r3, #6]
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d14a      	bne.n	8006ed4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	795b      	ldrb	r3, [r3, #5]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d101      	bne.n	8006e4a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8006e46:	2302      	movs	r3, #2
 8006e48:	e045      	b.n	8006ed6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 fa99 	bl	8007388 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006e56:	7afb      	ldrb	r3, [r7, #11]
 8006e58:	2b84      	cmp	r3, #132	; 0x84
 8006e5a:	d002      	beq.n	8006e62 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006e5c:	7afb      	ldrb	r3, [r7, #11]
 8006e5e:	2b94      	cmp	r3, #148	; 0x94
 8006e60:	d103      	bne.n	8006e6a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	711a      	strb	r2, [r3, #4]
 8006e68:	e002      	b.n	8006e70 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006e70:	f7ff fe3c 	bl	8006aec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006e74:	7afb      	ldrb	r3, [r7, #11]
 8006e76:	4619      	mov	r1, r3
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 f9d7 	bl	800722c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006e7e:	2300      	movs	r3, #0
 8006e80:	82bb      	strh	r3, [r7, #20]
 8006e82:	e00a      	b.n	8006e9a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006e84:	8abb      	ldrh	r3, [r7, #20]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	4413      	add	r3, r2
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 f9cc 	bl	800722c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e94:	8abb      	ldrh	r3, [r7, #20]
 8006e96:	3301      	adds	r3, #1
 8006e98:	82bb      	strh	r3, [r7, #20]
 8006e9a:	8aba      	ldrh	r2, [r7, #20]
 8006e9c:	893b      	ldrh	r3, [r7, #8]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d3f0      	bcc.n	8006e84 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006ea2:	f7ff fe13 	bl	8006acc <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006ea6:	7afb      	ldrb	r3, [r7, #11]
 8006ea8:	2b84      	cmp	r3, #132	; 0x84
 8006eaa:	d002      	beq.n	8006eb2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 fa8f 	bl	80073d0 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	75fb      	strb	r3, [r7, #23]
 8006ebe:	e001      	b.n	8006ec4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	715a      	strb	r2, [r3, #5]

    return status;
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
 8006ed2:	e000      	b.n	8006ed6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006ed4:	2302      	movs	r3, #2
  }
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b088      	sub	sp, #32
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	460b      	mov	r3, r1
 8006eec:	72fb      	strb	r3, [r7, #11]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	799b      	ldrb	r3, [r3, #6]
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d13d      	bne.n	8006f7c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	795b      	ldrb	r3, [r3, #5]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d101      	bne.n	8006f0c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e038      	b.n	8006f7e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 fa38 	bl	8007388 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006f18:	f7ff fde8 	bl	8006aec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006f1c:	7afb      	ldrb	r3, [r7, #11]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f983 	bl	800722c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006f26:	2100      	movs	r1, #0
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 f97f 	bl	800722c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006f2e:	2300      	movs	r3, #0
 8006f30:	82fb      	strh	r3, [r7, #22]
 8006f32:	e009      	b.n	8006f48 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006f34:	69b9      	ldr	r1, [r7, #24]
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 f9ce 	bl	80072d8 <SUBGHZSPI_Receive>
      pData++;
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006f42:	8afb      	ldrh	r3, [r7, #22]
 8006f44:	3301      	adds	r3, #1
 8006f46:	82fb      	strh	r3, [r7, #22]
 8006f48:	8afa      	ldrh	r2, [r7, #22]
 8006f4a:	893b      	ldrh	r3, [r7, #8]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d3f1      	bcc.n	8006f34 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f50:	f7ff fdbc 	bl	8006acc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 fa3b 	bl	80073d0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	77fb      	strb	r3, [r7, #31]
 8006f66:	e001      	b.n	8006f6c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	715a      	strb	r2, [r3, #5]

    return status;
 8006f78:	7ffb      	ldrb	r3, [r7, #31]
 8006f7a:	e000      	b.n	8006f7e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006f7c:	2302      	movs	r3, #2
  }
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3720      	adds	r7, #32
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b086      	sub	sp, #24
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	60f8      	str	r0, [r7, #12]
 8006f8e:	607a      	str	r2, [r7, #4]
 8006f90:	461a      	mov	r2, r3
 8006f92:	460b      	mov	r3, r1
 8006f94:	72fb      	strb	r3, [r7, #11]
 8006f96:	4613      	mov	r3, r2
 8006f98:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	799b      	ldrb	r3, [r3, #6]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d13e      	bne.n	8007022 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	795b      	ldrb	r3, [r3, #5]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d101      	bne.n	8006fb0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8006fac:	2302      	movs	r3, #2
 8006fae:	e039      	b.n	8007024 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f000 f9e6 	bl	8007388 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006fbc:	f7ff fd96 	bl	8006aec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006fc0:	210e      	movs	r1, #14
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 f932 	bl	800722c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006fc8:	7afb      	ldrb	r3, [r7, #11]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 f92d 	bl	800722c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	82bb      	strh	r3, [r7, #20]
 8006fd6:	e00a      	b.n	8006fee <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006fd8:	8abb      	ldrh	r3, [r7, #20]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	4413      	add	r3, r2
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 f922 	bl	800722c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006fe8:	8abb      	ldrh	r3, [r7, #20]
 8006fea:	3301      	adds	r3, #1
 8006fec:	82bb      	strh	r3, [r7, #20]
 8006fee:	8aba      	ldrh	r2, [r7, #20]
 8006ff0:	893b      	ldrh	r3, [r7, #8]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d3f0      	bcc.n	8006fd8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006ff6:	f7ff fd69 	bl	8006acc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f000 f9e8 	bl	80073d0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	75fb      	strb	r3, [r7, #23]
 800700c:	e001      	b.n	8007012 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2201      	movs	r2, #1
 8007016:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	715a      	strb	r2, [r3, #5]

    return status;
 800701e:	7dfb      	ldrb	r3, [r7, #23]
 8007020:	e000      	b.n	8007024 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007022:	2302      	movs	r3, #2
  }
}
 8007024:	4618      	mov	r0, r3
 8007026:	3718      	adds	r7, #24
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b088      	sub	sp, #32
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	607a      	str	r2, [r7, #4]
 8007036:	461a      	mov	r2, r3
 8007038:	460b      	mov	r3, r1
 800703a:	72fb      	strb	r3, [r7, #11]
 800703c:	4613      	mov	r3, r2
 800703e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	799b      	ldrb	r3, [r3, #6]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b01      	cmp	r3, #1
 800704c:	d141      	bne.n	80070d2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	795b      	ldrb	r3, [r3, #5]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d101      	bne.n	800705a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007056:	2302      	movs	r3, #2
 8007058:	e03c      	b.n	80070d4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2201      	movs	r2, #1
 800705e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f991 	bl	8007388 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007066:	f7ff fd41 	bl	8006aec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800706a:	211e      	movs	r1, #30
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f000 f8dd 	bl	800722c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007072:	7afb      	ldrb	r3, [r7, #11]
 8007074:	4619      	mov	r1, r3
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 f8d8 	bl	800722c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800707c:	2100      	movs	r1, #0
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f000 f8d4 	bl	800722c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007084:	2300      	movs	r3, #0
 8007086:	82fb      	strh	r3, [r7, #22]
 8007088:	e009      	b.n	800709e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800708a:	69b9      	ldr	r1, [r7, #24]
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 f923 	bl	80072d8 <SUBGHZSPI_Receive>
      pData++;
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	3301      	adds	r3, #1
 8007096:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007098:	8afb      	ldrh	r3, [r7, #22]
 800709a:	3301      	adds	r3, #1
 800709c:	82fb      	strh	r3, [r7, #22]
 800709e:	8afa      	ldrh	r2, [r7, #22]
 80070a0:	893b      	ldrh	r3, [r7, #8]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d3f1      	bcc.n	800708a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80070a6:	f7ff fd11 	bl	8006acc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 f990 	bl	80073d0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	77fb      	strb	r3, [r7, #31]
 80070bc:	e001      	b.n	80070c2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	715a      	strb	r2, [r3, #5]

    return status;
 80070ce:	7ffb      	ldrb	r3, [r7, #31]
 80070d0:	e000      	b.n	80070d4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80070d2:	2302      	movs	r3, #2
  }
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3720      	adds	r7, #32
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 80070e4:	2300      	movs	r3, #0
 80070e6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80070e8:	f107 020c 	add.w	r2, r7, #12
 80070ec:	2302      	movs	r3, #2
 80070ee:	2112      	movs	r1, #18
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7ff fef4 	bl	8006ede <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80070f6:	7b3b      	ldrb	r3, [r7, #12]
 80070f8:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80070fa:	89fb      	ldrh	r3, [r7, #14]
 80070fc:	021b      	lsls	r3, r3, #8
 80070fe:	b21a      	sxth	r2, r3
 8007100:	7b7b      	ldrb	r3, [r7, #13]
 8007102:	b21b      	sxth	r3, r3
 8007104:	4313      	orrs	r3, r2
 8007106:	b21b      	sxth	r3, r3
 8007108:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800710a:	f107 020c 	add.w	r2, r7, #12
 800710e:	2302      	movs	r3, #2
 8007110:	2102      	movs	r1, #2
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7ff fe84 	bl	8006e20 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007118:	89fb      	ldrh	r3, [r7, #14]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7fb fea0 	bl	8002e68 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007128:	89fb      	ldrh	r3, [r7, #14]
 800712a:	085b      	lsrs	r3, r3, #1
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7fb fea5 	bl	8002e84 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800713a:	89fb      	ldrh	r3, [r7, #14]
 800713c:	089b      	lsrs	r3, r3, #2
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <HAL_SUBGHZ_IRQHandler+0x70>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f7fb fef4 	bl	8002f34 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800714c:	89fb      	ldrh	r3, [r7, #14]
 800714e:	08db      	lsrs	r3, r3, #3
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <HAL_SUBGHZ_IRQHandler+0x82>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7fb fef9 	bl	8002f50 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800715e:	89fb      	ldrh	r3, [r7, #14]
 8007160:	091b      	lsrs	r3, r3, #4
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <HAL_SUBGHZ_IRQHandler+0x94>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7fb fefe 	bl	8002f6c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007170:	89fb      	ldrh	r3, [r7, #14]
 8007172:	095b      	lsrs	r3, r3, #5
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d002      	beq.n	8007182 <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7fb fecb 	bl	8002f18 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007182:	89fb      	ldrh	r3, [r7, #14]
 8007184:	099b      	lsrs	r3, r3, #6
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <HAL_SUBGHZ_IRQHandler+0xb8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fb fe86 	bl	8002ea0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007194:	89fb      	ldrh	r3, [r7, #14]
 8007196:	09db      	lsrs	r3, r3, #7
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00e      	beq.n	80071be <HAL_SUBGHZ_IRQHandler+0xe2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80071a0:	89fb      	ldrh	r3, [r7, #14]
 80071a2:	0a1b      	lsrs	r3, r3, #8
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <HAL_SUBGHZ_IRQHandler+0xda>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80071ac:	2101      	movs	r1, #1
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7fb fe84 	bl	8002ebc <HAL_SUBGHZ_CADStatusCallback>
 80071b4:	e003      	b.n	80071be <HAL_SUBGHZ_IRQHandler+0xe2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80071b6:	2100      	movs	r1, #0
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7fb fe7f 	bl	8002ebc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80071be:	89fb      	ldrh	r3, [r7, #14]
 80071c0:	0a5b      	lsrs	r3, r3, #9
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <HAL_SUBGHZ_IRQHandler+0xf4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7fb fe94 	bl	8002ef8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80071d0:	89fb      	ldrh	r3, [r7, #14]
 80071d2:	0b9b      	lsrs	r3, r3, #14
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <HAL_SUBGHZ_IRQHandler+0x106>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7fb fed3 	bl	8002f88 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80071e2:	bf00      	nop
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80071f4:	4b0c      	ldr	r3, [pc, #48]	; (8007228 <SUBGHZSPI_Init+0x3c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a0b      	ldr	r2, [pc, #44]	; (8007228 <SUBGHZSPI_Init+0x3c>)
 80071fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071fe:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007200:	4a09      	ldr	r2, [pc, #36]	; (8007228 <SUBGHZSPI_Init+0x3c>)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007208:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800720a:	4b07      	ldr	r3, [pc, #28]	; (8007228 <SUBGHZSPI_Init+0x3c>)
 800720c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007210:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007212:	4b05      	ldr	r3, [pc, #20]	; (8007228 <SUBGHZSPI_Init+0x3c>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a04      	ldr	r2, [pc, #16]	; (8007228 <SUBGHZSPI_Init+0x3c>)
 8007218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800721c:	6013      	str	r3, [r2, #0]
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	bc80      	pop	{r7}
 8007226:	4770      	bx	lr
 8007228:	58010000 	.word	0x58010000

0800722c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	460b      	mov	r3, r1
 8007236:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800723c:	4b23      	ldr	r3, [pc, #140]	; (80072cc <SUBGHZSPI_Transmit+0xa0>)
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	4613      	mov	r3, r2
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	1a9b      	subs	r3, r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	0cdb      	lsrs	r3, r3, #19
 800724a:	2264      	movs	r2, #100	; 0x64
 800724c:	fb02 f303 	mul.w	r3, r2, r3
 8007250:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d105      	bne.n	8007264 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	609a      	str	r2, [r3, #8]
      break;
 8007262:	e008      	b.n	8007276 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	3b01      	subs	r3, #1
 8007268:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800726a:	4b19      	ldr	r3, [pc, #100]	; (80072d0 <SUBGHZSPI_Transmit+0xa4>)
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b02      	cmp	r3, #2
 8007274:	d1ed      	bne.n	8007252 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007276:	4b17      	ldr	r3, [pc, #92]	; (80072d4 <SUBGHZSPI_Transmit+0xa8>)
 8007278:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	78fa      	ldrb	r2, [r7, #3]
 800727e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007280:	4b12      	ldr	r3, [pc, #72]	; (80072cc <SUBGHZSPI_Transmit+0xa0>)
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	4613      	mov	r3, r2
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	1a9b      	subs	r3, r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	0cdb      	lsrs	r3, r3, #19
 800728e:	2264      	movs	r2, #100	; 0x64
 8007290:	fb02 f303 	mul.w	r3, r2, r3
 8007294:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d105      	bne.n	80072a8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	609a      	str	r2, [r3, #8]
      break;
 80072a6:	e008      	b.n	80072ba <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	3b01      	subs	r3, #1
 80072ac:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80072ae:	4b08      	ldr	r3, [pc, #32]	; (80072d0 <SUBGHZSPI_Transmit+0xa4>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d1ed      	bne.n	8007296 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80072ba:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <SUBGHZSPI_Transmit+0xa4>)
 80072bc:	68db      	ldr	r3, [r3, #12]

  return status;
 80072be:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bc80      	pop	{r7}
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	20000110 	.word	0x20000110
 80072d0:	58010000 	.word	0x58010000
 80072d4:	5801000c 	.word	0x5801000c

080072d8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80072e6:	4b25      	ldr	r3, [pc, #148]	; (800737c <SUBGHZSPI_Receive+0xa4>)
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	4613      	mov	r3, r2
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	1a9b      	subs	r3, r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	0cdb      	lsrs	r3, r3, #19
 80072f4:	2264      	movs	r2, #100	; 0x64
 80072f6:	fb02 f303 	mul.w	r3, r2, r3
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d105      	bne.n	800730e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	609a      	str	r2, [r3, #8]
      break;
 800730c:	e008      	b.n	8007320 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	3b01      	subs	r3, #1
 8007312:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007314:	4b1a      	ldr	r3, [pc, #104]	; (8007380 <SUBGHZSPI_Receive+0xa8>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b02      	cmp	r3, #2
 800731e:	d1ed      	bne.n	80072fc <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007320:	4b18      	ldr	r3, [pc, #96]	; (8007384 <SUBGHZSPI_Receive+0xac>)
 8007322:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	22ff      	movs	r2, #255	; 0xff
 8007328:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800732a:	4b14      	ldr	r3, [pc, #80]	; (800737c <SUBGHZSPI_Receive+0xa4>)
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	4613      	mov	r3, r2
 8007330:	00db      	lsls	r3, r3, #3
 8007332:	1a9b      	subs	r3, r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	0cdb      	lsrs	r3, r3, #19
 8007338:	2264      	movs	r2, #100	; 0x64
 800733a:	fb02 f303 	mul.w	r3, r2, r3
 800733e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d105      	bne.n	8007352 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	609a      	str	r2, [r3, #8]
      break;
 8007350:	e008      	b.n	8007364 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3b01      	subs	r3, #1
 8007356:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007358:	4b09      	ldr	r3, [pc, #36]	; (8007380 <SUBGHZSPI_Receive+0xa8>)
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	2b01      	cmp	r3, #1
 8007362:	d1ed      	bne.n	8007340 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007364:	4b06      	ldr	r3, [pc, #24]	; (8007380 <SUBGHZSPI_Receive+0xa8>)
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	b2da      	uxtb	r2, r3
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	701a      	strb	r2, [r3, #0]

  return status;
 800736e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007370:	4618      	mov	r0, r3
 8007372:	371c      	adds	r7, #28
 8007374:	46bd      	mov	sp, r7
 8007376:	bc80      	pop	{r7}
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	20000110 	.word	0x20000110
 8007380:	58010000 	.word	0x58010000
 8007384:	5801000c 	.word	0x5801000c

08007388 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	791b      	ldrb	r3, [r3, #4]
 8007394:	2b01      	cmp	r3, #1
 8007396:	d111      	bne.n	80073bc <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007398:	4b0c      	ldr	r3, [pc, #48]	; (80073cc <SUBGHZ_CheckDeviceReady+0x44>)
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	4613      	mov	r3, r2
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	4413      	add	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	0c1b      	lsrs	r3, r3, #16
 80073a6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80073a8:	f7ff fba0 	bl	8006aec <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1f9      	bne.n	80073ac <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80073b8:	f7ff fb88 	bl	8006acc <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f807 	bl	80073d0 <SUBGHZ_WaitOnBusy>
 80073c2:	4603      	mov	r3, r0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	20000110 	.word	0x20000110

080073d0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80073dc:	4b12      	ldr	r3, [pc, #72]	; (8007428 <SUBGHZ_WaitOnBusy+0x58>)
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	4613      	mov	r3, r2
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	4413      	add	r3, r2
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	0d1b      	lsrs	r3, r3, #20
 80073ea:	2264      	movs	r2, #100	; 0x64
 80073ec:	fb02 f303 	mul.w	r3, r2, r3
 80073f0:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80073f2:	f7ff fba9 	bl	8006b48 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80073f6:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d105      	bne.n	800740a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2202      	movs	r2, #2
 8007406:	609a      	str	r2, [r3, #8]
      break;
 8007408:	e009      	b.n	800741e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3b01      	subs	r3, #1
 800740e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007410:	f7ff fb88 	bl	8006b24 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007414:	4602      	mov	r2, r0
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	4013      	ands	r3, r2
 800741a:	2b01      	cmp	r3, #1
 800741c:	d0e9      	beq.n	80073f2 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800741e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	20000110 	.word	0x20000110

0800742c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e049      	b.n	80074d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d106      	bne.n	8007458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f841 	bl	80074da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3304      	adds	r3, #4
 8007468:	4619      	mov	r1, r3
 800746a:	4610      	mov	r0, r2
 800746c:	f000 f9ce 	bl	800780c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80074e2:	bf00      	nop
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bc80      	pop	{r7}
 80074ea:	4770      	bx	lr

080074ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d001      	beq.n	8007504 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e036      	b.n	8007572 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0201 	orr.w	r2, r2, #1
 800751a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a16      	ldr	r2, [pc, #88]	; (800757c <HAL_TIM_Base_Start_IT+0x90>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d004      	beq.n	8007530 <HAL_TIM_Base_Start_IT+0x44>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800752e:	d115      	bne.n	800755c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	4b12      	ldr	r3, [pc, #72]	; (8007580 <HAL_TIM_Base_Start_IT+0x94>)
 8007538:	4013      	ands	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b06      	cmp	r3, #6
 8007540:	d015      	beq.n	800756e <HAL_TIM_Base_Start_IT+0x82>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007548:	d011      	beq.n	800756e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f042 0201 	orr.w	r2, r2, #1
 8007558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800755a:	e008      	b.n	800756e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0201 	orr.w	r2, r2, #1
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	e000      	b.n	8007570 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800756e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	bc80      	pop	{r7}
 800757a:	4770      	bx	lr
 800757c:	40012c00 	.word	0x40012c00
 8007580:	00010007 	.word	0x00010007

08007584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b02      	cmp	r3, #2
 8007598:	d122      	bne.n	80075e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d11b      	bne.n	80075e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f06f 0202 	mvn.w	r2, #2
 80075b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	f003 0303 	and.w	r3, r3, #3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f904 	bl	80077d4 <HAL_TIM_IC_CaptureCallback>
 80075cc:	e005      	b.n	80075da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f8f7 	bl	80077c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f906 	bl	80077e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d122      	bne.n	8007634 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d11b      	bne.n	8007634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f06f 0204 	mvn.w	r2, #4
 8007604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2202      	movs	r2, #2
 800760a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007616:	2b00      	cmp	r3, #0
 8007618:	d003      	beq.n	8007622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f8da 	bl	80077d4 <HAL_TIM_IC_CaptureCallback>
 8007620:	e005      	b.n	800762e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f8cd 	bl	80077c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f8dc 	bl	80077e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	f003 0308 	and.w	r3, r3, #8
 800763e:	2b08      	cmp	r3, #8
 8007640:	d122      	bne.n	8007688 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	f003 0308 	and.w	r3, r3, #8
 800764c:	2b08      	cmp	r3, #8
 800764e:	d11b      	bne.n	8007688 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f06f 0208 	mvn.w	r2, #8
 8007658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2204      	movs	r2, #4
 800765e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	f003 0303 	and.w	r3, r3, #3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d003      	beq.n	8007676 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f8b0 	bl	80077d4 <HAL_TIM_IC_CaptureCallback>
 8007674:	e005      	b.n	8007682 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f8a3 	bl	80077c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f8b2 	bl	80077e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f003 0310 	and.w	r3, r3, #16
 8007692:	2b10      	cmp	r3, #16
 8007694:	d122      	bne.n	80076dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f003 0310 	and.w	r3, r3, #16
 80076a0:	2b10      	cmp	r3, #16
 80076a2:	d11b      	bne.n	80076dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f06f 0210 	mvn.w	r2, #16
 80076ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2208      	movs	r2, #8
 80076b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d003      	beq.n	80076ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f886 	bl	80077d4 <HAL_TIM_IC_CaptureCallback>
 80076c8:	e005      	b.n	80076d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f879 	bl	80077c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 f888 	bl	80077e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d10e      	bne.n	8007708 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d107      	bne.n	8007708 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f06f 0201 	mvn.w	r2, #1
 8007700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7f9 fc24 	bl	8000f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007712:	2b80      	cmp	r3, #128	; 0x80
 8007714:	d10e      	bne.n	8007734 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007720:	2b80      	cmp	r3, #128	; 0x80
 8007722:	d107      	bne.n	8007734 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800772c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f8d7 	bl	80078e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800773e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007742:	d10e      	bne.n	8007762 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800774e:	2b80      	cmp	r3, #128	; 0x80
 8007750:	d107      	bne.n	8007762 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800775a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f8c9 	bl	80078f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776c:	2b40      	cmp	r3, #64	; 0x40
 800776e:	d10e      	bne.n	800778e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777a:	2b40      	cmp	r3, #64	; 0x40
 800777c:	d107      	bne.n	800778e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f835 	bl	80077f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	f003 0320 	and.w	r3, r3, #32
 8007798:	2b20      	cmp	r3, #32
 800779a:	d10e      	bne.n	80077ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f003 0320 	and.w	r3, r3, #32
 80077a6:	2b20      	cmp	r3, #32
 80077a8:	d107      	bne.n	80077ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f06f 0220 	mvn.w	r2, #32
 80077b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f88b 	bl	80078d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077ba:	bf00      	nop
 80077bc:	3708      	adds	r7, #8
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077c2:	b480      	push	{r7}
 80077c4:	b083      	sub	sp, #12
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077ca:	bf00      	nop
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bc80      	pop	{r7}
 80077d2:	4770      	bx	lr

080077d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bc80      	pop	{r7}
 80077e4:	4770      	bx	lr

080077e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077ee:	bf00      	nop
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bc80      	pop	{r7}
 80077f6:	4770      	bx	lr

080077f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr
	...

0800780c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a29      	ldr	r2, [pc, #164]	; (80078c4 <TIM_Base_SetConfig+0xb8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d003      	beq.n	800782c <TIM_Base_SetConfig+0x20>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800782a:	d108      	bne.n	800783e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	4313      	orrs	r3, r2
 800783c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a20      	ldr	r2, [pc, #128]	; (80078c4 <TIM_Base_SetConfig+0xb8>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d00b      	beq.n	800785e <TIM_Base_SetConfig+0x52>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800784c:	d007      	beq.n	800785e <TIM_Base_SetConfig+0x52>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a1d      	ldr	r2, [pc, #116]	; (80078c8 <TIM_Base_SetConfig+0xbc>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d003      	beq.n	800785e <TIM_Base_SetConfig+0x52>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a1c      	ldr	r2, [pc, #112]	; (80078cc <TIM_Base_SetConfig+0xc0>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d108      	bne.n	8007870 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	4313      	orrs	r3, r2
 800786e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a0b      	ldr	r2, [pc, #44]	; (80078c4 <TIM_Base_SetConfig+0xb8>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d007      	beq.n	80078ac <TIM_Base_SetConfig+0xa0>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a0a      	ldr	r2, [pc, #40]	; (80078c8 <TIM_Base_SetConfig+0xbc>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d003      	beq.n	80078ac <TIM_Base_SetConfig+0xa0>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a09      	ldr	r2, [pc, #36]	; (80078cc <TIM_Base_SetConfig+0xc0>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d103      	bne.n	80078b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	691a      	ldr	r2, [r3, #16]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	615a      	str	r2, [r3, #20]
}
 80078ba:	bf00      	nop
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	bc80      	pop	{r7}
 80078c2:	4770      	bx	lr
 80078c4:	40012c00 	.word	0x40012c00
 80078c8:	40014400 	.word	0x40014400
 80078cc:	40014800 	.word	0x40014800

080078d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	bc80      	pop	{r7}
 80078e0:	4770      	bx	lr

080078e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bc80      	pop	{r7}
 80078f2:	4770      	bx	lr

080078f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	bc80      	pop	{r7}
 8007904:	4770      	bx	lr

08007906 <LL_RCC_GetUSARTClockSource>:
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800790e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007912:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	401a      	ands	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	041b      	lsls	r3, r3, #16
 800791e:	4313      	orrs	r3, r2
}
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	bc80      	pop	{r7}
 8007928:	4770      	bx	lr

0800792a <LL_RCC_GetLPUARTClockSource>:
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007936:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4013      	ands	r3, r2
}
 800793e:	4618      	mov	r0, r3
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	bc80      	pop	{r7}
 8007946:	4770      	bx	lr

08007948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e042      	b.n	80079e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007960:	2b00      	cmp	r3, #0
 8007962:	d106      	bne.n	8007972 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f7fa f90d 	bl	8001b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2224      	movs	r2, #36	; 0x24
 8007976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f022 0201 	bic.w	r2, r2, #1
 8007988:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fd80 	bl	8008490 <UART_SetConfig>
 8007990:	4603      	mov	r3, r0
 8007992:	2b01      	cmp	r3, #1
 8007994:	d101      	bne.n	800799a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e022      	b.n	80079e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 ffe8 	bl	8008978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0201 	orr.w	r2, r2, #1
 80079d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 f86e 	bl	8008aba <UART_CheckIdleState>
 80079de:	4603      	mov	r3, r0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e031      	b.n	8007a5e <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2224      	movs	r2, #36	; 0x24
 80079fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0201 	bic.w	r2, r2, #1
 8007a10:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2200      	movs	r2, #0
 8007a18:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2200      	movs	r2, #0
 8007a28:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7fa f932 	bl	8001c94 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b08a      	sub	sp, #40	; 0x28
 8007a6a:	af02      	add	r7, sp, #8
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	60b9      	str	r1, [r7, #8]
 8007a70:	603b      	str	r3, [r7, #0]
 8007a72:	4613      	mov	r3, r2
 8007a74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a7c:	2b20      	cmp	r3, #32
 8007a7e:	d173      	bne.n	8007b68 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <HAL_UART_Transmit+0x26>
 8007a86:	88fb      	ldrh	r3, [r7, #6]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d101      	bne.n	8007a90 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e06c      	b.n	8007b6a <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2221      	movs	r2, #33	; 0x21
 8007a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007aa0:	f7fb fad6 	bl	8003050 <HAL_GetTick>
 8007aa4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	88fa      	ldrh	r2, [r7, #6]
 8007aaa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	88fa      	ldrh	r2, [r7, #6]
 8007ab2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007abe:	d108      	bne.n	8007ad2 <HAL_UART_Transmit+0x6c>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d104      	bne.n	8007ad2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	61bb      	str	r3, [r7, #24]
 8007ad0:	e003      	b.n	8007ada <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ada:	e02c      	b.n	8007b36 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2180      	movs	r1, #128	; 0x80
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f001 f835 	bl	8008b56 <UART_WaitOnFlagUntilTimeout>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e039      	b.n	8007b6a <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10b      	bne.n	8007b14 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	461a      	mov	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	3302      	adds	r3, #2
 8007b10:	61bb      	str	r3, [r7, #24]
 8007b12:	e007      	b.n	8007b24 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	781a      	ldrb	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	3301      	adds	r3, #1
 8007b22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1cc      	bne.n	8007adc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	2140      	movs	r1, #64	; 0x40
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f001 f802 	bl	8008b56 <UART_WaitOnFlagUntilTimeout>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e006      	b.n	8007b6a <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	e000      	b.n	8007b6a <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8007b68:	2302      	movs	r3, #2
  }
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3720      	adds	r7, #32
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b0a2      	sub	sp, #136	; 0x88
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b8a:	e853 3f00 	ldrex	r3, [r3]
 8007b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b92:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8007b96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ba6:	66ba      	str	r2, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007baa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007bac:	e841 2300 	strex	r3, r2, [r1]
 8007bb0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007bb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e4      	bne.n	8007b82 <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc2:	e853 3f00 	ldrex	r3, [r3]
 8007bc6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bca:	f023 5384 	bic.w	r3, r3, #276824064	; 0x10800000
 8007bce:	f023 0301 	bic.w	r3, r3, #1
 8007bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3308      	adds	r3, #8
 8007bda:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007bdc:	65ba      	str	r2, [r7, #88]	; 0x58
 8007bde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007be2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007be4:	e841 2300 	strex	r3, r2, [r1]
 8007be8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d1e3      	bne.n	8007bb8 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d118      	bne.n	8007c2a <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c08:	f023 0310 	bic.w	r3, r3, #16
 8007c0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	461a      	mov	r2, r3
 8007c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c16:	647b      	str	r3, [r7, #68]	; 0x44
 8007c18:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c1e:	e841 2300 	strex	r3, r2, [r1]
 8007c22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1e6      	bne.n	8007bf8 <HAL_UART_Abort_IT+0x84>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00f      	beq.n	8007c52 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c3c:	2b80      	cmp	r3, #128	; 0x80
 8007c3e:	d104      	bne.n	8007c4a <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c44:	4a67      	ldr	r2, [pc, #412]	; (8007de4 <HAL_UART_Abort_IT+0x270>)
 8007c46:	639a      	str	r2, [r3, #56]	; 0x38
 8007c48:	e003      	b.n	8007c52 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c4e:	2200      	movs	r2, #0
 8007c50:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d011      	beq.n	8007c80 <HAL_UART_Abort_IT+0x10c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c66:	2b40      	cmp	r3, #64	; 0x40
 8007c68:	d105      	bne.n	8007c76 <HAL_UART_Abort_IT+0x102>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c70:	4a5d      	ldr	r2, [pc, #372]	; (8007de8 <HAL_UART_Abort_IT+0x274>)
 8007c72:	639a      	str	r2, [r3, #56]	; 0x38
 8007c74:	e004      	b.n	8007c80 <HAL_UART_Abort_IT+0x10c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8a:	2b80      	cmp	r3, #128	; 0x80
 8007c8c:	d12d      	bne.n	8007cea <HAL_UART_Abort_IT+0x176>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3308      	adds	r3, #8
 8007c94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ca4:	677b      	str	r3, [r7, #116]	; 0x74
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	3308      	adds	r3, #8
 8007cac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007cae:	633a      	str	r2, [r7, #48]	; 0x30
 8007cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e5      	bne.n	8007c8e <HAL_UART_Abort_IT+0x11a>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d00f      	beq.n	8007cea <HAL_UART_Abort_IT+0x176>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fc fefe 	bl	8004ad0 <HAL_DMA_Abort_IT>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d004      	beq.n	8007ce4 <HAL_UART_Abort_IT+0x170>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cde:	2200      	movs	r2, #0
 8007ce0:	639a      	str	r2, [r3, #56]	; 0x38
 8007ce2:	e002      	b.n	8007cea <HAL_UART_Abort_IT+0x176>
      }
      else
      {
        abortcplt = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf4:	2b40      	cmp	r3, #64	; 0x40
 8007cf6:	d133      	bne.n	8007d60 <HAL_UART_Abort_IT+0x1ec>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	e853 3f00 	ldrex	r3, [r3]
 8007d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d0e:	673b      	str	r3, [r7, #112]	; 0x70
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3308      	adds	r3, #8
 8007d16:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007d18:	61fa      	str	r2, [r7, #28]
 8007d1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1c:	69b9      	ldr	r1, [r7, #24]
 8007d1e:	69fa      	ldr	r2, [r7, #28]
 8007d20:	e841 2300 	strex	r3, r2, [r1]
 8007d24:	617b      	str	r3, [r7, #20]
   return(result);
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e5      	bne.n	8007cf8 <HAL_UART_Abort_IT+0x184>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d014      	beq.n	8007d60 <HAL_UART_Abort_IT+0x1ec>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fc fec7 	bl	8004ad0 <HAL_DMA_Abort_IT>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d008      	beq.n	8007d5a <HAL_UART_Abort_IT+0x1e6>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d4e:	2200      	movs	r2, #0
 8007d50:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 8007d52:	2301      	movs	r3, #1
 8007d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d58:	e002      	b.n	8007d60 <HAL_UART_Abort_IT+0x1ec>
      }
      else
      {
        abortcplt = 0U;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8007d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d138      	bne.n	8007dda <HAL_UART_Abort_IT+0x266>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->RxXferCount = 0U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	675a      	str	r2, [r3, #116]	; 0x74
    huart->TxISR = NULL;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	679a      	str	r2, [r3, #120]	; 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	220f      	movs	r2, #15
 8007d92:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d9c:	d107      	bne.n	8007dae <HAL_UART_Abort_IT+0x23a>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	699a      	ldr	r2, [r3, #24]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f042 0210 	orr.w	r2, r2, #16
 8007dac:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	699a      	ldr	r2, [r3, #24]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f042 0208 	orr.w	r2, r2, #8
 8007dbc:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2220      	movs	r2, #32
 8007dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2220      	movs	r2, #32
 8007dca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fb51 	bl	800847c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3788      	adds	r7, #136	; 0x88
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	08009195 	.word	0x08009195
 8007de8:	08009221 	.word	0x08009221

08007dec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b0ba      	sub	sp, #232	; 0xe8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007e16:	f640 030f 	movw	r3, #2063	; 0x80f
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007e20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d11b      	bne.n	8007e60 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e2c:	f003 0320 	and.w	r3, r3, #32
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d015      	beq.n	8007e60 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e38:	f003 0320 	and.w	r3, r3, #32
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d105      	bne.n	8007e4c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d009      	beq.n	8007e60 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 82e3 	beq.w	800841c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	4798      	blx	r3
      }
      return;
 8007e5e:	e2dd      	b.n	800841c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 8123 	beq.w	80080b0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007e6a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007e6e:	4b8d      	ldr	r3, [pc, #564]	; (80080a4 <HAL_UART_IRQHandler+0x2b8>)
 8007e70:	4013      	ands	r3, r2
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d106      	bne.n	8007e84 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007e76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007e7a:	4b8b      	ldr	r3, [pc, #556]	; (80080a8 <HAL_UART_IRQHandler+0x2bc>)
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f000 8116 	beq.w	80080b0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d011      	beq.n	8007eb4 <HAL_UART_IRQHandler+0xc8>
 8007e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00b      	beq.n	8007eb4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eaa:	f043 0201 	orr.w	r2, r3, #1
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb8:	f003 0302 	and.w	r3, r3, #2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d011      	beq.n	8007ee4 <HAL_UART_IRQHandler+0xf8>
 8007ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00b      	beq.n	8007ee4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eda:	f043 0204 	orr.w	r2, r3, #4
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee8:	f003 0304 	and.w	r3, r3, #4
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d011      	beq.n	8007f14 <HAL_UART_IRQHandler+0x128>
 8007ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00b      	beq.n	8007f14 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2204      	movs	r2, #4
 8007f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f0a:	f043 0202 	orr.w	r2, r3, #2
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f18:	f003 0308 	and.w	r3, r3, #8
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d017      	beq.n	8007f50 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f24:	f003 0320 	and.w	r3, r3, #32
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d105      	bne.n	8007f38 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007f2c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007f30:	4b5c      	ldr	r3, [pc, #368]	; (80080a4 <HAL_UART_IRQHandler+0x2b8>)
 8007f32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00b      	beq.n	8007f50 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2208      	movs	r2, #8
 8007f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f46:	f043 0208 	orr.w	r2, r3, #8
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d012      	beq.n	8007f82 <HAL_UART_IRQHandler+0x196>
 8007f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00c      	beq.n	8007f82 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f78:	f043 0220 	orr.w	r2, r3, #32
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 8249 	beq.w	8008420 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d013      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f9e:	f003 0320 	and.w	r3, r3, #32
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d105      	bne.n	8007fb2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d007      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd6:	2b40      	cmp	r3, #64	; 0x40
 8007fd8:	d005      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fde:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d054      	beq.n	8008090 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 ff64 	bl	8008eb4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff6:	2b40      	cmp	r3, #64	; 0x40
 8007ff8:	d146      	bne.n	8008088 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3308      	adds	r3, #8
 8008000:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008004:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008008:	e853 3f00 	ldrex	r3, [r3]
 800800c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008010:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008014:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3308      	adds	r3, #8
 8008022:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008026:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800802a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008032:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008036:	e841 2300 	strex	r3, r2, [r1]
 800803a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800803e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1d9      	bne.n	8007ffa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800804c:	2b00      	cmp	r3, #0
 800804e:	d017      	beq.n	8008080 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008056:	4a15      	ldr	r2, [pc, #84]	; (80080ac <HAL_UART_IRQHandler+0x2c0>)
 8008058:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008060:	4618      	mov	r0, r3
 8008062:	f7fc fd35 	bl	8004ad0 <HAL_DMA_Abort_IT>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d019      	beq.n	80080a0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800807a:	4610      	mov	r0, r2
 800807c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800807e:	e00f      	b.n	80080a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f9f2 	bl	800846a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008086:	e00b      	b.n	80080a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f9ee 	bl	800846a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800808e:	e007      	b.n	80080a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f9ea 	bl	800846a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800809e:	e1bf      	b.n	8008420 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a0:	bf00      	nop
    return;
 80080a2:	e1bd      	b.n	8008420 <HAL_UART_IRQHandler+0x634>
 80080a4:	10000001 	.word	0x10000001
 80080a8:	04000120 	.word	0x04000120
 80080ac:	08009169 	.word	0x08009169

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	f040 8153 	bne.w	8008360 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80080ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080be:	f003 0310 	and.w	r3, r3, #16
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 814c 	beq.w	8008360 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80080c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080cc:	f003 0310 	and.w	r3, r3, #16
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 8145 	beq.w	8008360 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2210      	movs	r2, #16
 80080dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e8:	2b40      	cmp	r3, #64	; 0x40
 80080ea:	f040 80bb 	bne.w	8008264 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 818f 	beq.w	8008424 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800810c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008110:	429a      	cmp	r2, r3
 8008112:	f080 8187 	bcs.w	8008424 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800811c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0320 	and.w	r3, r3, #32
 800812e:	2b00      	cmp	r3, #0
 8008130:	f040 8087 	bne.w	8008242 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800814c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008150:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	461a      	mov	r2, r3
 800815a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800815e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008162:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800816a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008176:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1da      	bne.n	8008134 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3308      	adds	r3, #8
 8008184:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800818e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008190:	f023 0301 	bic.w	r3, r3, #1
 8008194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3308      	adds	r3, #8
 800819e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80081a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80081a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80081aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80081ae:	e841 2300 	strex	r3, r2, [r1]
 80081b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80081b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1e1      	bne.n	800817e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3308      	adds	r3, #8
 80081c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081c4:	e853 3f00 	ldrex	r3, [r3]
 80081c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	3308      	adds	r3, #8
 80081da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80081ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e3      	bne.n	80081ba <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008208:	e853 3f00 	ldrex	r3, [r3]
 800820c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800820e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008210:	f023 0310 	bic.w	r3, r3, #16
 8008214:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	461a      	mov	r2, r3
 800821e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008222:	65bb      	str	r3, [r7, #88]	; 0x58
 8008224:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008226:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008228:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800822a:	e841 2300 	strex	r3, r2, [r1]
 800822e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1e4      	bne.n	8008200 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800823c:	4618      	mov	r0, r3
 800823e:	f7fc fbe9 	bl	8004a14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2202      	movs	r2, #2
 8008246:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008254:	b29b      	uxth	r3, r3
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	b29b      	uxth	r3, r3
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7f9 fd3b 	bl	8001cd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008262:	e0df      	b.n	8008424 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008270:	b29b      	uxth	r3, r3
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800827e:	b29b      	uxth	r3, r3
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 80d1 	beq.w	8008428 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008286:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 80cc 	beq.w	8008428 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	e853 3f00 	ldrex	r3, [r3]
 800829c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800829e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	461a      	mov	r2, r3
 80082ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082b2:	647b      	str	r3, [r7, #68]	; 0x44
 80082b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e4      	bne.n	8008290 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3308      	adds	r3, #8
 80082cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	623b      	str	r3, [r7, #32]
   return(result);
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082dc:	f023 0301 	bic.w	r3, r3, #1
 80082e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3308      	adds	r3, #8
 80082ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80082ee:	633a      	str	r2, [r7, #48]	; 0x30
 80082f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082f6:	e841 2300 	strex	r3, r2, [r1]
 80082fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1e1      	bne.n	80082c6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2220      	movs	r2, #32
 8008306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	e853 3f00 	ldrex	r3, [r3]
 8008322:	60fb      	str	r3, [r7, #12]
   return(result);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f023 0310 	bic.w	r3, r3, #16
 800832a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008338:	61fb      	str	r3, [r7, #28]
 800833a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833c:	69b9      	ldr	r1, [r7, #24]
 800833e:	69fa      	ldr	r2, [r7, #28]
 8008340:	e841 2300 	strex	r3, r2, [r1]
 8008344:	617b      	str	r3, [r7, #20]
   return(result);
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1e4      	bne.n	8008316 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008352:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7f9 fcbd 	bl	8001cd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800835e:	e063      	b.n	8008428 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00e      	beq.n	800838a <HAL_UART_IRQHandler+0x59e>
 800836c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d008      	beq.n	800838a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008380:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 ffb7 	bl	80092f6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008388:	e051      	b.n	800842e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800838a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800838e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008392:	2b00      	cmp	r3, #0
 8008394:	d014      	beq.n	80083c0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800839a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d105      	bne.n	80083ae <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80083a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d008      	beq.n	80083c0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d03a      	beq.n	800842c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	4798      	blx	r3
    }
    return;
 80083be:	e035      	b.n	800842c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80083c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d009      	beq.n	80083e0 <HAL_UART_IRQHandler+0x5f4>
 80083cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d003      	beq.n	80083e0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 ff61 	bl	80092a0 <UART_EndTransmit_IT>
    return;
 80083de:	e026      	b.n	800842e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80083e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d009      	beq.n	8008400 <HAL_UART_IRQHandler+0x614>
 80083ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d003      	beq.n	8008400 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 ff8e 	bl	800931a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083fe:	e016      	b.n	800842e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d010      	beq.n	800842e <HAL_UART_IRQHandler+0x642>
 800840c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008410:	2b00      	cmp	r3, #0
 8008412:	da0c      	bge.n	800842e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 ff77 	bl	8009308 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800841a:	e008      	b.n	800842e <HAL_UART_IRQHandler+0x642>
      return;
 800841c:	bf00      	nop
 800841e:	e006      	b.n	800842e <HAL_UART_IRQHandler+0x642>
    return;
 8008420:	bf00      	nop
 8008422:	e004      	b.n	800842e <HAL_UART_IRQHandler+0x642>
      return;
 8008424:	bf00      	nop
 8008426:	e002      	b.n	800842e <HAL_UART_IRQHandler+0x642>
      return;
 8008428:	bf00      	nop
 800842a:	e000      	b.n	800842e <HAL_UART_IRQHandler+0x642>
    return;
 800842c:	bf00      	nop
  }
}
 800842e:	37e8      	adds	r7, #232	; 0xe8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	bc80      	pop	{r7}
 8008444:	4770      	bx	lr

08008446 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800844e:	bf00      	nop
 8008450:	370c      	adds	r7, #12
 8008452:	46bd      	mov	sp, r7
 8008454:	bc80      	pop	{r7}
 8008456:	4770      	bx	lr

08008458 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	bc80      	pop	{r7}
 8008468:	4770      	bx	lr

0800846a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800846a:	b480      	push	{r7}
 800846c:	b083      	sub	sp, #12
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008472:	bf00      	nop
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	bc80      	pop	{r7}
 800847a:	4770      	bx	lr

0800847c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	bc80      	pop	{r7}
 800848c:	4770      	bx	lr
	...

08008490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008494:	b08c      	sub	sp, #48	; 0x30
 8008496:	af00      	add	r7, sp, #0
 8008498:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	689a      	ldr	r2, [r3, #8]
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	431a      	orrs	r2, r3
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	431a      	orrs	r2, r3
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	69db      	ldr	r3, [r3, #28]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	4b94      	ldr	r3, [pc, #592]	; (8008710 <UART_SetConfig+0x280>)
 80084c0:	4013      	ands	r3, r2
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	6812      	ldr	r2, [r2, #0]
 80084c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084c8:	430b      	orrs	r3, r1
 80084ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	68da      	ldr	r2, [r3, #12]
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	430a      	orrs	r2, r1
 80084e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a89      	ldr	r2, [pc, #548]	; (8008714 <UART_SetConfig+0x284>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d004      	beq.n	80084fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084f8:	4313      	orrs	r3, r2
 80084fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008506:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	6812      	ldr	r2, [r2, #0]
 800850e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008510:	430b      	orrs	r3, r1
 8008512:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851a:	f023 010f 	bic.w	r1, r3, #15
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	430a      	orrs	r2, r1
 8008528:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a7a      	ldr	r2, [pc, #488]	; (8008718 <UART_SetConfig+0x288>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d127      	bne.n	8008584 <UART_SetConfig+0xf4>
 8008534:	2003      	movs	r0, #3
 8008536:	f7ff f9e6 	bl	8007906 <LL_RCC_GetUSARTClockSource>
 800853a:	4603      	mov	r3, r0
 800853c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008540:	2b03      	cmp	r3, #3
 8008542:	d81b      	bhi.n	800857c <UART_SetConfig+0xec>
 8008544:	a201      	add	r2, pc, #4	; (adr r2, 800854c <UART_SetConfig+0xbc>)
 8008546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854a:	bf00      	nop
 800854c:	0800855d 	.word	0x0800855d
 8008550:	0800856d 	.word	0x0800856d
 8008554:	08008565 	.word	0x08008565
 8008558:	08008575 	.word	0x08008575
 800855c:	2301      	movs	r3, #1
 800855e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008562:	e080      	b.n	8008666 <UART_SetConfig+0x1d6>
 8008564:	2302      	movs	r3, #2
 8008566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800856a:	e07c      	b.n	8008666 <UART_SetConfig+0x1d6>
 800856c:	2304      	movs	r3, #4
 800856e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008572:	e078      	b.n	8008666 <UART_SetConfig+0x1d6>
 8008574:	2308      	movs	r3, #8
 8008576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800857a:	e074      	b.n	8008666 <UART_SetConfig+0x1d6>
 800857c:	2310      	movs	r3, #16
 800857e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008582:	e070      	b.n	8008666 <UART_SetConfig+0x1d6>
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a64      	ldr	r2, [pc, #400]	; (800871c <UART_SetConfig+0x28c>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d138      	bne.n	8008600 <UART_SetConfig+0x170>
 800858e:	200c      	movs	r0, #12
 8008590:	f7ff f9b9 	bl	8007906 <LL_RCC_GetUSARTClockSource>
 8008594:	4603      	mov	r3, r0
 8008596:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800859a:	2b0c      	cmp	r3, #12
 800859c:	d82c      	bhi.n	80085f8 <UART_SetConfig+0x168>
 800859e:	a201      	add	r2, pc, #4	; (adr r2, 80085a4 <UART_SetConfig+0x114>)
 80085a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a4:	080085d9 	.word	0x080085d9
 80085a8:	080085f9 	.word	0x080085f9
 80085ac:	080085f9 	.word	0x080085f9
 80085b0:	080085f9 	.word	0x080085f9
 80085b4:	080085e9 	.word	0x080085e9
 80085b8:	080085f9 	.word	0x080085f9
 80085bc:	080085f9 	.word	0x080085f9
 80085c0:	080085f9 	.word	0x080085f9
 80085c4:	080085e1 	.word	0x080085e1
 80085c8:	080085f9 	.word	0x080085f9
 80085cc:	080085f9 	.word	0x080085f9
 80085d0:	080085f9 	.word	0x080085f9
 80085d4:	080085f1 	.word	0x080085f1
 80085d8:	2300      	movs	r3, #0
 80085da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085de:	e042      	b.n	8008666 <UART_SetConfig+0x1d6>
 80085e0:	2302      	movs	r3, #2
 80085e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085e6:	e03e      	b.n	8008666 <UART_SetConfig+0x1d6>
 80085e8:	2304      	movs	r3, #4
 80085ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ee:	e03a      	b.n	8008666 <UART_SetConfig+0x1d6>
 80085f0:	2308      	movs	r3, #8
 80085f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085f6:	e036      	b.n	8008666 <UART_SetConfig+0x1d6>
 80085f8:	2310      	movs	r3, #16
 80085fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085fe:	e032      	b.n	8008666 <UART_SetConfig+0x1d6>
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a43      	ldr	r2, [pc, #268]	; (8008714 <UART_SetConfig+0x284>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d12a      	bne.n	8008660 <UART_SetConfig+0x1d0>
 800860a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800860e:	f7ff f98c 	bl	800792a <LL_RCC_GetLPUARTClockSource>
 8008612:	4603      	mov	r3, r0
 8008614:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008618:	d01a      	beq.n	8008650 <UART_SetConfig+0x1c0>
 800861a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800861e:	d81b      	bhi.n	8008658 <UART_SetConfig+0x1c8>
 8008620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008624:	d00c      	beq.n	8008640 <UART_SetConfig+0x1b0>
 8008626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800862a:	d815      	bhi.n	8008658 <UART_SetConfig+0x1c8>
 800862c:	2b00      	cmp	r3, #0
 800862e:	d003      	beq.n	8008638 <UART_SetConfig+0x1a8>
 8008630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008634:	d008      	beq.n	8008648 <UART_SetConfig+0x1b8>
 8008636:	e00f      	b.n	8008658 <UART_SetConfig+0x1c8>
 8008638:	2300      	movs	r3, #0
 800863a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800863e:	e012      	b.n	8008666 <UART_SetConfig+0x1d6>
 8008640:	2302      	movs	r3, #2
 8008642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008646:	e00e      	b.n	8008666 <UART_SetConfig+0x1d6>
 8008648:	2304      	movs	r3, #4
 800864a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800864e:	e00a      	b.n	8008666 <UART_SetConfig+0x1d6>
 8008650:	2308      	movs	r3, #8
 8008652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008656:	e006      	b.n	8008666 <UART_SetConfig+0x1d6>
 8008658:	2310      	movs	r3, #16
 800865a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800865e:	e002      	b.n	8008666 <UART_SetConfig+0x1d6>
 8008660:	2310      	movs	r3, #16
 8008662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a2a      	ldr	r2, [pc, #168]	; (8008714 <UART_SetConfig+0x284>)
 800866c:	4293      	cmp	r3, r2
 800866e:	f040 80a4 	bne.w	80087ba <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008672:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008676:	2b08      	cmp	r3, #8
 8008678:	d823      	bhi.n	80086c2 <UART_SetConfig+0x232>
 800867a:	a201      	add	r2, pc, #4	; (adr r2, 8008680 <UART_SetConfig+0x1f0>)
 800867c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008680:	080086a5 	.word	0x080086a5
 8008684:	080086c3 	.word	0x080086c3
 8008688:	080086ad 	.word	0x080086ad
 800868c:	080086c3 	.word	0x080086c3
 8008690:	080086b3 	.word	0x080086b3
 8008694:	080086c3 	.word	0x080086c3
 8008698:	080086c3 	.word	0x080086c3
 800869c:	080086c3 	.word	0x080086c3
 80086a0:	080086bb 	.word	0x080086bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086a4:	f7fd fed2 	bl	800644c <HAL_RCC_GetPCLK1Freq>
 80086a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086aa:	e010      	b.n	80086ce <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086ac:	4b1c      	ldr	r3, [pc, #112]	; (8008720 <UART_SetConfig+0x290>)
 80086ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086b0:	e00d      	b.n	80086ce <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086b2:	f7fd fe17 	bl	80062e4 <HAL_RCC_GetSysClockFreq>
 80086b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086b8:	e009      	b.n	80086ce <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086c0:	e005      	b.n	80086ce <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f000 8137 	beq.w	8008944 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086da:	4a12      	ldr	r2, [pc, #72]	; (8008724 <UART_SetConfig+0x294>)
 80086dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086e0:	461a      	mov	r2, r3
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80086e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	4613      	mov	r3, r2
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	4413      	add	r3, r2
 80086f4:	69ba      	ldr	r2, [r7, #24]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d305      	bcc.n	8008706 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	429a      	cmp	r2, r3
 8008704:	d910      	bls.n	8008728 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800870c:	e11a      	b.n	8008944 <UART_SetConfig+0x4b4>
 800870e:	bf00      	nop
 8008710:	cfff69f3 	.word	0xcfff69f3
 8008714:	40008000 	.word	0x40008000
 8008718:	40013800 	.word	0x40013800
 800871c:	40004400 	.word	0x40004400
 8008720:	00f42400 	.word	0x00f42400
 8008724:	0800ace0 	.word	0x0800ace0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	2200      	movs	r2, #0
 800872c:	60bb      	str	r3, [r7, #8]
 800872e:	60fa      	str	r2, [r7, #12]
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	4a8e      	ldr	r2, [pc, #568]	; (8008970 <UART_SetConfig+0x4e0>)
 8008736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800873a:	b29b      	uxth	r3, r3
 800873c:	2200      	movs	r2, #0
 800873e:	603b      	str	r3, [r7, #0]
 8008740:	607a      	str	r2, [r7, #4]
 8008742:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008746:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800874a:	f7f7 fd71 	bl	8000230 <__aeabi_uldivmod>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	4610      	mov	r0, r2
 8008754:	4619      	mov	r1, r3
 8008756:	f04f 0200 	mov.w	r2, #0
 800875a:	f04f 0300 	mov.w	r3, #0
 800875e:	020b      	lsls	r3, r1, #8
 8008760:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008764:	0202      	lsls	r2, r0, #8
 8008766:	6979      	ldr	r1, [r7, #20]
 8008768:	6849      	ldr	r1, [r1, #4]
 800876a:	0849      	lsrs	r1, r1, #1
 800876c:	2000      	movs	r0, #0
 800876e:	460c      	mov	r4, r1
 8008770:	4605      	mov	r5, r0
 8008772:	eb12 0804 	adds.w	r8, r2, r4
 8008776:	eb43 0905 	adc.w	r9, r3, r5
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	469a      	mov	sl, r3
 8008782:	4693      	mov	fp, r2
 8008784:	4652      	mov	r2, sl
 8008786:	465b      	mov	r3, fp
 8008788:	4640      	mov	r0, r8
 800878a:	4649      	mov	r1, r9
 800878c:	f7f7 fd50 	bl	8000230 <__aeabi_uldivmod>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4613      	mov	r3, r2
 8008796:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008798:	6a3b      	ldr	r3, [r7, #32]
 800879a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800879e:	d308      	bcc.n	80087b2 <UART_SetConfig+0x322>
 80087a0:	6a3b      	ldr	r3, [r7, #32]
 80087a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087a6:	d204      	bcs.n	80087b2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6a3a      	ldr	r2, [r7, #32]
 80087ae:	60da      	str	r2, [r3, #12]
 80087b0:	e0c8      	b.n	8008944 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80087b8:	e0c4      	b.n	8008944 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087c2:	d167      	bne.n	8008894 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80087c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	d828      	bhi.n	800881e <UART_SetConfig+0x38e>
 80087cc:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <UART_SetConfig+0x344>)
 80087ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d2:	bf00      	nop
 80087d4:	080087f9 	.word	0x080087f9
 80087d8:	08008801 	.word	0x08008801
 80087dc:	08008809 	.word	0x08008809
 80087e0:	0800881f 	.word	0x0800881f
 80087e4:	0800880f 	.word	0x0800880f
 80087e8:	0800881f 	.word	0x0800881f
 80087ec:	0800881f 	.word	0x0800881f
 80087f0:	0800881f 	.word	0x0800881f
 80087f4:	08008817 	.word	0x08008817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087f8:	f7fd fe28 	bl	800644c <HAL_RCC_GetPCLK1Freq>
 80087fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087fe:	e014      	b.n	800882a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008800:	f7fd fe36 	bl	8006470 <HAL_RCC_GetPCLK2Freq>
 8008804:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008806:	e010      	b.n	800882a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008808:	4b5a      	ldr	r3, [pc, #360]	; (8008974 <UART_SetConfig+0x4e4>)
 800880a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800880c:	e00d      	b.n	800882a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800880e:	f7fd fd69 	bl	80062e4 <HAL_RCC_GetSysClockFreq>
 8008812:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008814:	e009      	b.n	800882a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800881c:	e005      	b.n	800882a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800881e:	2300      	movs	r3, #0
 8008820:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008828:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 8089 	beq.w	8008944 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	4a4e      	ldr	r2, [pc, #312]	; (8008970 <UART_SetConfig+0x4e0>)
 8008838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800883c:	461a      	mov	r2, r3
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	fbb3 f3f2 	udiv	r3, r3, r2
 8008844:	005a      	lsls	r2, r3, #1
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	085b      	lsrs	r3, r3, #1
 800884c:	441a      	add	r2, r3
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	fbb2 f3f3 	udiv	r3, r2, r3
 8008856:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	2b0f      	cmp	r3, #15
 800885c:	d916      	bls.n	800888c <UART_SetConfig+0x3fc>
 800885e:	6a3b      	ldr	r3, [r7, #32]
 8008860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008864:	d212      	bcs.n	800888c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008866:	6a3b      	ldr	r3, [r7, #32]
 8008868:	b29b      	uxth	r3, r3
 800886a:	f023 030f 	bic.w	r3, r3, #15
 800886e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	085b      	lsrs	r3, r3, #1
 8008874:	b29b      	uxth	r3, r3
 8008876:	f003 0307 	and.w	r3, r3, #7
 800887a:	b29a      	uxth	r2, r3
 800887c:	8bfb      	ldrh	r3, [r7, #30]
 800887e:	4313      	orrs	r3, r2
 8008880:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	8bfa      	ldrh	r2, [r7, #30]
 8008888:	60da      	str	r2, [r3, #12]
 800888a:	e05b      	b.n	8008944 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008892:	e057      	b.n	8008944 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008894:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008898:	2b08      	cmp	r3, #8
 800889a:	d828      	bhi.n	80088ee <UART_SetConfig+0x45e>
 800889c:	a201      	add	r2, pc, #4	; (adr r2, 80088a4 <UART_SetConfig+0x414>)
 800889e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a2:	bf00      	nop
 80088a4:	080088c9 	.word	0x080088c9
 80088a8:	080088d1 	.word	0x080088d1
 80088ac:	080088d9 	.word	0x080088d9
 80088b0:	080088ef 	.word	0x080088ef
 80088b4:	080088df 	.word	0x080088df
 80088b8:	080088ef 	.word	0x080088ef
 80088bc:	080088ef 	.word	0x080088ef
 80088c0:	080088ef 	.word	0x080088ef
 80088c4:	080088e7 	.word	0x080088e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088c8:	f7fd fdc0 	bl	800644c <HAL_RCC_GetPCLK1Freq>
 80088cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088ce:	e014      	b.n	80088fa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088d0:	f7fd fdce 	bl	8006470 <HAL_RCC_GetPCLK2Freq>
 80088d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088d6:	e010      	b.n	80088fa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088d8:	4b26      	ldr	r3, [pc, #152]	; (8008974 <UART_SetConfig+0x4e4>)
 80088da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088dc:	e00d      	b.n	80088fa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088de:	f7fd fd01 	bl	80062e4 <HAL_RCC_GetSysClockFreq>
 80088e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088e4:	e009      	b.n	80088fa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088ec:	e005      	b.n	80088fa <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80088f8:	bf00      	nop
    }

    if (pclk != 0U)
 80088fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d021      	beq.n	8008944 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	4a1a      	ldr	r2, [pc, #104]	; (8008970 <UART_SetConfig+0x4e0>)
 8008906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800890a:	461a      	mov	r2, r3
 800890c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	085b      	lsrs	r3, r3, #1
 8008918:	441a      	add	r2, r3
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008922:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008924:	6a3b      	ldr	r3, [r7, #32]
 8008926:	2b0f      	cmp	r3, #15
 8008928:	d909      	bls.n	800893e <UART_SetConfig+0x4ae>
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008930:	d205      	bcs.n	800893e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008932:	6a3b      	ldr	r3, [r7, #32]
 8008934:	b29a      	uxth	r2, r3
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	60da      	str	r2, [r3, #12]
 800893c:	e002      	b.n	8008944 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2201      	movs	r2, #1
 8008948:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	2201      	movs	r2, #1
 8008950:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2200      	movs	r2, #0
 8008958:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2200      	movs	r2, #0
 800895e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008960:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008964:	4618      	mov	r0, r3
 8008966:	3730      	adds	r7, #48	; 0x30
 8008968:	46bd      	mov	sp, r7
 800896a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800896e:	bf00      	nop
 8008970:	0800ace0 	.word	0x0800ace0
 8008974:	00f42400 	.word	0x00f42400

08008978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00a      	beq.n	80089a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a6:	f003 0302 	and.w	r3, r3, #2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00a      	beq.n	80089c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	430a      	orrs	r2, r1
 80089c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c8:	f003 0304 	and.w	r3, r3, #4
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00a      	beq.n	80089e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ea:	f003 0308 	and.w	r3, r3, #8
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00a      	beq.n	8008a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	430a      	orrs	r2, r1
 8008a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0c:	f003 0310 	and.w	r3, r3, #16
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00a      	beq.n	8008a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	430a      	orrs	r2, r1
 8008a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2e:	f003 0320 	and.w	r3, r3, #32
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00a      	beq.n	8008a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d01a      	beq.n	8008a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a76:	d10a      	bne.n	8008a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00a      	beq.n	8008ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	605a      	str	r2, [r3, #4]
  }
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bc80      	pop	{r7}
 8008ab8:	4770      	bx	lr

08008aba <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b086      	sub	sp, #24
 8008abe:	af02      	add	r7, sp, #8
 8008ac0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008aca:	f7fa fac1 	bl	8003050 <HAL_GetTick>
 8008ace:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0308 	and.w	r3, r3, #8
 8008ada:	2b08      	cmp	r3, #8
 8008adc:	d10e      	bne.n	8008afc <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ade:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f832 	bl	8008b56 <UART_WaitOnFlagUntilTimeout>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d001      	beq.n	8008afc <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008af8:	2303      	movs	r3, #3
 8008afa:	e028      	b.n	8008b4e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0304 	and.w	r3, r3, #4
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d10e      	bne.n	8008b28 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f81c 	bl	8008b56 <UART_WaitOnFlagUntilTimeout>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e012      	b.n	8008b4e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2220      	movs	r2, #32
 8008b34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}

08008b56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b09c      	sub	sp, #112	; 0x70
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	60f8      	str	r0, [r7, #12]
 8008b5e:	60b9      	str	r1, [r7, #8]
 8008b60:	603b      	str	r3, [r7, #0]
 8008b62:	4613      	mov	r3, r2
 8008b64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b66:	e0a9      	b.n	8008cbc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6e:	f000 80a5 	beq.w	8008cbc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b72:	f7fa fa6d 	bl	8003050 <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d302      	bcc.n	8008b88 <UART_WaitOnFlagUntilTimeout+0x32>
 8008b82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d140      	bne.n	8008c0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b90:	e853 3f00 	ldrex	r3, [r3]
 8008b94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b9c:	667b      	str	r3, [r7, #100]	; 0x64
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ba8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008baa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008bac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008bae:	e841 2300 	strex	r3, r2, [r1]
 8008bb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1e6      	bne.n	8008b88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3308      	adds	r3, #8
 8008bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc4:	e853 3f00 	ldrex	r3, [r3]
 8008bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bcc:	f023 0301 	bic.w	r3, r3, #1
 8008bd0:	663b      	str	r3, [r7, #96]	; 0x60
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3308      	adds	r3, #8
 8008bd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008bda:	64ba      	str	r2, [r7, #72]	; 0x48
 8008bdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008be2:	e841 2300 	strex	r3, r2, [r1]
 8008be6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1e5      	bne.n	8008bba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e069      	b.n	8008cde <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0304 	and.w	r3, r3, #4
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d051      	beq.n	8008cbc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	69db      	ldr	r3, [r3, #28]
 8008c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c26:	d149      	bne.n	8008cbc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3a:	e853 3f00 	ldrex	r3, [r3]
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c50:	637b      	str	r3, [r7, #52]	; 0x34
 8008c52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c58:	e841 2300 	strex	r3, r2, [r1]
 8008c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1e6      	bne.n	8008c32 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	3308      	adds	r3, #8
 8008c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	e853 3f00 	ldrex	r3, [r3]
 8008c72:	613b      	str	r3, [r7, #16]
   return(result);
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f023 0301 	bic.w	r3, r3, #1
 8008c7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	3308      	adds	r3, #8
 8008c82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c84:	623a      	str	r2, [r7, #32]
 8008c86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c88:	69f9      	ldr	r1, [r7, #28]
 8008c8a:	6a3a      	ldr	r2, [r7, #32]
 8008c8c:	e841 2300 	strex	r3, r2, [r1]
 8008c90:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1e5      	bne.n	8008c64 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2220      	movs	r2, #32
 8008c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2220      	movs	r2, #32
 8008cac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e010      	b.n	8008cde <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	69da      	ldr	r2, [r3, #28]
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	bf0c      	ite	eq
 8008ccc:	2301      	moveq	r3, #1
 8008cce:	2300      	movne	r3, #0
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	79fb      	ldrb	r3, [r7, #7]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	f43f af46 	beq.w	8008b68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3770      	adds	r7, #112	; 0x70
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b096      	sub	sp, #88	; 0x58
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	88fa      	ldrh	r2, [r7, #6]
 8008d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2222      	movs	r2, #34	; 0x22
 8008d10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d02d      	beq.n	8008d7a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d24:	4a40      	ldr	r2, [pc, #256]	; (8008e28 <UART_Start_Receive_DMA+0x140>)
 8008d26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d2e:	4a3f      	ldr	r2, [pc, #252]	; (8008e2c <UART_Start_Receive_DMA+0x144>)
 8008d30:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d38:	4a3d      	ldr	r2, [pc, #244]	; (8008e30 <UART_Start_Receive_DMA+0x148>)
 8008d3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d42:	2200      	movs	r2, #0
 8008d44:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3324      	adds	r3, #36	; 0x24
 8008d52:	4619      	mov	r1, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d58:	461a      	mov	r2, r3
 8008d5a:	88fb      	ldrh	r3, [r7, #6]
 8008d5c:	f7fb fddc 	bl	8004918 <HAL_DMA_Start_IT>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d009      	beq.n	8008d7a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2210      	movs	r2, #16
 8008d6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2220      	movs	r2, #32
 8008d72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e051      	b.n	8008e1e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d018      	beq.n	8008db4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d8a:	e853 3f00 	ldrex	r3, [r3]
 8008d8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d96:	657b      	str	r3, [r7, #84]	; 0x54
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008da0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008da2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008da6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008da8:	e841 2300 	strex	r3, r2, [r1]
 8008dac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1e6      	bne.n	8008d82 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3308      	adds	r3, #8
 8008dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbe:	e853 3f00 	ldrex	r3, [r3]
 8008dc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc6:	f043 0301 	orr.w	r3, r3, #1
 8008dca:	653b      	str	r3, [r7, #80]	; 0x50
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008dd4:	637a      	str	r2, [r7, #52]	; 0x34
 8008dd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ddc:	e841 2300 	strex	r3, r2, [r1]
 8008de0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e5      	bne.n	8008db4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	3308      	adds	r3, #8
 8008dee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	e853 3f00 	ldrex	r3, [r3]
 8008df6:	613b      	str	r3, [r7, #16]
   return(result);
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3308      	adds	r3, #8
 8008e06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e08:	623a      	str	r2, [r7, #32]
 8008e0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0c:	69f9      	ldr	r1, [r7, #28]
 8008e0e:	6a3a      	ldr	r2, [r7, #32]
 8008e10:	e841 2300 	strex	r3, r2, [r1]
 8008e14:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1e5      	bne.n	8008de8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3758      	adds	r7, #88	; 0x58
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	08008f7f 	.word	0x08008f7f
 8008e2c:	080090ab 	.word	0x080090ab
 8008e30:	080090e9 	.word	0x080090e9

08008e34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b08f      	sub	sp, #60	; 0x3c
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e42:	6a3b      	ldr	r3, [r7, #32]
 8008e44:	e853 3f00 	ldrex	r3, [r3]
 8008e48:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e4a:	69fb      	ldr	r3, [r7, #28]
 8008e4c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e50:	637b      	str	r3, [r7, #52]	; 0x34
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e5c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e62:	e841 2300 	strex	r3, r2, [r1]
 8008e66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1e6      	bne.n	8008e3c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3308      	adds	r3, #8
 8008e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008e84:	633b      	str	r3, [r7, #48]	; 0x30
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3308      	adds	r3, #8
 8008e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e8e:	61ba      	str	r2, [r7, #24]
 8008e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e92:	6979      	ldr	r1, [r7, #20]
 8008e94:	69ba      	ldr	r2, [r7, #24]
 8008e96:	e841 2300 	strex	r3, r2, [r1]
 8008e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1e5      	bne.n	8008e6e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2220      	movs	r2, #32
 8008ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008eaa:	bf00      	nop
 8008eac:	373c      	adds	r7, #60	; 0x3c
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bc80      	pop	{r7}
 8008eb2:	4770      	bx	lr

08008eb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b095      	sub	sp, #84	; 0x54
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec4:	e853 3f00 	ldrex	r3, [r3]
 8008ec8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eda:	643b      	str	r3, [r7, #64]	; 0x40
 8008edc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ede:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ee0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ee2:	e841 2300 	strex	r3, r2, [r1]
 8008ee6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1e6      	bne.n	8008ebc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3308      	adds	r3, #8
 8008ef4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	e853 3f00 	ldrex	r3, [r3]
 8008efc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f04:	f023 0301 	bic.w	r3, r3, #1
 8008f08:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	3308      	adds	r3, #8
 8008f10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f1a:	e841 2300 	strex	r3, r2, [r1]
 8008f1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1e3      	bne.n	8008eee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d118      	bne.n	8008f60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	e853 3f00 	ldrex	r3, [r3]
 8008f3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	f023 0310 	bic.w	r3, r3, #16
 8008f42:	647b      	str	r3, [r7, #68]	; 0x44
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	461a      	mov	r2, r3
 8008f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f4c:	61bb      	str	r3, [r7, #24]
 8008f4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f50:	6979      	ldr	r1, [r7, #20]
 8008f52:	69ba      	ldr	r2, [r7, #24]
 8008f54:	e841 2300 	strex	r3, r2, [r1]
 8008f58:	613b      	str	r3, [r7, #16]
   return(result);
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1e6      	bne.n	8008f2e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2220      	movs	r2, #32
 8008f64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008f74:	bf00      	nop
 8008f76:	3754      	adds	r7, #84	; 0x54
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bc80      	pop	{r7}
 8008f7c:	4770      	bx	lr

08008f7e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b09c      	sub	sp, #112	; 0x70
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0320 	and.w	r3, r3, #32
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d171      	bne.n	800907e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008faa:	e853 3f00 	ldrex	r3, [r3]
 8008fae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8008fc2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008fc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e6      	bne.n	8008fa2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3308      	adds	r3, #8
 8008fda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fde:	e853 3f00 	ldrex	r3, [r3]
 8008fe2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe6:	f023 0301 	bic.w	r3, r3, #1
 8008fea:	667b      	str	r3, [r7, #100]	; 0x64
 8008fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ff4:	647a      	str	r2, [r7, #68]	; 0x44
 8008ff6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ffa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ffc:	e841 2300 	strex	r3, r2, [r1]
 8009000:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e5      	bne.n	8008fd4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	3308      	adds	r3, #8
 800900e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	e853 3f00 	ldrex	r3, [r3]
 8009016:	623b      	str	r3, [r7, #32]
   return(result);
 8009018:	6a3b      	ldr	r3, [r7, #32]
 800901a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800901e:	663b      	str	r3, [r7, #96]	; 0x60
 8009020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3308      	adds	r3, #8
 8009026:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009028:	633a      	str	r2, [r7, #48]	; 0x30
 800902a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800902e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009030:	e841 2300 	strex	r3, r2, [r1]
 8009034:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1e5      	bne.n	8009008 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800903c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800903e:	2220      	movs	r2, #32
 8009040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009048:	2b01      	cmp	r3, #1
 800904a:	d118      	bne.n	800907e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800904c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	e853 3f00 	ldrex	r3, [r3]
 8009058:	60fb      	str	r3, [r7, #12]
   return(result);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f023 0310 	bic.w	r3, r3, #16
 8009060:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	461a      	mov	r2, r3
 8009068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800906a:	61fb      	str	r3, [r7, #28]
 800906c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906e:	69b9      	ldr	r1, [r7, #24]
 8009070:	69fa      	ldr	r2, [r7, #28]
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	617b      	str	r3, [r7, #20]
   return(result);
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e6      	bne.n	800904c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800907e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009080:	2200      	movs	r2, #0
 8009082:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009088:	2b01      	cmp	r3, #1
 800908a:	d107      	bne.n	800909c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800908c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800908e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009092:	4619      	mov	r1, r3
 8009094:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009096:	f7f8 fe1f 	bl	8001cd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800909a:	e002      	b.n	80090a2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800909c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800909e:	f7ff f9d2 	bl	8008446 <HAL_UART_RxCpltCallback>
}
 80090a2:	bf00      	nop
 80090a4:	3770      	adds	r7, #112	; 0x70
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2201      	movs	r2, #1
 80090bc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d109      	bne.n	80090da <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090cc:	085b      	lsrs	r3, r3, #1
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	4619      	mov	r1, r3
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f7f8 fe00 	bl	8001cd8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090d8:	e002      	b.n	80090e0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f7ff f9bc 	bl	8008458 <HAL_UART_RxHalfCpltCallback>
}
 80090e0:	bf00      	nop
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090fc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009104:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009110:	2b80      	cmp	r3, #128	; 0x80
 8009112:	d109      	bne.n	8009128 <UART_DMAError+0x40>
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	2b21      	cmp	r3, #33	; 0x21
 8009118:	d106      	bne.n	8009128 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2200      	movs	r2, #0
 800911e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009122:	6978      	ldr	r0, [r7, #20]
 8009124:	f7ff fe86 	bl	8008e34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009132:	2b40      	cmp	r3, #64	; 0x40
 8009134:	d109      	bne.n	800914a <UART_DMAError+0x62>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2b22      	cmp	r3, #34	; 0x22
 800913a:	d106      	bne.n	800914a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	2200      	movs	r2, #0
 8009140:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009144:	6978      	ldr	r0, [r7, #20]
 8009146:	f7ff feb5 	bl	8008eb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009150:	f043 0210 	orr.w	r2, r3, #16
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800915a:	6978      	ldr	r0, [r7, #20]
 800915c:	f7ff f985 	bl	800846a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009160:	bf00      	nop
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009174:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f7ff f96f 	bl	800846a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800918c:	bf00      	nop
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a0:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091a6:	2200      	movs	r2, #0
 80091a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d005      	beq.n	80091c0 <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d12b      	bne.n	8009218 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	220f      	movs	r2, #15
 80091de:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091e8:	d107      	bne.n	80091fa <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	699a      	ldr	r2, [r3, #24]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f042 0210 	orr.w	r2, r2, #16
 80091f8:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2220      	movs	r2, #32
 80091fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2220      	movs	r2, #32
 8009206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f7ff f933 	bl	800847c <HAL_UART_AbortCpltCallback>
 8009216:	e000      	b.n	800921a <UART_DMATxAbortCallback+0x86>
      return;
 8009218:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800922c:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009234:	2200      	movs	r2, #0
 8009236:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800923c:	2b00      	cmp	r3, #0
 800923e:	d004      	beq.n	800924a <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009246:	2b00      	cmp	r3, #0
 8009248:	d126      	bne.n	8009298 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	220f      	movs	r2, #15
 8009268:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	699a      	ldr	r2, [r3, #24]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f042 0208 	orr.w	r2, r2, #8
 8009278:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2220      	movs	r2, #32
 800927e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2220      	movs	r2, #32
 8009286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2200      	movs	r2, #0
 800928e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f7ff f8f3 	bl	800847c <HAL_UART_AbortCpltCallback>
 8009296:	e000      	b.n	800929a <UART_DMARxAbortCallback+0x7a>
      return;
 8009298:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b088      	sub	sp, #32
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	e853 3f00 	ldrex	r3, [r3]
 80092b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092bc:	61fb      	str	r3, [r7, #28]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	461a      	mov	r2, r3
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	61bb      	str	r3, [r7, #24]
 80092c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ca:	6979      	ldr	r1, [r7, #20]
 80092cc:	69ba      	ldr	r2, [r7, #24]
 80092ce:	e841 2300 	strex	r3, r2, [r1]
 80092d2:	613b      	str	r3, [r7, #16]
   return(result);
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1e6      	bne.n	80092a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2220      	movs	r2, #32
 80092de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7ff f8a3 	bl	8008434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092ee:	bf00      	nop
 80092f0:	3720      	adds	r7, #32
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b083      	sub	sp, #12
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80092fe:	bf00      	nop
 8009300:	370c      	adds	r7, #12
 8009302:	46bd      	mov	sp, r7
 8009304:	bc80      	pop	{r7}
 8009306:	4770      	bx	lr

08009308 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	bc80      	pop	{r7}
 8009318:	4770      	bx	lr

0800931a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800931a:	b480      	push	{r7}
 800931c:	b083      	sub	sp, #12
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009322:	bf00      	nop
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	bc80      	pop	{r7}
 800932a:	4770      	bx	lr

0800932c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800933a:	2b01      	cmp	r3, #1
 800933c:	d101      	bne.n	8009342 <HAL_UARTEx_DisableFifoMode+0x16>
 800933e:	2302      	movs	r3, #2
 8009340:	e027      	b.n	8009392 <HAL_UARTEx_DisableFifoMode+0x66>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2201      	movs	r2, #1
 8009346:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2224      	movs	r2, #36	; 0x24
 800934e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f022 0201 	bic.w	r2, r2, #1
 8009368:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009370:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2220      	movs	r2, #32
 8009384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	bc80      	pop	{r7}
 800939a:	4770      	bx	lr

0800939c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d101      	bne.n	80093b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80093b0:	2302      	movs	r3, #2
 80093b2:	e02d      	b.n	8009410 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2224      	movs	r2, #36	; 0x24
 80093c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f022 0201 	bic.w	r2, r2, #1
 80093da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	430a      	orrs	r2, r1
 80093ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f8a3 	bl	800953c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2220      	movs	r2, #32
 8009402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009428:	2b01      	cmp	r3, #1
 800942a:	d101      	bne.n	8009430 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800942c:	2302      	movs	r3, #2
 800942e:	e02d      	b.n	800948c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2201      	movs	r2, #1
 8009434:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2224      	movs	r2, #36	; 0x24
 800943c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f022 0201 	bic.w	r2, r2, #1
 8009456:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	683a      	ldr	r2, [r7, #0]
 8009468:	430a      	orrs	r2, r1
 800946a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f865 	bl	800953c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2220      	movs	r2, #32
 800947e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b08c      	sub	sp, #48	; 0x30
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	4613      	mov	r3, r2
 80094a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094a8:	2b20      	cmp	r3, #32
 80094aa:	d142      	bne.n	8009532 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d002      	beq.n	80094b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80094b2:	88fb      	ldrh	r3, [r7, #6]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d101      	bne.n	80094bc <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	e03b      	b.n	8009534 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2201      	movs	r2, #1
 80094c0:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80094c8:	88fb      	ldrh	r3, [r7, #6]
 80094ca:	461a      	mov	r2, r3
 80094cc:	68b9      	ldr	r1, [r7, #8]
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f7ff fc0a 	bl	8008ce8 <UART_Start_Receive_DMA>
 80094d4:	4603      	mov	r3, r0
 80094d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80094da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d124      	bne.n	800952c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d11d      	bne.n	8009526 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2210      	movs	r2, #16
 80094f0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	e853 3f00 	ldrex	r3, [r3]
 80094fe:	617b      	str	r3, [r7, #20]
   return(result);
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	f043 0310 	orr.w	r3, r3, #16
 8009506:	62bb      	str	r3, [r7, #40]	; 0x28
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	461a      	mov	r2, r3
 800950e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009510:	627b      	str	r3, [r7, #36]	; 0x24
 8009512:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009514:	6a39      	ldr	r1, [r7, #32]
 8009516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009518:	e841 2300 	strex	r3, r2, [r1]
 800951c:	61fb      	str	r3, [r7, #28]
   return(result);
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1e6      	bne.n	80094f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009524:	e002      	b.n	800952c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800952c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009530:	e000      	b.n	8009534 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009532:	2302      	movs	r3, #2
  }
}
 8009534:	4618      	mov	r0, r3
 8009536:	3730      	adds	r7, #48	; 0x30
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009548:	2b00      	cmp	r3, #0
 800954a:	d108      	bne.n	800955e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800955c:	e031      	b.n	80095c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800955e:	2308      	movs	r3, #8
 8009560:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009562:	2308      	movs	r3, #8
 8009564:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	0e5b      	lsrs	r3, r3, #25
 800956e:	b2db      	uxtb	r3, r3
 8009570:	f003 0307 	and.w	r3, r3, #7
 8009574:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	0f5b      	lsrs	r3, r3, #29
 800957e:	b2db      	uxtb	r3, r3
 8009580:	f003 0307 	and.w	r3, r3, #7
 8009584:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	7b3a      	ldrb	r2, [r7, #12]
 800958a:	4910      	ldr	r1, [pc, #64]	; (80095cc <UARTEx_SetNbDataToProcess+0x90>)
 800958c:	5c8a      	ldrb	r2, [r1, r2]
 800958e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009592:	7b3a      	ldrb	r2, [r7, #12]
 8009594:	490e      	ldr	r1, [pc, #56]	; (80095d0 <UARTEx_SetNbDataToProcess+0x94>)
 8009596:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009598:	fb93 f3f2 	sdiv	r3, r3, r2
 800959c:	b29a      	uxth	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
 80095a6:	7b7a      	ldrb	r2, [r7, #13]
 80095a8:	4908      	ldr	r1, [pc, #32]	; (80095cc <UARTEx_SetNbDataToProcess+0x90>)
 80095aa:	5c8a      	ldrb	r2, [r1, r2]
 80095ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095b0:	7b7a      	ldrb	r2, [r7, #13]
 80095b2:	4907      	ldr	r1, [pc, #28]	; (80095d0 <UARTEx_SetNbDataToProcess+0x94>)
 80095b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80095c2:	bf00      	nop
 80095c4:	3714      	adds	r7, #20
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bc80      	pop	{r7}
 80095ca:	4770      	bx	lr
 80095cc:	0800acf8 	.word	0x0800acf8
 80095d0:	0800ad00 	.word	0x0800ad00

080095d4 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	70fb      	strb	r3, [r7, #3]
 80095e0:	4613      	mov	r3, r2
 80095e2:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	60fb      	str	r3, [r7, #12]
  while( size-- )
 80095e8:	e004      	b.n	80095f4 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	1c5a      	adds	r2, r3, #1
 80095ee:	60fa      	str	r2, [r7, #12]
 80095f0:	78fa      	ldrb	r2, [r7, #3]
 80095f2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80095f4:	883b      	ldrh	r3, [r7, #0]
 80095f6:	1e5a      	subs	r2, r3, #1
 80095f8:	803a      	strh	r2, [r7, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1f5      	bne.n	80095ea <UTIL_MEM_set_8+0x16>
  }
}
 80095fe:	bf00      	nop
 8009600:	bf00      	nop
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	bc80      	pop	{r7}
 8009608:	4770      	bx	lr
	...

0800960c <__errno>:
 800960c:	4b01      	ldr	r3, [pc, #4]	; (8009614 <__errno+0x8>)
 800960e:	6818      	ldr	r0, [r3, #0]
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	20000128 	.word	0x20000128

08009618 <__libc_init_array>:
 8009618:	b570      	push	{r4, r5, r6, lr}
 800961a:	4d0d      	ldr	r5, [pc, #52]	; (8009650 <__libc_init_array+0x38>)
 800961c:	4c0d      	ldr	r4, [pc, #52]	; (8009654 <__libc_init_array+0x3c>)
 800961e:	1b64      	subs	r4, r4, r5
 8009620:	10a4      	asrs	r4, r4, #2
 8009622:	2600      	movs	r6, #0
 8009624:	42a6      	cmp	r6, r4
 8009626:	d109      	bne.n	800963c <__libc_init_array+0x24>
 8009628:	4d0b      	ldr	r5, [pc, #44]	; (8009658 <__libc_init_array+0x40>)
 800962a:	4c0c      	ldr	r4, [pc, #48]	; (800965c <__libc_init_array+0x44>)
 800962c:	f001 fa1c 	bl	800aa68 <_init>
 8009630:	1b64      	subs	r4, r4, r5
 8009632:	10a4      	asrs	r4, r4, #2
 8009634:	2600      	movs	r6, #0
 8009636:	42a6      	cmp	r6, r4
 8009638:	d105      	bne.n	8009646 <__libc_init_array+0x2e>
 800963a:	bd70      	pop	{r4, r5, r6, pc}
 800963c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009640:	4798      	blx	r3
 8009642:	3601      	adds	r6, #1
 8009644:	e7ee      	b.n	8009624 <__libc_init_array+0xc>
 8009646:	f855 3b04 	ldr.w	r3, [r5], #4
 800964a:	4798      	blx	r3
 800964c:	3601      	adds	r6, #1
 800964e:	e7f2      	b.n	8009636 <__libc_init_array+0x1e>
 8009650:	0800ada8 	.word	0x0800ada8
 8009654:	0800ada8 	.word	0x0800ada8
 8009658:	0800ada8 	.word	0x0800ada8
 800965c:	0800adac 	.word	0x0800adac

08009660 <memcpy>:
 8009660:	440a      	add	r2, r1
 8009662:	4291      	cmp	r1, r2
 8009664:	f100 33ff 	add.w	r3, r0, #4294967295
 8009668:	d100      	bne.n	800966c <memcpy+0xc>
 800966a:	4770      	bx	lr
 800966c:	b510      	push	{r4, lr}
 800966e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009672:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009676:	4291      	cmp	r1, r2
 8009678:	d1f9      	bne.n	800966e <memcpy+0xe>
 800967a:	bd10      	pop	{r4, pc}

0800967c <memset>:
 800967c:	4402      	add	r2, r0
 800967e:	4603      	mov	r3, r0
 8009680:	4293      	cmp	r3, r2
 8009682:	d100      	bne.n	8009686 <memset+0xa>
 8009684:	4770      	bx	lr
 8009686:	f803 1b01 	strb.w	r1, [r3], #1
 800968a:	e7f9      	b.n	8009680 <memset+0x4>

0800968c <iprintf>:
 800968c:	b40f      	push	{r0, r1, r2, r3}
 800968e:	4b0a      	ldr	r3, [pc, #40]	; (80096b8 <iprintf+0x2c>)
 8009690:	b513      	push	{r0, r1, r4, lr}
 8009692:	681c      	ldr	r4, [r3, #0]
 8009694:	b124      	cbz	r4, 80096a0 <iprintf+0x14>
 8009696:	69a3      	ldr	r3, [r4, #24]
 8009698:	b913      	cbnz	r3, 80096a0 <iprintf+0x14>
 800969a:	4620      	mov	r0, r4
 800969c:	f000 fa9e 	bl	8009bdc <__sinit>
 80096a0:	ab05      	add	r3, sp, #20
 80096a2:	9a04      	ldr	r2, [sp, #16]
 80096a4:	68a1      	ldr	r1, [r4, #8]
 80096a6:	9301      	str	r3, [sp, #4]
 80096a8:	4620      	mov	r0, r4
 80096aa:	f000 fdff 	bl	800a2ac <_vfiprintf_r>
 80096ae:	b002      	add	sp, #8
 80096b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096b4:	b004      	add	sp, #16
 80096b6:	4770      	bx	lr
 80096b8:	20000128 	.word	0x20000128

080096bc <_puts_r>:
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	460e      	mov	r6, r1
 80096c0:	4605      	mov	r5, r0
 80096c2:	b118      	cbz	r0, 80096cc <_puts_r+0x10>
 80096c4:	6983      	ldr	r3, [r0, #24]
 80096c6:	b90b      	cbnz	r3, 80096cc <_puts_r+0x10>
 80096c8:	f000 fa88 	bl	8009bdc <__sinit>
 80096cc:	69ab      	ldr	r3, [r5, #24]
 80096ce:	68ac      	ldr	r4, [r5, #8]
 80096d0:	b913      	cbnz	r3, 80096d8 <_puts_r+0x1c>
 80096d2:	4628      	mov	r0, r5
 80096d4:	f000 fa82 	bl	8009bdc <__sinit>
 80096d8:	4b2c      	ldr	r3, [pc, #176]	; (800978c <_puts_r+0xd0>)
 80096da:	429c      	cmp	r4, r3
 80096dc:	d120      	bne.n	8009720 <_puts_r+0x64>
 80096de:	686c      	ldr	r4, [r5, #4]
 80096e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096e2:	07db      	lsls	r3, r3, #31
 80096e4:	d405      	bmi.n	80096f2 <_puts_r+0x36>
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	0598      	lsls	r0, r3, #22
 80096ea:	d402      	bmi.n	80096f2 <_puts_r+0x36>
 80096ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096ee:	f000 fb13 	bl	8009d18 <__retarget_lock_acquire_recursive>
 80096f2:	89a3      	ldrh	r3, [r4, #12]
 80096f4:	0719      	lsls	r1, r3, #28
 80096f6:	d51d      	bpl.n	8009734 <_puts_r+0x78>
 80096f8:	6923      	ldr	r3, [r4, #16]
 80096fa:	b1db      	cbz	r3, 8009734 <_puts_r+0x78>
 80096fc:	3e01      	subs	r6, #1
 80096fe:	68a3      	ldr	r3, [r4, #8]
 8009700:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009704:	3b01      	subs	r3, #1
 8009706:	60a3      	str	r3, [r4, #8]
 8009708:	bb39      	cbnz	r1, 800975a <_puts_r+0x9e>
 800970a:	2b00      	cmp	r3, #0
 800970c:	da38      	bge.n	8009780 <_puts_r+0xc4>
 800970e:	4622      	mov	r2, r4
 8009710:	210a      	movs	r1, #10
 8009712:	4628      	mov	r0, r5
 8009714:	f000 f88c 	bl	8009830 <__swbuf_r>
 8009718:	3001      	adds	r0, #1
 800971a:	d011      	beq.n	8009740 <_puts_r+0x84>
 800971c:	250a      	movs	r5, #10
 800971e:	e011      	b.n	8009744 <_puts_r+0x88>
 8009720:	4b1b      	ldr	r3, [pc, #108]	; (8009790 <_puts_r+0xd4>)
 8009722:	429c      	cmp	r4, r3
 8009724:	d101      	bne.n	800972a <_puts_r+0x6e>
 8009726:	68ac      	ldr	r4, [r5, #8]
 8009728:	e7da      	b.n	80096e0 <_puts_r+0x24>
 800972a:	4b1a      	ldr	r3, [pc, #104]	; (8009794 <_puts_r+0xd8>)
 800972c:	429c      	cmp	r4, r3
 800972e:	bf08      	it	eq
 8009730:	68ec      	ldreq	r4, [r5, #12]
 8009732:	e7d5      	b.n	80096e0 <_puts_r+0x24>
 8009734:	4621      	mov	r1, r4
 8009736:	4628      	mov	r0, r5
 8009738:	f000 f8cc 	bl	80098d4 <__swsetup_r>
 800973c:	2800      	cmp	r0, #0
 800973e:	d0dd      	beq.n	80096fc <_puts_r+0x40>
 8009740:	f04f 35ff 	mov.w	r5, #4294967295
 8009744:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009746:	07da      	lsls	r2, r3, #31
 8009748:	d405      	bmi.n	8009756 <_puts_r+0x9a>
 800974a:	89a3      	ldrh	r3, [r4, #12]
 800974c:	059b      	lsls	r3, r3, #22
 800974e:	d402      	bmi.n	8009756 <_puts_r+0x9a>
 8009750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009752:	f000 fae2 	bl	8009d1a <__retarget_lock_release_recursive>
 8009756:	4628      	mov	r0, r5
 8009758:	bd70      	pop	{r4, r5, r6, pc}
 800975a:	2b00      	cmp	r3, #0
 800975c:	da04      	bge.n	8009768 <_puts_r+0xac>
 800975e:	69a2      	ldr	r2, [r4, #24]
 8009760:	429a      	cmp	r2, r3
 8009762:	dc06      	bgt.n	8009772 <_puts_r+0xb6>
 8009764:	290a      	cmp	r1, #10
 8009766:	d004      	beq.n	8009772 <_puts_r+0xb6>
 8009768:	6823      	ldr	r3, [r4, #0]
 800976a:	1c5a      	adds	r2, r3, #1
 800976c:	6022      	str	r2, [r4, #0]
 800976e:	7019      	strb	r1, [r3, #0]
 8009770:	e7c5      	b.n	80096fe <_puts_r+0x42>
 8009772:	4622      	mov	r2, r4
 8009774:	4628      	mov	r0, r5
 8009776:	f000 f85b 	bl	8009830 <__swbuf_r>
 800977a:	3001      	adds	r0, #1
 800977c:	d1bf      	bne.n	80096fe <_puts_r+0x42>
 800977e:	e7df      	b.n	8009740 <_puts_r+0x84>
 8009780:	6823      	ldr	r3, [r4, #0]
 8009782:	250a      	movs	r5, #10
 8009784:	1c5a      	adds	r2, r3, #1
 8009786:	6022      	str	r2, [r4, #0]
 8009788:	701d      	strb	r5, [r3, #0]
 800978a:	e7db      	b.n	8009744 <_puts_r+0x88>
 800978c:	0800ad2c 	.word	0x0800ad2c
 8009790:	0800ad4c 	.word	0x0800ad4c
 8009794:	0800ad0c 	.word	0x0800ad0c

08009798 <puts>:
 8009798:	4b02      	ldr	r3, [pc, #8]	; (80097a4 <puts+0xc>)
 800979a:	4601      	mov	r1, r0
 800979c:	6818      	ldr	r0, [r3, #0]
 800979e:	f7ff bf8d 	b.w	80096bc <_puts_r>
 80097a2:	bf00      	nop
 80097a4:	20000128 	.word	0x20000128

080097a8 <siprintf>:
 80097a8:	b40e      	push	{r1, r2, r3}
 80097aa:	b500      	push	{lr}
 80097ac:	b09c      	sub	sp, #112	; 0x70
 80097ae:	ab1d      	add	r3, sp, #116	; 0x74
 80097b0:	9002      	str	r0, [sp, #8]
 80097b2:	9006      	str	r0, [sp, #24]
 80097b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097b8:	4809      	ldr	r0, [pc, #36]	; (80097e0 <siprintf+0x38>)
 80097ba:	9107      	str	r1, [sp, #28]
 80097bc:	9104      	str	r1, [sp, #16]
 80097be:	4909      	ldr	r1, [pc, #36]	; (80097e4 <siprintf+0x3c>)
 80097c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80097c4:	9105      	str	r1, [sp, #20]
 80097c6:	6800      	ldr	r0, [r0, #0]
 80097c8:	9301      	str	r3, [sp, #4]
 80097ca:	a902      	add	r1, sp, #8
 80097cc:	f000 fc46 	bl	800a05c <_svfiprintf_r>
 80097d0:	9b02      	ldr	r3, [sp, #8]
 80097d2:	2200      	movs	r2, #0
 80097d4:	701a      	strb	r2, [r3, #0]
 80097d6:	b01c      	add	sp, #112	; 0x70
 80097d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097dc:	b003      	add	sp, #12
 80097de:	4770      	bx	lr
 80097e0:	20000128 	.word	0x20000128
 80097e4:	ffff0208 	.word	0xffff0208

080097e8 <strcat>:
 80097e8:	b510      	push	{r4, lr}
 80097ea:	4602      	mov	r2, r0
 80097ec:	7814      	ldrb	r4, [r2, #0]
 80097ee:	4613      	mov	r3, r2
 80097f0:	3201      	adds	r2, #1
 80097f2:	2c00      	cmp	r4, #0
 80097f4:	d1fa      	bne.n	80097ec <strcat+0x4>
 80097f6:	3b01      	subs	r3, #1
 80097f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009800:	2a00      	cmp	r2, #0
 8009802:	d1f9      	bne.n	80097f8 <strcat+0x10>
 8009804:	bd10      	pop	{r4, pc}

08009806 <strncmp>:
 8009806:	b510      	push	{r4, lr}
 8009808:	4603      	mov	r3, r0
 800980a:	b172      	cbz	r2, 800982a <strncmp+0x24>
 800980c:	3901      	subs	r1, #1
 800980e:	1884      	adds	r4, r0, r2
 8009810:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009814:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009818:	4290      	cmp	r0, r2
 800981a:	d101      	bne.n	8009820 <strncmp+0x1a>
 800981c:	42a3      	cmp	r3, r4
 800981e:	d101      	bne.n	8009824 <strncmp+0x1e>
 8009820:	1a80      	subs	r0, r0, r2
 8009822:	bd10      	pop	{r4, pc}
 8009824:	2800      	cmp	r0, #0
 8009826:	d1f3      	bne.n	8009810 <strncmp+0xa>
 8009828:	e7fa      	b.n	8009820 <strncmp+0x1a>
 800982a:	4610      	mov	r0, r2
 800982c:	e7f9      	b.n	8009822 <strncmp+0x1c>
	...

08009830 <__swbuf_r>:
 8009830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009832:	460e      	mov	r6, r1
 8009834:	4614      	mov	r4, r2
 8009836:	4605      	mov	r5, r0
 8009838:	b118      	cbz	r0, 8009842 <__swbuf_r+0x12>
 800983a:	6983      	ldr	r3, [r0, #24]
 800983c:	b90b      	cbnz	r3, 8009842 <__swbuf_r+0x12>
 800983e:	f000 f9cd 	bl	8009bdc <__sinit>
 8009842:	4b21      	ldr	r3, [pc, #132]	; (80098c8 <__swbuf_r+0x98>)
 8009844:	429c      	cmp	r4, r3
 8009846:	d12b      	bne.n	80098a0 <__swbuf_r+0x70>
 8009848:	686c      	ldr	r4, [r5, #4]
 800984a:	69a3      	ldr	r3, [r4, #24]
 800984c:	60a3      	str	r3, [r4, #8]
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	071a      	lsls	r2, r3, #28
 8009852:	d52f      	bpl.n	80098b4 <__swbuf_r+0x84>
 8009854:	6923      	ldr	r3, [r4, #16]
 8009856:	b36b      	cbz	r3, 80098b4 <__swbuf_r+0x84>
 8009858:	6923      	ldr	r3, [r4, #16]
 800985a:	6820      	ldr	r0, [r4, #0]
 800985c:	1ac0      	subs	r0, r0, r3
 800985e:	6963      	ldr	r3, [r4, #20]
 8009860:	b2f6      	uxtb	r6, r6
 8009862:	4283      	cmp	r3, r0
 8009864:	4637      	mov	r7, r6
 8009866:	dc04      	bgt.n	8009872 <__swbuf_r+0x42>
 8009868:	4621      	mov	r1, r4
 800986a:	4628      	mov	r0, r5
 800986c:	f000 f922 	bl	8009ab4 <_fflush_r>
 8009870:	bb30      	cbnz	r0, 80098c0 <__swbuf_r+0x90>
 8009872:	68a3      	ldr	r3, [r4, #8]
 8009874:	3b01      	subs	r3, #1
 8009876:	60a3      	str	r3, [r4, #8]
 8009878:	6823      	ldr	r3, [r4, #0]
 800987a:	1c5a      	adds	r2, r3, #1
 800987c:	6022      	str	r2, [r4, #0]
 800987e:	701e      	strb	r6, [r3, #0]
 8009880:	6963      	ldr	r3, [r4, #20]
 8009882:	3001      	adds	r0, #1
 8009884:	4283      	cmp	r3, r0
 8009886:	d004      	beq.n	8009892 <__swbuf_r+0x62>
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	07db      	lsls	r3, r3, #31
 800988c:	d506      	bpl.n	800989c <__swbuf_r+0x6c>
 800988e:	2e0a      	cmp	r6, #10
 8009890:	d104      	bne.n	800989c <__swbuf_r+0x6c>
 8009892:	4621      	mov	r1, r4
 8009894:	4628      	mov	r0, r5
 8009896:	f000 f90d 	bl	8009ab4 <_fflush_r>
 800989a:	b988      	cbnz	r0, 80098c0 <__swbuf_r+0x90>
 800989c:	4638      	mov	r0, r7
 800989e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098a0:	4b0a      	ldr	r3, [pc, #40]	; (80098cc <__swbuf_r+0x9c>)
 80098a2:	429c      	cmp	r4, r3
 80098a4:	d101      	bne.n	80098aa <__swbuf_r+0x7a>
 80098a6:	68ac      	ldr	r4, [r5, #8]
 80098a8:	e7cf      	b.n	800984a <__swbuf_r+0x1a>
 80098aa:	4b09      	ldr	r3, [pc, #36]	; (80098d0 <__swbuf_r+0xa0>)
 80098ac:	429c      	cmp	r4, r3
 80098ae:	bf08      	it	eq
 80098b0:	68ec      	ldreq	r4, [r5, #12]
 80098b2:	e7ca      	b.n	800984a <__swbuf_r+0x1a>
 80098b4:	4621      	mov	r1, r4
 80098b6:	4628      	mov	r0, r5
 80098b8:	f000 f80c 	bl	80098d4 <__swsetup_r>
 80098bc:	2800      	cmp	r0, #0
 80098be:	d0cb      	beq.n	8009858 <__swbuf_r+0x28>
 80098c0:	f04f 37ff 	mov.w	r7, #4294967295
 80098c4:	e7ea      	b.n	800989c <__swbuf_r+0x6c>
 80098c6:	bf00      	nop
 80098c8:	0800ad2c 	.word	0x0800ad2c
 80098cc:	0800ad4c 	.word	0x0800ad4c
 80098d0:	0800ad0c 	.word	0x0800ad0c

080098d4 <__swsetup_r>:
 80098d4:	4b32      	ldr	r3, [pc, #200]	; (80099a0 <__swsetup_r+0xcc>)
 80098d6:	b570      	push	{r4, r5, r6, lr}
 80098d8:	681d      	ldr	r5, [r3, #0]
 80098da:	4606      	mov	r6, r0
 80098dc:	460c      	mov	r4, r1
 80098de:	b125      	cbz	r5, 80098ea <__swsetup_r+0x16>
 80098e0:	69ab      	ldr	r3, [r5, #24]
 80098e2:	b913      	cbnz	r3, 80098ea <__swsetup_r+0x16>
 80098e4:	4628      	mov	r0, r5
 80098e6:	f000 f979 	bl	8009bdc <__sinit>
 80098ea:	4b2e      	ldr	r3, [pc, #184]	; (80099a4 <__swsetup_r+0xd0>)
 80098ec:	429c      	cmp	r4, r3
 80098ee:	d10f      	bne.n	8009910 <__swsetup_r+0x3c>
 80098f0:	686c      	ldr	r4, [r5, #4]
 80098f2:	89a3      	ldrh	r3, [r4, #12]
 80098f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098f8:	0719      	lsls	r1, r3, #28
 80098fa:	d42c      	bmi.n	8009956 <__swsetup_r+0x82>
 80098fc:	06dd      	lsls	r5, r3, #27
 80098fe:	d411      	bmi.n	8009924 <__swsetup_r+0x50>
 8009900:	2309      	movs	r3, #9
 8009902:	6033      	str	r3, [r6, #0]
 8009904:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009908:	81a3      	strh	r3, [r4, #12]
 800990a:	f04f 30ff 	mov.w	r0, #4294967295
 800990e:	e03e      	b.n	800998e <__swsetup_r+0xba>
 8009910:	4b25      	ldr	r3, [pc, #148]	; (80099a8 <__swsetup_r+0xd4>)
 8009912:	429c      	cmp	r4, r3
 8009914:	d101      	bne.n	800991a <__swsetup_r+0x46>
 8009916:	68ac      	ldr	r4, [r5, #8]
 8009918:	e7eb      	b.n	80098f2 <__swsetup_r+0x1e>
 800991a:	4b24      	ldr	r3, [pc, #144]	; (80099ac <__swsetup_r+0xd8>)
 800991c:	429c      	cmp	r4, r3
 800991e:	bf08      	it	eq
 8009920:	68ec      	ldreq	r4, [r5, #12]
 8009922:	e7e6      	b.n	80098f2 <__swsetup_r+0x1e>
 8009924:	0758      	lsls	r0, r3, #29
 8009926:	d512      	bpl.n	800994e <__swsetup_r+0x7a>
 8009928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800992a:	b141      	cbz	r1, 800993e <__swsetup_r+0x6a>
 800992c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009930:	4299      	cmp	r1, r3
 8009932:	d002      	beq.n	800993a <__swsetup_r+0x66>
 8009934:	4630      	mov	r0, r6
 8009936:	f000 fa57 	bl	8009de8 <_free_r>
 800993a:	2300      	movs	r3, #0
 800993c:	6363      	str	r3, [r4, #52]	; 0x34
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009944:	81a3      	strh	r3, [r4, #12]
 8009946:	2300      	movs	r3, #0
 8009948:	6063      	str	r3, [r4, #4]
 800994a:	6923      	ldr	r3, [r4, #16]
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	89a3      	ldrh	r3, [r4, #12]
 8009950:	f043 0308 	orr.w	r3, r3, #8
 8009954:	81a3      	strh	r3, [r4, #12]
 8009956:	6923      	ldr	r3, [r4, #16]
 8009958:	b94b      	cbnz	r3, 800996e <__swsetup_r+0x9a>
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009964:	d003      	beq.n	800996e <__swsetup_r+0x9a>
 8009966:	4621      	mov	r1, r4
 8009968:	4630      	mov	r0, r6
 800996a:	f000 f9fd 	bl	8009d68 <__smakebuf_r>
 800996e:	89a0      	ldrh	r0, [r4, #12]
 8009970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009974:	f010 0301 	ands.w	r3, r0, #1
 8009978:	d00a      	beq.n	8009990 <__swsetup_r+0xbc>
 800997a:	2300      	movs	r3, #0
 800997c:	60a3      	str	r3, [r4, #8]
 800997e:	6963      	ldr	r3, [r4, #20]
 8009980:	425b      	negs	r3, r3
 8009982:	61a3      	str	r3, [r4, #24]
 8009984:	6923      	ldr	r3, [r4, #16]
 8009986:	b943      	cbnz	r3, 800999a <__swsetup_r+0xc6>
 8009988:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800998c:	d1ba      	bne.n	8009904 <__swsetup_r+0x30>
 800998e:	bd70      	pop	{r4, r5, r6, pc}
 8009990:	0781      	lsls	r1, r0, #30
 8009992:	bf58      	it	pl
 8009994:	6963      	ldrpl	r3, [r4, #20]
 8009996:	60a3      	str	r3, [r4, #8]
 8009998:	e7f4      	b.n	8009984 <__swsetup_r+0xb0>
 800999a:	2000      	movs	r0, #0
 800999c:	e7f7      	b.n	800998e <__swsetup_r+0xba>
 800999e:	bf00      	nop
 80099a0:	20000128 	.word	0x20000128
 80099a4:	0800ad2c 	.word	0x0800ad2c
 80099a8:	0800ad4c 	.word	0x0800ad4c
 80099ac:	0800ad0c 	.word	0x0800ad0c

080099b0 <__sflush_r>:
 80099b0:	898a      	ldrh	r2, [r1, #12]
 80099b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b4:	4605      	mov	r5, r0
 80099b6:	0710      	lsls	r0, r2, #28
 80099b8:	460c      	mov	r4, r1
 80099ba:	d457      	bmi.n	8009a6c <__sflush_r+0xbc>
 80099bc:	684b      	ldr	r3, [r1, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	dc04      	bgt.n	80099cc <__sflush_r+0x1c>
 80099c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	dc01      	bgt.n	80099cc <__sflush_r+0x1c>
 80099c8:	2000      	movs	r0, #0
 80099ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099ce:	2e00      	cmp	r6, #0
 80099d0:	d0fa      	beq.n	80099c8 <__sflush_r+0x18>
 80099d2:	2300      	movs	r3, #0
 80099d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099d8:	682f      	ldr	r7, [r5, #0]
 80099da:	602b      	str	r3, [r5, #0]
 80099dc:	d032      	beq.n	8009a44 <__sflush_r+0x94>
 80099de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	075a      	lsls	r2, r3, #29
 80099e4:	d505      	bpl.n	80099f2 <__sflush_r+0x42>
 80099e6:	6863      	ldr	r3, [r4, #4]
 80099e8:	1ac0      	subs	r0, r0, r3
 80099ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099ec:	b10b      	cbz	r3, 80099f2 <__sflush_r+0x42>
 80099ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099f0:	1ac0      	subs	r0, r0, r3
 80099f2:	2300      	movs	r3, #0
 80099f4:	4602      	mov	r2, r0
 80099f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099f8:	6a21      	ldr	r1, [r4, #32]
 80099fa:	4628      	mov	r0, r5
 80099fc:	47b0      	blx	r6
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	89a3      	ldrh	r3, [r4, #12]
 8009a02:	d106      	bne.n	8009a12 <__sflush_r+0x62>
 8009a04:	6829      	ldr	r1, [r5, #0]
 8009a06:	291d      	cmp	r1, #29
 8009a08:	d82c      	bhi.n	8009a64 <__sflush_r+0xb4>
 8009a0a:	4a29      	ldr	r2, [pc, #164]	; (8009ab0 <__sflush_r+0x100>)
 8009a0c:	40ca      	lsrs	r2, r1
 8009a0e:	07d6      	lsls	r6, r2, #31
 8009a10:	d528      	bpl.n	8009a64 <__sflush_r+0xb4>
 8009a12:	2200      	movs	r2, #0
 8009a14:	6062      	str	r2, [r4, #4]
 8009a16:	04d9      	lsls	r1, r3, #19
 8009a18:	6922      	ldr	r2, [r4, #16]
 8009a1a:	6022      	str	r2, [r4, #0]
 8009a1c:	d504      	bpl.n	8009a28 <__sflush_r+0x78>
 8009a1e:	1c42      	adds	r2, r0, #1
 8009a20:	d101      	bne.n	8009a26 <__sflush_r+0x76>
 8009a22:	682b      	ldr	r3, [r5, #0]
 8009a24:	b903      	cbnz	r3, 8009a28 <__sflush_r+0x78>
 8009a26:	6560      	str	r0, [r4, #84]	; 0x54
 8009a28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a2a:	602f      	str	r7, [r5, #0]
 8009a2c:	2900      	cmp	r1, #0
 8009a2e:	d0cb      	beq.n	80099c8 <__sflush_r+0x18>
 8009a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a34:	4299      	cmp	r1, r3
 8009a36:	d002      	beq.n	8009a3e <__sflush_r+0x8e>
 8009a38:	4628      	mov	r0, r5
 8009a3a:	f000 f9d5 	bl	8009de8 <_free_r>
 8009a3e:	2000      	movs	r0, #0
 8009a40:	6360      	str	r0, [r4, #52]	; 0x34
 8009a42:	e7c2      	b.n	80099ca <__sflush_r+0x1a>
 8009a44:	6a21      	ldr	r1, [r4, #32]
 8009a46:	2301      	movs	r3, #1
 8009a48:	4628      	mov	r0, r5
 8009a4a:	47b0      	blx	r6
 8009a4c:	1c41      	adds	r1, r0, #1
 8009a4e:	d1c7      	bne.n	80099e0 <__sflush_r+0x30>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d0c4      	beq.n	80099e0 <__sflush_r+0x30>
 8009a56:	2b1d      	cmp	r3, #29
 8009a58:	d001      	beq.n	8009a5e <__sflush_r+0xae>
 8009a5a:	2b16      	cmp	r3, #22
 8009a5c:	d101      	bne.n	8009a62 <__sflush_r+0xb2>
 8009a5e:	602f      	str	r7, [r5, #0]
 8009a60:	e7b2      	b.n	80099c8 <__sflush_r+0x18>
 8009a62:	89a3      	ldrh	r3, [r4, #12]
 8009a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a68:	81a3      	strh	r3, [r4, #12]
 8009a6a:	e7ae      	b.n	80099ca <__sflush_r+0x1a>
 8009a6c:	690f      	ldr	r7, [r1, #16]
 8009a6e:	2f00      	cmp	r7, #0
 8009a70:	d0aa      	beq.n	80099c8 <__sflush_r+0x18>
 8009a72:	0793      	lsls	r3, r2, #30
 8009a74:	680e      	ldr	r6, [r1, #0]
 8009a76:	bf08      	it	eq
 8009a78:	694b      	ldreq	r3, [r1, #20]
 8009a7a:	600f      	str	r7, [r1, #0]
 8009a7c:	bf18      	it	ne
 8009a7e:	2300      	movne	r3, #0
 8009a80:	1bf6      	subs	r6, r6, r7
 8009a82:	608b      	str	r3, [r1, #8]
 8009a84:	2e00      	cmp	r6, #0
 8009a86:	dd9f      	ble.n	80099c8 <__sflush_r+0x18>
 8009a88:	6a21      	ldr	r1, [r4, #32]
 8009a8a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009a8e:	4633      	mov	r3, r6
 8009a90:	463a      	mov	r2, r7
 8009a92:	4628      	mov	r0, r5
 8009a94:	47e0      	blx	ip
 8009a96:	2800      	cmp	r0, #0
 8009a98:	dc06      	bgt.n	8009aa8 <__sflush_r+0xf8>
 8009a9a:	89a3      	ldrh	r3, [r4, #12]
 8009a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aa0:	81a3      	strh	r3, [r4, #12]
 8009aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa6:	e790      	b.n	80099ca <__sflush_r+0x1a>
 8009aa8:	4407      	add	r7, r0
 8009aaa:	1a36      	subs	r6, r6, r0
 8009aac:	e7ea      	b.n	8009a84 <__sflush_r+0xd4>
 8009aae:	bf00      	nop
 8009ab0:	20400001 	.word	0x20400001

08009ab4 <_fflush_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	690b      	ldr	r3, [r1, #16]
 8009ab8:	4605      	mov	r5, r0
 8009aba:	460c      	mov	r4, r1
 8009abc:	b913      	cbnz	r3, 8009ac4 <_fflush_r+0x10>
 8009abe:	2500      	movs	r5, #0
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	bd38      	pop	{r3, r4, r5, pc}
 8009ac4:	b118      	cbz	r0, 8009ace <_fflush_r+0x1a>
 8009ac6:	6983      	ldr	r3, [r0, #24]
 8009ac8:	b90b      	cbnz	r3, 8009ace <_fflush_r+0x1a>
 8009aca:	f000 f887 	bl	8009bdc <__sinit>
 8009ace:	4b14      	ldr	r3, [pc, #80]	; (8009b20 <_fflush_r+0x6c>)
 8009ad0:	429c      	cmp	r4, r3
 8009ad2:	d11b      	bne.n	8009b0c <_fflush_r+0x58>
 8009ad4:	686c      	ldr	r4, [r5, #4]
 8009ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0ef      	beq.n	8009abe <_fflush_r+0xa>
 8009ade:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ae0:	07d0      	lsls	r0, r2, #31
 8009ae2:	d404      	bmi.n	8009aee <_fflush_r+0x3a>
 8009ae4:	0599      	lsls	r1, r3, #22
 8009ae6:	d402      	bmi.n	8009aee <_fflush_r+0x3a>
 8009ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009aea:	f000 f915 	bl	8009d18 <__retarget_lock_acquire_recursive>
 8009aee:	4628      	mov	r0, r5
 8009af0:	4621      	mov	r1, r4
 8009af2:	f7ff ff5d 	bl	80099b0 <__sflush_r>
 8009af6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009af8:	07da      	lsls	r2, r3, #31
 8009afa:	4605      	mov	r5, r0
 8009afc:	d4e0      	bmi.n	8009ac0 <_fflush_r+0xc>
 8009afe:	89a3      	ldrh	r3, [r4, #12]
 8009b00:	059b      	lsls	r3, r3, #22
 8009b02:	d4dd      	bmi.n	8009ac0 <_fflush_r+0xc>
 8009b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b06:	f000 f908 	bl	8009d1a <__retarget_lock_release_recursive>
 8009b0a:	e7d9      	b.n	8009ac0 <_fflush_r+0xc>
 8009b0c:	4b05      	ldr	r3, [pc, #20]	; (8009b24 <_fflush_r+0x70>)
 8009b0e:	429c      	cmp	r4, r3
 8009b10:	d101      	bne.n	8009b16 <_fflush_r+0x62>
 8009b12:	68ac      	ldr	r4, [r5, #8]
 8009b14:	e7df      	b.n	8009ad6 <_fflush_r+0x22>
 8009b16:	4b04      	ldr	r3, [pc, #16]	; (8009b28 <_fflush_r+0x74>)
 8009b18:	429c      	cmp	r4, r3
 8009b1a:	bf08      	it	eq
 8009b1c:	68ec      	ldreq	r4, [r5, #12]
 8009b1e:	e7da      	b.n	8009ad6 <_fflush_r+0x22>
 8009b20:	0800ad2c 	.word	0x0800ad2c
 8009b24:	0800ad4c 	.word	0x0800ad4c
 8009b28:	0800ad0c 	.word	0x0800ad0c

08009b2c <std>:
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	b510      	push	{r4, lr}
 8009b30:	4604      	mov	r4, r0
 8009b32:	e9c0 3300 	strd	r3, r3, [r0]
 8009b36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b3a:	6083      	str	r3, [r0, #8]
 8009b3c:	8181      	strh	r1, [r0, #12]
 8009b3e:	6643      	str	r3, [r0, #100]	; 0x64
 8009b40:	81c2      	strh	r2, [r0, #14]
 8009b42:	6183      	str	r3, [r0, #24]
 8009b44:	4619      	mov	r1, r3
 8009b46:	2208      	movs	r2, #8
 8009b48:	305c      	adds	r0, #92	; 0x5c
 8009b4a:	f7ff fd97 	bl	800967c <memset>
 8009b4e:	4b05      	ldr	r3, [pc, #20]	; (8009b64 <std+0x38>)
 8009b50:	6263      	str	r3, [r4, #36]	; 0x24
 8009b52:	4b05      	ldr	r3, [pc, #20]	; (8009b68 <std+0x3c>)
 8009b54:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b56:	4b05      	ldr	r3, [pc, #20]	; (8009b6c <std+0x40>)
 8009b58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b5a:	4b05      	ldr	r3, [pc, #20]	; (8009b70 <std+0x44>)
 8009b5c:	6224      	str	r4, [r4, #32]
 8009b5e:	6323      	str	r3, [r4, #48]	; 0x30
 8009b60:	bd10      	pop	{r4, pc}
 8009b62:	bf00      	nop
 8009b64:	0800a855 	.word	0x0800a855
 8009b68:	0800a877 	.word	0x0800a877
 8009b6c:	0800a8af 	.word	0x0800a8af
 8009b70:	0800a8d3 	.word	0x0800a8d3

08009b74 <_cleanup_r>:
 8009b74:	4901      	ldr	r1, [pc, #4]	; (8009b7c <_cleanup_r+0x8>)
 8009b76:	f000 b8af 	b.w	8009cd8 <_fwalk_reent>
 8009b7a:	bf00      	nop
 8009b7c:	08009ab5 	.word	0x08009ab5

08009b80 <__sfmoreglue>:
 8009b80:	b570      	push	{r4, r5, r6, lr}
 8009b82:	2268      	movs	r2, #104	; 0x68
 8009b84:	1e4d      	subs	r5, r1, #1
 8009b86:	4355      	muls	r5, r2
 8009b88:	460e      	mov	r6, r1
 8009b8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b8e:	f000 f995 	bl	8009ebc <_malloc_r>
 8009b92:	4604      	mov	r4, r0
 8009b94:	b140      	cbz	r0, 8009ba8 <__sfmoreglue+0x28>
 8009b96:	2100      	movs	r1, #0
 8009b98:	e9c0 1600 	strd	r1, r6, [r0]
 8009b9c:	300c      	adds	r0, #12
 8009b9e:	60a0      	str	r0, [r4, #8]
 8009ba0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ba4:	f7ff fd6a 	bl	800967c <memset>
 8009ba8:	4620      	mov	r0, r4
 8009baa:	bd70      	pop	{r4, r5, r6, pc}

08009bac <__sfp_lock_acquire>:
 8009bac:	4801      	ldr	r0, [pc, #4]	; (8009bb4 <__sfp_lock_acquire+0x8>)
 8009bae:	f000 b8b3 	b.w	8009d18 <__retarget_lock_acquire_recursive>
 8009bb2:	bf00      	nop
 8009bb4:	20000a51 	.word	0x20000a51

08009bb8 <__sfp_lock_release>:
 8009bb8:	4801      	ldr	r0, [pc, #4]	; (8009bc0 <__sfp_lock_release+0x8>)
 8009bba:	f000 b8ae 	b.w	8009d1a <__retarget_lock_release_recursive>
 8009bbe:	bf00      	nop
 8009bc0:	20000a51 	.word	0x20000a51

08009bc4 <__sinit_lock_acquire>:
 8009bc4:	4801      	ldr	r0, [pc, #4]	; (8009bcc <__sinit_lock_acquire+0x8>)
 8009bc6:	f000 b8a7 	b.w	8009d18 <__retarget_lock_acquire_recursive>
 8009bca:	bf00      	nop
 8009bcc:	20000a52 	.word	0x20000a52

08009bd0 <__sinit_lock_release>:
 8009bd0:	4801      	ldr	r0, [pc, #4]	; (8009bd8 <__sinit_lock_release+0x8>)
 8009bd2:	f000 b8a2 	b.w	8009d1a <__retarget_lock_release_recursive>
 8009bd6:	bf00      	nop
 8009bd8:	20000a52 	.word	0x20000a52

08009bdc <__sinit>:
 8009bdc:	b510      	push	{r4, lr}
 8009bde:	4604      	mov	r4, r0
 8009be0:	f7ff fff0 	bl	8009bc4 <__sinit_lock_acquire>
 8009be4:	69a3      	ldr	r3, [r4, #24]
 8009be6:	b11b      	cbz	r3, 8009bf0 <__sinit+0x14>
 8009be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bec:	f7ff bff0 	b.w	8009bd0 <__sinit_lock_release>
 8009bf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bf4:	6523      	str	r3, [r4, #80]	; 0x50
 8009bf6:	4b13      	ldr	r3, [pc, #76]	; (8009c44 <__sinit+0x68>)
 8009bf8:	4a13      	ldr	r2, [pc, #76]	; (8009c48 <__sinit+0x6c>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009bfe:	42a3      	cmp	r3, r4
 8009c00:	bf04      	itt	eq
 8009c02:	2301      	moveq	r3, #1
 8009c04:	61a3      	streq	r3, [r4, #24]
 8009c06:	4620      	mov	r0, r4
 8009c08:	f000 f820 	bl	8009c4c <__sfp>
 8009c0c:	6060      	str	r0, [r4, #4]
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f000 f81c 	bl	8009c4c <__sfp>
 8009c14:	60a0      	str	r0, [r4, #8]
 8009c16:	4620      	mov	r0, r4
 8009c18:	f000 f818 	bl	8009c4c <__sfp>
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	60e0      	str	r0, [r4, #12]
 8009c20:	2104      	movs	r1, #4
 8009c22:	6860      	ldr	r0, [r4, #4]
 8009c24:	f7ff ff82 	bl	8009b2c <std>
 8009c28:	68a0      	ldr	r0, [r4, #8]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	2109      	movs	r1, #9
 8009c2e:	f7ff ff7d 	bl	8009b2c <std>
 8009c32:	68e0      	ldr	r0, [r4, #12]
 8009c34:	2202      	movs	r2, #2
 8009c36:	2112      	movs	r1, #18
 8009c38:	f7ff ff78 	bl	8009b2c <std>
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	61a3      	str	r3, [r4, #24]
 8009c40:	e7d2      	b.n	8009be8 <__sinit+0xc>
 8009c42:	bf00      	nop
 8009c44:	0800ad08 	.word	0x0800ad08
 8009c48:	08009b75 	.word	0x08009b75

08009c4c <__sfp>:
 8009c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4e:	4607      	mov	r7, r0
 8009c50:	f7ff ffac 	bl	8009bac <__sfp_lock_acquire>
 8009c54:	4b1e      	ldr	r3, [pc, #120]	; (8009cd0 <__sfp+0x84>)
 8009c56:	681e      	ldr	r6, [r3, #0]
 8009c58:	69b3      	ldr	r3, [r6, #24]
 8009c5a:	b913      	cbnz	r3, 8009c62 <__sfp+0x16>
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	f7ff ffbd 	bl	8009bdc <__sinit>
 8009c62:	3648      	adds	r6, #72	; 0x48
 8009c64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	d503      	bpl.n	8009c74 <__sfp+0x28>
 8009c6c:	6833      	ldr	r3, [r6, #0]
 8009c6e:	b30b      	cbz	r3, 8009cb4 <__sfp+0x68>
 8009c70:	6836      	ldr	r6, [r6, #0]
 8009c72:	e7f7      	b.n	8009c64 <__sfp+0x18>
 8009c74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c78:	b9d5      	cbnz	r5, 8009cb0 <__sfp+0x64>
 8009c7a:	4b16      	ldr	r3, [pc, #88]	; (8009cd4 <__sfp+0x88>)
 8009c7c:	60e3      	str	r3, [r4, #12]
 8009c7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c82:	6665      	str	r5, [r4, #100]	; 0x64
 8009c84:	f000 f847 	bl	8009d16 <__retarget_lock_init_recursive>
 8009c88:	f7ff ff96 	bl	8009bb8 <__sfp_lock_release>
 8009c8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c94:	6025      	str	r5, [r4, #0]
 8009c96:	61a5      	str	r5, [r4, #24]
 8009c98:	2208      	movs	r2, #8
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ca0:	f7ff fcec 	bl	800967c <memset>
 8009ca4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ca8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cac:	4620      	mov	r0, r4
 8009cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cb0:	3468      	adds	r4, #104	; 0x68
 8009cb2:	e7d9      	b.n	8009c68 <__sfp+0x1c>
 8009cb4:	2104      	movs	r1, #4
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	f7ff ff62 	bl	8009b80 <__sfmoreglue>
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	6030      	str	r0, [r6, #0]
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d1d5      	bne.n	8009c70 <__sfp+0x24>
 8009cc4:	f7ff ff78 	bl	8009bb8 <__sfp_lock_release>
 8009cc8:	230c      	movs	r3, #12
 8009cca:	603b      	str	r3, [r7, #0]
 8009ccc:	e7ee      	b.n	8009cac <__sfp+0x60>
 8009cce:	bf00      	nop
 8009cd0:	0800ad08 	.word	0x0800ad08
 8009cd4:	ffff0001 	.word	0xffff0001

08009cd8 <_fwalk_reent>:
 8009cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cdc:	4606      	mov	r6, r0
 8009cde:	4688      	mov	r8, r1
 8009ce0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ce4:	2700      	movs	r7, #0
 8009ce6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cea:	f1b9 0901 	subs.w	r9, r9, #1
 8009cee:	d505      	bpl.n	8009cfc <_fwalk_reent+0x24>
 8009cf0:	6824      	ldr	r4, [r4, #0]
 8009cf2:	2c00      	cmp	r4, #0
 8009cf4:	d1f7      	bne.n	8009ce6 <_fwalk_reent+0xe>
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cfc:	89ab      	ldrh	r3, [r5, #12]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d907      	bls.n	8009d12 <_fwalk_reent+0x3a>
 8009d02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d06:	3301      	adds	r3, #1
 8009d08:	d003      	beq.n	8009d12 <_fwalk_reent+0x3a>
 8009d0a:	4629      	mov	r1, r5
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	47c0      	blx	r8
 8009d10:	4307      	orrs	r7, r0
 8009d12:	3568      	adds	r5, #104	; 0x68
 8009d14:	e7e9      	b.n	8009cea <_fwalk_reent+0x12>

08009d16 <__retarget_lock_init_recursive>:
 8009d16:	4770      	bx	lr

08009d18 <__retarget_lock_acquire_recursive>:
 8009d18:	4770      	bx	lr

08009d1a <__retarget_lock_release_recursive>:
 8009d1a:	4770      	bx	lr

08009d1c <__swhatbuf_r>:
 8009d1c:	b570      	push	{r4, r5, r6, lr}
 8009d1e:	460e      	mov	r6, r1
 8009d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d24:	2900      	cmp	r1, #0
 8009d26:	b096      	sub	sp, #88	; 0x58
 8009d28:	4614      	mov	r4, r2
 8009d2a:	461d      	mov	r5, r3
 8009d2c:	da08      	bge.n	8009d40 <__swhatbuf_r+0x24>
 8009d2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	602a      	str	r2, [r5, #0]
 8009d36:	061a      	lsls	r2, r3, #24
 8009d38:	d410      	bmi.n	8009d5c <__swhatbuf_r+0x40>
 8009d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d3e:	e00e      	b.n	8009d5e <__swhatbuf_r+0x42>
 8009d40:	466a      	mov	r2, sp
 8009d42:	f000 fded 	bl	800a920 <_fstat_r>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	dbf1      	blt.n	8009d2e <__swhatbuf_r+0x12>
 8009d4a:	9a01      	ldr	r2, [sp, #4]
 8009d4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d54:	425a      	negs	r2, r3
 8009d56:	415a      	adcs	r2, r3
 8009d58:	602a      	str	r2, [r5, #0]
 8009d5a:	e7ee      	b.n	8009d3a <__swhatbuf_r+0x1e>
 8009d5c:	2340      	movs	r3, #64	; 0x40
 8009d5e:	2000      	movs	r0, #0
 8009d60:	6023      	str	r3, [r4, #0]
 8009d62:	b016      	add	sp, #88	; 0x58
 8009d64:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d68 <__smakebuf_r>:
 8009d68:	898b      	ldrh	r3, [r1, #12]
 8009d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d6c:	079d      	lsls	r5, r3, #30
 8009d6e:	4606      	mov	r6, r0
 8009d70:	460c      	mov	r4, r1
 8009d72:	d507      	bpl.n	8009d84 <__smakebuf_r+0x1c>
 8009d74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	6123      	str	r3, [r4, #16]
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	6163      	str	r3, [r4, #20]
 8009d80:	b002      	add	sp, #8
 8009d82:	bd70      	pop	{r4, r5, r6, pc}
 8009d84:	ab01      	add	r3, sp, #4
 8009d86:	466a      	mov	r2, sp
 8009d88:	f7ff ffc8 	bl	8009d1c <__swhatbuf_r>
 8009d8c:	9900      	ldr	r1, [sp, #0]
 8009d8e:	4605      	mov	r5, r0
 8009d90:	4630      	mov	r0, r6
 8009d92:	f000 f893 	bl	8009ebc <_malloc_r>
 8009d96:	b948      	cbnz	r0, 8009dac <__smakebuf_r+0x44>
 8009d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d9c:	059a      	lsls	r2, r3, #22
 8009d9e:	d4ef      	bmi.n	8009d80 <__smakebuf_r+0x18>
 8009da0:	f023 0303 	bic.w	r3, r3, #3
 8009da4:	f043 0302 	orr.w	r3, r3, #2
 8009da8:	81a3      	strh	r3, [r4, #12]
 8009daa:	e7e3      	b.n	8009d74 <__smakebuf_r+0xc>
 8009dac:	4b0d      	ldr	r3, [pc, #52]	; (8009de4 <__smakebuf_r+0x7c>)
 8009dae:	62b3      	str	r3, [r6, #40]	; 0x28
 8009db0:	89a3      	ldrh	r3, [r4, #12]
 8009db2:	6020      	str	r0, [r4, #0]
 8009db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009db8:	81a3      	strh	r3, [r4, #12]
 8009dba:	9b00      	ldr	r3, [sp, #0]
 8009dbc:	6163      	str	r3, [r4, #20]
 8009dbe:	9b01      	ldr	r3, [sp, #4]
 8009dc0:	6120      	str	r0, [r4, #16]
 8009dc2:	b15b      	cbz	r3, 8009ddc <__smakebuf_r+0x74>
 8009dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dc8:	4630      	mov	r0, r6
 8009dca:	f000 fdbb 	bl	800a944 <_isatty_r>
 8009dce:	b128      	cbz	r0, 8009ddc <__smakebuf_r+0x74>
 8009dd0:	89a3      	ldrh	r3, [r4, #12]
 8009dd2:	f023 0303 	bic.w	r3, r3, #3
 8009dd6:	f043 0301 	orr.w	r3, r3, #1
 8009dda:	81a3      	strh	r3, [r4, #12]
 8009ddc:	89a0      	ldrh	r0, [r4, #12]
 8009dde:	4305      	orrs	r5, r0
 8009de0:	81a5      	strh	r5, [r4, #12]
 8009de2:	e7cd      	b.n	8009d80 <__smakebuf_r+0x18>
 8009de4:	08009b75 	.word	0x08009b75

08009de8 <_free_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	4605      	mov	r5, r0
 8009dec:	2900      	cmp	r1, #0
 8009dee:	d041      	beq.n	8009e74 <_free_r+0x8c>
 8009df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009df4:	1f0c      	subs	r4, r1, #4
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	bfb8      	it	lt
 8009dfa:	18e4      	addlt	r4, r4, r3
 8009dfc:	f000 fdde 	bl	800a9bc <__malloc_lock>
 8009e00:	4a1d      	ldr	r2, [pc, #116]	; (8009e78 <_free_r+0x90>)
 8009e02:	6813      	ldr	r3, [r2, #0]
 8009e04:	b933      	cbnz	r3, 8009e14 <_free_r+0x2c>
 8009e06:	6063      	str	r3, [r4, #4]
 8009e08:	6014      	str	r4, [r2, #0]
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e10:	f000 bdda 	b.w	800a9c8 <__malloc_unlock>
 8009e14:	42a3      	cmp	r3, r4
 8009e16:	d908      	bls.n	8009e2a <_free_r+0x42>
 8009e18:	6820      	ldr	r0, [r4, #0]
 8009e1a:	1821      	adds	r1, r4, r0
 8009e1c:	428b      	cmp	r3, r1
 8009e1e:	bf01      	itttt	eq
 8009e20:	6819      	ldreq	r1, [r3, #0]
 8009e22:	685b      	ldreq	r3, [r3, #4]
 8009e24:	1809      	addeq	r1, r1, r0
 8009e26:	6021      	streq	r1, [r4, #0]
 8009e28:	e7ed      	b.n	8009e06 <_free_r+0x1e>
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	b10b      	cbz	r3, 8009e34 <_free_r+0x4c>
 8009e30:	42a3      	cmp	r3, r4
 8009e32:	d9fa      	bls.n	8009e2a <_free_r+0x42>
 8009e34:	6811      	ldr	r1, [r2, #0]
 8009e36:	1850      	adds	r0, r2, r1
 8009e38:	42a0      	cmp	r0, r4
 8009e3a:	d10b      	bne.n	8009e54 <_free_r+0x6c>
 8009e3c:	6820      	ldr	r0, [r4, #0]
 8009e3e:	4401      	add	r1, r0
 8009e40:	1850      	adds	r0, r2, r1
 8009e42:	4283      	cmp	r3, r0
 8009e44:	6011      	str	r1, [r2, #0]
 8009e46:	d1e0      	bne.n	8009e0a <_free_r+0x22>
 8009e48:	6818      	ldr	r0, [r3, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	6053      	str	r3, [r2, #4]
 8009e4e:	4401      	add	r1, r0
 8009e50:	6011      	str	r1, [r2, #0]
 8009e52:	e7da      	b.n	8009e0a <_free_r+0x22>
 8009e54:	d902      	bls.n	8009e5c <_free_r+0x74>
 8009e56:	230c      	movs	r3, #12
 8009e58:	602b      	str	r3, [r5, #0]
 8009e5a:	e7d6      	b.n	8009e0a <_free_r+0x22>
 8009e5c:	6820      	ldr	r0, [r4, #0]
 8009e5e:	1821      	adds	r1, r4, r0
 8009e60:	428b      	cmp	r3, r1
 8009e62:	bf04      	itt	eq
 8009e64:	6819      	ldreq	r1, [r3, #0]
 8009e66:	685b      	ldreq	r3, [r3, #4]
 8009e68:	6063      	str	r3, [r4, #4]
 8009e6a:	bf04      	itt	eq
 8009e6c:	1809      	addeq	r1, r1, r0
 8009e6e:	6021      	streq	r1, [r4, #0]
 8009e70:	6054      	str	r4, [r2, #4]
 8009e72:	e7ca      	b.n	8009e0a <_free_r+0x22>
 8009e74:	bd38      	pop	{r3, r4, r5, pc}
 8009e76:	bf00      	nop
 8009e78:	20000a54 	.word	0x20000a54

08009e7c <sbrk_aligned>:
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	4e0e      	ldr	r6, [pc, #56]	; (8009eb8 <sbrk_aligned+0x3c>)
 8009e80:	460c      	mov	r4, r1
 8009e82:	6831      	ldr	r1, [r6, #0]
 8009e84:	4605      	mov	r5, r0
 8009e86:	b911      	cbnz	r1, 8009e8e <sbrk_aligned+0x12>
 8009e88:	f000 fcd4 	bl	800a834 <_sbrk_r>
 8009e8c:	6030      	str	r0, [r6, #0]
 8009e8e:	4621      	mov	r1, r4
 8009e90:	4628      	mov	r0, r5
 8009e92:	f000 fccf 	bl	800a834 <_sbrk_r>
 8009e96:	1c43      	adds	r3, r0, #1
 8009e98:	d00a      	beq.n	8009eb0 <sbrk_aligned+0x34>
 8009e9a:	1cc4      	adds	r4, r0, #3
 8009e9c:	f024 0403 	bic.w	r4, r4, #3
 8009ea0:	42a0      	cmp	r0, r4
 8009ea2:	d007      	beq.n	8009eb4 <sbrk_aligned+0x38>
 8009ea4:	1a21      	subs	r1, r4, r0
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	f000 fcc4 	bl	800a834 <_sbrk_r>
 8009eac:	3001      	adds	r0, #1
 8009eae:	d101      	bne.n	8009eb4 <sbrk_aligned+0x38>
 8009eb0:	f04f 34ff 	mov.w	r4, #4294967295
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	bd70      	pop	{r4, r5, r6, pc}
 8009eb8:	20000a58 	.word	0x20000a58

08009ebc <_malloc_r>:
 8009ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec0:	1ccd      	adds	r5, r1, #3
 8009ec2:	f025 0503 	bic.w	r5, r5, #3
 8009ec6:	3508      	adds	r5, #8
 8009ec8:	2d0c      	cmp	r5, #12
 8009eca:	bf38      	it	cc
 8009ecc:	250c      	movcc	r5, #12
 8009ece:	2d00      	cmp	r5, #0
 8009ed0:	4607      	mov	r7, r0
 8009ed2:	db01      	blt.n	8009ed8 <_malloc_r+0x1c>
 8009ed4:	42a9      	cmp	r1, r5
 8009ed6:	d905      	bls.n	8009ee4 <_malloc_r+0x28>
 8009ed8:	230c      	movs	r3, #12
 8009eda:	603b      	str	r3, [r7, #0]
 8009edc:	2600      	movs	r6, #0
 8009ede:	4630      	mov	r0, r6
 8009ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee4:	4e2e      	ldr	r6, [pc, #184]	; (8009fa0 <_malloc_r+0xe4>)
 8009ee6:	f000 fd69 	bl	800a9bc <__malloc_lock>
 8009eea:	6833      	ldr	r3, [r6, #0]
 8009eec:	461c      	mov	r4, r3
 8009eee:	bb34      	cbnz	r4, 8009f3e <_malloc_r+0x82>
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	f7ff ffc2 	bl	8009e7c <sbrk_aligned>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	4604      	mov	r4, r0
 8009efc:	d14d      	bne.n	8009f9a <_malloc_r+0xde>
 8009efe:	6834      	ldr	r4, [r6, #0]
 8009f00:	4626      	mov	r6, r4
 8009f02:	2e00      	cmp	r6, #0
 8009f04:	d140      	bne.n	8009f88 <_malloc_r+0xcc>
 8009f06:	6823      	ldr	r3, [r4, #0]
 8009f08:	4631      	mov	r1, r6
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	eb04 0803 	add.w	r8, r4, r3
 8009f10:	f000 fc90 	bl	800a834 <_sbrk_r>
 8009f14:	4580      	cmp	r8, r0
 8009f16:	d13a      	bne.n	8009f8e <_malloc_r+0xd2>
 8009f18:	6821      	ldr	r1, [r4, #0]
 8009f1a:	3503      	adds	r5, #3
 8009f1c:	1a6d      	subs	r5, r5, r1
 8009f1e:	f025 0503 	bic.w	r5, r5, #3
 8009f22:	3508      	adds	r5, #8
 8009f24:	2d0c      	cmp	r5, #12
 8009f26:	bf38      	it	cc
 8009f28:	250c      	movcc	r5, #12
 8009f2a:	4629      	mov	r1, r5
 8009f2c:	4638      	mov	r0, r7
 8009f2e:	f7ff ffa5 	bl	8009e7c <sbrk_aligned>
 8009f32:	3001      	adds	r0, #1
 8009f34:	d02b      	beq.n	8009f8e <_malloc_r+0xd2>
 8009f36:	6823      	ldr	r3, [r4, #0]
 8009f38:	442b      	add	r3, r5
 8009f3a:	6023      	str	r3, [r4, #0]
 8009f3c:	e00e      	b.n	8009f5c <_malloc_r+0xa0>
 8009f3e:	6822      	ldr	r2, [r4, #0]
 8009f40:	1b52      	subs	r2, r2, r5
 8009f42:	d41e      	bmi.n	8009f82 <_malloc_r+0xc6>
 8009f44:	2a0b      	cmp	r2, #11
 8009f46:	d916      	bls.n	8009f76 <_malloc_r+0xba>
 8009f48:	1961      	adds	r1, r4, r5
 8009f4a:	42a3      	cmp	r3, r4
 8009f4c:	6025      	str	r5, [r4, #0]
 8009f4e:	bf18      	it	ne
 8009f50:	6059      	strne	r1, [r3, #4]
 8009f52:	6863      	ldr	r3, [r4, #4]
 8009f54:	bf08      	it	eq
 8009f56:	6031      	streq	r1, [r6, #0]
 8009f58:	5162      	str	r2, [r4, r5]
 8009f5a:	604b      	str	r3, [r1, #4]
 8009f5c:	4638      	mov	r0, r7
 8009f5e:	f104 060b 	add.w	r6, r4, #11
 8009f62:	f000 fd31 	bl	800a9c8 <__malloc_unlock>
 8009f66:	f026 0607 	bic.w	r6, r6, #7
 8009f6a:	1d23      	adds	r3, r4, #4
 8009f6c:	1af2      	subs	r2, r6, r3
 8009f6e:	d0b6      	beq.n	8009ede <_malloc_r+0x22>
 8009f70:	1b9b      	subs	r3, r3, r6
 8009f72:	50a3      	str	r3, [r4, r2]
 8009f74:	e7b3      	b.n	8009ede <_malloc_r+0x22>
 8009f76:	6862      	ldr	r2, [r4, #4]
 8009f78:	42a3      	cmp	r3, r4
 8009f7a:	bf0c      	ite	eq
 8009f7c:	6032      	streq	r2, [r6, #0]
 8009f7e:	605a      	strne	r2, [r3, #4]
 8009f80:	e7ec      	b.n	8009f5c <_malloc_r+0xa0>
 8009f82:	4623      	mov	r3, r4
 8009f84:	6864      	ldr	r4, [r4, #4]
 8009f86:	e7b2      	b.n	8009eee <_malloc_r+0x32>
 8009f88:	4634      	mov	r4, r6
 8009f8a:	6876      	ldr	r6, [r6, #4]
 8009f8c:	e7b9      	b.n	8009f02 <_malloc_r+0x46>
 8009f8e:	230c      	movs	r3, #12
 8009f90:	603b      	str	r3, [r7, #0]
 8009f92:	4638      	mov	r0, r7
 8009f94:	f000 fd18 	bl	800a9c8 <__malloc_unlock>
 8009f98:	e7a1      	b.n	8009ede <_malloc_r+0x22>
 8009f9a:	6025      	str	r5, [r4, #0]
 8009f9c:	e7de      	b.n	8009f5c <_malloc_r+0xa0>
 8009f9e:	bf00      	nop
 8009fa0:	20000a54 	.word	0x20000a54

08009fa4 <__ssputs_r>:
 8009fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa8:	688e      	ldr	r6, [r1, #8]
 8009faa:	429e      	cmp	r6, r3
 8009fac:	4682      	mov	sl, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	4690      	mov	r8, r2
 8009fb2:	461f      	mov	r7, r3
 8009fb4:	d838      	bhi.n	800a028 <__ssputs_r+0x84>
 8009fb6:	898a      	ldrh	r2, [r1, #12]
 8009fb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fbc:	d032      	beq.n	800a024 <__ssputs_r+0x80>
 8009fbe:	6825      	ldr	r5, [r4, #0]
 8009fc0:	6909      	ldr	r1, [r1, #16]
 8009fc2:	eba5 0901 	sub.w	r9, r5, r1
 8009fc6:	6965      	ldr	r5, [r4, #20]
 8009fc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	444b      	add	r3, r9
 8009fd4:	106d      	asrs	r5, r5, #1
 8009fd6:	429d      	cmp	r5, r3
 8009fd8:	bf38      	it	cc
 8009fda:	461d      	movcc	r5, r3
 8009fdc:	0553      	lsls	r3, r2, #21
 8009fde:	d531      	bpl.n	800a044 <__ssputs_r+0xa0>
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	f7ff ff6b 	bl	8009ebc <_malloc_r>
 8009fe6:	4606      	mov	r6, r0
 8009fe8:	b950      	cbnz	r0, 800a000 <__ssputs_r+0x5c>
 8009fea:	230c      	movs	r3, #12
 8009fec:	f8ca 3000 	str.w	r3, [sl]
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ff6:	81a3      	strh	r3, [r4, #12]
 8009ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a000:	6921      	ldr	r1, [r4, #16]
 800a002:	464a      	mov	r2, r9
 800a004:	f7ff fb2c 	bl	8009660 <memcpy>
 800a008:	89a3      	ldrh	r3, [r4, #12]
 800a00a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a00e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a012:	81a3      	strh	r3, [r4, #12]
 800a014:	6126      	str	r6, [r4, #16]
 800a016:	6165      	str	r5, [r4, #20]
 800a018:	444e      	add	r6, r9
 800a01a:	eba5 0509 	sub.w	r5, r5, r9
 800a01e:	6026      	str	r6, [r4, #0]
 800a020:	60a5      	str	r5, [r4, #8]
 800a022:	463e      	mov	r6, r7
 800a024:	42be      	cmp	r6, r7
 800a026:	d900      	bls.n	800a02a <__ssputs_r+0x86>
 800a028:	463e      	mov	r6, r7
 800a02a:	6820      	ldr	r0, [r4, #0]
 800a02c:	4632      	mov	r2, r6
 800a02e:	4641      	mov	r1, r8
 800a030:	f000 fcaa 	bl	800a988 <memmove>
 800a034:	68a3      	ldr	r3, [r4, #8]
 800a036:	1b9b      	subs	r3, r3, r6
 800a038:	60a3      	str	r3, [r4, #8]
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	4433      	add	r3, r6
 800a03e:	6023      	str	r3, [r4, #0]
 800a040:	2000      	movs	r0, #0
 800a042:	e7db      	b.n	8009ffc <__ssputs_r+0x58>
 800a044:	462a      	mov	r2, r5
 800a046:	f000 fcc5 	bl	800a9d4 <_realloc_r>
 800a04a:	4606      	mov	r6, r0
 800a04c:	2800      	cmp	r0, #0
 800a04e:	d1e1      	bne.n	800a014 <__ssputs_r+0x70>
 800a050:	6921      	ldr	r1, [r4, #16]
 800a052:	4650      	mov	r0, sl
 800a054:	f7ff fec8 	bl	8009de8 <_free_r>
 800a058:	e7c7      	b.n	8009fea <__ssputs_r+0x46>
	...

0800a05c <_svfiprintf_r>:
 800a05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a060:	4698      	mov	r8, r3
 800a062:	898b      	ldrh	r3, [r1, #12]
 800a064:	061b      	lsls	r3, r3, #24
 800a066:	b09d      	sub	sp, #116	; 0x74
 800a068:	4607      	mov	r7, r0
 800a06a:	460d      	mov	r5, r1
 800a06c:	4614      	mov	r4, r2
 800a06e:	d50e      	bpl.n	800a08e <_svfiprintf_r+0x32>
 800a070:	690b      	ldr	r3, [r1, #16]
 800a072:	b963      	cbnz	r3, 800a08e <_svfiprintf_r+0x32>
 800a074:	2140      	movs	r1, #64	; 0x40
 800a076:	f7ff ff21 	bl	8009ebc <_malloc_r>
 800a07a:	6028      	str	r0, [r5, #0]
 800a07c:	6128      	str	r0, [r5, #16]
 800a07e:	b920      	cbnz	r0, 800a08a <_svfiprintf_r+0x2e>
 800a080:	230c      	movs	r3, #12
 800a082:	603b      	str	r3, [r7, #0]
 800a084:	f04f 30ff 	mov.w	r0, #4294967295
 800a088:	e0d1      	b.n	800a22e <_svfiprintf_r+0x1d2>
 800a08a:	2340      	movs	r3, #64	; 0x40
 800a08c:	616b      	str	r3, [r5, #20]
 800a08e:	2300      	movs	r3, #0
 800a090:	9309      	str	r3, [sp, #36]	; 0x24
 800a092:	2320      	movs	r3, #32
 800a094:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a098:	f8cd 800c 	str.w	r8, [sp, #12]
 800a09c:	2330      	movs	r3, #48	; 0x30
 800a09e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a248 <_svfiprintf_r+0x1ec>
 800a0a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0a6:	f04f 0901 	mov.w	r9, #1
 800a0aa:	4623      	mov	r3, r4
 800a0ac:	469a      	mov	sl, r3
 800a0ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0b2:	b10a      	cbz	r2, 800a0b8 <_svfiprintf_r+0x5c>
 800a0b4:	2a25      	cmp	r2, #37	; 0x25
 800a0b6:	d1f9      	bne.n	800a0ac <_svfiprintf_r+0x50>
 800a0b8:	ebba 0b04 	subs.w	fp, sl, r4
 800a0bc:	d00b      	beq.n	800a0d6 <_svfiprintf_r+0x7a>
 800a0be:	465b      	mov	r3, fp
 800a0c0:	4622      	mov	r2, r4
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	4638      	mov	r0, r7
 800a0c6:	f7ff ff6d 	bl	8009fa4 <__ssputs_r>
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	f000 80aa 	beq.w	800a224 <_svfiprintf_r+0x1c8>
 800a0d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0d2:	445a      	add	r2, fp
 800a0d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a0d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f000 80a2 	beq.w	800a224 <_svfiprintf_r+0x1c8>
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ea:	f10a 0a01 	add.w	sl, sl, #1
 800a0ee:	9304      	str	r3, [sp, #16]
 800a0f0:	9307      	str	r3, [sp, #28]
 800a0f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0f6:	931a      	str	r3, [sp, #104]	; 0x68
 800a0f8:	4654      	mov	r4, sl
 800a0fa:	2205      	movs	r2, #5
 800a0fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a100:	4851      	ldr	r0, [pc, #324]	; (800a248 <_svfiprintf_r+0x1ec>)
 800a102:	f7f6 f845 	bl	8000190 <memchr>
 800a106:	9a04      	ldr	r2, [sp, #16]
 800a108:	b9d8      	cbnz	r0, 800a142 <_svfiprintf_r+0xe6>
 800a10a:	06d0      	lsls	r0, r2, #27
 800a10c:	bf44      	itt	mi
 800a10e:	2320      	movmi	r3, #32
 800a110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a114:	0711      	lsls	r1, r2, #28
 800a116:	bf44      	itt	mi
 800a118:	232b      	movmi	r3, #43	; 0x2b
 800a11a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a11e:	f89a 3000 	ldrb.w	r3, [sl]
 800a122:	2b2a      	cmp	r3, #42	; 0x2a
 800a124:	d015      	beq.n	800a152 <_svfiprintf_r+0xf6>
 800a126:	9a07      	ldr	r2, [sp, #28]
 800a128:	4654      	mov	r4, sl
 800a12a:	2000      	movs	r0, #0
 800a12c:	f04f 0c0a 	mov.w	ip, #10
 800a130:	4621      	mov	r1, r4
 800a132:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a136:	3b30      	subs	r3, #48	; 0x30
 800a138:	2b09      	cmp	r3, #9
 800a13a:	d94e      	bls.n	800a1da <_svfiprintf_r+0x17e>
 800a13c:	b1b0      	cbz	r0, 800a16c <_svfiprintf_r+0x110>
 800a13e:	9207      	str	r2, [sp, #28]
 800a140:	e014      	b.n	800a16c <_svfiprintf_r+0x110>
 800a142:	eba0 0308 	sub.w	r3, r0, r8
 800a146:	fa09 f303 	lsl.w	r3, r9, r3
 800a14a:	4313      	orrs	r3, r2
 800a14c:	9304      	str	r3, [sp, #16]
 800a14e:	46a2      	mov	sl, r4
 800a150:	e7d2      	b.n	800a0f8 <_svfiprintf_r+0x9c>
 800a152:	9b03      	ldr	r3, [sp, #12]
 800a154:	1d19      	adds	r1, r3, #4
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	9103      	str	r1, [sp, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	bfbb      	ittet	lt
 800a15e:	425b      	neglt	r3, r3
 800a160:	f042 0202 	orrlt.w	r2, r2, #2
 800a164:	9307      	strge	r3, [sp, #28]
 800a166:	9307      	strlt	r3, [sp, #28]
 800a168:	bfb8      	it	lt
 800a16a:	9204      	strlt	r2, [sp, #16]
 800a16c:	7823      	ldrb	r3, [r4, #0]
 800a16e:	2b2e      	cmp	r3, #46	; 0x2e
 800a170:	d10c      	bne.n	800a18c <_svfiprintf_r+0x130>
 800a172:	7863      	ldrb	r3, [r4, #1]
 800a174:	2b2a      	cmp	r3, #42	; 0x2a
 800a176:	d135      	bne.n	800a1e4 <_svfiprintf_r+0x188>
 800a178:	9b03      	ldr	r3, [sp, #12]
 800a17a:	1d1a      	adds	r2, r3, #4
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	9203      	str	r2, [sp, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	bfb8      	it	lt
 800a184:	f04f 33ff 	movlt.w	r3, #4294967295
 800a188:	3402      	adds	r4, #2
 800a18a:	9305      	str	r3, [sp, #20]
 800a18c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a24c <_svfiprintf_r+0x1f0>
 800a190:	7821      	ldrb	r1, [r4, #0]
 800a192:	2203      	movs	r2, #3
 800a194:	4650      	mov	r0, sl
 800a196:	f7f5 fffb 	bl	8000190 <memchr>
 800a19a:	b140      	cbz	r0, 800a1ae <_svfiprintf_r+0x152>
 800a19c:	2340      	movs	r3, #64	; 0x40
 800a19e:	eba0 000a 	sub.w	r0, r0, sl
 800a1a2:	fa03 f000 	lsl.w	r0, r3, r0
 800a1a6:	9b04      	ldr	r3, [sp, #16]
 800a1a8:	4303      	orrs	r3, r0
 800a1aa:	3401      	adds	r4, #1
 800a1ac:	9304      	str	r3, [sp, #16]
 800a1ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b2:	4827      	ldr	r0, [pc, #156]	; (800a250 <_svfiprintf_r+0x1f4>)
 800a1b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1b8:	2206      	movs	r2, #6
 800a1ba:	f7f5 ffe9 	bl	8000190 <memchr>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d038      	beq.n	800a234 <_svfiprintf_r+0x1d8>
 800a1c2:	4b24      	ldr	r3, [pc, #144]	; (800a254 <_svfiprintf_r+0x1f8>)
 800a1c4:	bb1b      	cbnz	r3, 800a20e <_svfiprintf_r+0x1b2>
 800a1c6:	9b03      	ldr	r3, [sp, #12]
 800a1c8:	3307      	adds	r3, #7
 800a1ca:	f023 0307 	bic.w	r3, r3, #7
 800a1ce:	3308      	adds	r3, #8
 800a1d0:	9303      	str	r3, [sp, #12]
 800a1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d4:	4433      	add	r3, r6
 800a1d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d8:	e767      	b.n	800a0aa <_svfiprintf_r+0x4e>
 800a1da:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1de:	460c      	mov	r4, r1
 800a1e0:	2001      	movs	r0, #1
 800a1e2:	e7a5      	b.n	800a130 <_svfiprintf_r+0xd4>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	3401      	adds	r4, #1
 800a1e8:	9305      	str	r3, [sp, #20]
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	f04f 0c0a 	mov.w	ip, #10
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1f6:	3a30      	subs	r2, #48	; 0x30
 800a1f8:	2a09      	cmp	r2, #9
 800a1fa:	d903      	bls.n	800a204 <_svfiprintf_r+0x1a8>
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d0c5      	beq.n	800a18c <_svfiprintf_r+0x130>
 800a200:	9105      	str	r1, [sp, #20]
 800a202:	e7c3      	b.n	800a18c <_svfiprintf_r+0x130>
 800a204:	fb0c 2101 	mla	r1, ip, r1, r2
 800a208:	4604      	mov	r4, r0
 800a20a:	2301      	movs	r3, #1
 800a20c:	e7f0      	b.n	800a1f0 <_svfiprintf_r+0x194>
 800a20e:	ab03      	add	r3, sp, #12
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	462a      	mov	r2, r5
 800a214:	4b10      	ldr	r3, [pc, #64]	; (800a258 <_svfiprintf_r+0x1fc>)
 800a216:	a904      	add	r1, sp, #16
 800a218:	4638      	mov	r0, r7
 800a21a:	f3af 8000 	nop.w
 800a21e:	1c42      	adds	r2, r0, #1
 800a220:	4606      	mov	r6, r0
 800a222:	d1d6      	bne.n	800a1d2 <_svfiprintf_r+0x176>
 800a224:	89ab      	ldrh	r3, [r5, #12]
 800a226:	065b      	lsls	r3, r3, #25
 800a228:	f53f af2c 	bmi.w	800a084 <_svfiprintf_r+0x28>
 800a22c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a22e:	b01d      	add	sp, #116	; 0x74
 800a230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a234:	ab03      	add	r3, sp, #12
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	462a      	mov	r2, r5
 800a23a:	4b07      	ldr	r3, [pc, #28]	; (800a258 <_svfiprintf_r+0x1fc>)
 800a23c:	a904      	add	r1, sp, #16
 800a23e:	4638      	mov	r0, r7
 800a240:	f000 f9d2 	bl	800a5e8 <_printf_i>
 800a244:	e7eb      	b.n	800a21e <_svfiprintf_r+0x1c2>
 800a246:	bf00      	nop
 800a248:	0800ad6c 	.word	0x0800ad6c
 800a24c:	0800ad72 	.word	0x0800ad72
 800a250:	0800ad76 	.word	0x0800ad76
 800a254:	00000000 	.word	0x00000000
 800a258:	08009fa5 	.word	0x08009fa5

0800a25c <__sfputc_r>:
 800a25c:	6893      	ldr	r3, [r2, #8]
 800a25e:	3b01      	subs	r3, #1
 800a260:	2b00      	cmp	r3, #0
 800a262:	b410      	push	{r4}
 800a264:	6093      	str	r3, [r2, #8]
 800a266:	da07      	bge.n	800a278 <__sfputc_r+0x1c>
 800a268:	6994      	ldr	r4, [r2, #24]
 800a26a:	42a3      	cmp	r3, r4
 800a26c:	db01      	blt.n	800a272 <__sfputc_r+0x16>
 800a26e:	290a      	cmp	r1, #10
 800a270:	d102      	bne.n	800a278 <__sfputc_r+0x1c>
 800a272:	bc10      	pop	{r4}
 800a274:	f7ff badc 	b.w	8009830 <__swbuf_r>
 800a278:	6813      	ldr	r3, [r2, #0]
 800a27a:	1c58      	adds	r0, r3, #1
 800a27c:	6010      	str	r0, [r2, #0]
 800a27e:	7019      	strb	r1, [r3, #0]
 800a280:	4608      	mov	r0, r1
 800a282:	bc10      	pop	{r4}
 800a284:	4770      	bx	lr

0800a286 <__sfputs_r>:
 800a286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a288:	4606      	mov	r6, r0
 800a28a:	460f      	mov	r7, r1
 800a28c:	4614      	mov	r4, r2
 800a28e:	18d5      	adds	r5, r2, r3
 800a290:	42ac      	cmp	r4, r5
 800a292:	d101      	bne.n	800a298 <__sfputs_r+0x12>
 800a294:	2000      	movs	r0, #0
 800a296:	e007      	b.n	800a2a8 <__sfputs_r+0x22>
 800a298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a29c:	463a      	mov	r2, r7
 800a29e:	4630      	mov	r0, r6
 800a2a0:	f7ff ffdc 	bl	800a25c <__sfputc_r>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	d1f3      	bne.n	800a290 <__sfputs_r+0xa>
 800a2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2ac <_vfiprintf_r>:
 800a2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b0:	460d      	mov	r5, r1
 800a2b2:	b09d      	sub	sp, #116	; 0x74
 800a2b4:	4614      	mov	r4, r2
 800a2b6:	4698      	mov	r8, r3
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	b118      	cbz	r0, 800a2c4 <_vfiprintf_r+0x18>
 800a2bc:	6983      	ldr	r3, [r0, #24]
 800a2be:	b90b      	cbnz	r3, 800a2c4 <_vfiprintf_r+0x18>
 800a2c0:	f7ff fc8c 	bl	8009bdc <__sinit>
 800a2c4:	4b89      	ldr	r3, [pc, #548]	; (800a4ec <_vfiprintf_r+0x240>)
 800a2c6:	429d      	cmp	r5, r3
 800a2c8:	d11b      	bne.n	800a302 <_vfiprintf_r+0x56>
 800a2ca:	6875      	ldr	r5, [r6, #4]
 800a2cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2ce:	07d9      	lsls	r1, r3, #31
 800a2d0:	d405      	bmi.n	800a2de <_vfiprintf_r+0x32>
 800a2d2:	89ab      	ldrh	r3, [r5, #12]
 800a2d4:	059a      	lsls	r2, r3, #22
 800a2d6:	d402      	bmi.n	800a2de <_vfiprintf_r+0x32>
 800a2d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2da:	f7ff fd1d 	bl	8009d18 <__retarget_lock_acquire_recursive>
 800a2de:	89ab      	ldrh	r3, [r5, #12]
 800a2e0:	071b      	lsls	r3, r3, #28
 800a2e2:	d501      	bpl.n	800a2e8 <_vfiprintf_r+0x3c>
 800a2e4:	692b      	ldr	r3, [r5, #16]
 800a2e6:	b9eb      	cbnz	r3, 800a324 <_vfiprintf_r+0x78>
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	f7ff faf2 	bl	80098d4 <__swsetup_r>
 800a2f0:	b1c0      	cbz	r0, 800a324 <_vfiprintf_r+0x78>
 800a2f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2f4:	07dc      	lsls	r4, r3, #31
 800a2f6:	d50e      	bpl.n	800a316 <_vfiprintf_r+0x6a>
 800a2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fc:	b01d      	add	sp, #116	; 0x74
 800a2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a302:	4b7b      	ldr	r3, [pc, #492]	; (800a4f0 <_vfiprintf_r+0x244>)
 800a304:	429d      	cmp	r5, r3
 800a306:	d101      	bne.n	800a30c <_vfiprintf_r+0x60>
 800a308:	68b5      	ldr	r5, [r6, #8]
 800a30a:	e7df      	b.n	800a2cc <_vfiprintf_r+0x20>
 800a30c:	4b79      	ldr	r3, [pc, #484]	; (800a4f4 <_vfiprintf_r+0x248>)
 800a30e:	429d      	cmp	r5, r3
 800a310:	bf08      	it	eq
 800a312:	68f5      	ldreq	r5, [r6, #12]
 800a314:	e7da      	b.n	800a2cc <_vfiprintf_r+0x20>
 800a316:	89ab      	ldrh	r3, [r5, #12]
 800a318:	0598      	lsls	r0, r3, #22
 800a31a:	d4ed      	bmi.n	800a2f8 <_vfiprintf_r+0x4c>
 800a31c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a31e:	f7ff fcfc 	bl	8009d1a <__retarget_lock_release_recursive>
 800a322:	e7e9      	b.n	800a2f8 <_vfiprintf_r+0x4c>
 800a324:	2300      	movs	r3, #0
 800a326:	9309      	str	r3, [sp, #36]	; 0x24
 800a328:	2320      	movs	r3, #32
 800a32a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a32e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a332:	2330      	movs	r3, #48	; 0x30
 800a334:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a4f8 <_vfiprintf_r+0x24c>
 800a338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a33c:	f04f 0901 	mov.w	r9, #1
 800a340:	4623      	mov	r3, r4
 800a342:	469a      	mov	sl, r3
 800a344:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a348:	b10a      	cbz	r2, 800a34e <_vfiprintf_r+0xa2>
 800a34a:	2a25      	cmp	r2, #37	; 0x25
 800a34c:	d1f9      	bne.n	800a342 <_vfiprintf_r+0x96>
 800a34e:	ebba 0b04 	subs.w	fp, sl, r4
 800a352:	d00b      	beq.n	800a36c <_vfiprintf_r+0xc0>
 800a354:	465b      	mov	r3, fp
 800a356:	4622      	mov	r2, r4
 800a358:	4629      	mov	r1, r5
 800a35a:	4630      	mov	r0, r6
 800a35c:	f7ff ff93 	bl	800a286 <__sfputs_r>
 800a360:	3001      	adds	r0, #1
 800a362:	f000 80aa 	beq.w	800a4ba <_vfiprintf_r+0x20e>
 800a366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a368:	445a      	add	r2, fp
 800a36a:	9209      	str	r2, [sp, #36]	; 0x24
 800a36c:	f89a 3000 	ldrb.w	r3, [sl]
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 80a2 	beq.w	800a4ba <_vfiprintf_r+0x20e>
 800a376:	2300      	movs	r3, #0
 800a378:	f04f 32ff 	mov.w	r2, #4294967295
 800a37c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a380:	f10a 0a01 	add.w	sl, sl, #1
 800a384:	9304      	str	r3, [sp, #16]
 800a386:	9307      	str	r3, [sp, #28]
 800a388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a38c:	931a      	str	r3, [sp, #104]	; 0x68
 800a38e:	4654      	mov	r4, sl
 800a390:	2205      	movs	r2, #5
 800a392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a396:	4858      	ldr	r0, [pc, #352]	; (800a4f8 <_vfiprintf_r+0x24c>)
 800a398:	f7f5 fefa 	bl	8000190 <memchr>
 800a39c:	9a04      	ldr	r2, [sp, #16]
 800a39e:	b9d8      	cbnz	r0, 800a3d8 <_vfiprintf_r+0x12c>
 800a3a0:	06d1      	lsls	r1, r2, #27
 800a3a2:	bf44      	itt	mi
 800a3a4:	2320      	movmi	r3, #32
 800a3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3aa:	0713      	lsls	r3, r2, #28
 800a3ac:	bf44      	itt	mi
 800a3ae:	232b      	movmi	r3, #43	; 0x2b
 800a3b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3b8:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ba:	d015      	beq.n	800a3e8 <_vfiprintf_r+0x13c>
 800a3bc:	9a07      	ldr	r2, [sp, #28]
 800a3be:	4654      	mov	r4, sl
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	f04f 0c0a 	mov.w	ip, #10
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3cc:	3b30      	subs	r3, #48	; 0x30
 800a3ce:	2b09      	cmp	r3, #9
 800a3d0:	d94e      	bls.n	800a470 <_vfiprintf_r+0x1c4>
 800a3d2:	b1b0      	cbz	r0, 800a402 <_vfiprintf_r+0x156>
 800a3d4:	9207      	str	r2, [sp, #28]
 800a3d6:	e014      	b.n	800a402 <_vfiprintf_r+0x156>
 800a3d8:	eba0 0308 	sub.w	r3, r0, r8
 800a3dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	9304      	str	r3, [sp, #16]
 800a3e4:	46a2      	mov	sl, r4
 800a3e6:	e7d2      	b.n	800a38e <_vfiprintf_r+0xe2>
 800a3e8:	9b03      	ldr	r3, [sp, #12]
 800a3ea:	1d19      	adds	r1, r3, #4
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	9103      	str	r1, [sp, #12]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	bfbb      	ittet	lt
 800a3f4:	425b      	neglt	r3, r3
 800a3f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a3fa:	9307      	strge	r3, [sp, #28]
 800a3fc:	9307      	strlt	r3, [sp, #28]
 800a3fe:	bfb8      	it	lt
 800a400:	9204      	strlt	r2, [sp, #16]
 800a402:	7823      	ldrb	r3, [r4, #0]
 800a404:	2b2e      	cmp	r3, #46	; 0x2e
 800a406:	d10c      	bne.n	800a422 <_vfiprintf_r+0x176>
 800a408:	7863      	ldrb	r3, [r4, #1]
 800a40a:	2b2a      	cmp	r3, #42	; 0x2a
 800a40c:	d135      	bne.n	800a47a <_vfiprintf_r+0x1ce>
 800a40e:	9b03      	ldr	r3, [sp, #12]
 800a410:	1d1a      	adds	r2, r3, #4
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	9203      	str	r2, [sp, #12]
 800a416:	2b00      	cmp	r3, #0
 800a418:	bfb8      	it	lt
 800a41a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a41e:	3402      	adds	r4, #2
 800a420:	9305      	str	r3, [sp, #20]
 800a422:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a4fc <_vfiprintf_r+0x250>
 800a426:	7821      	ldrb	r1, [r4, #0]
 800a428:	2203      	movs	r2, #3
 800a42a:	4650      	mov	r0, sl
 800a42c:	f7f5 feb0 	bl	8000190 <memchr>
 800a430:	b140      	cbz	r0, 800a444 <_vfiprintf_r+0x198>
 800a432:	2340      	movs	r3, #64	; 0x40
 800a434:	eba0 000a 	sub.w	r0, r0, sl
 800a438:	fa03 f000 	lsl.w	r0, r3, r0
 800a43c:	9b04      	ldr	r3, [sp, #16]
 800a43e:	4303      	orrs	r3, r0
 800a440:	3401      	adds	r4, #1
 800a442:	9304      	str	r3, [sp, #16]
 800a444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a448:	482d      	ldr	r0, [pc, #180]	; (800a500 <_vfiprintf_r+0x254>)
 800a44a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a44e:	2206      	movs	r2, #6
 800a450:	f7f5 fe9e 	bl	8000190 <memchr>
 800a454:	2800      	cmp	r0, #0
 800a456:	d03f      	beq.n	800a4d8 <_vfiprintf_r+0x22c>
 800a458:	4b2a      	ldr	r3, [pc, #168]	; (800a504 <_vfiprintf_r+0x258>)
 800a45a:	bb1b      	cbnz	r3, 800a4a4 <_vfiprintf_r+0x1f8>
 800a45c:	9b03      	ldr	r3, [sp, #12]
 800a45e:	3307      	adds	r3, #7
 800a460:	f023 0307 	bic.w	r3, r3, #7
 800a464:	3308      	adds	r3, #8
 800a466:	9303      	str	r3, [sp, #12]
 800a468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46a:	443b      	add	r3, r7
 800a46c:	9309      	str	r3, [sp, #36]	; 0x24
 800a46e:	e767      	b.n	800a340 <_vfiprintf_r+0x94>
 800a470:	fb0c 3202 	mla	r2, ip, r2, r3
 800a474:	460c      	mov	r4, r1
 800a476:	2001      	movs	r0, #1
 800a478:	e7a5      	b.n	800a3c6 <_vfiprintf_r+0x11a>
 800a47a:	2300      	movs	r3, #0
 800a47c:	3401      	adds	r4, #1
 800a47e:	9305      	str	r3, [sp, #20]
 800a480:	4619      	mov	r1, r3
 800a482:	f04f 0c0a 	mov.w	ip, #10
 800a486:	4620      	mov	r0, r4
 800a488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a48c:	3a30      	subs	r2, #48	; 0x30
 800a48e:	2a09      	cmp	r2, #9
 800a490:	d903      	bls.n	800a49a <_vfiprintf_r+0x1ee>
 800a492:	2b00      	cmp	r3, #0
 800a494:	d0c5      	beq.n	800a422 <_vfiprintf_r+0x176>
 800a496:	9105      	str	r1, [sp, #20]
 800a498:	e7c3      	b.n	800a422 <_vfiprintf_r+0x176>
 800a49a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a49e:	4604      	mov	r4, r0
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e7f0      	b.n	800a486 <_vfiprintf_r+0x1da>
 800a4a4:	ab03      	add	r3, sp, #12
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	462a      	mov	r2, r5
 800a4aa:	4b17      	ldr	r3, [pc, #92]	; (800a508 <_vfiprintf_r+0x25c>)
 800a4ac:	a904      	add	r1, sp, #16
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f3af 8000 	nop.w
 800a4b4:	4607      	mov	r7, r0
 800a4b6:	1c78      	adds	r0, r7, #1
 800a4b8:	d1d6      	bne.n	800a468 <_vfiprintf_r+0x1bc>
 800a4ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4bc:	07d9      	lsls	r1, r3, #31
 800a4be:	d405      	bmi.n	800a4cc <_vfiprintf_r+0x220>
 800a4c0:	89ab      	ldrh	r3, [r5, #12]
 800a4c2:	059a      	lsls	r2, r3, #22
 800a4c4:	d402      	bmi.n	800a4cc <_vfiprintf_r+0x220>
 800a4c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4c8:	f7ff fc27 	bl	8009d1a <__retarget_lock_release_recursive>
 800a4cc:	89ab      	ldrh	r3, [r5, #12]
 800a4ce:	065b      	lsls	r3, r3, #25
 800a4d0:	f53f af12 	bmi.w	800a2f8 <_vfiprintf_r+0x4c>
 800a4d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4d6:	e711      	b.n	800a2fc <_vfiprintf_r+0x50>
 800a4d8:	ab03      	add	r3, sp, #12
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	462a      	mov	r2, r5
 800a4de:	4b0a      	ldr	r3, [pc, #40]	; (800a508 <_vfiprintf_r+0x25c>)
 800a4e0:	a904      	add	r1, sp, #16
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f000 f880 	bl	800a5e8 <_printf_i>
 800a4e8:	e7e4      	b.n	800a4b4 <_vfiprintf_r+0x208>
 800a4ea:	bf00      	nop
 800a4ec:	0800ad2c 	.word	0x0800ad2c
 800a4f0:	0800ad4c 	.word	0x0800ad4c
 800a4f4:	0800ad0c 	.word	0x0800ad0c
 800a4f8:	0800ad6c 	.word	0x0800ad6c
 800a4fc:	0800ad72 	.word	0x0800ad72
 800a500:	0800ad76 	.word	0x0800ad76
 800a504:	00000000 	.word	0x00000000
 800a508:	0800a287 	.word	0x0800a287

0800a50c <_printf_common>:
 800a50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a510:	4616      	mov	r6, r2
 800a512:	4699      	mov	r9, r3
 800a514:	688a      	ldr	r2, [r1, #8]
 800a516:	690b      	ldr	r3, [r1, #16]
 800a518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a51c:	4293      	cmp	r3, r2
 800a51e:	bfb8      	it	lt
 800a520:	4613      	movlt	r3, r2
 800a522:	6033      	str	r3, [r6, #0]
 800a524:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a528:	4607      	mov	r7, r0
 800a52a:	460c      	mov	r4, r1
 800a52c:	b10a      	cbz	r2, 800a532 <_printf_common+0x26>
 800a52e:	3301      	adds	r3, #1
 800a530:	6033      	str	r3, [r6, #0]
 800a532:	6823      	ldr	r3, [r4, #0]
 800a534:	0699      	lsls	r1, r3, #26
 800a536:	bf42      	ittt	mi
 800a538:	6833      	ldrmi	r3, [r6, #0]
 800a53a:	3302      	addmi	r3, #2
 800a53c:	6033      	strmi	r3, [r6, #0]
 800a53e:	6825      	ldr	r5, [r4, #0]
 800a540:	f015 0506 	ands.w	r5, r5, #6
 800a544:	d106      	bne.n	800a554 <_printf_common+0x48>
 800a546:	f104 0a19 	add.w	sl, r4, #25
 800a54a:	68e3      	ldr	r3, [r4, #12]
 800a54c:	6832      	ldr	r2, [r6, #0]
 800a54e:	1a9b      	subs	r3, r3, r2
 800a550:	42ab      	cmp	r3, r5
 800a552:	dc26      	bgt.n	800a5a2 <_printf_common+0x96>
 800a554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a558:	1e13      	subs	r3, r2, #0
 800a55a:	6822      	ldr	r2, [r4, #0]
 800a55c:	bf18      	it	ne
 800a55e:	2301      	movne	r3, #1
 800a560:	0692      	lsls	r2, r2, #26
 800a562:	d42b      	bmi.n	800a5bc <_printf_common+0xb0>
 800a564:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a568:	4649      	mov	r1, r9
 800a56a:	4638      	mov	r0, r7
 800a56c:	47c0      	blx	r8
 800a56e:	3001      	adds	r0, #1
 800a570:	d01e      	beq.n	800a5b0 <_printf_common+0xa4>
 800a572:	6823      	ldr	r3, [r4, #0]
 800a574:	68e5      	ldr	r5, [r4, #12]
 800a576:	6832      	ldr	r2, [r6, #0]
 800a578:	f003 0306 	and.w	r3, r3, #6
 800a57c:	2b04      	cmp	r3, #4
 800a57e:	bf08      	it	eq
 800a580:	1aad      	subeq	r5, r5, r2
 800a582:	68a3      	ldr	r3, [r4, #8]
 800a584:	6922      	ldr	r2, [r4, #16]
 800a586:	bf0c      	ite	eq
 800a588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a58c:	2500      	movne	r5, #0
 800a58e:	4293      	cmp	r3, r2
 800a590:	bfc4      	itt	gt
 800a592:	1a9b      	subgt	r3, r3, r2
 800a594:	18ed      	addgt	r5, r5, r3
 800a596:	2600      	movs	r6, #0
 800a598:	341a      	adds	r4, #26
 800a59a:	42b5      	cmp	r5, r6
 800a59c:	d11a      	bne.n	800a5d4 <_printf_common+0xc8>
 800a59e:	2000      	movs	r0, #0
 800a5a0:	e008      	b.n	800a5b4 <_printf_common+0xa8>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	4652      	mov	r2, sl
 800a5a6:	4649      	mov	r1, r9
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	47c0      	blx	r8
 800a5ac:	3001      	adds	r0, #1
 800a5ae:	d103      	bne.n	800a5b8 <_printf_common+0xac>
 800a5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b8:	3501      	adds	r5, #1
 800a5ba:	e7c6      	b.n	800a54a <_printf_common+0x3e>
 800a5bc:	18e1      	adds	r1, r4, r3
 800a5be:	1c5a      	adds	r2, r3, #1
 800a5c0:	2030      	movs	r0, #48	; 0x30
 800a5c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5c6:	4422      	add	r2, r4
 800a5c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5d0:	3302      	adds	r3, #2
 800a5d2:	e7c7      	b.n	800a564 <_printf_common+0x58>
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	4622      	mov	r2, r4
 800a5d8:	4649      	mov	r1, r9
 800a5da:	4638      	mov	r0, r7
 800a5dc:	47c0      	blx	r8
 800a5de:	3001      	adds	r0, #1
 800a5e0:	d0e6      	beq.n	800a5b0 <_printf_common+0xa4>
 800a5e2:	3601      	adds	r6, #1
 800a5e4:	e7d9      	b.n	800a59a <_printf_common+0x8e>
	...

0800a5e8 <_printf_i>:
 800a5e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ec:	7e0f      	ldrb	r7, [r1, #24]
 800a5ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a5f0:	2f78      	cmp	r7, #120	; 0x78
 800a5f2:	4691      	mov	r9, r2
 800a5f4:	4680      	mov	r8, r0
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	469a      	mov	sl, r3
 800a5fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a5fe:	d807      	bhi.n	800a610 <_printf_i+0x28>
 800a600:	2f62      	cmp	r7, #98	; 0x62
 800a602:	d80a      	bhi.n	800a61a <_printf_i+0x32>
 800a604:	2f00      	cmp	r7, #0
 800a606:	f000 80d8 	beq.w	800a7ba <_printf_i+0x1d2>
 800a60a:	2f58      	cmp	r7, #88	; 0x58
 800a60c:	f000 80a3 	beq.w	800a756 <_printf_i+0x16e>
 800a610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a614:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a618:	e03a      	b.n	800a690 <_printf_i+0xa8>
 800a61a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a61e:	2b15      	cmp	r3, #21
 800a620:	d8f6      	bhi.n	800a610 <_printf_i+0x28>
 800a622:	a101      	add	r1, pc, #4	; (adr r1, 800a628 <_printf_i+0x40>)
 800a624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a628:	0800a681 	.word	0x0800a681
 800a62c:	0800a695 	.word	0x0800a695
 800a630:	0800a611 	.word	0x0800a611
 800a634:	0800a611 	.word	0x0800a611
 800a638:	0800a611 	.word	0x0800a611
 800a63c:	0800a611 	.word	0x0800a611
 800a640:	0800a695 	.word	0x0800a695
 800a644:	0800a611 	.word	0x0800a611
 800a648:	0800a611 	.word	0x0800a611
 800a64c:	0800a611 	.word	0x0800a611
 800a650:	0800a611 	.word	0x0800a611
 800a654:	0800a7a1 	.word	0x0800a7a1
 800a658:	0800a6c5 	.word	0x0800a6c5
 800a65c:	0800a783 	.word	0x0800a783
 800a660:	0800a611 	.word	0x0800a611
 800a664:	0800a611 	.word	0x0800a611
 800a668:	0800a7c3 	.word	0x0800a7c3
 800a66c:	0800a611 	.word	0x0800a611
 800a670:	0800a6c5 	.word	0x0800a6c5
 800a674:	0800a611 	.word	0x0800a611
 800a678:	0800a611 	.word	0x0800a611
 800a67c:	0800a78b 	.word	0x0800a78b
 800a680:	682b      	ldr	r3, [r5, #0]
 800a682:	1d1a      	adds	r2, r3, #4
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	602a      	str	r2, [r5, #0]
 800a688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a68c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a690:	2301      	movs	r3, #1
 800a692:	e0a3      	b.n	800a7dc <_printf_i+0x1f4>
 800a694:	6820      	ldr	r0, [r4, #0]
 800a696:	6829      	ldr	r1, [r5, #0]
 800a698:	0606      	lsls	r6, r0, #24
 800a69a:	f101 0304 	add.w	r3, r1, #4
 800a69e:	d50a      	bpl.n	800a6b6 <_printf_i+0xce>
 800a6a0:	680e      	ldr	r6, [r1, #0]
 800a6a2:	602b      	str	r3, [r5, #0]
 800a6a4:	2e00      	cmp	r6, #0
 800a6a6:	da03      	bge.n	800a6b0 <_printf_i+0xc8>
 800a6a8:	232d      	movs	r3, #45	; 0x2d
 800a6aa:	4276      	negs	r6, r6
 800a6ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6b0:	485e      	ldr	r0, [pc, #376]	; (800a82c <_printf_i+0x244>)
 800a6b2:	230a      	movs	r3, #10
 800a6b4:	e019      	b.n	800a6ea <_printf_i+0x102>
 800a6b6:	680e      	ldr	r6, [r1, #0]
 800a6b8:	602b      	str	r3, [r5, #0]
 800a6ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6be:	bf18      	it	ne
 800a6c0:	b236      	sxthne	r6, r6
 800a6c2:	e7ef      	b.n	800a6a4 <_printf_i+0xbc>
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	6820      	ldr	r0, [r4, #0]
 800a6c8:	1d19      	adds	r1, r3, #4
 800a6ca:	6029      	str	r1, [r5, #0]
 800a6cc:	0601      	lsls	r1, r0, #24
 800a6ce:	d501      	bpl.n	800a6d4 <_printf_i+0xec>
 800a6d0:	681e      	ldr	r6, [r3, #0]
 800a6d2:	e002      	b.n	800a6da <_printf_i+0xf2>
 800a6d4:	0646      	lsls	r6, r0, #25
 800a6d6:	d5fb      	bpl.n	800a6d0 <_printf_i+0xe8>
 800a6d8:	881e      	ldrh	r6, [r3, #0]
 800a6da:	4854      	ldr	r0, [pc, #336]	; (800a82c <_printf_i+0x244>)
 800a6dc:	2f6f      	cmp	r7, #111	; 0x6f
 800a6de:	bf0c      	ite	eq
 800a6e0:	2308      	moveq	r3, #8
 800a6e2:	230a      	movne	r3, #10
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6ea:	6865      	ldr	r5, [r4, #4]
 800a6ec:	60a5      	str	r5, [r4, #8]
 800a6ee:	2d00      	cmp	r5, #0
 800a6f0:	bfa2      	ittt	ge
 800a6f2:	6821      	ldrge	r1, [r4, #0]
 800a6f4:	f021 0104 	bicge.w	r1, r1, #4
 800a6f8:	6021      	strge	r1, [r4, #0]
 800a6fa:	b90e      	cbnz	r6, 800a700 <_printf_i+0x118>
 800a6fc:	2d00      	cmp	r5, #0
 800a6fe:	d04d      	beq.n	800a79c <_printf_i+0x1b4>
 800a700:	4615      	mov	r5, r2
 800a702:	fbb6 f1f3 	udiv	r1, r6, r3
 800a706:	fb03 6711 	mls	r7, r3, r1, r6
 800a70a:	5dc7      	ldrb	r7, [r0, r7]
 800a70c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a710:	4637      	mov	r7, r6
 800a712:	42bb      	cmp	r3, r7
 800a714:	460e      	mov	r6, r1
 800a716:	d9f4      	bls.n	800a702 <_printf_i+0x11a>
 800a718:	2b08      	cmp	r3, #8
 800a71a:	d10b      	bne.n	800a734 <_printf_i+0x14c>
 800a71c:	6823      	ldr	r3, [r4, #0]
 800a71e:	07de      	lsls	r6, r3, #31
 800a720:	d508      	bpl.n	800a734 <_printf_i+0x14c>
 800a722:	6923      	ldr	r3, [r4, #16]
 800a724:	6861      	ldr	r1, [r4, #4]
 800a726:	4299      	cmp	r1, r3
 800a728:	bfde      	ittt	le
 800a72a:	2330      	movle	r3, #48	; 0x30
 800a72c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a730:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a734:	1b52      	subs	r2, r2, r5
 800a736:	6122      	str	r2, [r4, #16]
 800a738:	f8cd a000 	str.w	sl, [sp]
 800a73c:	464b      	mov	r3, r9
 800a73e:	aa03      	add	r2, sp, #12
 800a740:	4621      	mov	r1, r4
 800a742:	4640      	mov	r0, r8
 800a744:	f7ff fee2 	bl	800a50c <_printf_common>
 800a748:	3001      	adds	r0, #1
 800a74a:	d14c      	bne.n	800a7e6 <_printf_i+0x1fe>
 800a74c:	f04f 30ff 	mov.w	r0, #4294967295
 800a750:	b004      	add	sp, #16
 800a752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a756:	4835      	ldr	r0, [pc, #212]	; (800a82c <_printf_i+0x244>)
 800a758:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a75c:	6829      	ldr	r1, [r5, #0]
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	f851 6b04 	ldr.w	r6, [r1], #4
 800a764:	6029      	str	r1, [r5, #0]
 800a766:	061d      	lsls	r5, r3, #24
 800a768:	d514      	bpl.n	800a794 <_printf_i+0x1ac>
 800a76a:	07df      	lsls	r7, r3, #31
 800a76c:	bf44      	itt	mi
 800a76e:	f043 0320 	orrmi.w	r3, r3, #32
 800a772:	6023      	strmi	r3, [r4, #0]
 800a774:	b91e      	cbnz	r6, 800a77e <_printf_i+0x196>
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	f023 0320 	bic.w	r3, r3, #32
 800a77c:	6023      	str	r3, [r4, #0]
 800a77e:	2310      	movs	r3, #16
 800a780:	e7b0      	b.n	800a6e4 <_printf_i+0xfc>
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	f043 0320 	orr.w	r3, r3, #32
 800a788:	6023      	str	r3, [r4, #0]
 800a78a:	2378      	movs	r3, #120	; 0x78
 800a78c:	4828      	ldr	r0, [pc, #160]	; (800a830 <_printf_i+0x248>)
 800a78e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a792:	e7e3      	b.n	800a75c <_printf_i+0x174>
 800a794:	0659      	lsls	r1, r3, #25
 800a796:	bf48      	it	mi
 800a798:	b2b6      	uxthmi	r6, r6
 800a79a:	e7e6      	b.n	800a76a <_printf_i+0x182>
 800a79c:	4615      	mov	r5, r2
 800a79e:	e7bb      	b.n	800a718 <_printf_i+0x130>
 800a7a0:	682b      	ldr	r3, [r5, #0]
 800a7a2:	6826      	ldr	r6, [r4, #0]
 800a7a4:	6961      	ldr	r1, [r4, #20]
 800a7a6:	1d18      	adds	r0, r3, #4
 800a7a8:	6028      	str	r0, [r5, #0]
 800a7aa:	0635      	lsls	r5, r6, #24
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	d501      	bpl.n	800a7b4 <_printf_i+0x1cc>
 800a7b0:	6019      	str	r1, [r3, #0]
 800a7b2:	e002      	b.n	800a7ba <_printf_i+0x1d2>
 800a7b4:	0670      	lsls	r0, r6, #25
 800a7b6:	d5fb      	bpl.n	800a7b0 <_printf_i+0x1c8>
 800a7b8:	8019      	strh	r1, [r3, #0]
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	6123      	str	r3, [r4, #16]
 800a7be:	4615      	mov	r5, r2
 800a7c0:	e7ba      	b.n	800a738 <_printf_i+0x150>
 800a7c2:	682b      	ldr	r3, [r5, #0]
 800a7c4:	1d1a      	adds	r2, r3, #4
 800a7c6:	602a      	str	r2, [r5, #0]
 800a7c8:	681d      	ldr	r5, [r3, #0]
 800a7ca:	6862      	ldr	r2, [r4, #4]
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	f7f5 fcde 	bl	8000190 <memchr>
 800a7d4:	b108      	cbz	r0, 800a7da <_printf_i+0x1f2>
 800a7d6:	1b40      	subs	r0, r0, r5
 800a7d8:	6060      	str	r0, [r4, #4]
 800a7da:	6863      	ldr	r3, [r4, #4]
 800a7dc:	6123      	str	r3, [r4, #16]
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7e4:	e7a8      	b.n	800a738 <_printf_i+0x150>
 800a7e6:	6923      	ldr	r3, [r4, #16]
 800a7e8:	462a      	mov	r2, r5
 800a7ea:	4649      	mov	r1, r9
 800a7ec:	4640      	mov	r0, r8
 800a7ee:	47d0      	blx	sl
 800a7f0:	3001      	adds	r0, #1
 800a7f2:	d0ab      	beq.n	800a74c <_printf_i+0x164>
 800a7f4:	6823      	ldr	r3, [r4, #0]
 800a7f6:	079b      	lsls	r3, r3, #30
 800a7f8:	d413      	bmi.n	800a822 <_printf_i+0x23a>
 800a7fa:	68e0      	ldr	r0, [r4, #12]
 800a7fc:	9b03      	ldr	r3, [sp, #12]
 800a7fe:	4298      	cmp	r0, r3
 800a800:	bfb8      	it	lt
 800a802:	4618      	movlt	r0, r3
 800a804:	e7a4      	b.n	800a750 <_printf_i+0x168>
 800a806:	2301      	movs	r3, #1
 800a808:	4632      	mov	r2, r6
 800a80a:	4649      	mov	r1, r9
 800a80c:	4640      	mov	r0, r8
 800a80e:	47d0      	blx	sl
 800a810:	3001      	adds	r0, #1
 800a812:	d09b      	beq.n	800a74c <_printf_i+0x164>
 800a814:	3501      	adds	r5, #1
 800a816:	68e3      	ldr	r3, [r4, #12]
 800a818:	9903      	ldr	r1, [sp, #12]
 800a81a:	1a5b      	subs	r3, r3, r1
 800a81c:	42ab      	cmp	r3, r5
 800a81e:	dcf2      	bgt.n	800a806 <_printf_i+0x21e>
 800a820:	e7eb      	b.n	800a7fa <_printf_i+0x212>
 800a822:	2500      	movs	r5, #0
 800a824:	f104 0619 	add.w	r6, r4, #25
 800a828:	e7f5      	b.n	800a816 <_printf_i+0x22e>
 800a82a:	bf00      	nop
 800a82c:	0800ad7d 	.word	0x0800ad7d
 800a830:	0800ad8e 	.word	0x0800ad8e

0800a834 <_sbrk_r>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	4d06      	ldr	r5, [pc, #24]	; (800a850 <_sbrk_r+0x1c>)
 800a838:	2300      	movs	r3, #0
 800a83a:	4604      	mov	r4, r0
 800a83c:	4608      	mov	r0, r1
 800a83e:	602b      	str	r3, [r5, #0]
 800a840:	f7f7 f8d8 	bl	80019f4 <_sbrk>
 800a844:	1c43      	adds	r3, r0, #1
 800a846:	d102      	bne.n	800a84e <_sbrk_r+0x1a>
 800a848:	682b      	ldr	r3, [r5, #0]
 800a84a:	b103      	cbz	r3, 800a84e <_sbrk_r+0x1a>
 800a84c:	6023      	str	r3, [r4, #0]
 800a84e:	bd38      	pop	{r3, r4, r5, pc}
 800a850:	20000a5c 	.word	0x20000a5c

0800a854 <__sread>:
 800a854:	b510      	push	{r4, lr}
 800a856:	460c      	mov	r4, r1
 800a858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a85c:	f000 f8ea 	bl	800aa34 <_read_r>
 800a860:	2800      	cmp	r0, #0
 800a862:	bfab      	itete	ge
 800a864:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a866:	89a3      	ldrhlt	r3, [r4, #12]
 800a868:	181b      	addge	r3, r3, r0
 800a86a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a86e:	bfac      	ite	ge
 800a870:	6563      	strge	r3, [r4, #84]	; 0x54
 800a872:	81a3      	strhlt	r3, [r4, #12]
 800a874:	bd10      	pop	{r4, pc}

0800a876 <__swrite>:
 800a876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a87a:	461f      	mov	r7, r3
 800a87c:	898b      	ldrh	r3, [r1, #12]
 800a87e:	05db      	lsls	r3, r3, #23
 800a880:	4605      	mov	r5, r0
 800a882:	460c      	mov	r4, r1
 800a884:	4616      	mov	r6, r2
 800a886:	d505      	bpl.n	800a894 <__swrite+0x1e>
 800a888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a88c:	2302      	movs	r3, #2
 800a88e:	2200      	movs	r2, #0
 800a890:	f000 f868 	bl	800a964 <_lseek_r>
 800a894:	89a3      	ldrh	r3, [r4, #12]
 800a896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a89a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a89e:	81a3      	strh	r3, [r4, #12]
 800a8a0:	4632      	mov	r2, r6
 800a8a2:	463b      	mov	r3, r7
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8aa:	f000 b817 	b.w	800a8dc <_write_r>

0800a8ae <__sseek>:
 800a8ae:	b510      	push	{r4, lr}
 800a8b0:	460c      	mov	r4, r1
 800a8b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8b6:	f000 f855 	bl	800a964 <_lseek_r>
 800a8ba:	1c43      	adds	r3, r0, #1
 800a8bc:	89a3      	ldrh	r3, [r4, #12]
 800a8be:	bf15      	itete	ne
 800a8c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8ca:	81a3      	strheq	r3, [r4, #12]
 800a8cc:	bf18      	it	ne
 800a8ce:	81a3      	strhne	r3, [r4, #12]
 800a8d0:	bd10      	pop	{r4, pc}

0800a8d2 <__sclose>:
 800a8d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d6:	f000 b813 	b.w	800a900 <_close_r>
	...

0800a8dc <_write_r>:
 800a8dc:	b538      	push	{r3, r4, r5, lr}
 800a8de:	4d07      	ldr	r5, [pc, #28]	; (800a8fc <_write_r+0x20>)
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	4608      	mov	r0, r1
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	602a      	str	r2, [r5, #0]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	f7f5 fe4c 	bl	8000588 <_write>
 800a8f0:	1c43      	adds	r3, r0, #1
 800a8f2:	d102      	bne.n	800a8fa <_write_r+0x1e>
 800a8f4:	682b      	ldr	r3, [r5, #0]
 800a8f6:	b103      	cbz	r3, 800a8fa <_write_r+0x1e>
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
 800a8fc:	20000a5c 	.word	0x20000a5c

0800a900 <_close_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4d06      	ldr	r5, [pc, #24]	; (800a91c <_close_r+0x1c>)
 800a904:	2300      	movs	r3, #0
 800a906:	4604      	mov	r4, r0
 800a908:	4608      	mov	r0, r1
 800a90a:	602b      	str	r3, [r5, #0]
 800a90c:	f7f7 f841 	bl	8001992 <_close>
 800a910:	1c43      	adds	r3, r0, #1
 800a912:	d102      	bne.n	800a91a <_close_r+0x1a>
 800a914:	682b      	ldr	r3, [r5, #0]
 800a916:	b103      	cbz	r3, 800a91a <_close_r+0x1a>
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	bd38      	pop	{r3, r4, r5, pc}
 800a91c:	20000a5c 	.word	0x20000a5c

0800a920 <_fstat_r>:
 800a920:	b538      	push	{r3, r4, r5, lr}
 800a922:	4d07      	ldr	r5, [pc, #28]	; (800a940 <_fstat_r+0x20>)
 800a924:	2300      	movs	r3, #0
 800a926:	4604      	mov	r4, r0
 800a928:	4608      	mov	r0, r1
 800a92a:	4611      	mov	r1, r2
 800a92c:	602b      	str	r3, [r5, #0]
 800a92e:	f7f7 f83b 	bl	80019a8 <_fstat>
 800a932:	1c43      	adds	r3, r0, #1
 800a934:	d102      	bne.n	800a93c <_fstat_r+0x1c>
 800a936:	682b      	ldr	r3, [r5, #0]
 800a938:	b103      	cbz	r3, 800a93c <_fstat_r+0x1c>
 800a93a:	6023      	str	r3, [r4, #0]
 800a93c:	bd38      	pop	{r3, r4, r5, pc}
 800a93e:	bf00      	nop
 800a940:	20000a5c 	.word	0x20000a5c

0800a944 <_isatty_r>:
 800a944:	b538      	push	{r3, r4, r5, lr}
 800a946:	4d06      	ldr	r5, [pc, #24]	; (800a960 <_isatty_r+0x1c>)
 800a948:	2300      	movs	r3, #0
 800a94a:	4604      	mov	r4, r0
 800a94c:	4608      	mov	r0, r1
 800a94e:	602b      	str	r3, [r5, #0]
 800a950:	f7f7 f839 	bl	80019c6 <_isatty>
 800a954:	1c43      	adds	r3, r0, #1
 800a956:	d102      	bne.n	800a95e <_isatty_r+0x1a>
 800a958:	682b      	ldr	r3, [r5, #0]
 800a95a:	b103      	cbz	r3, 800a95e <_isatty_r+0x1a>
 800a95c:	6023      	str	r3, [r4, #0]
 800a95e:	bd38      	pop	{r3, r4, r5, pc}
 800a960:	20000a5c 	.word	0x20000a5c

0800a964 <_lseek_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4d07      	ldr	r5, [pc, #28]	; (800a984 <_lseek_r+0x20>)
 800a968:	4604      	mov	r4, r0
 800a96a:	4608      	mov	r0, r1
 800a96c:	4611      	mov	r1, r2
 800a96e:	2200      	movs	r2, #0
 800a970:	602a      	str	r2, [r5, #0]
 800a972:	461a      	mov	r2, r3
 800a974:	f7f7 f831 	bl	80019da <_lseek>
 800a978:	1c43      	adds	r3, r0, #1
 800a97a:	d102      	bne.n	800a982 <_lseek_r+0x1e>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	b103      	cbz	r3, 800a982 <_lseek_r+0x1e>
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	bd38      	pop	{r3, r4, r5, pc}
 800a984:	20000a5c 	.word	0x20000a5c

0800a988 <memmove>:
 800a988:	4288      	cmp	r0, r1
 800a98a:	b510      	push	{r4, lr}
 800a98c:	eb01 0402 	add.w	r4, r1, r2
 800a990:	d902      	bls.n	800a998 <memmove+0x10>
 800a992:	4284      	cmp	r4, r0
 800a994:	4623      	mov	r3, r4
 800a996:	d807      	bhi.n	800a9a8 <memmove+0x20>
 800a998:	1e43      	subs	r3, r0, #1
 800a99a:	42a1      	cmp	r1, r4
 800a99c:	d008      	beq.n	800a9b0 <memmove+0x28>
 800a99e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9a6:	e7f8      	b.n	800a99a <memmove+0x12>
 800a9a8:	4402      	add	r2, r0
 800a9aa:	4601      	mov	r1, r0
 800a9ac:	428a      	cmp	r2, r1
 800a9ae:	d100      	bne.n	800a9b2 <memmove+0x2a>
 800a9b0:	bd10      	pop	{r4, pc}
 800a9b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9ba:	e7f7      	b.n	800a9ac <memmove+0x24>

0800a9bc <__malloc_lock>:
 800a9bc:	4801      	ldr	r0, [pc, #4]	; (800a9c4 <__malloc_lock+0x8>)
 800a9be:	f7ff b9ab 	b.w	8009d18 <__retarget_lock_acquire_recursive>
 800a9c2:	bf00      	nop
 800a9c4:	20000a50 	.word	0x20000a50

0800a9c8 <__malloc_unlock>:
 800a9c8:	4801      	ldr	r0, [pc, #4]	; (800a9d0 <__malloc_unlock+0x8>)
 800a9ca:	f7ff b9a6 	b.w	8009d1a <__retarget_lock_release_recursive>
 800a9ce:	bf00      	nop
 800a9d0:	20000a50 	.word	0x20000a50

0800a9d4 <_realloc_r>:
 800a9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d8:	4680      	mov	r8, r0
 800a9da:	4614      	mov	r4, r2
 800a9dc:	460e      	mov	r6, r1
 800a9de:	b921      	cbnz	r1, 800a9ea <_realloc_r+0x16>
 800a9e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	f7ff ba69 	b.w	8009ebc <_malloc_r>
 800a9ea:	b92a      	cbnz	r2, 800a9f8 <_realloc_r+0x24>
 800a9ec:	f7ff f9fc 	bl	8009de8 <_free_r>
 800a9f0:	4625      	mov	r5, r4
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f8:	f000 f82e 	bl	800aa58 <_malloc_usable_size_r>
 800a9fc:	4284      	cmp	r4, r0
 800a9fe:	4607      	mov	r7, r0
 800aa00:	d802      	bhi.n	800aa08 <_realloc_r+0x34>
 800aa02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa06:	d812      	bhi.n	800aa2e <_realloc_r+0x5a>
 800aa08:	4621      	mov	r1, r4
 800aa0a:	4640      	mov	r0, r8
 800aa0c:	f7ff fa56 	bl	8009ebc <_malloc_r>
 800aa10:	4605      	mov	r5, r0
 800aa12:	2800      	cmp	r0, #0
 800aa14:	d0ed      	beq.n	800a9f2 <_realloc_r+0x1e>
 800aa16:	42bc      	cmp	r4, r7
 800aa18:	4622      	mov	r2, r4
 800aa1a:	4631      	mov	r1, r6
 800aa1c:	bf28      	it	cs
 800aa1e:	463a      	movcs	r2, r7
 800aa20:	f7fe fe1e 	bl	8009660 <memcpy>
 800aa24:	4631      	mov	r1, r6
 800aa26:	4640      	mov	r0, r8
 800aa28:	f7ff f9de 	bl	8009de8 <_free_r>
 800aa2c:	e7e1      	b.n	800a9f2 <_realloc_r+0x1e>
 800aa2e:	4635      	mov	r5, r6
 800aa30:	e7df      	b.n	800a9f2 <_realloc_r+0x1e>
	...

0800aa34 <_read_r>:
 800aa34:	b538      	push	{r3, r4, r5, lr}
 800aa36:	4d07      	ldr	r5, [pc, #28]	; (800aa54 <_read_r+0x20>)
 800aa38:	4604      	mov	r4, r0
 800aa3a:	4608      	mov	r0, r1
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	2200      	movs	r2, #0
 800aa40:	602a      	str	r2, [r5, #0]
 800aa42:	461a      	mov	r2, r3
 800aa44:	f7f6 ff88 	bl	8001958 <_read>
 800aa48:	1c43      	adds	r3, r0, #1
 800aa4a:	d102      	bne.n	800aa52 <_read_r+0x1e>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	b103      	cbz	r3, 800aa52 <_read_r+0x1e>
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	20000a5c 	.word	0x20000a5c

0800aa58 <_malloc_usable_size_r>:
 800aa58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa5c:	1f18      	subs	r0, r3, #4
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	bfbc      	itt	lt
 800aa62:	580b      	ldrlt	r3, [r1, r0]
 800aa64:	18c0      	addlt	r0, r0, r3
 800aa66:	4770      	bx	lr

0800aa68 <_init>:
 800aa68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6a:	bf00      	nop
 800aa6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa6e:	bc08      	pop	{r3}
 800aa70:	469e      	mov	lr, r3
 800aa72:	4770      	bx	lr

0800aa74 <_fini>:
 800aa74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa76:	bf00      	nop
 800aa78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa7a:	bc08      	pop	{r3}
 800aa7c:	469e      	mov	lr, r3
 800aa7e:	4770      	bx	lr
