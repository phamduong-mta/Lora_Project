
Lora_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab98  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800acd8  0800acd8  0001acd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aff8  0800aff8  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aff8  0800aff8  0001aff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b000  0800b000  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b000  0800b000  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b004  0800b004  0001b004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  0800b008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c8  2000018c  0800b194  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b54  0800b194  00020b54  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e62  00000000  00000000  000201b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004635  00000000  00000000  00042018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ef8  00000000  00000000  00046650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d30  00000000  00000000  00048548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022951  00000000  00000000  0004a278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023bbb  00000000  00000000  0006cbc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c49f9  00000000  00000000  00090784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015517d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b1c  00000000  00000000  001551d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000018c 	.word	0x2000018c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800acc0 	.word	0x0800acc0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000190 	.word	0x20000190
 800017c:	0800acc0 	.word	0x0800acc0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	fbb8 fef5 	udiv	lr, r8, r5
 800029c:	fa1f f78c 	uxth.w	r7, ip
 80002a0:	fb05 831e 	mls	r3, r5, lr, r8
 80002a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a8:	fb0e f107 	mul.w	r1, lr, r7
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d90b      	bls.n	80002c8 <__udivmoddi4+0x68>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4299      	cmp	r1, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002d0:	fb05 3310 	mls	r3, r5, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x96>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e8:	f080 8108 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8105 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 050c 	sub.w	r5, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb5 f3f7 	udiv	r3, r5, r7
 8000368:	fb07 5013 	mls	r0, r7, r3, r5
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0f7 	udiv	r0, r5, r7
 8000394:	fb07 5510 	mls	r5, r7, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa05 f301 	lsl.w	r3, r5, r1
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40fd      	lsrs	r5, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 5518 	mls	r5, r9, r8, r5
 80003f0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0505 	adds.w	r5, ip, r5
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a8      	cmp	r0, r5
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4465      	add	r5, ip
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000420:	fb09 5510 	mls	r5, r9, r0, r5
 8000424:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	45ae      	cmp	lr, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45ae      	cmp	lr, r5
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba5 050e 	sub.w	r5, r5, lr
 800044e:	42a5      	cmp	r5, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb65 050e 	sbc.w	r5, r5, lr
 8000462:	fa05 f707 	lsl.w	r7, r5, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	40cd      	lsrs	r5, r1
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c6 7500 	strd	r7, r5, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa25 f303 	lsr.w	r3, r5, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	430d      	orrs	r5, r1
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3011 	mls	r0, r7, r1, r3
 800049c:	0c2b      	lsrs	r3, r5, #16
 800049e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004a2:	fb01 f00e 	mul.w	r0, r1, lr
 80004a6:	4298      	cmp	r0, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c8:	fb07 3310 	mls	r3, r7, r0, r3
 80004cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d0:	fb00 f30e 	mul.w	r3, r0, lr
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1aed      	subs	r5, r5, r3
 80004ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	4686      	mov	lr, r0
 80004fa:	e6e5      	b.n	80002c8 <__udivmoddi4+0x68>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fa      	b.n	80002f6 <__udivmoddi4+0x96>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4640      	mov	r0, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4465      	add	r5, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4608      	mov	r0, r1
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800054c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000550:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4013      	ands	r3, r2
 8000556:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000558:	68fb      	ldr	r3, [r7, #12]
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <LL_AHB3_GRP1_DisableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
#endif /* DUAL_CORE */
__STATIC_INLINE void LL_AHB3_GRP1_DisableClock(uint32_t Periphs)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB3ENR, Periphs);
 800056c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000570:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	43db      	mvns	r3, r3
 8000576:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800057a:	4013      	ands	r3, r2
 800057c:	650b      	str	r3, [r1, #80]	; 0x50
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <_write>:
extern uint8_t size;
extern bool flag_encrpt;
extern volatile uint8_t Node_id[NODE_ID_SIZE];

#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	b29a      	uxth	r2, r3
 8000598:	f04f 33ff 	mov.w	r3, #4294967295
 800059c:	68b9      	ldr	r1, [r7, #8]
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <_write+0x28>)
 80005a0:	f007 fb8d 	bl	8007cbe <HAL_UART_Transmit>
	return len;
 80005a4:	687b      	ldr	r3, [r7, #4]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000948 	.word	0x20000948

080005b4 <MX_AES_Init>:
__ALIGN_BEGIN static const uint32_t pKeyAES[8] __ALIGN_END = {
                            0x603DEB10,0x15CA71BE,0x2B73AEF0,0x857D7781,0x1F352C07,0x3B6108D7,0x2D9810A3,0x0914DFF4};

/* AES init function */
void MX_AES_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_AES_Init+0x4c>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <MX_AES_Init+0x50>)
 80005bc:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_DATATYPE_32B;
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <MX_AES_Init+0x4c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_256B;
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MX_AES_Init+0x4c>)
 80005c6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80005ca:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_AES_Init+0x4c>)
 80005ce:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <MX_AES_Init+0x54>)
 80005d0:	60da      	str	r2, [r3, #12]
  hcryp.Init.Algorithm = CRYP_AES_ECB;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <MX_AES_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_AES_Init+0x4c>)
 80005da:	2201      	movs	r2, #1
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_BYTE;
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <MX_AES_Init+0x4c>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	629a      	str	r2, [r3, #40]	; 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_AES_Init+0x4c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_AES_Init+0x4c>)
 80005ec:	f002 ff99 	bl	8003522 <HAL_CRYP_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_AES_Init+0x46>
  {
    Error_Handler();
 80005f6:	f000 fcd5 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200001a8 	.word	0x200001a8
 8000604:	58001800 	.word	0x58001800
 8000608:	0800ae70 	.word	0x0800ae70

0800060c <HAL_CRYP_MspInit>:

void HAL_CRYP_MspInit(CRYP_HandleTypeDef* crypHandle)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

  if(crypHandle->Instance==AES)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a05      	ldr	r2, [pc, #20]	; (8000630 <HAL_CRYP_MspInit+0x24>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d103      	bne.n	8000626 <HAL_CRYP_MspInit+0x1a>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* AES clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 800061e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000622:	f7ff ff87 	bl	8000534 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	58001800 	.word	0x58001800

08000634 <HAL_CRYP_MspDeInit>:

void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef* crypHandle)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]

  if(crypHandle->Instance==AES)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a05      	ldr	r2, [pc, #20]	; (8000658 <HAL_CRYP_MspDeInit+0x24>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d103      	bne.n	800064e <HAL_CRYP_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN AES_MspDeInit 0 */

  /* USER CODE END AES_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_AES_CLK_DISABLE();
 8000646:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800064a:	f7ff ff8b 	bl	8000564 <LL_AHB3_GRP1_DisableClock>
  /* USER CODE BEGIN AES_MspDeInit 1 */

  /* USER CODE END AES_MspDeInit 1 */
  }
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	58001800 	.word	0x58001800

0800065c <AES_encrypt_Packet>:
//
//	printf("Decrypted data: %s\n", rxBuffer_decypt);
//	memset(rxBuffer_decypt,0,sizeof(rxBuffer_decypt));
//	memset(rxBuffer_encypt,0,sizeof(rxBuffer_encypt));
}
void AES_encrypt_Packet(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	if (rxBuffer[0] == '\0') {
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <AES_encrypt_Packet+0x38>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d105      	bne.n	8000674 <AES_encrypt_Packet+0x18>
		memset(rxBuffer_encypt, 0, sizeof(rxBuffer_encypt));
 8000668:	22ff      	movs	r2, #255	; 0xff
 800066a:	2100      	movs	r1, #0
 800066c:	480a      	ldr	r0, [pc, #40]	; (8000698 <AES_encrypt_Packet+0x3c>)
 800066e:	f009 f931 	bl	80098d4 <memset>
 8000672:	e003      	b.n	800067c <AES_encrypt_Packet+0x20>
	} else

	strcat(rxBuffer_packet, Node_id);
 8000674:	4909      	ldr	r1, [pc, #36]	; (800069c <AES_encrypt_Packet+0x40>)
 8000676:	480a      	ldr	r0, [pc, #40]	; (80006a0 <AES_encrypt_Packet+0x44>)
 8000678:	f009 f9e2 	bl	8009a40 <strcat>
	strcat(rxBuffer_packet, rxBuffer);
 800067c:	4905      	ldr	r1, [pc, #20]	; (8000694 <AES_encrypt_Packet+0x38>)
 800067e:	4808      	ldr	r0, [pc, #32]	; (80006a0 <AES_encrypt_Packet+0x44>)
 8000680:	f009 f9de 	bl	8009a40 <strcat>
	//strcpy(rxBuffer,Node_id);
	AES_Encrypt(rxBuffer_packet, rxBuffer_encypt, sizeof(rxBuffer));
 8000684:	22ff      	movs	r2, #255	; 0xff
 8000686:	4904      	ldr	r1, [pc, #16]	; (8000698 <AES_encrypt_Packet+0x3c>)
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <AES_encrypt_Packet+0x44>)
 800068a:	f000 f82d 	bl	80006e8 <AES_Encrypt>

	//printf("Encrypted data: ");
	//print_array(rxBuffer_encypt, strlen(rxBuffer_encypt));
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000010 	.word	0x20000010
 8000698:	200003b4 	.word	0x200003b4
 800069c:	20000008 	.word	0x20000008
 80006a0:	200002b4 	.word	0x200002b4

080006a4 <AES_decrypt_Packet>:
void AES_decrypt_Packet(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	if (rxBuffer_encypt_receive[0] == '\0') {
 80006a8:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <AES_decrypt_Packet+0x34>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d105      	bne.n	80006bc <AES_decrypt_Packet+0x18>
		memset(rxBuffer_decypt, 0, sizeof(rxBuffer_decypt));
 80006b0:	22ff      	movs	r2, #255	; 0xff
 80006b2:	2100      	movs	r1, #0
 80006b4:	4809      	ldr	r0, [pc, #36]	; (80006dc <AES_decrypt_Packet+0x38>)
 80006b6:	f009 f90d 	bl	80098d4 <memset>
 80006ba:	e004      	b.n	80006c6 <AES_decrypt_Packet+0x22>
	} else
		AES_Decrypt(rxBuffer_encypt_receive, rxBuffer_decypt, sizeof(rxBuffer_encypt_receive));
 80006bc:	22ff      	movs	r2, #255	; 0xff
 80006be:	4907      	ldr	r1, [pc, #28]	; (80006dc <AES_decrypt_Packet+0x38>)
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <AES_decrypt_Packet+0x34>)
 80006c2:	f000 f855 	bl	8000770 <AES_Decrypt>

	printf("Decrypted data: %s\n", rxBuffer_decypt);
 80006c6:	4905      	ldr	r1, [pc, #20]	; (80006dc <AES_decrypt_Packet+0x38>)
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <AES_decrypt_Packet+0x3c>)
 80006ca:	f009 f90b 	bl	80098e4 <iprintf>
	printf("\r\n");
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <AES_decrypt_Packet+0x40>)
 80006d0:	f009 f98e 	bl	80099f0 <puts>
	//memset(rxBuffer_decypt, 0, sizeof(rxBuffer_decypt));
	//memset(rxBuffer_encypt, 0, sizeof(rxBuffer_encypt));
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200004b4 	.word	0x200004b4
 80006dc:	200005b4 	.word	0x200005b4
 80006e0:	0800acd8 	.word	0x0800acd8
 80006e4:	0800acec 	.word	0x0800acec

080006e8 <AES_Encrypt>:

	}
	printf("\n");

}
void AES_Encrypt(uint8_t *input_data, uint8_t *output_data, uint32_t data_size) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af02      	add	r7, sp, #8
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
	MX_AES_Init();
 80006f4:	f7ff ff5e 	bl	80005b4 <MX_AES_Init>
	uint8_t *input_block = input_data;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	61fb      	str	r3, [r7, #28]
	uint8_t *output_block = output_data;
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	61bb      	str	r3, [r7, #24]
	uint32_t remaining_data = data_size;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	617b      	str	r3, [r7, #20]

	while (remaining_data >= BLOCK_SIZE) {
 8000704:	e014      	b.n	8000730 <AES_Encrypt+0x48>
		if (HAL_CRYP_Encrypt(&hcryp, input_block, BLOCK_SIZE, output_block,
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	69bb      	ldr	r3, [r7, #24]
 800070e:	2220      	movs	r2, #32
 8000710:	69f9      	ldr	r1, [r7, #28]
 8000712:	4816      	ldr	r0, [pc, #88]	; (800076c <AES_Encrypt+0x84>)
 8000714:	f002 ff6e 	bl	80035f4 <HAL_CRYP_Encrypt>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d11f      	bne.n	800075e <AES_Encrypt+0x76>
				1000) != HAL_OK) {
			// Xử lý lỗi khi mã hóa AES
			return;
		}
		input_block += BLOCK_SIZE;
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3320      	adds	r3, #32
 8000722:	61fb      	str	r3, [r7, #28]
		output_block += BLOCK_SIZE;
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	3320      	adds	r3, #32
 8000728:	61bb      	str	r3, [r7, #24]
		remaining_data -= BLOCK_SIZE;
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	3b20      	subs	r3, #32
 800072e:	617b      	str	r3, [r7, #20]
	while (remaining_data >= BLOCK_SIZE) {
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	2b1f      	cmp	r3, #31
 8000734:	d8e7      	bhi.n	8000706 <AES_Encrypt+0x1e>
	}

	// Mã hóa block cuối cùng
	if (remaining_data > 0) {
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d00c      	beq.n	8000756 <AES_Encrypt+0x6e>
		if (HAL_CRYP_Encrypt(&hcryp, input_block, remaining_data, output_block,
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	b29a      	uxth	r2, r3
 8000740:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	69bb      	ldr	r3, [r7, #24]
 8000748:	69f9      	ldr	r1, [r7, #28]
 800074a:	4808      	ldr	r0, [pc, #32]	; (800076c <AES_Encrypt+0x84>)
 800074c:	f002 ff52 	bl	80035f4 <HAL_CRYP_Encrypt>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d105      	bne.n	8000762 <AES_Encrypt+0x7a>
			// Xử lý lỗi khi mã hóa AES
			return;
		}
	}

	HAL_CRYP_DeInit(&hcryp);
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <AES_Encrypt+0x84>)
 8000758:	f002 ff1e 	bl	8003598 <HAL_CRYP_DeInit>
 800075c:	e002      	b.n	8000764 <AES_Encrypt+0x7c>
			return;
 800075e:	bf00      	nop
 8000760:	e000      	b.n	8000764 <AES_Encrypt+0x7c>
			return;
 8000762:	bf00      	nop
}
 8000764:	3720      	adds	r7, #32
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200001a8 	.word	0x200001a8

08000770 <AES_Decrypt>:
void AES_Decrypt(uint8_t *input_data, uint8_t *output_data, uint32_t data_size) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af02      	add	r7, sp, #8
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]

	MX_AES_Init();
 800077c:	f7ff ff1a 	bl	80005b4 <MX_AES_Init>
	uint8_t *input_block = input_data;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	61fb      	str	r3, [r7, #28]
	uint8_t *output_block = output_data;
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	61bb      	str	r3, [r7, #24]
	uint32_t remaining_data = data_size;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	617b      	str	r3, [r7, #20]

	while (remaining_data >= BLOCK_SIZE) {
 800078c:	e014      	b.n	80007b8 <AES_Decrypt+0x48>
		if (HAL_CRYP_Decrypt(&hcryp, input_block, BLOCK_SIZE, output_block,
 800078e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	2220      	movs	r2, #32
 8000798:	69f9      	ldr	r1, [r7, #28]
 800079a:	4816      	ldr	r0, [pc, #88]	; (80007f4 <AES_Decrypt+0x84>)
 800079c:	f002 ffc4 	bl	8003728 <HAL_CRYP_Decrypt>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d11f      	bne.n	80007e6 <AES_Decrypt+0x76>
				1000) != HAL_OK) {
			// Xử lý lỗi khi giải mã AES
			return;
		}
		input_block += BLOCK_SIZE;
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3320      	adds	r3, #32
 80007aa:	61fb      	str	r3, [r7, #28]
		output_block += BLOCK_SIZE;
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	3320      	adds	r3, #32
 80007b0:	61bb      	str	r3, [r7, #24]
		remaining_data -= BLOCK_SIZE;
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3b20      	subs	r3, #32
 80007b6:	617b      	str	r3, [r7, #20]
	while (remaining_data >= BLOCK_SIZE) {
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	2b1f      	cmp	r3, #31
 80007bc:	d8e7      	bhi.n	800078e <AES_Decrypt+0x1e>
	}

	// Giải mã block cuối cùng
	if (remaining_data > 0) {
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d00c      	beq.n	80007de <AES_Decrypt+0x6e>
		if (HAL_CRYP_Decrypt(&hcryp, input_block, remaining_data, output_block,
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	69f9      	ldr	r1, [r7, #28]
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <AES_Decrypt+0x84>)
 80007d4:	f002 ffa8 	bl	8003728 <HAL_CRYP_Decrypt>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d105      	bne.n	80007ea <AES_Decrypt+0x7a>
			// Xử lý lỗi khi giải mã AES
			return;
		}
	}

	HAL_CRYP_DeInit(&hcryp);
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <AES_Decrypt+0x84>)
 80007e0:	f002 feda 	bl	8003598 <HAL_CRYP_DeInit>
 80007e4:	e002      	b.n	80007ec <AES_Decrypt+0x7c>
			return;
 80007e6:	bf00      	nop
 80007e8:	e000      	b.n	80007ec <AES_Decrypt+0x7c>
			return;
 80007ea:	bf00      	nop
}
 80007ec:	3720      	adds	r7, #32
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200001a8 	.word	0x200001a8

080007f8 <LL_AHB1_GRP1_EnableClock>:
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000804:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000806:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4313      	orrs	r3, r2
 800080e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000814:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4013      	ands	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800081c:	68fb      	ldr	r3, [r7, #12]
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800082c:	2004      	movs	r0, #4
 800082e:	f7ff ffe3 	bl	80007f8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff ffe0 	bl	80007f8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	200b      	movs	r0, #11
 800083e:	f002 fe3a 	bl	80034b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000842:	200b      	movs	r0, #11
 8000844:	f002 fe51 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	200c      	movs	r0, #12
 800084e:	f002 fe32 	bl	80034b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000852:	200c      	movs	r0, #12
 8000854:	f002 fe49 	bl	80034ea <HAL_NVIC_EnableIRQ>

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <LL_AHB2_GRP1_EnableClock>:
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000868:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800086a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4313      	orrs	r3, r2
 8000872:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000878:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4013      	ands	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000880:	68fb      	ldr	r3, [r7, #12]
}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	2001      	movs	r0, #1
 80008a2:	f7ff ffdb 	bl	800085c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	2002      	movs	r0, #2
 80008a8:	f7ff ffd8 	bl	800085c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ac:	2004      	movs	r0, #4
 80008ae:	f7ff ffd5 	bl	800085c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_6
 80008b2:	2200      	movs	r2, #0
 80008b4:	f641 21f0 	movw	r1, #6896	; 0x1af0
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008bc:	f004 fe60 	bl	8005580 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 80008c6:	4844      	ldr	r0, [pc, #272]	; (80009d8 <MX_GPIO_Init+0x14c>)
 80008c8:	f004 fe5a 	bl	8005580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	213c      	movs	r1, #60	; 0x3c
 80008d0:	4842      	ldr	r0, [pc, #264]	; (80009dc <MX_GPIO_Init+0x150>)
 80008d2:	f004 fe55 	bl	8005580 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA12 PA11 PA9 PA6
                           PA7 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_6
 80008d6:	f641 23f0 	movw	r3, #6896	; 0x1af0
 80008da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f0:	f004 fc18 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80008f4:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80008f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000902:	2302      	movs	r3, #2
 8000904:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	4619      	mov	r1, r3
 800090a:	4833      	ldr	r0, [pc, #204]	; (80009d8 <MX_GPIO_Init+0x14c>)
 800090c:	f004 fc0a 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000910:	2304      	movs	r3, #4
 8000912:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	4619      	mov	r1, r3
 8000924:	482d      	ldr	r0, [pc, #180]	; (80009dc <MX_GPIO_Init+0x150>)
 8000926:	f004 fbfd 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 800092a:	2338      	movs	r3, #56	; 0x38
 800092c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4619      	mov	r1, r3
 800093e:	4827      	ldr	r0, [pc, #156]	; (80009dc <MX_GPIO_Init+0x150>)
 8000940:	f004 fbf0 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000944:	2301      	movs	r3, #1
 8000946:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000948:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800094c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800094e:	2301      	movs	r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	4619      	mov	r1, r3
 8000956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095a:	f004 fbe3 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1C1_Pin|B3_Pin;
 800095e:	2342      	movs	r3, #66	; 0x42
 8000960:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000962:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000966:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000968:	2301      	movs	r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	4619      	mov	r1, r3
 8000970:	481a      	ldr	r0, [pc, #104]	; (80009dc <MX_GPIO_Init+0x150>)
 8000972:	f004 fbd7 	bl	8005124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B10_Pin;
 8000976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800097c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000980:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000982:	2301      	movs	r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B10_GPIO_Port, &GPIO_InitStruct);
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4619      	mov	r1, r3
 800098a:	4813      	ldr	r0, [pc, #76]	; (80009d8 <MX_GPIO_Init+0x14c>)
 800098c:	f004 fbca 	bl	8005124 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2100      	movs	r1, #0
 8000994:	2006      	movs	r0, #6
 8000996:	f002 fd8e 	bl	80034b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800099a:	2006      	movs	r0, #6
 800099c:	f002 fda5 	bl	80034ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2007      	movs	r0, #7
 80009a6:	f002 fd86 	bl	80034b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009aa:	2007      	movs	r0, #7
 80009ac:	f002 fd9d 	bl	80034ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	2016      	movs	r0, #22
 80009b6:	f002 fd7e 	bl	80034b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009ba:	2016      	movs	r0, #22
 80009bc:	f002 fd95 	bl	80034ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2100      	movs	r1, #0
 80009c4:	2029      	movs	r0, #41	; 0x29
 80009c6:	f002 fd76 	bl	80034b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ca:	2029      	movs	r0, #41	; 0x29
 80009cc:	f002 fd8d 	bl	80034ea <HAL_NVIC_EnableIRQ>

}
 80009d0:	bf00      	nop
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	48000400 	.word	0x48000400
 80009dc:	48000800 	.word	0x48000800

080009e0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80009e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009f0:	f023 0218 	bic.w	r2, r3, #24
 80009f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr

08000a0a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0e:	f002 fc19 	bl	8003244 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a12:	f000 f815 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a16:	f7ff ff39 	bl	800088c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a1a:	f7ff ff05 	bl	8000828 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a1e:	f001 f90b 	bl	8001c38 <MX_USART2_UART_Init>
  MX_SUBGHZ_Init();
 8000a22:	f000 fbe3 	bl	80011ec <MX_SUBGHZ_Init>
  MX_AES_Init();
 8000a26:	f7ff fdc5 	bl	80005b4 <MX_AES_Init>
  MX_USART1_UART_Init();
 8000a2a:	f001 f8b7 	bl	8001b9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	radioInit();
 8000a2e:	f000 fc03 	bl	8001238 <radioInit>
	fsmInit();
 8000a32:	f000 ff55 	bl	80018e0 <fsmInit>
	UartDmaStart();
 8000a36:	f001 fa95 	bl	8001f64 <UartDmaStart>

	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		SUBGHZ();
 8000a3a:	f000 ffa3 	bl	8001984 <SUBGHZ>
 8000a3e:	e7fc      	b.n	8000a3a <main+0x30>

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b09a      	sub	sp, #104	; 0x68
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	2248      	movs	r2, #72	; 0x48
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f008 ff40 	bl	80098d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
 8000a62:	615a      	str	r2, [r3, #20]
 8000a64:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a66:	f004 fdd3 	bl	8005610 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff ffb8 	bl	80009e0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <SystemClock_Config+0xac>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a78:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <SystemClock_Config+0xac>)
 8000a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <SystemClock_Config+0xac>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a8c:	2324      	movs	r3, #36	; 0x24
 8000a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000a90:	2381      	movs	r3, #129	; 0x81
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a94:	2301      	movs	r3, #1
 8000a96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000a9c:	23b0      	movs	r3, #176	; 0xb0
 8000a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 0320 	add.w	r3, r7, #32
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f005 f883 	bl	8005bb4 <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000ab4:	f000 fa76 	bl	8000fa4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000ab8:	234f      	movs	r3, #79	; 0x4f
 8000aba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f005 fbef 	bl	80062b8 <HAL_RCC_ClockConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000ae0:	f000 fa60 	bl	8000fa4 <Error_Handler>
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3768      	adds	r7, #104	; 0x68
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	58000400 	.word	0x58000400

08000af0 <HAL_GPIO_EXTI_Callback>:
 * @brief  Receive data trough SUBGHZSPI peripheral
 * @param  radioIrq  interrupt pending status information
 * @retval None
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_1) {
 8000afa:	88fb      	ldrh	r3, [r7, #6]
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	f040 812c 	bne.w	8000d5a <HAL_GPIO_EXTI_Callback+0x26a>

		switch (freChannel) {
 8000b02:	4bd1      	ldr	r3, [pc, #836]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x358>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	2b07      	cmp	r3, #7
 8000b0a:	f200 80fb 	bhi.w	8000d04 <HAL_GPIO_EXTI_Callback+0x214>
 8000b0e:	a201      	add	r2, pc, #4	; (adr r2, 8000b14 <HAL_GPIO_EXTI_Callback+0x24>)
 8000b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b14:	08000b35 	.word	0x08000b35
 8000b18:	08000b6f 	.word	0x08000b6f
 8000b1c:	08000ba9 	.word	0x08000ba9
 8000b20:	08000be3 	.word	0x08000be3
 8000b24:	08000c1d 	.word	0x08000c1d
 8000b28:	08000c57 	.word	0x08000c57
 8000b2c:	08000c91 	.word	0x08000c91
 8000b30:	08000ccb 	.word	0x08000ccb
		case 0:
			RF_FREQUENCY = RF_FREQUENCY0
 8000b34:	4bc5      	ldr	r3, [pc, #788]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x35c>)
 8000b36:	4ac6      	ldr	r2, [pc, #792]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x360>)
 8000b38:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2180      	movs	r1, #128	; 0x80
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b42:	f004 fd1d 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2140      	movs	r1, #64	; 0x40
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f004 fd17 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f004 fd11 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b68:	f004 fd0a 	bl	8005580 <HAL_GPIO_WritePin>
			break;
 8000b6c:	e0e6      	b.n	8000d3c <HAL_GPIO_EXTI_Callback+0x24c>
		case 1:
			RF_FREQUENCY = RF_FREQUENCY1
 8000b6e:	4bb7      	ldr	r3, [pc, #732]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x35c>)
 8000b70:	4ab8      	ldr	r2, [pc, #736]	; (8000e54 <HAL_GPIO_EXTI_Callback+0x364>)
 8000b72:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7c:	f004 fd00 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2140      	movs	r1, #64	; 0x40
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f004 fcfa 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2140      	movs	r1, #64	; 0x40
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b94:	f004 fcf4 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f004 fced 	bl	8005580 <HAL_GPIO_WritePin>
			break;
 8000ba6:	e0c9      	b.n	8000d3c <HAL_GPIO_EXTI_Callback+0x24c>
		case 2:
			RF_FREQUENCY = RF_FREQUENCY2
 8000ba8:	4ba8      	ldr	r3, [pc, #672]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x35c>)
 8000baa:	4aab      	ldr	r2, [pc, #684]	; (8000e58 <HAL_GPIO_EXTI_Callback+0x368>)
 8000bac:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2180      	movs	r1, #128	; 0x80
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f004 fce3 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2140      	movs	r1, #64	; 0x40
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc2:	f004 fcdd 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2140      	movs	r1, #64	; 0x40
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bce:	f004 fcd7 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bdc:	f004 fcd0 	bl	8005580 <HAL_GPIO_WritePin>
			break;
 8000be0:	e0ac      	b.n	8000d3c <HAL_GPIO_EXTI_Callback+0x24c>
		case 3:
			RF_FREQUENCY = RF_FREQUENCY3
 8000be2:	4b9a      	ldr	r3, [pc, #616]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x35c>)
 8000be4:	4a9d      	ldr	r2, [pc, #628]	; (8000e5c <HAL_GPIO_EXTI_Callback+0x36c>)
 8000be6:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2180      	movs	r1, #128	; 0x80
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f004 fcc6 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2140      	movs	r1, #64	; 0x40
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f004 fcc0 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2140      	movs	r1, #64	; 0x40
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c08:	f004 fcba 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c16:	f004 fcb3 	bl	8005580 <HAL_GPIO_WritePin>
			break;
 8000c1a:	e08f      	b.n	8000d3c <HAL_GPIO_EXTI_Callback+0x24c>
		case 4:
			RF_FREQUENCY = RF_FREQUENCY4
 8000c1c:	4b8b      	ldr	r3, [pc, #556]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x35c>)
 8000c1e:	4a90      	ldr	r2, [pc, #576]	; (8000e60 <HAL_GPIO_EXTI_Callback+0x370>)
 8000c20:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2180      	movs	r1, #128	; 0x80
 8000c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c2a:	f004 fca9 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2140      	movs	r1, #64	; 0x40
 8000c32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c36:	f004 fca3 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2140      	movs	r1, #64	; 0x40
 8000c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c42:	f004 fc9d 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c50:	f004 fc96 	bl	8005580 <HAL_GPIO_WritePin>
			break;
 8000c54:	e072      	b.n	8000d3c <HAL_GPIO_EXTI_Callback+0x24c>
		case 5:
			RF_FREQUENCY = RF_FREQUENCY5
 8000c56:	4b7d      	ldr	r3, [pc, #500]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x35c>)
 8000c58:	4a82      	ldr	r2, [pc, #520]	; (8000e64 <HAL_GPIO_EXTI_Callback+0x374>)
 8000c5a:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f004 fc8c 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2140      	movs	r1, #64	; 0x40
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f004 fc86 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2140      	movs	r1, #64	; 0x40
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7c:	f004 fc80 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f004 fc79 	bl	8005580 <HAL_GPIO_WritePin>
			break;
 8000c8e:	e055      	b.n	8000d3c <HAL_GPIO_EXTI_Callback+0x24c>
		case 6:
			RF_FREQUENCY = RF_FREQUENCY6
 8000c90:	4b6e      	ldr	r3, [pc, #440]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x35c>)
 8000c92:	4a75      	ldr	r2, [pc, #468]	; (8000e68 <HAL_GPIO_EXTI_Callback+0x378>)
 8000c94:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9e:	f004 fc6f 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2140      	movs	r1, #64	; 0x40
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000caa:	f004 fc69 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2140      	movs	r1, #64	; 0x40
 8000cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb6:	f004 fc63 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_SET);
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc4:	f004 fc5c 	bl	8005580 <HAL_GPIO_WritePin>
			break;
 8000cc8:	e038      	b.n	8000d3c <HAL_GPIO_EXTI_Callback+0x24c>
		case 7:
			RF_FREQUENCY = RF_FREQUENCY7
 8000cca:	4b60      	ldr	r3, [pc, #384]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x35c>)
 8000ccc:	4a67      	ldr	r2, [pc, #412]	; (8000e6c <HAL_GPIO_EXTI_Callback+0x37c>)
 8000cce:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2180      	movs	r1, #128	; 0x80
 8000cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd8:	f004 fc52 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2140      	movs	r1, #64	; 0x40
 8000ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce4:	f004 fc4c 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2140      	movs	r1, #64	; 0x40
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f004 fc46 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfe:	f004 fc3f 	bl	8005580 <HAL_GPIO_WritePin>
			break;
 8000d02:	e01b      	b.n	8000d3c <HAL_GPIO_EXTI_Callback+0x24c>

		default:
			RF_FREQUENCY = RF_FREQUENCY0
 8000d04:	4b51      	ldr	r3, [pc, #324]	; (8000e4c <HAL_GPIO_EXTI_Callback+0x35c>)
 8000d06:	4a52      	ldr	r2, [pc, #328]	; (8000e50 <HAL_GPIO_EXTI_Callback+0x360>)
 8000d08:	601a      	str	r2, [r3, #0]
			;
			HAL_GPIO_WritePin(LEDD4_GPIO_Port, LEDD4_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d12:	f004 fc35 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD5_GPIO_Port, LEDD5_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2140      	movs	r1, #64	; 0x40
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1e:	f004 fc2f 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD6_GPIO_Port, LEDD6_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2140      	movs	r1, #64	; 0x40
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2a:	f004 fc29 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD7_GPIO_Port, LEDD7_Pin, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d38:	f004 fc22 	bl	8005580 <HAL_GPIO_WritePin>

			//break
		}

		freChannel++;
 8000d3c:	4b42      	ldr	r3, [pc, #264]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x358>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	3301      	adds	r3, #1
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b40      	ldr	r3, [pc, #256]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x358>)
 8000d48:	701a      	strb	r2, [r3, #0]
		if (freChannel == FRE_CHANNEL_END)
 8000d4a:	4b3f      	ldr	r3, [pc, #252]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x358>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b07      	cmp	r3, #7
 8000d52:	d102      	bne.n	8000d5a <HAL_GPIO_EXTI_Callback+0x26a>
			freChannel = FRE_CHANNEL_START;
 8000d54:	4b3c      	ldr	r3, [pc, #240]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x358>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == GPIO_PIN_0) {
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	f040 8100 	bne.w	8000f62 <HAL_GPIO_EXTI_Callback+0x472>

		switch (bauChannel) {
 8000d62:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <HAL_GPIO_EXTI_Callback+0x380>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b06      	cmp	r3, #6
 8000d6a:	f200 80cb 	bhi.w	8000f04 <HAL_GPIO_EXTI_Callback+0x414>
 8000d6e:	a201      	add	r2, pc, #4	; (adr r2, 8000d74 <HAL_GPIO_EXTI_Callback+0x284>)
 8000d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d74:	08000d91 	.word	0x08000d91
 8000d78:	08000dbf 	.word	0x08000dbf
 8000d7c:	08000ded 	.word	0x08000ded
 8000d80:	08000e1b 	.word	0x08000e1b
 8000d84:	08000e7d 	.word	0x08000e7d
 8000d88:	08000eab 	.word	0x08000eab
 8000d8c:	08000ed9 	.word	0x08000ed9
		case 0:
			UART_BAUDRATE = BAUDRATE0;
 8000d90:	4b38      	ldr	r3, [pc, #224]	; (8000e74 <HAL_GPIO_EXTI_Callback+0x384>)
 8000d92:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8000d96:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	4836      	ldr	r0, [pc, #216]	; (8000e78 <HAL_GPIO_EXTI_Callback+0x388>)
 8000d9e:	f004 fbef 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dac:	f004 fbe8 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2110      	movs	r1, #16
 8000db4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db8:	f004 fbe2 	bl	8005580 <HAL_GPIO_WritePin>
			break;
 8000dbc:	e0b8      	b.n	8000f30 <HAL_GPIO_EXTI_Callback+0x440>
		case 1:
			UART_BAUDRATE = BAUDRATE1;
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <HAL_GPIO_EXTI_Callback+0x384>)
 8000dc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000dc4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2104      	movs	r1, #4
 8000dca:	482b      	ldr	r0, [pc, #172]	; (8000e78 <HAL_GPIO_EXTI_Callback+0x388>)
 8000dcc:	f004 fbd8 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dda:	f004 fbd1 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2110      	movs	r1, #16
 8000de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de6:	f004 fbcb 	bl	8005580 <HAL_GPIO_WritePin>
			break;
 8000dea:	e0a1      	b.n	8000f30 <HAL_GPIO_EXTI_Callback+0x440>
		case 2:
			UART_BAUDRATE = BAUDRATE2;
 8000dec:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <HAL_GPIO_EXTI_Callback+0x384>)
 8000dee:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000df2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2104      	movs	r1, #4
 8000df8:	481f      	ldr	r0, [pc, #124]	; (8000e78 <HAL_GPIO_EXTI_Callback+0x388>)
 8000dfa:	f004 fbc1 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f004 fbba 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2110      	movs	r1, #16
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f004 fbb4 	bl	8005580 <HAL_GPIO_WritePin>
			break;
 8000e18:	e08a      	b.n	8000f30 <HAL_GPIO_EXTI_Callback+0x440>
		case 3:
			UART_BAUDRATE = BAUDRATE3;
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <HAL_GPIO_EXTI_Callback+0x384>)
 8000e1c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e20:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2104      	movs	r1, #4
 8000e26:	4814      	ldr	r0, [pc, #80]	; (8000e78 <HAL_GPIO_EXTI_Callback+0x388>)
 8000e28:	f004 fbaa 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e36:	f004 fba3 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2110      	movs	r1, #16
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f004 fb9d 	bl	8005580 <HAL_GPIO_WritePin>
			break;
 8000e46:	e073      	b.n	8000f30 <HAL_GPIO_EXTI_Callback+0x440>
 8000e48:	200007b3 	.word	0x200007b3
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	19cf0e40 	.word	0x19cf0e40
 8000e54:	1a67a4c0 	.word	0x1a67a4c0
 8000e58:	1b003b40 	.word	0x1b003b40
 8000e5c:	1b98d1c0 	.word	0x1b98d1c0
 8000e60:	1c316840 	.word	0x1c316840
 8000e64:	1cc9fec0 	.word	0x1cc9fec0
 8000e68:	1d629540 	.word	0x1d629540
 8000e6c:	1dfb2bc0 	.word	0x1dfb2bc0
 8000e70:	200007b4 	.word	0x200007b4
 8000e74:	20000004 	.word	0x20000004
 8000e78:	48000800 	.word	0x48000800
		case 4:
			UART_BAUDRATE = BAUDRATE4;
 8000e7c:	4b3b      	ldr	r3, [pc, #236]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x47c>)
 8000e7e:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000e82:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2104      	movs	r1, #4
 8000e88:	4839      	ldr	r0, [pc, #228]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x480>)
 8000e8a:	f004 fb79 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e98:	f004 fb72 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2110      	movs	r1, #16
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea4:	f004 fb6c 	bl	8005580 <HAL_GPIO_WritePin>
			break;
 8000ea8:	e042      	b.n	8000f30 <HAL_GPIO_EXTI_Callback+0x440>
		case 5:
			UART_BAUDRATE = BAUDRATE5;
 8000eaa:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x47c>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	482e      	ldr	r0, [pc, #184]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x480>)
 8000eb8:	f004 fb62 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec6:	f004 fb5b 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2110      	movs	r1, #16
 8000ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed2:	f004 fb55 	bl	8005580 <HAL_GPIO_WritePin>
			break;
 8000ed6:	e02b      	b.n	8000f30 <HAL_GPIO_EXTI_Callback+0x440>
		case 6:
			UART_BAUDRATE = BAUDRATE6;
 8000ed8:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x47c>)
 8000eda:	4a26      	ldr	r2, [pc, #152]	; (8000f74 <HAL_GPIO_EXTI_Callback+0x484>)
 8000edc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	4823      	ldr	r0, [pc, #140]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x480>)
 8000ee4:	f004 fb4c 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f004 fb45 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2110      	movs	r1, #16
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f004 fb3f 	bl	8005580 <HAL_GPIO_WritePin>
			break;
 8000f02:	e015      	b.n	8000f30 <HAL_GPIO_EXTI_Callback+0x440>
		default:
			UART_BAUDRATE = BAUDRATE5;
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_GPIO_EXTI_Callback+0x47c>)
 8000f06:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f0a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LEDD1_GPIO_Port, LEDD1_Pin, GPIO_PIN_SET);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2104      	movs	r1, #4
 8000f10:	4817      	ldr	r0, [pc, #92]	; (8000f70 <HAL_GPIO_EXTI_Callback+0x480>)
 8000f12:	f004 fb35 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD2_GPIO_Port, LEDD2_Pin, GPIO_PIN_SET);
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f004 fb2e 	bl	8005580 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDD3_GPIO_Port, LEDD3_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2110      	movs	r1, #16
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f004 fb28 	bl	8005580 <HAL_GPIO_WritePin>
		}

		bauChannel++;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_GPIO_EXTI_Callback+0x488>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	3301      	adds	r3, #1
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <HAL_GPIO_EXTI_Callback+0x488>)
 8000f3c:	701a      	strb	r2, [r3, #0]
		if (bauChannel == BAUD_CHANNEL_END)
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_GPIO_EXTI_Callback+0x488>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b06      	cmp	r3, #6
 8000f46:	d102      	bne.n	8000f4e <HAL_GPIO_EXTI_Callback+0x45e>
			bauChannel = BAUD_CHANNEL_START;
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_GPIO_EXTI_Callback+0x488>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Abort_IT(&huart2);
 8000f4e:	480b      	ldr	r0, [pc, #44]	; (8000f7c <HAL_GPIO_EXTI_Callback+0x48c>)
 8000f50:	f006 ff3c 	bl	8007dcc <HAL_UART_Abort_IT>
		HAL_UART_DeInit(&huart2);
 8000f54:	4809      	ldr	r0, [pc, #36]	; (8000f7c <HAL_GPIO_EXTI_Callback+0x48c>)
 8000f56:	f006 fe73 	bl	8007c40 <HAL_UART_DeInit>
		MX_USART2_UART_Init();
 8000f5a:	f000 fe6d 	bl	8001c38 <MX_USART2_UART_Init>
		UartDmaStart();
 8000f5e:	f001 f801 	bl	8001f64 <UartDmaStart>
	}
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	48000800 	.word	0x48000800
 8000f74:	0003d090 	.word	0x0003d090
 8000f78:	200007b4 	.word	0x200007b4
 8000f7c:	200009dc 	.word	0x200009dc

08000f80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d101      	bne.n	8000f96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f92:	f002 f977 	bl	8003284 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40014800 	.word	0x40014800

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fac:	e7fe      	b.n	8000fac <Error_Handler+0x8>

08000fae <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr

08000fba <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b085      	sub	sp, #20
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
	...

08000fec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08e      	sub	sp, #56	; 0x38
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001002:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001006:	f7ff ffd8 	bl	8000fba <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800100a:	f107 020c 	add.w	r2, r7, #12
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f005 fb69 	bl	80066ec <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800101a:	f005 fb55 	bl	80066c8 <HAL_RCC_GetPCLK2Freq>
 800101e:	6338      	str	r0, [r7, #48]	; 0x30
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001022:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <HAL_InitTick+0xbc>)
 8001024:	fba2 2303 	umull	r2, r3, r2, r3
 8001028:	0c9b      	lsrs	r3, r3, #18
 800102a:	3b01      	subs	r3, #1
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <HAL_InitTick+0xc0>)
 8001030:	4a1f      	ldr	r2, [pc, #124]	; (80010b0 <HAL_InitTick+0xc4>)
 8001032:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <HAL_InitTick+0xc0>)
 8001036:	f240 32e7 	movw	r2, #999	; 0x3e7
 800103a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800103c:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <HAL_InitTick+0xc0>)
 800103e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001040:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_InitTick+0xc0>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_InitTick+0xc0>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 800104e:	4817      	ldr	r0, [pc, #92]	; (80010ac <HAL_InitTick+0xc0>)
 8001050:	f006 fb18 	bl	8007684 <HAL_TIM_Base_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 800105a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800105e:	2b00      	cmp	r3, #0
 8001060:	d11b      	bne.n	800109a <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001062:	4812      	ldr	r0, [pc, #72]	; (80010ac <HAL_InitTick+0xc0>)
 8001064:	f006 fb6e 	bl	8007744 <HAL_TIM_Base_Start_IT>
 8001068:	4603      	mov	r3, r0
 800106a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 800106e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001072:	2b00      	cmp	r3, #0
 8001074:	d111      	bne.n	800109a <HAL_InitTick+0xae>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001076:	201d      	movs	r0, #29
 8001078:	f002 fa37 	bl	80034ea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b0f      	cmp	r3, #15
 8001080:	d808      	bhi.n	8001094 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8001082:	2200      	movs	r2, #0
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	201d      	movs	r0, #29
 8001088:	f002 fa15 	bl	80034b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800108c:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <HAL_InitTick+0xc8>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	e002      	b.n	800109a <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

 /* Return function status */
  return status;
 800109a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3738      	adds	r7, #56	; 0x38
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	431bde83 	.word	0x431bde83
 80010ac:	200007b8 	.word	0x200007b8
 80010b0:	40014800 	.word	0x40014800
 80010b4:	20000120 	.word	0x20000120

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <NMI_Handler+0x4>

080010be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <MemManage_Handler+0x4>

080010ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr

080010ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr

080010fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr

08001106 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800110a:	2001      	movs	r0, #1
 800110c:	f004 fa68 	bl	80055e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}

08001114 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1C1_Pin);
 8001118:	2002      	movs	r0, #2
 800111a:	f004 fa61 	bl	80055e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <DMA1_Channel1_IRQHandler+0x10>)
 800112a:	f003 fe5d 	bl	8004de8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000a70 	.word	0x20000a70

08001138 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <DMA1_Channel2_IRQHandler+0x10>)
 800113e:	f003 fe53 	bl	8004de8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000ad0 	.word	0x20000ad0

0800114c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8001150:	2040      	movs	r0, #64	; 0x40
 8001152:	f004 fa45 	bl	80055e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <TIM17_IRQHandler+0x10>)
 8001162:	f006 fb3b 	bl	80077dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200007b8 	.word	0x200007b8

08001170 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <USART1_IRQHandler+0x10>)
 8001176:	f006 ff65 	bl	8008044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000948 	.word	0x20000948

08001184 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <USART2_IRQHandler+0x10>)
 800118a:	f006 ff5b 	bl	8008044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200009dc 	.word	0x200009dc

08001198 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B10_Pin);
 800119c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011a0:	f004 fa1e 	bl	80055e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <SUBGHZ_Radio_IRQHandler+0x10>)
 80011ae:	f006 f8c1 	bl	8007334 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000938 	.word	0x20000938

080011bc <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80011c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80011ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80011d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4013      	ands	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011e0:	68fb      	ldr	r3, [r7, #12]
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_SUBGHZ_Init+0x20>)
 80011f2:	2208      	movs	r2, #8
 80011f4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_SUBGHZ_Init+0x20>)
 80011f8:	f005 fe1a 	bl	8006e30 <HAL_SUBGHZ_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001202:	f7ff fecf 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000938 	.word	0x20000938

08001210 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff ffcf 	bl	80011bc <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	2032      	movs	r0, #50	; 0x32
 8001224:	f002 f947 	bl	80034b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001228:	2032      	movs	r0, #50	; 0x32
 800122a:	f002 f95e 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <radioInit>:

  /* USER CODE END SUBGHZ_MspDeInit 1 */
}

/* USER CODE BEGIN 1 */
void radioInit(void) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
	// Initialize the hardware (SPI bus, TCXO control, RF switch)
	SUBGRF_Init(RadioOnDioIrq);
 800123e:	4831      	ldr	r0, [pc, #196]	; (8001304 <radioInit+0xcc>)
 8001240:	f000 fffe 	bl	8002240 <SUBGRF_Init>

	// Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
	// "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
	SUBGRF_WriteRegister(SUBGHZ_SMPSC0R,
			(SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 8001244:	f640 1016 	movw	r0, #2326	; 0x916
 8001248:	f001 fdfe 	bl	8002e48 <SUBGRF_ReadRegister>
 800124c:	4603      	mov	r3, r0
	SUBGRF_WriteRegister(SUBGHZ_SMPSC0R,
 800124e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001252:	b2db      	uxtb	r3, r3
 8001254:	4619      	mov	r1, r3
 8001256:	f640 1016 	movw	r0, #2326	; 0x916
 800125a:	f001 fde1 	bl	8002e20 <SUBGRF_WriteRegister>
	SUBGRF_SetRegulatorMode();
 800125e:	f001 f978 	bl	8002552 <SUBGRF_SetRegulatorMode>

	// Use the whole 256-byte buffer for both TX and RX
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8001262:	2100      	movs	r1, #0
 8001264:	2000      	movs	r0, #0
 8001266:	f001 fd45 	bl	8002cf4 <SUBGRF_SetBufferBaseAddress>

	SUBGRF_SetRfFrequency(RF_FREQUENCY);
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <radioInit+0xd0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f001 fa94 	bl	800279c <SUBGRF_SetRfFrequency>

	SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 8001274:	200e      	movs	r0, #14
 8001276:	f001 feef 	bl	8003058 <SUBGRF_SetRfTxPower>
	SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 800127a:	2000      	movs	r0, #0
 800127c:	f001 f95a 	bl	8002534 <SUBGRF_SetStopRxTimerOnPreambleDetect>

	SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8001280:	2001      	movs	r0, #1
 8001282:	f001 fad1 	bl	8002828 <SUBGRF_SetPacketType>

	SUBGRF_WriteRegister( REG_LR_SYNCWORD,
 8001286:	2114      	movs	r1, #20
 8001288:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800128c:	f001 fdc8 	bl	8002e20 <SUBGRF_WriteRegister>
			( LORA_MAC_PRIVATE_SYNCWORD >> 8) & 0xFF);
	SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1,
 8001290:	2124      	movs	r1, #36	; 0x24
 8001292:	f240 7041 	movw	r0, #1857	; 0x741
 8001296:	f001 fdc3 	bl	8002e20 <SUBGRF_WriteRegister>
	LORA_MAC_PRIVATE_SYNCWORD & 0xFF);

	ModulationParams_t modulationParams;
	modulationParams.PacketType = PACKET_TYPE_LORA;
 800129a:	2301      	movs	r3, #1
 800129c:	713b      	strb	r3, [r7, #4]
	modulationParams.Params.LoRa.Bandwidth = Bandwidths[LORA_BANDWIDTH];
 800129e:	2304      	movs	r3, #4
 80012a0:	777b      	strb	r3, [r7, #29]
	modulationParams.Params.LoRa.CodingRate =
 80012a2:	2301      	movs	r3, #1
 80012a4:	77bb      	strb	r3, [r7, #30]
			(RadioLoRaCodingRates_t) LORA_CODINGRATE;
	modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80012a6:	2300      	movs	r3, #0
 80012a8:	77fb      	strb	r3, [r7, #31]
	modulationParams.Params.LoRa.SpreadingFactor =
 80012aa:	2307      	movs	r3, #7
 80012ac:	773b      	strb	r3, [r7, #28]
			(RadioLoRaSpreadingFactors_t) LORA_SPREADING_FACTOR;
	SUBGRF_SetModulationParams(&modulationParams);
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 fbad 	bl	8002a10 <SUBGRF_SetModulationParams>

	packetParams.PacketType = PACKET_TYPE_LORA;
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <radioInit+0xd4>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
	packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <radioInit+0xd4>)
 80012be:	2201      	movs	r2, #1
 80012c0:	761a      	strb	r2, [r3, #24]
	packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <radioInit+0xd4>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	749a      	strb	r2, [r3, #18]
	packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <radioInit+0xd4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	765a      	strb	r2, [r3, #25]
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <radioInit+0xd4>)
 80012d0:	22ff      	movs	r2, #255	; 0xff
 80012d2:	615a      	str	r2, [r3, #20]

	packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <radioInit+0xd4>)
 80012d6:	2208      	movs	r2, #8
 80012d8:	821a      	strh	r2, [r3, #16]
	SUBGRF_SetPacketParams(&packetParams);
 80012da:	480c      	ldr	r0, [pc, #48]	; (800130c <radioInit+0xd4>)
 80012dc:	f001 fc6a 	bl	8002bb4 <SUBGRF_SetPacketParams>

	//SUBGRF_SetLoRaSymbNumTimeout(LORA_SYMBOL_TIMEOUT);

	// WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
	// RegIqPolaritySetup @address 0x0736
	SUBGRF_WriteRegister(0x0736, SUBGRF_ReadRegister(0x0736) | (1 << 2));
 80012e0:	f240 7036 	movw	r0, #1846	; 0x736
 80012e4:	f001 fdb0 	bl	8002e48 <SUBGRF_ReadRegister>
 80012e8:	4603      	mov	r3, r0
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4619      	mov	r1, r3
 80012f2:	f240 7036 	movw	r0, #1846	; 0x736
 80012f6:	f001 fd93 	bl	8002e20 <SUBGRF_WriteRegister>
}
 80012fa:	bf00      	nop
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	08001311 	.word	0x08001311
 8001308:	20000000 	.word	0x20000000
 800130c:	20000918 	.word	0x20000918

08001310 <RadioOnDioIrq>:
void RadioOnDioIrq(RadioIrqMasks_t radioIrq) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
	switch (radioIrq) {
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001320:	d013      	beq.n	800134a <RadioOnDioIrq+0x3a>
 8001322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001326:	dc26      	bgt.n	8001376 <RadioOnDioIrq+0x66>
 8001328:	2b40      	cmp	r3, #64	; 0x40
 800132a:	d020      	beq.n	800136e <RadioOnDioIrq+0x5e>
 800132c:	2b40      	cmp	r3, #64	; 0x40
 800132e:	dc22      	bgt.n	8001376 <RadioOnDioIrq+0x66>
 8001330:	2b01      	cmp	r3, #1
 8001332:	d002      	beq.n	800133a <RadioOnDioIrq+0x2a>
 8001334:	2b02      	cmp	r3, #2
 8001336:	d004      	beq.n	8001342 <RadioOnDioIrq+0x32>
		break;
	case IRQ_CRC_ERROR:
		eventReceptor = eventRxError;
		break;
	default:
		break;
 8001338:	e01d      	b.n	8001376 <RadioOnDioIrq+0x66>
		eventReceptor = eventTxDone;
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <RadioOnDioIrq+0x74>)
 800133c:	4a12      	ldr	r2, [pc, #72]	; (8001388 <RadioOnDioIrq+0x78>)
 800133e:	601a      	str	r2, [r3, #0]
		break;
 8001340:	e01c      	b.n	800137c <RadioOnDioIrq+0x6c>
		eventReceptor = eventRxDone;
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <RadioOnDioIrq+0x74>)
 8001344:	4a11      	ldr	r2, [pc, #68]	; (800138c <RadioOnDioIrq+0x7c>)
 8001346:	601a      	str	r2, [r3, #0]
		break;
 8001348:	e018      	b.n	800137c <RadioOnDioIrq+0x6c>
		if (SUBGRF_GetOperatingMode() == MODE_TX) {
 800134a:	f000 ffc1 	bl	80022d0 <SUBGRF_GetOperatingMode>
 800134e:	4603      	mov	r3, r0
 8001350:	2b04      	cmp	r3, #4
 8001352:	d103      	bne.n	800135c <RadioOnDioIrq+0x4c>
			eventReceptor = eventTxTimeout;
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <RadioOnDioIrq+0x74>)
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <RadioOnDioIrq+0x80>)
 8001358:	601a      	str	r2, [r3, #0]
		break;
 800135a:	e00e      	b.n	800137a <RadioOnDioIrq+0x6a>
		} else if (SUBGRF_GetOperatingMode() == MODE_RX) {
 800135c:	f000 ffb8 	bl	80022d0 <SUBGRF_GetOperatingMode>
 8001360:	4603      	mov	r3, r0
 8001362:	2b05      	cmp	r3, #5
 8001364:	d109      	bne.n	800137a <RadioOnDioIrq+0x6a>
			eventReceptor = eventRxTimeout;
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <RadioOnDioIrq+0x74>)
 8001368:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <RadioOnDioIrq+0x84>)
 800136a:	601a      	str	r2, [r3, #0]
		break;
 800136c:	e005      	b.n	800137a <RadioOnDioIrq+0x6a>
		eventReceptor = eventRxError;
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <RadioOnDioIrq+0x74>)
 8001370:	4a09      	ldr	r2, [pc, #36]	; (8001398 <RadioOnDioIrq+0x88>)
 8001372:	601a      	str	r2, [r3, #0]
		break;
 8001374:	e002      	b.n	800137c <RadioOnDioIrq+0x6c>
		break;
 8001376:	bf00      	nop
 8001378:	e000      	b.n	800137c <RadioOnDioIrq+0x6c>
		break;
 800137a:	bf00      	nop
	}
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000934 	.word	0x20000934
 8001388:	0800139d 	.word	0x0800139d
 800138c:	08001405 	.word	0x08001405
 8001390:	0800151d 	.word	0x0800151d
 8001394:	08001585 	.word	0x08001585
 8001398:	080015f1 	.word	0x080015f1

0800139c <eventTxDone>:
/**
 * @brief  Process the TX Done event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventTxDone(pingPongFSM_t *const fsm) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) "Event TX Done\r\n", 15,
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
 80013a8:	220f      	movs	r2, #15
 80013aa:	4914      	ldr	r1, [pc, #80]	; (80013fc <eventTxDone+0x60>)
 80013ac:	4814      	ldr	r0, [pc, #80]	; (8001400 <eventTxDone+0x64>)
 80013ae:	f006 fc86 	bl	8007cbe <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	switch (fsm->state) {
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d002      	beq.n	80013c0 <eventTxDone+0x24>
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d00d      	beq.n	80013da <eventTxDone+0x3e>
		default:
			break;
		}
		break;
	default:
		break;
 80013be:	e019      	b.n	80013f4 <eventTxDone+0x58>
		switch (fsm->subState) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	785b      	ldrb	r3, [r3, #1]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d106      	bne.n	80013d6 <eventTxDone+0x3a>
			enterMasterRx(fsm);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f947 	bl	800165c <enterMasterRx>
			fsm->subState = SSTATE_RX;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	705a      	strb	r2, [r3, #1]
			break;
 80013d4:	e000      	b.n	80013d8 <eventTxDone+0x3c>
			break;
 80013d6:	bf00      	nop
		break;
 80013d8:	e00c      	b.n	80013f4 <eventTxDone+0x58>
		switch (fsm->subState) {
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	785b      	ldrb	r3, [r3, #1]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d106      	bne.n	80013f0 <eventTxDone+0x54>
			enterSlaveRx(fsm);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f968 	bl	80016b8 <enterSlaveRx>
			fsm->subState = SSTATE_RX;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	705a      	strb	r2, [r3, #1]
			break;
 80013ee:	e000      	b.n	80013f2 <eventTxDone+0x56>
			break;
 80013f0:	bf00      	nop
		break;
 80013f2:	bf00      	nop
	}
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	0800acf8 	.word	0x0800acf8
 8001400:	20000948 	.word	0x20000948

08001404 <eventRxDone>:
/**
 * @brief  Process the RX Done event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventRxDone(pingPongFSM_t *const fsm) {
 8001404:	b580      	push	{r7, lr}
 8001406:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800140a:	af00      	add	r7, sp, #0
 800140c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001410:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001414:	6018      	str	r0, [r3, #0]
	char DataREC[1023];
	HAL_UART_Transmit(&huart1, (uint8_t*) "Event RX Done\r\n", 15,
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	220f      	movs	r2, #15
 800141c:	493a      	ldr	r1, [pc, #232]	; (8001508 <eventRxDone+0x104>)
 800141e:	483b      	ldr	r0, [pc, #236]	; (800150c <eventRxDone+0x108>)
 8001420:	f006 fc4d 	bl	8007cbe <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	switch (fsm->state) {
 8001424:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001428:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d062      	beq.n	80014fa <eventRxDone+0xf6>
 8001434:	2b02      	cmp	r3, #2
 8001436:	d000      	beq.n	800143a <eventRxDone+0x36>
		default:
			break;
		}
		break;
	default:
		break;
 8001438:	e060      	b.n	80014fc <eventRxDone+0xf8>
		switch (fsm->subState) {
 800143a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800143e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	785b      	ldrb	r3, [r3, #1]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d155      	bne.n	80014f6 <eventRxDone+0xf2>
			transitionRxDone(fsm);
 800144a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800144e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	f000 f9fe 	bl	8001854 <transitionRxDone>
			memcpy(rxBuffer_encypt_receive, fsm->rxBuffer,
 8001458:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800145c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3310      	adds	r3, #16
 8001464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001468:	4619      	mov	r1, r3
 800146a:	4829      	ldr	r0, [pc, #164]	; (8001510 <eventRxDone+0x10c>)
 800146c:	f008 fa24 	bl	80098b8 <memcpy>
			AES_decrypt_Packet();
 8001470:	f7ff f918 	bl	80006a4 <AES_decrypt_Packet>
			if (strncmp(rxBuffer_decypt, Node_id, 6) == 0) {
 8001474:	2206      	movs	r2, #6
 8001476:	4927      	ldr	r1, [pc, #156]	; (8001514 <eventRxDone+0x110>)
 8001478:	4827      	ldr	r0, [pc, #156]	; (8001518 <eventRxDone+0x114>)
 800147a:	f008 faf0 	bl	8009a5e <strncmp>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d11d      	bne.n	80014c0 <eventRxDone+0xbc>
				HAL_GPIO_WritePin(LEDD8_GPIO_Port, LEDD8_Pin, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800148a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148e:	f004 f877 	bl	8005580 <HAL_GPIO_WritePin>
				BSP_LED_Toggle(LED_GREEN);
 8001492:	2001      	movs	r0, #1
 8001494:	f000 fda8 	bl	8001fe8 <BSP_LED_Toggle>
				enterSlaveTx(fsm);
 8001498:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800149c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	f000 f97d 	bl	80017a0 <enterSlaveTx>
				fsm->subState = SSTATE_TX;
 80014a6:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80014aa:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2202      	movs	r2, #2
 80014b2:	705a      	strb	r2, [r3, #1]
				memset(rxBuffer_decypt, 0, sizeof(rxBuffer_decypt));
 80014b4:	22ff      	movs	r2, #255	; 0xff
 80014b6:	2100      	movs	r1, #0
 80014b8:	4817      	ldr	r0, [pc, #92]	; (8001518 <eventRxDone+0x114>)
 80014ba:	f008 fa0b 	bl	80098d4 <memset>
			break;
 80014be:	e01b      	b.n	80014f8 <eventRxDone+0xf4>
				HAL_GPIO_WritePin(LEDD8_GPIO_Port, LEDD8_Pin, GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ca:	f004 f859 	bl	8005580 <HAL_GPIO_WritePin>
				enterSlaveRx(fsm);
 80014ce:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80014d2:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	f000 f8ee 	bl	80016b8 <enterSlaveRx>
				fsm->subState = SSTATE_RX;
 80014dc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80014e0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2201      	movs	r2, #1
 80014e8:	705a      	strb	r2, [r3, #1]
				memset(rxBuffer_decypt, 0, sizeof(rxBuffer_decypt));
 80014ea:	22ff      	movs	r2, #255	; 0xff
 80014ec:	2100      	movs	r1, #0
 80014ee:	480a      	ldr	r0, [pc, #40]	; (8001518 <eventRxDone+0x114>)
 80014f0:	f008 f9f0 	bl	80098d4 <memset>
			break;
 80014f4:	e000      	b.n	80014f8 <eventRxDone+0xf4>
			break;
 80014f6:	bf00      	nop
		break;
 80014f8:	e000      	b.n	80014fc <eventRxDone+0xf8>
		break;
 80014fa:	bf00      	nop
	}
}
 80014fc:	bf00      	nop
 80014fe:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	0800ad08 	.word	0x0800ad08
 800150c:	20000948 	.word	0x20000948
 8001510:	200004b4 	.word	0x200004b4
 8001514:	20000008 	.word	0x20000008
 8001518:	200005b4 	.word	0x200005b4

0800151c <eventTxTimeout>:
/**
 * @brief  Process the TX Timeout event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventTxTimeout(pingPongFSM_t *const fsm) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) "Event TX Timeout\r\n", 18,
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
 8001528:	2212      	movs	r2, #18
 800152a:	4914      	ldr	r1, [pc, #80]	; (800157c <eventTxTimeout+0x60>)
 800152c:	4814      	ldr	r0, [pc, #80]	; (8001580 <eventTxTimeout+0x64>)
 800152e:	f006 fbc6 	bl	8007cbe <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	switch (fsm->state) {
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d002      	beq.n	8001540 <eventTxTimeout+0x24>
 800153a:	2b02      	cmp	r3, #2
 800153c:	d00d      	beq.n	800155a <eventTxTimeout+0x3e>
		default:
			break;
		}
		break;
	default:
		break;
 800153e:	e019      	b.n	8001574 <eventTxTimeout+0x58>
		switch (fsm->subState) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	785b      	ldrb	r3, [r3, #1]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d106      	bne.n	8001556 <eventTxTimeout+0x3a>
			enterMasterRx(fsm);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f887 	bl	800165c <enterMasterRx>
			fsm->subState = SSTATE_RX;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	705a      	strb	r2, [r3, #1]
			break;
 8001554:	e000      	b.n	8001558 <eventTxTimeout+0x3c>
			break;
 8001556:	bf00      	nop
		break;
 8001558:	e00c      	b.n	8001574 <eventTxTimeout+0x58>
		switch (fsm->subState) {
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	785b      	ldrb	r3, [r3, #1]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d106      	bne.n	8001570 <eventTxTimeout+0x54>
			enterSlaveRx(fsm);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f8a8 	bl	80016b8 <enterSlaveRx>
			fsm->subState = SSTATE_RX;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	705a      	strb	r2, [r3, #1]
			break;
 800156e:	e000      	b.n	8001572 <eventTxTimeout+0x56>
			break;
 8001570:	bf00      	nop
		break;
 8001572:	bf00      	nop
	}
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	0800ad18 	.word	0x0800ad18
 8001580:	20000948 	.word	0x20000948

08001584 <eventRxTimeout>:
/**
 * @brief  Process the RX Timeout event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventRxTimeout(pingPongFSM_t *const fsm) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) "Event RX Timeout\r\n", 18,
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	2212      	movs	r2, #18
 8001592:	4915      	ldr	r1, [pc, #84]	; (80015e8 <eventRxTimeout+0x64>)
 8001594:	4815      	ldr	r0, [pc, #84]	; (80015ec <eventRxTimeout+0x68>)
 8001596:	f006 fb92 	bl	8007cbe <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	switch (fsm->state) {
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d002      	beq.n	80015a8 <eventRxTimeout+0x24>
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d012      	beq.n	80015cc <eventRxTimeout+0x48>
		default:
			break;
		}
		break;
	default:
		break;
 80015a6:	e01b      	b.n	80015e0 <eventRxTimeout+0x5c>
		switch (fsm->subState) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	785b      	ldrb	r3, [r3, #1]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d10b      	bne.n	80015c8 <eventRxTimeout+0x44>
			HAL_Delay(fsm->randomDelay);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 fe81 	bl	80032bc <HAL_Delay>
			enterMasterTx(fsm);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f8aa 	bl	8001714 <enterMasterTx>
			fsm->subState = SSTATE_TX;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2202      	movs	r2, #2
 80015c4:	705a      	strb	r2, [r3, #1]
			break;
 80015c6:	e000      	b.n	80015ca <eventRxTimeout+0x46>
			break;
 80015c8:	bf00      	nop
		break;
 80015ca:	e009      	b.n	80015e0 <eventRxTimeout+0x5c>
		switch (fsm->subState) {
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	785b      	ldrb	r3, [r3, #1]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d103      	bne.n	80015dc <eventRxTimeout+0x58>
			enterSlaveRx(fsm);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f86f 	bl	80016b8 <enterSlaveRx>
			break;
 80015da:	e000      	b.n	80015de <eventRxTimeout+0x5a>
			break;
 80015dc:	bf00      	nop
		break;
 80015de:	bf00      	nop
	}
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	0800ad2c 	.word	0x0800ad2c
 80015ec:	20000948 	.word	0x20000948

080015f0 <eventRxError>:
/**
 * @brief  Process the RX Error event
 * @param  fsm pointer to FSM context
 * @retval None
 */
void eventRxError(pingPongFSM_t *const fsm) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) "Event Rx Error\r\n", 16,
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
 80015fc:	2210      	movs	r2, #16
 80015fe:	4915      	ldr	r1, [pc, #84]	; (8001654 <eventRxError+0x64>)
 8001600:	4815      	ldr	r0, [pc, #84]	; (8001658 <eventRxError+0x68>)
 8001602:	f006 fb5c 	bl	8007cbe <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	switch (fsm->state) {
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d002      	beq.n	8001614 <eventRxError+0x24>
 800160e:	2b02      	cmp	r3, #2
 8001610:	d012      	beq.n	8001638 <eventRxError+0x48>
		default:
			break;
		}
		break;
	default:
		break;
 8001612:	e01b      	b.n	800164c <eventRxError+0x5c>
		switch (fsm->subState) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	785b      	ldrb	r3, [r3, #1]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d10b      	bne.n	8001634 <eventRxError+0x44>
			HAL_Delay(fsm->randomDelay);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	4618      	mov	r0, r3
 8001622:	f001 fe4b 	bl	80032bc <HAL_Delay>
			enterMasterTx(fsm);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f874 	bl	8001714 <enterMasterTx>
			fsm->subState = SSTATE_TX;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2202      	movs	r2, #2
 8001630:	705a      	strb	r2, [r3, #1]
			break;
 8001632:	e000      	b.n	8001636 <eventRxError+0x46>
			break;
 8001634:	bf00      	nop
		break;
 8001636:	e009      	b.n	800164c <eventRxError+0x5c>
		switch (fsm->subState) {
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	785b      	ldrb	r3, [r3, #1]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d103      	bne.n	8001648 <eventRxError+0x58>
			enterSlaveRx(fsm);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 f839 	bl	80016b8 <enterSlaveRx>
			break;
 8001646:	e000      	b.n	800164a <eventRxError+0x5a>
			break;
 8001648:	bf00      	nop
		break;
 800164a:	bf00      	nop
	}
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	0800ad40 	.word	0x0800ad40
 8001658:	20000948 	.word	0x20000948

0800165c <enterMasterRx>:
/**
 * @brief  Entry actions for the RX sub-state of the Master state
 * @param  fsm pointer to FSM context
 * @retval None
 */
void enterMasterRx(pingPongFSM_t *const fsm) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) "Master Rx start\r\n", 17,
 8001664:	f04f 33ff 	mov.w	r3, #4294967295
 8001668:	2211      	movs	r2, #17
 800166a:	4910      	ldr	r1, [pc, #64]	; (80016ac <enterMasterRx+0x50>)
 800166c:	4810      	ldr	r0, [pc, #64]	; (80016b0 <enterMasterRx+0x54>)
 800166e:	f006 fb26 	bl	8007cbe <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	SUBGRF_SetDioIrqParams(
 8001672:	2300      	movs	r3, #0
 8001674:	2200      	movs	r2, #0
 8001676:	f240 2162 	movw	r1, #610	; 0x262
 800167a:	f240 2062 	movw	r0, #610	; 0x262
 800167e:	f001 f831 	bl	80026e4 <SUBGRF_SetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
			IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8001682:	2100      	movs	r1, #0
 8001684:	2001      	movs	r0, #1
 8001686:	f001 fcbf 	bl	8003008 <SUBGRF_SetSwitch>
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <enterMasterRx+0x58>)
 800168c:	22ff      	movs	r2, #255	; 0xff
 800168e:	615a      	str	r2, [r3, #20]
	SUBGRF_SetPacketParams(&packetParams);
 8001690:	4808      	ldr	r0, [pc, #32]	; (80016b4 <enterMasterRx+0x58>)
 8001692:	f001 fa8f 	bl	8002bb4 <SUBGRF_SetPacketParams>
	SUBGRF_SetRx(fsm->rxTimeout << 6);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	019b      	lsls	r3, r3, #6
 800169c:	4618      	mov	r0, r3
 800169e:	f000 ff29 	bl	80024f4 <SUBGRF_SetRx>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	0800ad54 	.word	0x0800ad54
 80016b0:	20000948 	.word	0x20000948
 80016b4:	20000918 	.word	0x20000918

080016b8 <enterSlaveRx>:
/**
 * @brief  Entry actions for the RX sub-state of the Slave state
 * @param  fsm pointer to FSM context
 * @retval None
 */
void enterSlaveRx(pingPongFSM_t *const fsm) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) "Slave Rx start\r\n", 16,
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295
 80016c4:	2210      	movs	r2, #16
 80016c6:	4910      	ldr	r1, [pc, #64]	; (8001708 <enterSlaveRx+0x50>)
 80016c8:	4810      	ldr	r0, [pc, #64]	; (800170c <enterSlaveRx+0x54>)
 80016ca:	f006 faf8 	bl	8007cbe <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	SUBGRF_SetDioIrqParams(
 80016ce:	2300      	movs	r3, #0
 80016d0:	2200      	movs	r2, #0
 80016d2:	f240 2162 	movw	r1, #610	; 0x262
 80016d6:	f240 2062 	movw	r0, #610	; 0x262
 80016da:	f001 f803 	bl	80026e4 <SUBGRF_SetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
			IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 80016de:	2100      	movs	r1, #0
 80016e0:	2001      	movs	r0, #1
 80016e2:	f001 fc91 	bl	8003008 <SUBGRF_SetSwitch>
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <enterSlaveRx+0x58>)
 80016e8:	22ff      	movs	r2, #255	; 0xff
 80016ea:	615a      	str	r2, [r3, #20]
	SUBGRF_SetPacketParams(&packetParams);
 80016ec:	4808      	ldr	r0, [pc, #32]	; (8001710 <enterSlaveRx+0x58>)
 80016ee:	f001 fa61 	bl	8002bb4 <SUBGRF_SetPacketParams>
	SUBGRF_SetRx(fsm->rxTimeout << 6);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	019b      	lsls	r3, r3, #6
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 fefb 	bl	80024f4 <SUBGRF_SetRx>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	0800ad68 	.word	0x0800ad68
 800170c:	20000948 	.word	0x20000948
 8001710:	20000918 	.word	0x20000918

08001714 <enterMasterTx>:
/**
 * @brief  Entry actions for the TX sub-state of the Master state
 * @param  fsm pointer to FSM context
 * @retval None
 */
void enterMasterTx(pingPongFSM_t *const fsm) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	HAL_Delay(fsm->rxMargin);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	4618      	mov	r0, r3
 8001722:	f001 fdcb 	bl	80032bc <HAL_Delay>

	HAL_UART_Transmit(&huart1, (uint8_t*) "...PING\r\n", 9, HAL_MAX_DELAY);
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
 800172a:	2209      	movs	r2, #9
 800172c:	4917      	ldr	r1, [pc, #92]	; (800178c <enterMasterTx+0x78>)
 800172e:	4818      	ldr	r0, [pc, #96]	; (8001790 <enterMasterTx+0x7c>)
 8001730:	f006 fac5 	bl	8007cbe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "Master Tx start\r\n", 17,
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
 8001738:	2211      	movs	r2, #17
 800173a:	4916      	ldr	r1, [pc, #88]	; (8001794 <enterMasterTx+0x80>)
 800173c:	4814      	ldr	r0, [pc, #80]	; (8001790 <enterMasterTx+0x7c>)
 800173e:	f006 fabe 	bl	8007cbe <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	SUBGRF_SetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8001742:	2300      	movs	r3, #0
 8001744:	2200      	movs	r2, #0
 8001746:	f240 2101 	movw	r1, #513	; 0x201
 800174a:	f240 2001 	movw	r0, #513	; 0x201
 800174e:	f000 ffc9 	bl	80026e4 <SUBGRF_SetDioIrqParams>
			IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8001752:	2101      	movs	r1, #1
 8001754:	2001      	movs	r0, #1
 8001756:	f001 fc57 	bl	8003008 <SUBGRF_SetSwitch>
	// Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
	SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 255));
 800175a:	f640 0089 	movw	r0, #2185	; 0x889
 800175e:	f001 fb73 	bl	8002e48 <SUBGRF_ReadRegister>
 8001762:	21ff      	movs	r1, #255	; 0xff
 8001764:	f640 0089 	movw	r0, #2185	; 0x889
 8001768:	f001 fb5a 	bl	8002e20 <SUBGRF_WriteRegister>
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <enterMasterTx+0x84>)
 800176e:	22ff      	movs	r2, #255	; 0xff
 8001770:	615a      	str	r2, [r3, #20]
	SUBGRF_SetPacketParams(&packetParams);
 8001772:	4809      	ldr	r0, [pc, #36]	; (8001798 <enterMasterTx+0x84>)
 8001774:	f001 fa1e 	bl	8002bb4 <SUBGRF_SetPacketParams>
	SUBGRF_SendPayload(
 8001778:	2200      	movs	r2, #0
 800177a:	21ff      	movs	r1, #255	; 0xff
 800177c:	4807      	ldr	r0, [pc, #28]	; (800179c <enterMasterTx+0x88>)
 800177e:	f000 fde3 	bl	8002348 <SUBGRF_SendPayload>
			(uint8_t*) "PINGpppppppppppppppppppppppppppppppppppppppp", 255, 0);
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	0800ad7c 	.word	0x0800ad7c
 8001790:	20000948 	.word	0x20000948
 8001794:	0800ad88 	.word	0x0800ad88
 8001798:	20000918 	.word	0x20000918
 800179c:	0800ad9c 	.word	0x0800ad9c

080017a0 <enterSlaveTx>:
/**
 * @brief  Entry actions for the TX sub-state of the Slave state
 * @param  fsm pointer to FSM context
 * @retval None
 */
void enterSlaveTx(pingPongFSM_t *const fsm) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	HAL_Delay(fsm->rxMargin);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f001 fd85 	bl	80032bc <HAL_Delay>

	HAL_UART_Transmit(&huart1, (uint8_t*) "...PONG\r\n", 9, HAL_MAX_DELAY);
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	2209      	movs	r2, #9
 80017b8:	491f      	ldr	r1, [pc, #124]	; (8001838 <enterSlaveTx+0x98>)
 80017ba:	4820      	ldr	r0, [pc, #128]	; (800183c <enterSlaveTx+0x9c>)
 80017bc:	f006 fa7f 	bl	8007cbe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*) "Slave Tx start\r\n", 16,
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
 80017c4:	2210      	movs	r2, #16
 80017c6:	491e      	ldr	r1, [pc, #120]	; (8001840 <enterSlaveTx+0xa0>)
 80017c8:	481c      	ldr	r0, [pc, #112]	; (800183c <enterSlaveTx+0x9c>)
 80017ca:	f006 fa78 	bl	8007cbe <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	SUBGRF_SetDioIrqParams(IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 80017ce:	2300      	movs	r3, #0
 80017d0:	2200      	movs	r2, #0
 80017d2:	f240 2101 	movw	r1, #513	; 0x201
 80017d6:	f240 2001 	movw	r0, #513	; 0x201
 80017da:	f000 ff83 	bl	80026e4 <SUBGRF_SetDioIrqParams>
			IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT, IRQ_RADIO_NONE, IRQ_RADIO_NONE);
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 80017de:	2101      	movs	r1, #1
 80017e0:	2001      	movs	r0, #1
 80017e2:	f001 fc11 	bl	8003008 <SUBGRF_SetSwitch>
	// Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
	SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0xFF));
 80017e6:	f640 0089 	movw	r0, #2185	; 0x889
 80017ea:	f001 fb2d 	bl	8002e48 <SUBGRF_ReadRegister>
 80017ee:	21ff      	movs	r1, #255	; 0xff
 80017f0:	f640 0089 	movw	r0, #2185	; 0x889
 80017f4:	f001 fb14 	bl	8002e20 <SUBGRF_WriteRegister>
	packetParams.Params.LoRa.PayloadLength = 0xFF;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <enterSlaveTx+0xa4>)
 80017fa:	22ff      	movs	r2, #255	; 0xff
 80017fc:	615a      	str	r2, [r3, #20]
	SUBGRF_SetPacketParams(&packetParams);
 80017fe:	4811      	ldr	r0, [pc, #68]	; (8001844 <enterSlaveTx+0xa4>)
 8001800:	f001 f9d8 	bl	8002bb4 <SUBGRF_SetPacketParams>
	//SUBGRF_SendPayload((uint8_t *)"PONGdsaaahhhhhhaaaaamnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\r\n", 255, 0);
	//SUBGRF_SendPayload(rxBuffer, 255, 0);
	//memset(rxBuffer,' ',sizeof(rxBuffer));
	AES_encrypt_Packet();
 8001804:	f7fe ff2a 	bl	800065c <AES_encrypt_Packet>
	SUBGRF_SendPayload(rxBuffer_encypt, 255, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	21ff      	movs	r1, #255	; 0xff
 800180c:	480e      	ldr	r0, [pc, #56]	; (8001848 <enterSlaveTx+0xa8>)
 800180e:	f000 fd9b 	bl	8002348 <SUBGRF_SendPayload>
	memset(rxBuffer_encypt, 0, sizeof(rxBuffer_encypt));
 8001812:	22ff      	movs	r2, #255	; 0xff
 8001814:	2100      	movs	r1, #0
 8001816:	480c      	ldr	r0, [pc, #48]	; (8001848 <enterSlaveTx+0xa8>)
 8001818:	f008 f85c 	bl	80098d4 <memset>
	//strcpy(rxBuffer,"PONGnoLoad");
	memset(rxBuffer, 0, sizeof(rxBuffer));
 800181c:	22ff      	movs	r2, #255	; 0xff
 800181e:	2100      	movs	r1, #0
 8001820:	480a      	ldr	r0, [pc, #40]	; (800184c <enterSlaveTx+0xac>)
 8001822:	f008 f857 	bl	80098d4 <memset>
	memset(rxBuffer_packet, 0, sizeof(rxBuffer_packet));
 8001826:	22ff      	movs	r2, #255	; 0xff
 8001828:	2100      	movs	r1, #0
 800182a:	4809      	ldr	r0, [pc, #36]	; (8001850 <enterSlaveTx+0xb0>)
 800182c:	f008 f852 	bl	80098d4 <memset>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	0800adcc 	.word	0x0800adcc
 800183c:	20000948 	.word	0x20000948
 8001840:	0800add8 	.word	0x0800add8
 8001844:	20000918 	.word	0x20000918
 8001848:	200003b4 	.word	0x200003b4
 800184c:	20000010 	.word	0x20000010
 8001850:	200002b4 	.word	0x200002b4

08001854 <transitionRxDone>:
/**
 * @brief  Transition actions executed on every RX Done event (helper function)
 * @param  fsm pointer to FSM context
 * @retval None
 */
void transitionRxDone(pingPongFSM_t *const fsm) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b094      	sub	sp, #80	; 0x50
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	PacketStatus_t packetStatus;
	char uartBuff[50];

	// Workaround 15.3 in DS.SX1261-2.W.APP (because following RX w/ timeout sequence)
	SUBGRF_WriteRegister(0x0920, 0x00);
 800185c:	2100      	movs	r1, #0
 800185e:	f44f 6012 	mov.w	r0, #2336	; 0x920
 8001862:	f001 fadd 	bl	8002e20 <SUBGRF_WriteRegister>
	SUBGRF_WriteRegister(0x0944, (SUBGRF_ReadRegister(0x0944) | 0x02));
 8001866:	f640 1044 	movw	r0, #2372	; 0x944
 800186a:	f001 faed 	bl	8002e48 <SUBGRF_ReadRegister>
 800186e:	4603      	mov	r3, r0
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	b2db      	uxtb	r3, r3
 8001876:	4619      	mov	r1, r3
 8001878:	f640 1044 	movw	r0, #2372	; 0x944
 800187c:	f001 fad0 	bl	8002e20 <SUBGRF_WriteRegister>

	SUBGRF_GetPayload((uint8_t*) fsm->rxBuffer, &fsm->rxSize, 0xFF);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f103 0010 	add.w	r0, r3, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800188c:	22ff      	movs	r2, #255	; 0xff
 800188e:	4619      	mov	r1, r3
 8001890:	f000 fd38 	bl	8002304 <SUBGRF_GetPayload>
	SUBGRF_GetPacketStatus(&packetStatus);
 8001894:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001898:	4618      	mov	r0, r3
 800189a:	f001 fa6f 	bl	8002d7c <SUBGRF_GetPacketStatus>

	sprintf(uartBuff, "RssiValue=%d dBm, SnrValue=%d Hz\r\n",
			packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt);
 800189e:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
	sprintf(uartBuff, "RssiValue=%d dBm, SnrValue=%d Hz\r\n",
 80018a2:	461a      	mov	r2, r3
			packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt);
 80018a4:	f997 3049 	ldrsb.w	r3, [r7, #73]	; 0x49
	sprintf(uartBuff, "RssiValue=%d dBm, SnrValue=%d Hz\r\n",
 80018a8:	f107 0008 	add.w	r0, r7, #8
 80018ac:	490a      	ldr	r1, [pc, #40]	; (80018d8 <transitionRxDone+0x84>)
 80018ae:	f008 f8a7 	bl	8009a00 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) uartBuff, strlen(uartBuff),
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fc62 	bl	8000180 <strlen>
 80018bc:	4603      	mov	r3, r0
 80018be:	b29a      	uxth	r2, r3
 80018c0:	f107 0108 	add.w	r1, r7, #8
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
 80018c8:	4804      	ldr	r0, [pc, #16]	; (80018dc <transitionRxDone+0x88>)
 80018ca:	f006 f9f8 	bl	8007cbe <HAL_UART_Transmit>
	HAL_MAX_DELAY);
}
 80018ce:	bf00      	nop
 80018d0:	3750      	adds	r7, #80	; 0x50
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	0800adec 	.word	0x0800adec
 80018dc:	20000948 	.word	0x20000948

080018e0 <fsmInit>:
void fsmInit(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0

	// get random number
	uint32_t rnd = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
	SUBGRF_SetDioIrqParams(IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE,
 80018ea:	2300      	movs	r3, #0
 80018ec:	2200      	movs	r2, #0
 80018ee:	2100      	movs	r1, #0
 80018f0:	2000      	movs	r0, #0
 80018f2:	f000 fef7 	bl	80026e4 <SUBGRF_SetDioIrqParams>
			IRQ_RADIO_NONE);
	rnd = SUBGRF_GetRandom();
 80018f6:	f000 fd7a 	bl	80023ee <SUBGRF_GetRandom>
 80018fa:	6078      	str	r0, [r7, #4]

	fsm.state = STATE_NULL;
 80018fc:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <fsmInit+0x98>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
	fsm.subState = SSTATE_NULL;
 8001902:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <fsmInit+0x98>)
 8001904:	2200      	movs	r2, #0
 8001906:	705a      	strb	r2, [r3, #1]
	fsm.rxTimeout = 1000; // 3000 ms
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <fsmInit+0x98>)
 800190a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800190e:	605a      	str	r2, [r3, #4]
	fsm.rxMargin = 200;   // 200 ms
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <fsmInit+0x98>)
 8001912:	22c8      	movs	r2, #200	; 0xc8
 8001914:	609a      	str	r2, [r3, #8]
	fsm.randomDelay = rnd >> 22; // [0, 1023] ms
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	0d9b      	lsrs	r3, r3, #22
 800191a:	4a17      	ldr	r2, [pc, #92]	; (8001978 <fsmInit+0x98>)
 800191c:	60d3      	str	r3, [r2, #12]
	//sprintf(uartBuff, "rand=%lu\r\n", fsm.randomDelay);
	HAL_UART_Transmit(&huart1, (uint8_t*) uartBuff, strlen(uartBuff),
 800191e:	4817      	ldr	r0, [pc, #92]	; (800197c <fsmInit+0x9c>)
 8001920:	f7fe fc2e 	bl	8000180 <strlen>
 8001924:	4603      	mov	r3, r0
 8001926:	b29a      	uxth	r2, r3
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
 800192c:	4913      	ldr	r1, [pc, #76]	; (800197c <fsmInit+0x9c>)
 800192e:	4814      	ldr	r0, [pc, #80]	; (8001980 <fsmInit+0xa0>)
 8001930:	f006 f9c5 	bl	8007cbe <HAL_UART_Transmit>
	HAL_MAX_DELAY);

	HAL_Delay(fsm.randomDelay);
 8001934:	4b10      	ldr	r3, [pc, #64]	; (8001978 <fsmInit+0x98>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4618      	mov	r0, r3
 800193a:	f001 fcbf 	bl	80032bc <HAL_Delay>
	SUBGRF_SetDioIrqParams(IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR,
 800193e:	2300      	movs	r3, #0
 8001940:	2200      	movs	r2, #0
 8001942:	f240 2142 	movw	r1, #578	; 0x242
 8001946:	f240 2042 	movw	r0, #578	; 0x242
 800194a:	f000 fecb 	bl	80026e4 <SUBGRF_SetDioIrqParams>
			IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 800194e:	2100      	movs	r1, #0
 8001950:	2001      	movs	r0, #1
 8001952:	f001 fb59 	bl	8003008 <SUBGRF_SetSwitch>
	SUBGRF_SetRx(fsm.rxTimeout << 6);
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <fsmInit+0x98>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	019b      	lsls	r3, r3, #6
 800195c:	4618      	mov	r0, r3
 800195e:	f000 fdc9 	bl	80024f4 <SUBGRF_SetRx>
	fsm.state = STATE_SLAVE;
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <fsmInit+0x98>)
 8001964:	2202      	movs	r2, #2
 8001966:	701a      	strb	r2, [r3, #0]
	//fsm.subState = SSTATE_RX;
	//fsm.state = STATE_MASTER;
	fsm.subState = SSTATE_RX;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <fsmInit+0x98>)
 800196a:	2201      	movs	r2, #1
 800196c:	705a      	strb	r2, [r3, #1]
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000804 	.word	0x20000804
 800197c:	200006b4 	.word	0x200006b4
 8001980:	20000948 	.word	0x20000948

08001984 <SUBGHZ>:

	// RF_{IRQ0, IRQ1, IRQ2} pins
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}
void SUBGHZ(void) {
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
	eventReceptor = NULL;
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <SUBGHZ+0x24>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
	while (eventReceptor == NULL)
 800198e:	bf00      	nop
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <SUBGHZ+0x24>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0fb      	beq.n	8001990 <SUBGHZ+0xc>
		;
	{

		radioInit();
 8001998:	f7ff fc4e 	bl	8001238 <radioInit>
		eventReceptor(&fsm);
 800199c:	4b02      	ldr	r3, [pc, #8]	; (80019a8 <SUBGHZ+0x24>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <SUBGHZ+0x28>)
 80019a2:	4798      	blx	r3
	}
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000934 	.word	0x20000934
 80019ac:	20000804 	.word	0x20000804

080019b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	e00a      	b.n	80019d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019c2:	f3af 8000 	nop.w
 80019c6:	4601      	mov	r1, r0
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	60ba      	str	r2, [r7, #8]
 80019ce:	b2ca      	uxtb	r2, r1
 80019d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3301      	adds	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	429a      	cmp	r2, r3
 80019de:	dbf0      	blt.n	80019c2 <_read+0x12>
  }

  return len;
 80019e0:	687b      	ldr	r3, [r7, #4]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_close>:
  }
  return len;
}

int _close(int file)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr

08001a00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a10:	605a      	str	r2, [r3, #4]
  return 0;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <_isatty>:

int _isatty(int file)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a26:	2301      	movs	r3, #1
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
	...

08001a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a54:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <_sbrk+0x5c>)
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <_sbrk+0x60>)
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <_sbrk+0x64>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d102      	bne.n	8001a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <_sbrk+0x64>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <_sbrk+0x68>)
 8001a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <_sbrk+0x64>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d207      	bcs.n	8001a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a7c:	f007 fef2 	bl	8009864 <__errno>
 8001a80:	4603      	mov	r3, r0
 8001a82:	220c      	movs	r2, #12
 8001a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	e009      	b.n	8001aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a92:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <_sbrk+0x64>)
 8001a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20010000 	.word	0x20010000
 8001aac:	00000400 	.word	0x00000400
 8001ab0:	20000944 	.word	0x20000944
 8001ab4:	20000b58 	.word	0x20000b58

08001ab8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <LL_AHB2_GRP1_EnableClock>:
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <LL_APB1_GRP1_EnableClock>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4013      	ands	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b18:	68fb      	ldr	r3, [r7, #12]
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <LL_APB1_GRP1_DisableClock>:
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <LL_APB2_GRP1_EnableClock>:
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <LL_APB2_GRP1_DisableClock>:
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b8e:	4013      	ands	r3, r2
 8001b90:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <MX_USART1_UART_Init+0x90>)
 8001ba2:	4a23      	ldr	r2, [pc, #140]	; (8001c30 <MX_USART1_UART_Init+0x94>)
 8001ba4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = UART_BAUDRATE;
 8001ba6:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <MX_USART1_UART_Init+0x98>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a20      	ldr	r2, [pc, #128]	; (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bac:	6053      	str	r3, [r2, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bae:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bba:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc6:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bcc:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bd2:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bde:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <MX_USART1_UART_Init+0x90>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001be4:	4811      	ldr	r0, [pc, #68]	; (8001c2c <MX_USART1_UART_Init+0x90>)
 8001be6:	f005 ffdb 	bl	8007ba0 <HAL_UART_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bf0:	f7ff f9d8 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	480d      	ldr	r0, [pc, #52]	; (8001c2c <MX_USART1_UART_Init+0x90>)
 8001bf8:	f007 fcfc 	bl	80095f4 <HAL_UARTEx_SetTxFifoThreshold>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c02:	f7ff f9cf 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c06:	2100      	movs	r1, #0
 8001c08:	4808      	ldr	r0, [pc, #32]	; (8001c2c <MX_USART1_UART_Init+0x90>)
 8001c0a:	f007 fd31 	bl	8009670 <HAL_UARTEx_SetRxFifoThreshold>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c14:	f7ff f9c6 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c18:	4804      	ldr	r0, [pc, #16]	; (8001c2c <MX_USART1_UART_Init+0x90>)
 8001c1a:	f007 fcb3 	bl	8009584 <HAL_UARTEx_DisableFifoMode>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c24:	f7ff f9be 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000948 	.word	0x20000948
 8001c30:	40013800 	.word	0x40013800
 8001c34:	20000004 	.word	0x20000004

08001c38 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c3c:	4b22      	ldr	r3, [pc, #136]	; (8001cc8 <MX_USART2_UART_Init+0x90>)
 8001c3e:	4a23      	ldr	r2, [pc, #140]	; (8001ccc <MX_USART2_UART_Init+0x94>)
 8001c40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <MX_USART2_UART_Init+0x90>)
 8001c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4a:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <MX_USART2_UART_Init+0x90>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c50:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <MX_USART2_UART_Init+0x90>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <MX_USART2_UART_Init+0x90>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <MX_USART2_UART_Init+0x90>)
 8001c5e:	220c      	movs	r2, #12
 8001c60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <MX_USART2_UART_Init+0x90>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c68:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <MX_USART2_UART_Init+0x90>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c6e:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <MX_USART2_UART_Init+0x90>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <MX_USART2_UART_Init+0x90>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <MX_USART2_UART_Init+0x90>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c80:	4811      	ldr	r0, [pc, #68]	; (8001cc8 <MX_USART2_UART_Init+0x90>)
 8001c82:	f005 ff8d 	bl	8007ba0 <HAL_UART_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c8c:	f7ff f98a 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c90:	2100      	movs	r1, #0
 8001c92:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <MX_USART2_UART_Init+0x90>)
 8001c94:	f007 fcae 	bl	80095f4 <HAL_UARTEx_SetTxFifoThreshold>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c9e:	f7ff f981 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4808      	ldr	r0, [pc, #32]	; (8001cc8 <MX_USART2_UART_Init+0x90>)
 8001ca6:	f007 fce3 	bl	8009670 <HAL_UARTEx_SetRxFifoThreshold>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001cb0:	f7ff f978 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001cb4:	4804      	ldr	r0, [pc, #16]	; (8001cc8 <MX_USART2_UART_Init+0x90>)
 8001cb6:	f007 fc65 	bl	8009584 <HAL_UARTEx_DisableFifoMode>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001cc0:	f7ff f970 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200009dc 	.word	0x200009dc
 8001ccc:	40004400 	.word	0x40004400

08001cd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b096      	sub	sp, #88	; 0x58
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	2238      	movs	r2, #56	; 0x38
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f007 fdef 	bl	80098d4 <memset>
  if(uartHandle->Instance==USART1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a68      	ldr	r2, [pc, #416]	; (8001e9c <HAL_UART_MspInit+0x1cc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d161      	bne.n	8001dc4 <HAL_UART_MspInit+0xf4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d00:	2301      	movs	r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d04:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001d08:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d0a:	f107 030c 	add.w	r3, r7, #12
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f004 feda 	bl	8006ac8 <HAL_RCCEx_PeriphCLKConfig>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d1a:	f7ff f943 	bl	8000fa4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d1e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d22:	f7ff ff11 	bl	8001b48 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	2002      	movs	r0, #2
 8001d28:	f7ff fecc 	bl	8001ac4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001d2c:	23c0      	movs	r3, #192	; 0xc0
 8001d2e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d44:	4619      	mov	r1, r3
 8001d46:	4856      	ldr	r0, [pc, #344]	; (8001ea0 <HAL_UART_MspInit+0x1d0>)
 8001d48:	f003 f9ec 	bl	8005124 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001d4c:	4b55      	ldr	r3, [pc, #340]	; (8001ea4 <HAL_UART_MspInit+0x1d4>)
 8001d4e:	4a56      	ldr	r2, [pc, #344]	; (8001ea8 <HAL_UART_MspInit+0x1d8>)
 8001d50:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001d52:	4b54      	ldr	r3, [pc, #336]	; (8001ea4 <HAL_UART_MspInit+0x1d4>)
 8001d54:	2211      	movs	r2, #17
 8001d56:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d58:	4b52      	ldr	r3, [pc, #328]	; (8001ea4 <HAL_UART_MspInit+0x1d4>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5e:	4b51      	ldr	r3, [pc, #324]	; (8001ea4 <HAL_UART_MspInit+0x1d4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d64:	4b4f      	ldr	r3, [pc, #316]	; (8001ea4 <HAL_UART_MspInit+0x1d4>)
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d6a:	4b4e      	ldr	r3, [pc, #312]	; (8001ea4 <HAL_UART_MspInit+0x1d4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d70:	4b4c      	ldr	r3, [pc, #304]	; (8001ea4 <HAL_UART_MspInit+0x1d4>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d76:	4b4b      	ldr	r3, [pc, #300]	; (8001ea4 <HAL_UART_MspInit+0x1d4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d7c:	4b49      	ldr	r3, [pc, #292]	; (8001ea4 <HAL_UART_MspInit+0x1d4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001d82:	4848      	ldr	r0, [pc, #288]	; (8001ea4 <HAL_UART_MspInit+0x1d4>)
 8001d84:	f002 fdb6 	bl	80048f4 <HAL_DMA_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8001d8e:	f7ff f909 	bl	8000fa4 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001d92:	2110      	movs	r1, #16
 8001d94:	4843      	ldr	r0, [pc, #268]	; (8001ea4 <HAL_UART_MspInit+0x1d4>)
 8001d96:	f003 f8ed 	bl	8004f74 <HAL_DMA_ConfigChannelAttributes>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 8001da0:	f7ff f900 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a3f      	ldr	r2, [pc, #252]	; (8001ea4 <HAL_UART_MspInit+0x1d4>)
 8001da8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001dac:	4a3d      	ldr	r2, [pc, #244]	; (8001ea4 <HAL_UART_MspInit+0x1d4>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2100      	movs	r1, #0
 8001db6:	2024      	movs	r0, #36	; 0x24
 8001db8:	f001 fb7d 	bl	80034b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dbc:	2024      	movs	r0, #36	; 0x24
 8001dbe:	f001 fb94 	bl	80034ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dc2:	e066      	b.n	8001e92 <HAL_UART_MspInit+0x1c2>
  else if(uartHandle->Instance==USART2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a38      	ldr	r2, [pc, #224]	; (8001eac <HAL_UART_MspInit+0x1dc>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d161      	bne.n	8001e92 <HAL_UART_MspInit+0x1c2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001dd2:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001dd6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f004 fe73 	bl	8006ac8 <HAL_RCCEx_PeriphCLKConfig>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_UART_MspInit+0x11c>
      Error_Handler();
 8001de8:	f7ff f8dc 	bl	8000fa4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001df0:	f7ff fe80 	bl	8001af4 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df4:	2001      	movs	r0, #1
 8001df6:	f7ff fe65 	bl	8001ac4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8001dfa:	230c      	movs	r3, #12
 8001dfc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e12:	4619      	mov	r1, r3
 8001e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e18:	f003 f984 	bl	8005124 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_UART_MspInit+0x1e0>)
 8001e1e:	4a25      	ldr	r2, [pc, #148]	; (8001eb4 <HAL_UART_MspInit+0x1e4>)
 8001e20:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001e22:	4b23      	ldr	r3, [pc, #140]	; (8001eb0 <HAL_UART_MspInit+0x1e0>)
 8001e24:	2213      	movs	r2, #19
 8001e26:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_UART_MspInit+0x1e0>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2e:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <HAL_UART_MspInit+0x1e0>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e34:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_UART_MspInit+0x1e0>)
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <HAL_UART_MspInit+0x1e0>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e40:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <HAL_UART_MspInit+0x1e0>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001e46:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <HAL_UART_MspInit+0x1e0>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e4c:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <HAL_UART_MspInit+0x1e0>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e52:	4817      	ldr	r0, [pc, #92]	; (8001eb0 <HAL_UART_MspInit+0x1e0>)
 8001e54:	f002 fd4e 	bl	80048f4 <HAL_DMA_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_UART_MspInit+0x192>
      Error_Handler();
 8001e5e:	f7ff f8a1 	bl	8000fa4 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001e62:	2110      	movs	r1, #16
 8001e64:	4812      	ldr	r0, [pc, #72]	; (8001eb0 <HAL_UART_MspInit+0x1e0>)
 8001e66:	f003 f885 	bl	8004f74 <HAL_DMA_ConfigChannelAttributes>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8001e70:	f7ff f898 	bl	8000fa4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <HAL_UART_MspInit+0x1e0>)
 8001e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001e7c:	4a0c      	ldr	r2, [pc, #48]	; (8001eb0 <HAL_UART_MspInit+0x1e0>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	2025      	movs	r0, #37	; 0x25
 8001e88:	f001 fb15 	bl	80034b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e8c:	2025      	movs	r0, #37	; 0x25
 8001e8e:	f001 fb2c 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 8001e92:	bf00      	nop
 8001e94:	3758      	adds	r7, #88	; 0x58
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40013800 	.word	0x40013800
 8001ea0:	48000400 	.word	0x48000400
 8001ea4:	20000a70 	.word	0x20000a70
 8001ea8:	40020008 	.word	0x40020008
 8001eac:	40004400 	.word	0x40004400
 8001eb0:	20000ad0 	.word	0x20000ad0
 8001eb4:	4002001c 	.word	0x4002001c

08001eb8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a17      	ldr	r2, [pc, #92]	; (8001f24 <HAL_UART_MspDeInit+0x6c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d111      	bne.n	8001eee <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001eca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ece:	f7ff fe53 	bl	8001b78 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7|GPIO_PIN_6);
 8001ed2:	21c0      	movs	r1, #192	; 0xc0
 8001ed4:	4814      	ldr	r0, [pc, #80]	; (8001f28 <HAL_UART_MspDeInit+0x70>)
 8001ed6:	f003 fa85 	bl	80053e4 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 fdaf 	bl	8004a44 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001ee6:	2024      	movs	r0, #36	; 0x24
 8001ee8:	f001 fb0d 	bl	8003506 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001eec:	e016      	b.n	8001f1c <HAL_UART_MspDeInit+0x64>
  else if(uartHandle->Instance==USART2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <HAL_UART_MspDeInit+0x74>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d111      	bne.n	8001f1c <HAL_UART_MspDeInit+0x64>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001ef8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001efc:	f7ff fe12 	bl	8001b24 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, T_VCP_RX_Pin|T_VCP_RXA2_Pin);
 8001f00:	210c      	movs	r1, #12
 8001f02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f06:	f003 fa6d 	bl	80053e4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f10:	4618      	mov	r0, r3
 8001f12:	f002 fd97 	bl	8004a44 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001f16:	2025      	movs	r0, #37	; 0x25
 8001f18:	f001 faf5 	bl	8003506 <HAL_NVIC_DisableIRQ>
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40013800 	.word	0x40013800
 8001f28:	48000400 	.word	0x48000400
 8001f2c:	40004400 	.word	0x40004400

08001f30 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 1 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxBuffer, RX_SIZE);
 8001f3c:	22ff      	movs	r2, #255	; 0xff
 8001f3e:	4906      	ldr	r1, [pc, #24]	; (8001f58 <HAL_UARTEx_RxEventCallback+0x28>)
 8001f40:	4806      	ldr	r0, [pc, #24]	; (8001f5c <HAL_UARTEx_RxEventCallback+0x2c>)
 8001f42:	f007 fbd3 	bl	80096ec <HAL_UARTEx_ReceiveToIdle_DMA>
    size = Size;
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_UARTEx_RxEventCallback+0x30>)
 8001f4c:	701a      	strb	r2, [r3, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000010 	.word	0x20000010
 8001f5c:	20000948 	.word	0x20000948
 8001f60:	200006b3 	.word	0x200006b3

08001f64 <UartDmaStart>:
void UartDmaStart(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxBuffer, RX_SIZE);
 8001f68:	22ff      	movs	r2, #255	; 0xff
 8001f6a:	4907      	ldr	r1, [pc, #28]	; (8001f88 <UartDmaStart+0x24>)
 8001f6c:	4807      	ldr	r0, [pc, #28]	; (8001f8c <UartDmaStart+0x28>)
 8001f6e:	f007 fbbd 	bl	80096ec <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <UartDmaStart+0x2c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <UartDmaStart+0x2c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0204 	bic.w	r2, r2, #4
 8001f80:	601a      	str	r2, [r3, #0]
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000010 	.word	0x20000010
 8001f8c:	20000948 	.word	0x20000948
 8001f90:	20000a70 	.word	0x20000a70

08001f94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f94:	480d      	ldr	r0, [pc, #52]	; (8001fcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f96:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f98:	f7ff fd8e 	bl	8001ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f9c:	480c      	ldr	r0, [pc, #48]	; (8001fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f9e:	490d      	ldr	r1, [pc, #52]	; (8001fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fa0:	4a0d      	ldr	r2, [pc, #52]	; (8001fd8 <LoopForever+0xe>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fb4:	4c0a      	ldr	r4, [pc, #40]	; (8001fe0 <LoopForever+0x16>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fc2:	f007 fc55 	bl	8009870 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fc6:	f7fe fd20 	bl	8000a0a <main>

08001fca <LoopForever>:

LoopForever:
    b LoopForever
 8001fca:	e7fe      	b.n	8001fca <LoopForever>
  ldr   r0, =_estack
 8001fcc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd4:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8001fd8:	0800b008 	.word	0x0800b008
  ldr r2, =_sbss
 8001fdc:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8001fe0:	20000b54 	.word	0x20000b54

08001fe4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <ADC_IRQHandler>
	...

08001fe8 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	4a07      	ldr	r2, [pc, #28]	; (8002014 <BSP_LED_Toggle+0x2c>)
 8001ff6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	4906      	ldr	r1, [pc, #24]	; (8002018 <BSP_LED_Toggle+0x30>)
 8001ffe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002002:	4619      	mov	r1, r3
 8002004:	4610      	mov	r0, r2
 8002006:	f003 fad2 	bl	80055ae <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000114 	.word	0x20000114
 8002018:	0800af30 	.word	0x0800af30

0800201c <LL_AHB2_GRP1_EnableClock>:
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002028:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800202a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4313      	orrs	r3, r2
 8002032:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4013      	ands	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002040:	68fb      	ldr	r3, [r7, #12]
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8002060:	2004      	movs	r0, #4
 8002062:	f7ff ffdb 	bl	800201c <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002066:	2310      	movs	r3, #16
 8002068:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800206a:	2301      	movs	r3, #1
 800206c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	4619      	mov	r1, r3
 800207a:	4812      	ldr	r0, [pc, #72]	; (80020c4 <BSP_RADIO_Init+0x78>)
 800207c:	f003 f852 	bl	8005124 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002080:	2320      	movs	r3, #32
 8002082:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002084:	1d3b      	adds	r3, r7, #4
 8002086:	4619      	mov	r1, r3
 8002088:	480e      	ldr	r0, [pc, #56]	; (80020c4 <BSP_RADIO_Init+0x78>)
 800208a:	f003 f84b 	bl	8005124 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800208e:	2308      	movs	r3, #8
 8002090:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	4619      	mov	r1, r3
 8002096:	480b      	ldr	r0, [pc, #44]	; (80020c4 <BSP_RADIO_Init+0x78>)
 8002098:	f003 f844 	bl	8005124 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800209c:	2200      	movs	r2, #0
 800209e:	2120      	movs	r1, #32
 80020a0:	4808      	ldr	r0, [pc, #32]	; (80020c4 <BSP_RADIO_Init+0x78>)
 80020a2:	f003 fa6d 	bl	8005580 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80020a6:	2200      	movs	r2, #0
 80020a8:	2110      	movs	r1, #16
 80020aa:	4806      	ldr	r0, [pc, #24]	; (80020c4 <BSP_RADIO_Init+0x78>)
 80020ac:	f003 fa68 	bl	8005580 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80020b0:	2200      	movs	r2, #0
 80020b2:	2108      	movs	r1, #8
 80020b4:	4803      	ldr	r0, [pc, #12]	; (80020c4 <BSP_RADIO_Init+0x78>)
 80020b6:	f003 fa63 	bl	8005580 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	48000800 	.word	0x48000800

080020c8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d84b      	bhi.n	8002170 <BSP_RADIO_ConfigRFSwitch+0xa8>
 80020d8:	a201      	add	r2, pc, #4	; (adr r2, 80020e0 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80020da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020de:	bf00      	nop
 80020e0:	080020f1 	.word	0x080020f1
 80020e4:	08002111 	.word	0x08002111
 80020e8:	08002131 	.word	0x08002131
 80020ec:	08002151 	.word	0x08002151
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2108      	movs	r1, #8
 80020f4:	4821      	ldr	r0, [pc, #132]	; (800217c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80020f6:	f003 fa43 	bl	8005580 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2110      	movs	r1, #16
 80020fe:	481f      	ldr	r0, [pc, #124]	; (800217c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002100:	f003 fa3e 	bl	8005580 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	2120      	movs	r1, #32
 8002108:	481c      	ldr	r0, [pc, #112]	; (800217c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800210a:	f003 fa39 	bl	8005580 <HAL_GPIO_WritePin>
      break;      
 800210e:	e030      	b.n	8002172 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002110:	2201      	movs	r2, #1
 8002112:	2108      	movs	r1, #8
 8002114:	4819      	ldr	r0, [pc, #100]	; (800217c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002116:	f003 fa33 	bl	8005580 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800211a:	2201      	movs	r2, #1
 800211c:	2110      	movs	r1, #16
 800211e:	4817      	ldr	r0, [pc, #92]	; (800217c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002120:	f003 fa2e 	bl	8005580 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002124:	2200      	movs	r2, #0
 8002126:	2120      	movs	r1, #32
 8002128:	4814      	ldr	r0, [pc, #80]	; (800217c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800212a:	f003 fa29 	bl	8005580 <HAL_GPIO_WritePin>
      break;
 800212e:	e020      	b.n	8002172 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002130:	2201      	movs	r2, #1
 8002132:	2108      	movs	r1, #8
 8002134:	4811      	ldr	r0, [pc, #68]	; (800217c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002136:	f003 fa23 	bl	8005580 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800213a:	2201      	movs	r2, #1
 800213c:	2110      	movs	r1, #16
 800213e:	480f      	ldr	r0, [pc, #60]	; (800217c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002140:	f003 fa1e 	bl	8005580 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002144:	2201      	movs	r2, #1
 8002146:	2120      	movs	r1, #32
 8002148:	480c      	ldr	r0, [pc, #48]	; (800217c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800214a:	f003 fa19 	bl	8005580 <HAL_GPIO_WritePin>
      break;
 800214e:	e010      	b.n	8002172 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002150:	2201      	movs	r2, #1
 8002152:	2108      	movs	r1, #8
 8002154:	4809      	ldr	r0, [pc, #36]	; (800217c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002156:	f003 fa13 	bl	8005580 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800215a:	2200      	movs	r2, #0
 800215c:	2110      	movs	r1, #16
 800215e:	4807      	ldr	r0, [pc, #28]	; (800217c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002160:	f003 fa0e 	bl	8005580 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002164:	2201      	movs	r2, #1
 8002166:	2120      	movs	r1, #32
 8002168:	4804      	ldr	r0, [pc, #16]	; (800217c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800216a:	f003 fa09 	bl	8005580 <HAL_GPIO_WritePin>
      break;
 800216e:	e000      	b.n	8002172 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8002170:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	48000800 	.word	0x48000800

08002180 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002192:	2301      	movs	r3, #1
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80021a0:	2301      	movs	r3, #1
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b085      	sub	sp, #20
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d102      	bne.n	80021c0 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80021ba:	230f      	movs	r3, #15
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	e001      	b.n	80021c4 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80021c0:	2316      	movs	r3, #22
 80021c2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80021c4:	68fb      	ldr	r3, [r7, #12]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 80021d4:	f7ff ff3a 	bl	800204c <BSP_RADIO_Init>
 80021d8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80021da:	4618      	mov	r0, r3
 80021dc:	bd80      	pop	{r7, pc}

080021de <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80021e8:	79fb      	ldrb	r3, [r7, #7]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff ff6c 	bl	80020c8 <BSP_RADIO_ConfigRFSwitch>
 80021f0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80021fe:	f7ff ffbf 	bl	8002180 <BSP_RADIO_GetTxConfig>
 8002202:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}

08002208 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800220c:	f7ff ffbf 	bl	800218e <BSP_RADIO_IsTCXO>
 8002210:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002212:	4618      	mov	r0, r3
 8002214:	bd80      	pop	{r7, pc}

08002216 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800221a:	f7ff ffbf 	bl	800219c <BSP_RADIO_IsDCDC>
 800221e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}

08002224 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ffba 	bl	80021aa <BSP_RADIO_GetRFOMaxPowerConfig>
 8002236:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800224e:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <SUBGRF_Init+0x84>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8002254:	f7fe ffca 	bl	80011ec <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8002258:	2002      	movs	r0, #2
 800225a:	f000 ffd1 	bl	8003200 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <SUBGRF_Init+0x88>)
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8002264:	2000      	movs	r0, #0
 8002266:	f000 f909 	bl	800247c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800226a:	f7ff ffcd 	bl	8002208 <RBI_IsTCXO>
 800226e:	4603      	mov	r3, r0
 8002270:	2b01      	cmp	r3, #1
 8002272:	d10e      	bne.n	8002292 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8002274:	2140      	movs	r1, #64	; 0x40
 8002276:	2001      	movs	r0, #1
 8002278:	f000 fa6e 	bl	8002758 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800227c:	2100      	movs	r1, #0
 800227e:	f640 1011 	movw	r0, #2321	; 0x911
 8002282:	f000 fdcd 	bl	8002e20 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8002286:	237f      	movs	r3, #127	; 0x7f
 8002288:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800228a:	7b38      	ldrb	r0, [r7, #12]
 800228c:	f000 f978 	bl	8002580 <SUBGRF_Calibrate>
 8002290:	e009      	b.n	80022a6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8002292:	2120      	movs	r1, #32
 8002294:	f640 1011 	movw	r0, #2321	; 0x911
 8002298:	f000 fdc2 	bl	8002e20 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800229c:	2120      	movs	r1, #32
 800229e:	f640 1012 	movw	r0, #2322	; 0x912
 80022a2:	f000 fdbd 	bl	8002e20 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80022a6:	210e      	movs	r1, #14
 80022a8:	f640 101f 	movw	r0, #2335	; 0x91f
 80022ac:	f000 fdb8 	bl	8002e20 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80022b0:	f7ff ff8e 	bl	80021d0 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <SUBGRF_Init+0x8c>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
}
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000b3c 	.word	0x20000b3c
 80022c8:	20000b38 	.word	0x20000b38
 80022cc:	20000b30 	.word	0x20000b30

080022d0 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
    return OperatingMode;
 80022d4:	4b02      	ldr	r3, [pc, #8]	; (80022e0 <SUBGRF_GetOperatingMode+0x10>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	20000b30 	.word	0x20000b30

080022e4 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	461a      	mov	r2, r3
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	2000      	movs	r0, #0
 80022f8:	f000 fdfe 	bl	8002ef8 <SUBGRF_WriteBuffer>
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	4613      	mov	r3, r2
 8002310:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8002316:	f107 0317 	add.w	r3, r7, #23
 800231a:	4619      	mov	r1, r3
 800231c:	68b8      	ldr	r0, [r7, #8]
 800231e:	f000 fd01 	bl	8002d24 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	79fa      	ldrb	r2, [r7, #7]
 8002328:	429a      	cmp	r2, r3
 800232a:	d201      	bcs.n	8002330 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800232c:	2301      	movs	r3, #1
 800232e:	e007      	b.n	8002340 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8002330:	7df8      	ldrb	r0, [r7, #23]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	68f9      	ldr	r1, [r7, #12]
 800233a:	f000 fdff 	bl	8002f3c <SUBGRF_ReadBuffer>

    return 0;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	460b      	mov	r3, r1
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8002356:	7afb      	ldrb	r3, [r7, #11]
 8002358:	4619      	mov	r1, r3
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f7ff ffc2 	bl	80022e4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f8a7 	bl	80024b4 <SUBGRF_SetTx>
}
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	0a1b      	lsrs	r3, r3, #8
 800237c:	b29b      	uxth	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8002382:	88fb      	ldrh	r3, [r7, #6]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8002388:	f000 fa6a 	bl	8002860 <SUBGRF_GetPacketType>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d108      	bne.n	80023a4 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8002392:	f107 030c 	add.w	r3, r7, #12
 8002396:	2202      	movs	r2, #2
 8002398:	4619      	mov	r1, r3
 800239a:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800239e:	f000 fd67 	bl	8002e70 <SUBGRF_WriteRegisters>
            break;
 80023a2:	e000      	b.n	80023a6 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80023a4:	bf00      	nop
    }
}
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b084      	sub	sp, #16
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	b29b      	uxth	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80023c8:	f000 fa4a 	bl	8002860 <SUBGRF_GetPacketType>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d108      	bne.n	80023e4 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80023d2:	f107 030c 	add.w	r3, r7, #12
 80023d6:	2202      	movs	r2, #2
 80023d8:	4619      	mov	r1, r3
 80023da:	f240 60be 	movw	r0, #1726	; 0x6be
 80023de:	f000 fd47 	bl	8002e70 <SUBGRF_WriteRegisters>
            break;
 80023e2:	e000      	b.n	80023e6 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80023e4:	bf00      	nop
    }
}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <SUBGRF_GetRandom>:
            break;
    }
}

uint32_t SUBGRF_GetRandom( void )
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8002400:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8002404:	f000 fd20 	bl	8002e48 <SUBGRF_ReadRegister>
 8002408:	4603      	mov	r3, r0
 800240a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	f023 0301 	bic.w	r3, r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	4619      	mov	r1, r3
 8002416:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800241a:	f000 fd01 	bl	8002e20 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800241e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8002422:	f000 fd11 	bl	8002e48 <SUBGRF_ReadRegister>
 8002426:	4603      	mov	r3, r0
 8002428:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800242a:	79bb      	ldrb	r3, [r7, #6]
 800242c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002430:	b2db      	uxtb	r3, r3
 8002432:	4619      	mov	r1, r3
 8002434:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8002438:	f000 fcf2 	bl	8002e20 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800243c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002440:	f000 f858 	bl	80024f4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8002444:	463b      	mov	r3, r7
 8002446:	2204      	movs	r2, #4
 8002448:	4619      	mov	r1, r3
 800244a:	f640 0019 	movw	r0, #2073	; 0x819
 800244e:	f000 fd31 	bl	8002eb4 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8002452:	2000      	movs	r0, #0
 8002454:	f000 f812 	bl	800247c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	4619      	mov	r1, r3
 800245c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8002460:	f000 fcde 	bl	8002e20 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8002464:	79bb      	ldrb	r3, [r7, #6]
 8002466:	4619      	mov	r1, r3
 8002468:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800246c:	f000 fcd8 	bl	8002e20 <SUBGRF_WriteRegister>

    return number;
 8002470:	683b      	ldr	r3, [r7, #0]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8002486:	1dfb      	adds	r3, r7, #7
 8002488:	2201      	movs	r2, #1
 800248a:	4619      	mov	r1, r3
 800248c:	2080      	movs	r0, #128	; 0x80
 800248e:	f000 fd77 	bl	8002f80 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d103      	bne.n	80024a0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <SUBGRF_SetStandby+0x34>)
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800249e:	e002      	b.n	80024a6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <SUBGRF_SetStandby+0x34>)
 80024a2:	2202      	movs	r2, #2
 80024a4:	701a      	strb	r2, [r3, #0]
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000b30 	.word	0x20000b30

080024b4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <SUBGRF_SetTx+0x3c>)
 80024be:	2204      	movs	r2, #4
 80024c0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	0a1b      	lsrs	r3, r3, #8
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80024d8:	f107 030c 	add.w	r3, r7, #12
 80024dc:	2203      	movs	r2, #3
 80024de:	4619      	mov	r1, r3
 80024e0:	2083      	movs	r0, #131	; 0x83
 80024e2:	f000 fd4d 	bl	8002f80 <SUBGRF_WriteCommand>
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000b30 	.word	0x20000b30

080024f4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <SUBGRF_SetRx+0x3c>)
 80024fe:	2205      	movs	r2, #5
 8002500:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	0c1b      	lsrs	r3, r3, #16
 8002506:	b2db      	uxtb	r3, r3
 8002508:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	b2db      	uxtb	r3, r3
 8002510:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8002518:	f107 030c 	add.w	r3, r7, #12
 800251c:	2203      	movs	r2, #3
 800251e:	4619      	mov	r1, r3
 8002520:	2082      	movs	r0, #130	; 0x82
 8002522:	f000 fd2d 	bl	8002f80 <SUBGRF_WriteCommand>
}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000b30 	.word	0x20000b30

08002534 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800253e:	1dfb      	adds	r3, r7, #7
 8002540:	2201      	movs	r2, #1
 8002542:	4619      	mov	r1, r3
 8002544:	209f      	movs	r0, #159	; 0x9f
 8002546:	f000 fd1b 	bl	8002f80 <SUBGRF_WriteCommand>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8002558:	f7ff fe5d 	bl	8002216 <RBI_IsDCDC>
 800255c:	4603      	mov	r3, r0
 800255e:	2b01      	cmp	r3, #1
 8002560:	d102      	bne.n	8002568 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8002562:	2301      	movs	r3, #1
 8002564:	71fb      	strb	r3, [r7, #7]
 8002566:	e001      	b.n	800256c <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8002568:	2300      	movs	r3, #0
 800256a:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800256c:	1dfb      	adds	r3, r7, #7
 800256e:	2201      	movs	r2, #1
 8002570:	4619      	mov	r1, r3
 8002572:	2096      	movs	r0, #150	; 0x96
 8002574:	f000 fd04 	bl	8002f80 <SUBGRF_WriteCommand>
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8002588:	793b      	ldrb	r3, [r7, #4]
 800258a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800258e:	b2db      	uxtb	r3, r3
 8002590:	019b      	lsls	r3, r3, #6
 8002592:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8002594:	793b      	ldrb	r3, [r7, #4]
 8002596:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800259e:	b25b      	sxtb	r3, r3
 80025a0:	4313      	orrs	r3, r2
 80025a2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80025a4:	793b      	ldrb	r3, [r7, #4]
 80025a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	4313      	orrs	r3, r2
 80025b2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80025b4:	793b      	ldrb	r3, [r7, #4]
 80025b6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80025be:	b25b      	sxtb	r3, r3
 80025c0:	4313      	orrs	r3, r2
 80025c2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80025c4:	793b      	ldrb	r3, [r7, #4]
 80025c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80025ce:	b25b      	sxtb	r3, r3
 80025d0:	4313      	orrs	r3, r2
 80025d2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80025d4:	793b      	ldrb	r3, [r7, #4]
 80025d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	4313      	orrs	r3, r2
 80025e2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80025e4:	793b      	ldrb	r3, [r7, #4]
 80025e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80025ee:	4313      	orrs	r3, r2
 80025f0:	b25b      	sxtb	r3, r3
 80025f2:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80025f4:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80025f6:	f107 030f 	add.w	r3, r7, #15
 80025fa:	2201      	movs	r2, #1
 80025fc:	4619      	mov	r1, r3
 80025fe:	2089      	movs	r0, #137	; 0x89
 8002600:	f000 fcbe 	bl	8002f80 <SUBGRF_WriteCommand>
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a1d      	ldr	r2, [pc, #116]	; (800268c <SUBGRF_CalibrateImage+0x80>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d904      	bls.n	8002626 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800261c:	23e1      	movs	r3, #225	; 0xe1
 800261e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8002620:	23e9      	movs	r3, #233	; 0xe9
 8002622:	737b      	strb	r3, [r7, #13]
 8002624:	e027      	b.n	8002676 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a19      	ldr	r2, [pc, #100]	; (8002690 <SUBGRF_CalibrateImage+0x84>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d904      	bls.n	8002638 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800262e:	23d7      	movs	r3, #215	; 0xd7
 8002630:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8002632:	23db      	movs	r3, #219	; 0xdb
 8002634:	737b      	strb	r3, [r7, #13]
 8002636:	e01e      	b.n	8002676 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a16      	ldr	r2, [pc, #88]	; (8002694 <SUBGRF_CalibrateImage+0x88>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d904      	bls.n	800264a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8002640:	23c1      	movs	r3, #193	; 0xc1
 8002642:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8002644:	23c5      	movs	r3, #197	; 0xc5
 8002646:	737b      	strb	r3, [r7, #13]
 8002648:	e015      	b.n	8002676 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a12      	ldr	r2, [pc, #72]	; (8002698 <SUBGRF_CalibrateImage+0x8c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d904      	bls.n	800265c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8002652:	2375      	movs	r3, #117	; 0x75
 8002654:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8002656:	2381      	movs	r3, #129	; 0x81
 8002658:	737b      	strb	r3, [r7, #13]
 800265a:	e00c      	b.n	8002676 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a0f      	ldr	r2, [pc, #60]	; (800269c <SUBGRF_CalibrateImage+0x90>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d904      	bls.n	800266e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8002664:	236b      	movs	r3, #107	; 0x6b
 8002666:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8002668:	236f      	movs	r3, #111	; 0x6f
 800266a:	737b      	strb	r3, [r7, #13]
 800266c:	e003      	b.n	8002676 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800266e:	2329      	movs	r3, #41	; 0x29
 8002670:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8002672:	232b      	movs	r3, #43	; 0x2b
 8002674:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8002676:	f107 030c 	add.w	r3, r7, #12
 800267a:	2202      	movs	r2, #2
 800267c:	4619      	mov	r1, r3
 800267e:	2098      	movs	r0, #152	; 0x98
 8002680:	f000 fc7e 	bl	8002f80 <SUBGRF_WriteCommand>
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	35a4e900 	.word	0x35a4e900
 8002690:	32a9f880 	.word	0x32a9f880
 8002694:	2de54480 	.word	0x2de54480
 8002698:	1b6b0b00 	.word	0x1b6b0b00
 800269c:	1954fc40 	.word	0x1954fc40

080026a0 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4604      	mov	r4, r0
 80026a8:	4608      	mov	r0, r1
 80026aa:	4611      	mov	r1, r2
 80026ac:	461a      	mov	r2, r3
 80026ae:	4623      	mov	r3, r4
 80026b0:	71fb      	strb	r3, [r7, #7]
 80026b2:	4603      	mov	r3, r0
 80026b4:	71bb      	strb	r3, [r7, #6]
 80026b6:	460b      	mov	r3, r1
 80026b8:	717b      	strb	r3, [r7, #5]
 80026ba:	4613      	mov	r3, r2
 80026bc:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80026c2:	79bb      	ldrb	r3, [r7, #6]
 80026c4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80026c6:	797b      	ldrb	r3, [r7, #5]
 80026c8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80026ca:	793b      	ldrb	r3, [r7, #4]
 80026cc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80026ce:	f107 030c 	add.w	r3, r7, #12
 80026d2:	2204      	movs	r2, #4
 80026d4:	4619      	mov	r1, r3
 80026d6:	2095      	movs	r0, #149	; 0x95
 80026d8:	f000 fc52 	bl	8002f80 <SUBGRF_WriteCommand>
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd90      	pop	{r4, r7, pc}

080026e4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4604      	mov	r4, r0
 80026ec:	4608      	mov	r0, r1
 80026ee:	4611      	mov	r1, r2
 80026f0:	461a      	mov	r2, r3
 80026f2:	4623      	mov	r3, r4
 80026f4:	80fb      	strh	r3, [r7, #6]
 80026f6:	4603      	mov	r3, r0
 80026f8:	80bb      	strh	r3, [r7, #4]
 80026fa:	460b      	mov	r3, r1
 80026fc:	807b      	strh	r3, [r7, #2]
 80026fe:	4613      	mov	r3, r2
 8002700:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	0a1b      	lsrs	r3, r3, #8
 8002706:	b29b      	uxth	r3, r3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	b2db      	uxtb	r3, r3
 8002710:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8002712:	88bb      	ldrh	r3, [r7, #4]
 8002714:	0a1b      	lsrs	r3, r3, #8
 8002716:	b29b      	uxth	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800271c:	88bb      	ldrh	r3, [r7, #4]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8002722:	887b      	ldrh	r3, [r7, #2]
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	b29b      	uxth	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800272c:	887b      	ldrh	r3, [r7, #2]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8002732:	883b      	ldrh	r3, [r7, #0]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	b29b      	uxth	r3, r3
 8002738:	b2db      	uxtb	r3, r3
 800273a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800273c:	883b      	ldrh	r3, [r7, #0]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8002742:	f107 0308 	add.w	r3, r7, #8
 8002746:	2208      	movs	r2, #8
 8002748:	4619      	mov	r1, r3
 800274a:	2008      	movs	r0, #8
 800274c:	f000 fc18 	bl	8002f80 <SUBGRF_WriteCommand>
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	bd90      	pop	{r4, r7, pc}

08002758 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	4603      	mov	r3, r0
 8002760:	6039      	str	r1, [r7, #0]
 8002762:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	b2db      	uxtb	r3, r3
 800276c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	0c1b      	lsrs	r3, r3, #16
 8002772:	b2db      	uxtb	r3, r3
 8002774:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	0a1b      	lsrs	r3, r3, #8
 800277a:	b2db      	uxtb	r3, r3
 800277c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8002784:	f107 030c 	add.w	r3, r7, #12
 8002788:	2204      	movs	r2, #4
 800278a:	4619      	mov	r1, r3
 800278c:	2097      	movs	r0, #151	; 0x97
 800278e:	f000 fbf7 	bl	8002f80 <SUBGRF_WriteCommand>
}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800279c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80027aa:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <SUBGRF_SetRfFrequency+0x84>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	f083 0301 	eor.w	r3, r3, #1
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff27 	bl	800260c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80027be:	4b18      	ldr	r3, [pc, #96]	; (8002820 <SUBGRF_SetRfFrequency+0x84>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	461c      	mov	r4, r3
 80027ca:	4615      	mov	r5, r2
 80027cc:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80027d0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80027d4:	4a13      	ldr	r2, [pc, #76]	; (8002824 <SUBGRF_SetRfFrequency+0x88>)
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	4640      	mov	r0, r8
 80027dc:	4649      	mov	r1, r9
 80027de:	f7fd fd27 	bl	8000230 <__aeabi_uldivmod>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4613      	mov	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	0e1b      	lsrs	r3, r3, #24
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	0c1b      	lsrs	r3, r3, #16
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8002808:	f107 0308 	add.w	r3, r7, #8
 800280c:	2204      	movs	r2, #4
 800280e:	4619      	mov	r1, r3
 8002810:	2086      	movs	r0, #134	; 0x86
 8002812:	f000 fbb5 	bl	8002f80 <SUBGRF_WriteCommand>
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002820:	20000b38 	.word	0x20000b38
 8002824:	01e84800 	.word	0x01e84800

08002828 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8002832:	79fa      	ldrb	r2, [r7, #7]
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <SUBGRF_SetPacketType+0x34>)
 8002836:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d104      	bne.n	8002848 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800283e:	2100      	movs	r1, #0
 8002840:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8002844:	f000 faec 	bl	8002e20 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8002848:	1dfb      	adds	r3, r7, #7
 800284a:	2201      	movs	r2, #1
 800284c:	4619      	mov	r1, r3
 800284e:	208a      	movs	r0, #138	; 0x8a
 8002850:	f000 fb96 	bl	8002f80 <SUBGRF_WriteCommand>
}
 8002854:	bf00      	nop
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000b31 	.word	0x20000b31

08002860 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
    return PacketType;
 8002864:	4b02      	ldr	r3, [pc, #8]	; (8002870 <SUBGRF_GetPacketType+0x10>)
 8002866:	781b      	ldrb	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	20000b31 	.word	0x20000b31

08002874 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
 800287e:	460b      	mov	r3, r1
 8002880:	71bb      	strb	r3, [r7, #6]
 8002882:	4613      	mov	r3, r2
 8002884:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d149      	bne.n	8002920 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800288c:	2000      	movs	r0, #0
 800288e:	f7ff fcc9 	bl	8002224 <RBI_GetRFOMaxPowerConfig>
 8002892:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8002894:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	429a      	cmp	r2, r3
 800289c:	da01      	bge.n	80028a2 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b0e      	cmp	r3, #14
 80028a6:	d10e      	bne.n	80028c6 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80028a8:	2301      	movs	r3, #1
 80028aa:	2201      	movs	r2, #1
 80028ac:	2100      	movs	r1, #0
 80028ae:	2004      	movs	r0, #4
 80028b0:	f7ff fef6 	bl	80026a0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80028b4:	79ba      	ldrb	r2, [r7, #6]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	330e      	adds	r3, #14
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	71bb      	strb	r3, [r7, #6]
 80028c4:	e01f      	b.n	8002906 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b0a      	cmp	r3, #10
 80028ca:	d10e      	bne.n	80028ea <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 80028cc:	2301      	movs	r3, #1
 80028ce:	2201      	movs	r2, #1
 80028d0:	2100      	movs	r1, #0
 80028d2:	2001      	movs	r0, #1
 80028d4:	f7ff fee4 	bl	80026a0 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 80028d8:	79ba      	ldrb	r2, [r7, #6]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	330d      	adds	r3, #13
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	71bb      	strb	r3, [r7, #6]
 80028e8:	e00d      	b.n	8002906 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 80028ea:	2301      	movs	r3, #1
 80028ec:	2201      	movs	r2, #1
 80028ee:	2100      	movs	r1, #0
 80028f0:	2007      	movs	r0, #7
 80028f2:	f7ff fed5 	bl	80026a0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80028f6:	79ba      	ldrb	r2, [r7, #6]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	330e      	adds	r3, #14
 8002902:	b2db      	uxtb	r3, r3
 8002904:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8002906:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800290a:	f113 0f11 	cmn.w	r3, #17
 800290e:	da01      	bge.n	8002914 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8002910:	23ef      	movs	r3, #239	; 0xef
 8002912:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8002914:	2118      	movs	r1, #24
 8002916:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800291a:	f000 fa81 	bl	8002e20 <SUBGRF_WriteRegister>
 800291e:	e067      	b.n	80029f0 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8002920:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8002924:	f000 fa90 	bl	8002e48 <SUBGRF_ReadRegister>
 8002928:	4603      	mov	r3, r0
 800292a:	f043 031e 	orr.w	r3, r3, #30
 800292e:	b2db      	uxtb	r3, r3
 8002930:	4619      	mov	r1, r3
 8002932:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8002936:	f000 fa73 	bl	8002e20 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800293a:	2001      	movs	r0, #1
 800293c:	f7ff fc72 	bl	8002224 <RBI_GetRFOMaxPowerConfig>
 8002940:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8002942:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	429a      	cmp	r2, r3
 800294a:	da01      	bge.n	8002950 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b14      	cmp	r3, #20
 8002954:	d10e      	bne.n	8002974 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8002956:	2301      	movs	r3, #1
 8002958:	2200      	movs	r2, #0
 800295a:	2105      	movs	r1, #5
 800295c:	2003      	movs	r0, #3
 800295e:	f7ff fe9f 	bl	80026a0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8002962:	79ba      	ldrb	r2, [r7, #6]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	b2db      	uxtb	r3, r3
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	3316      	adds	r3, #22
 800296e:	b2db      	uxtb	r3, r3
 8002970:	71bb      	strb	r3, [r7, #6]
 8002972:	e031      	b.n	80029d8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b11      	cmp	r3, #17
 8002978:	d10e      	bne.n	8002998 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800297a:	2301      	movs	r3, #1
 800297c:	2200      	movs	r2, #0
 800297e:	2103      	movs	r1, #3
 8002980:	2002      	movs	r0, #2
 8002982:	f7ff fe8d 	bl	80026a0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8002986:	79ba      	ldrb	r2, [r7, #6]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	3316      	adds	r3, #22
 8002992:	b2db      	uxtb	r3, r3
 8002994:	71bb      	strb	r3, [r7, #6]
 8002996:	e01f      	b.n	80029d8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b0e      	cmp	r3, #14
 800299c:	d10e      	bne.n	80029bc <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800299e:	2301      	movs	r3, #1
 80029a0:	2200      	movs	r2, #0
 80029a2:	2102      	movs	r1, #2
 80029a4:	2002      	movs	r0, #2
 80029a6:	f7ff fe7b 	bl	80026a0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80029aa:	79ba      	ldrb	r2, [r7, #6]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	330e      	adds	r3, #14
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	71bb      	strb	r3, [r7, #6]
 80029ba:	e00d      	b.n	80029d8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80029bc:	2301      	movs	r3, #1
 80029be:	2200      	movs	r2, #0
 80029c0:	2107      	movs	r1, #7
 80029c2:	2004      	movs	r0, #4
 80029c4:	f7ff fe6c 	bl	80026a0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80029c8:	79ba      	ldrb	r2, [r7, #6]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	3316      	adds	r3, #22
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 80029d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80029dc:	f113 0f09 	cmn.w	r3, #9
 80029e0:	da01      	bge.n	80029e6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 80029e2:	23f7      	movs	r3, #247	; 0xf7
 80029e4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 80029e6:	2138      	movs	r1, #56	; 0x38
 80029e8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80029ec:	f000 fa18 	bl	8002e20 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 80029f0:	79bb      	ldrb	r3, [r7, #6]
 80029f2:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 80029f4:	797b      	ldrb	r3, [r7, #5]
 80029f6:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 80029f8:	f107 0308 	add.w	r3, r7, #8
 80029fc:	2202      	movs	r2, #2
 80029fe:	4619      	mov	r1, r3
 8002a00:	208e      	movs	r0, #142	; 0x8e
 8002a02:	f000 fabd 	bl	8002f80 <SUBGRF_WriteCommand>
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8002a10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a14:	b086      	sub	sp, #24
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8002a1e:	4a61      	ldr	r2, [pc, #388]	; (8002ba4 <SUBGRF_SetModulationParams+0x194>)
 8002a20:	f107 0308 	add.w	r3, r7, #8
 8002a24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a28:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	781a      	ldrb	r2, [r3, #0]
 8002a30:	4b5d      	ldr	r3, [pc, #372]	; (8002ba8 <SUBGRF_SetModulationParams+0x198>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d004      	beq.n	8002a42 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fef3 	bl	8002828 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	f200 80a5 	bhi.w	8002b96 <SUBGRF_SetModulationParams+0x186>
 8002a4c:	a201      	add	r2, pc, #4	; (adr r2, 8002a54 <SUBGRF_SetModulationParams+0x44>)
 8002a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a52:	bf00      	nop
 8002a54:	08002a65 	.word	0x08002a65
 8002a58:	08002b25 	.word	0x08002b25
 8002a5c:	08002ae7 	.word	0x08002ae7
 8002a60:	08002b53 	.word	0x08002b53
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8002a64:	2308      	movs	r3, #8
 8002a66:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a4f      	ldr	r2, [pc, #316]	; (8002bac <SUBGRF_SetModulationParams+0x19c>)
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	0c1b      	lsrs	r3, r3, #16
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	7b1b      	ldrb	r3, [r3, #12]
 8002a8e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	7b5b      	ldrb	r3, [r3, #13]
 8002a94:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	461c      	mov	r4, r3
 8002a9e:	4615      	mov	r5, r2
 8002aa0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8002aa4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8002aa8:	4a41      	ldr	r2, [pc, #260]	; (8002bb0 <SUBGRF_SetModulationParams+0x1a0>)
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	4640      	mov	r0, r8
 8002ab0:	4649      	mov	r1, r9
 8002ab2:	f7fd fbbd 	bl	8000230 <__aeabi_uldivmod>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4613      	mov	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	0c1b      	lsrs	r3, r3, #16
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	f107 0308 	add.w	r3, r7, #8
 8002adc:	4619      	mov	r1, r3
 8002ade:	208b      	movs	r0, #139	; 0x8b
 8002ae0:	f000 fa4e 	bl	8002f80 <SUBGRF_WriteCommand>
        break;
 8002ae4:	e058      	b.n	8002b98 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	4a2f      	ldr	r2, [pc, #188]	; (8002bac <SUBGRF_SetModulationParams+0x19c>)
 8002af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	0c1b      	lsrs	r3, r3, #16
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	0a1b      	lsrs	r3, r3, #8
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	7d1b      	ldrb	r3, [r3, #20]
 8002b10:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8002b12:	7cfb      	ldrb	r3, [r7, #19]
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	f107 0308 	add.w	r3, r7, #8
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	208b      	movs	r0, #139	; 0x8b
 8002b1e:	f000 fa2f 	bl	8002f80 <SUBGRF_WriteCommand>
        break;
 8002b22:	e039      	b.n	8002b98 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8002b24:	2304      	movs	r3, #4
 8002b26:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	7e1b      	ldrb	r3, [r3, #24]
 8002b2c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	7e5b      	ldrb	r3, [r3, #25]
 8002b32:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	7e9b      	ldrb	r3, [r3, #26]
 8002b38:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	7edb      	ldrb	r3, [r3, #27]
 8002b3e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	f107 0308 	add.w	r3, r7, #8
 8002b48:	4619      	mov	r1, r3
 8002b4a:	208b      	movs	r0, #139	; 0x8b
 8002b4c:	f000 fa18 	bl	8002f80 <SUBGRF_WriteCommand>

        break;
 8002b50:	e022      	b.n	8002b98 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8002b52:	2305      	movs	r3, #5
 8002b54:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4a14      	ldr	r2, [pc, #80]	; (8002bac <SUBGRF_SetModulationParams+0x19c>)
 8002b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b60:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	0c1b      	lsrs	r3, r3, #16
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	7b1b      	ldrb	r3, [r3, #12]
 8002b7c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	7b5b      	ldrb	r3, [r3, #13]
 8002b82:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	f107 0308 	add.w	r3, r7, #8
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	208b      	movs	r0, #139	; 0x8b
 8002b90:	f000 f9f6 	bl	8002f80 <SUBGRF_WriteCommand>
        break;
 8002b94:	e000      	b.n	8002b98 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8002b96:	bf00      	nop
    }
}
 8002b98:	bf00      	nop
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ba2:	bf00      	nop
 8002ba4:	0800ae10 	.word	0x0800ae10
 8002ba8:	20000b31 	.word	0x20000b31
 8002bac:	3d090000 	.word	0x3d090000
 8002bb0:	01e84800 	.word	0x01e84800

08002bb4 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8002bc0:	4a49      	ldr	r2, [pc, #292]	; (8002ce8 <SUBGRF_SetPacketParams+0x134>)
 8002bc2:	f107 030c 	add.w	r3, r7, #12
 8002bc6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bc8:	c303      	stmia	r3!, {r0, r1}
 8002bca:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	4b46      	ldr	r3, [pc, #280]	; (8002cec <SUBGRF_SetPacketParams+0x138>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d004      	beq.n	8002be2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fe23 	bl	8002828 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d879      	bhi.n	8002cde <SUBGRF_SetPacketParams+0x12a>
 8002bea:	a201      	add	r2, pc, #4	; (adr r2, 8002bf0 <SUBGRF_SetPacketParams+0x3c>)
 8002bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf0:	08002c01 	.word	0x08002c01
 8002bf4:	08002c91 	.word	0x08002c91
 8002bf8:	08002c85 	.word	0x08002c85
 8002bfc:	08002c01 	.word	0x08002c01
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	7adb      	ldrb	r3, [r3, #11]
 8002c04:	2bf1      	cmp	r3, #241	; 0xf1
 8002c06:	d10a      	bne.n	8002c1e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8002c08:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002c0c:	f7ff fbaf 	bl	800236e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8002c10:	f248 0005 	movw	r0, #32773	; 0x8005
 8002c14:	f7ff fbcb 	bl	80023ae <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	75bb      	strb	r3, [r7, #22]
 8002c1c:	e011      	b.n	8002c42 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7adb      	ldrb	r3, [r3, #11]
 8002c22:	2bf2      	cmp	r3, #242	; 0xf2
 8002c24:	d10a      	bne.n	8002c3c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8002c26:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8002c2a:	f7ff fba0 	bl	800236e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8002c2e:	f241 0021 	movw	r0, #4129	; 0x1021
 8002c32:	f7ff fbbc 	bl	80023ae <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8002c36:	2306      	movs	r3, #6
 8002c38:	75bb      	strb	r3, [r7, #22]
 8002c3a:	e002      	b.n	8002c42 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	7adb      	ldrb	r3, [r3, #11]
 8002c40:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8002c42:	2309      	movs	r3, #9
 8002c44:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	889b      	ldrh	r3, [r3, #4]
 8002c4a:	0a1b      	lsrs	r3, r3, #8
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	889b      	ldrh	r3, [r3, #4]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	799b      	ldrb	r3, [r3, #6]
 8002c5e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	79db      	ldrb	r3, [r3, #7]
 8002c64:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7a1b      	ldrb	r3, [r3, #8]
 8002c6a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	7a5b      	ldrb	r3, [r3, #9]
 8002c70:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	7a9b      	ldrb	r3, [r3, #10]
 8002c76:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8002c78:	7dbb      	ldrb	r3, [r7, #22]
 8002c7a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7b1b      	ldrb	r3, [r3, #12]
 8002c80:	753b      	strb	r3, [r7, #20]
        break;
 8002c82:	e023      	b.n	8002ccc <SUBGRF_SetPacketParams+0x118>
    case PACKET_TYPE_BPSK:
        n = 1;
 8002c84:	2301      	movs	r3, #1
 8002c86:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	7b9b      	ldrb	r3, [r3, #14]
 8002c8c:	733b      	strb	r3, [r7, #12]
        break;
 8002c8e:	e01d      	b.n	8002ccc <SUBGRF_SetPacketParams+0x118>
    case PACKET_TYPE_LORA:
        n = 6;
 8002c90:	2306      	movs	r3, #6
 8002c92:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	8a1b      	ldrh	r3, [r3, #16]
 8002c98:	0a1b      	lsrs	r3, r3, #8
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8a1b      	ldrh	r3, [r3, #16]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7c9a      	ldrb	r2, [r3, #18]
 8002cac:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <SUBGRF_SetPacketParams+0x13c>)
 8002cae:	4611      	mov	r1, r2
 8002cb0:	7019      	strb	r1, [r3, #0]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	7e1b      	ldrb	r3, [r3, #24]
 8002cc2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	7e5b      	ldrb	r3, [r3, #25]
 8002cc8:	747b      	strb	r3, [r7, #17]
        break;
 8002cca:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	f107 030c 	add.w	r3, r7, #12
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	208c      	movs	r0, #140	; 0x8c
 8002cd8:	f000 f952 	bl	8002f80 <SUBGRF_WriteCommand>
 8002cdc:	e000      	b.n	8002ce0 <SUBGRF_SetPacketParams+0x12c>
        return;
 8002cde:	bf00      	nop
}
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	0800ae18 	.word	0x0800ae18
 8002cec:	20000b31 	.word	0x20000b31
 8002cf0:	20000b32 	.word	0x20000b32

08002cf4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	460a      	mov	r2, r1
 8002cfe:	71fb      	strb	r3, [r7, #7]
 8002d00:	4613      	mov	r3, r2
 8002d02:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8002d08:	79bb      	ldrb	r3, [r7, #6]
 8002d0a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8002d0c:	f107 030c 	add.w	r3, r7, #12
 8002d10:	2202      	movs	r2, #2
 8002d12:	4619      	mov	r1, r3
 8002d14:	208f      	movs	r0, #143	; 0x8f
 8002d16:	f000 f933 	bl	8002f80 <SUBGRF_WriteCommand>
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8002d2e:	f107 030c 	add.w	r3, r7, #12
 8002d32:	2202      	movs	r2, #2
 8002d34:	4619      	mov	r1, r3
 8002d36:	2013      	movs	r0, #19
 8002d38:	f000 f944 	bl	8002fc4 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8002d3c:	f7ff fd90 	bl	8002860 <SUBGRF_GetPacketType>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10d      	bne.n	8002d62 <SUBGRF_GetRxBufferStatus+0x3e>
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <SUBGRF_GetRxBufferStatus+0x54>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d108      	bne.n	8002d62 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8002d50:	f240 7002 	movw	r0, #1794	; 0x702
 8002d54:	f000 f878 	bl	8002e48 <SUBGRF_ReadRegister>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	e002      	b.n	8002d68 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8002d62:	7b3a      	ldrb	r2, [r7, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8002d68:	7b7a      	ldrb	r2, [r7, #13]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	701a      	strb	r2, [r3, #0]
}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000b32 	.word	0x20000b32

08002d7c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8002d84:	f107 030c 	add.w	r3, r7, #12
 8002d88:	2203      	movs	r2, #3
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	2014      	movs	r0, #20
 8002d8e:	f000 f919 	bl	8002fc4 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8002d92:	f7ff fd65 	bl	8002860 <SUBGRF_GetPacketType>
 8002d96:	4603      	mov	r3, r0
 8002d98:	461a      	mov	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <SUBGRF_GetPacketStatus+0x30>
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d013      	beq.n	8002dd2 <SUBGRF_GetPacketStatus+0x56>
 8002daa:	e02a      	b.n	8002e02 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8002dac:	7b3a      	ldrb	r2, [r7, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8002db2:	7b7b      	ldrb	r3, [r7, #13]
 8002db4:	425b      	negs	r3, r3
 8002db6:	105b      	asrs	r3, r3, #1
 8002db8:	b25a      	sxtb	r2, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8002dbe:	7bbb      	ldrb	r3, [r7, #14]
 8002dc0:	425b      	negs	r3, r3
 8002dc2:	105b      	asrs	r3, r3, #1
 8002dc4:	b25a      	sxtb	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
            break;
 8002dd0:	e020      	b.n	8002e14 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8002dd2:	7b3b      	ldrb	r3, [r7, #12]
 8002dd4:	425b      	negs	r3, r3
 8002dd6:	105b      	asrs	r3, r3, #1
 8002dd8:	b25a      	sxtb	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8002dde:	7b7b      	ldrb	r3, [r7, #13]
 8002de0:	b25b      	sxtb	r3, r3
 8002de2:	3302      	adds	r3, #2
 8002de4:	109b      	asrs	r3, r3, #2
 8002de6:	b25a      	sxtb	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8002dec:	7bbb      	ldrb	r3, [r7, #14]
 8002dee:	425b      	negs	r3, r3
 8002df0:	105b      	asrs	r3, r3, #1
 8002df2:	b25a      	sxtb	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8002df8:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <SUBGRF_GetPacketStatus+0xa0>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	611a      	str	r2, [r3, #16]
            break;
 8002e00:	e008      	b.n	8002e14 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8002e02:	2214      	movs	r2, #20
 8002e04:	2100      	movs	r1, #0
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f006 fd10 	bl	800982c <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	220f      	movs	r2, #15
 8002e10:	701a      	strb	r2, [r3, #0]
            break;
 8002e12:	bf00      	nop
    }
}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20000b34 	.word	0x20000b34

08002e20 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	460a      	mov	r2, r1
 8002e2a:	80fb      	strh	r3, [r7, #6]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8002e30:	1d7a      	adds	r2, r7, #5
 8002e32:	88f9      	ldrh	r1, [r7, #6]
 8002e34:	2301      	movs	r3, #1
 8002e36:	4803      	ldr	r0, [pc, #12]	; (8002e44 <SUBGRF_WriteRegister+0x24>)
 8002e38:	f004 f85e 	bl	8006ef8 <HAL_SUBGHZ_WriteRegisters>
}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000938 	.word	0x20000938

08002e48 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8002e52:	f107 020f 	add.w	r2, r7, #15
 8002e56:	88f9      	ldrh	r1, [r7, #6]
 8002e58:	2301      	movs	r3, #1
 8002e5a:	4804      	ldr	r0, [pc, #16]	; (8002e6c <SUBGRF_ReadRegister+0x24>)
 8002e5c:	f004 f8ab 	bl	8006fb6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000938 	.word	0x20000938

08002e70 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	6039      	str	r1, [r7, #0]
 8002e7a:	80fb      	strh	r3, [r7, #6]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e80:	f3ef 8310 	mrs	r3, PRIMASK
 8002e84:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e86:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002e88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e8a:	b672      	cpsid	i
}
 8002e8c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8002e8e:	88bb      	ldrh	r3, [r7, #4]
 8002e90:	88f9      	ldrh	r1, [r7, #6]
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	4806      	ldr	r0, [pc, #24]	; (8002eb0 <SUBGRF_WriteRegisters+0x40>)
 8002e96:	f004 f82f 	bl	8006ef8 <HAL_SUBGHZ_WriteRegisters>
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f383 8810 	msr	PRIMASK, r3
}
 8002ea4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000938 	.word	0x20000938

08002eb4 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	6039      	str	r1, [r7, #0]
 8002ebe:	80fb      	strh	r3, [r7, #6]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002eca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002ecc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ece:	b672      	cpsid	i
}
 8002ed0:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8002ed2:	88bb      	ldrh	r3, [r7, #4]
 8002ed4:	88f9      	ldrh	r1, [r7, #6]
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	4806      	ldr	r0, [pc, #24]	; (8002ef4 <SUBGRF_ReadRegisters+0x40>)
 8002eda:	f004 f86c 	bl	8006fb6 <HAL_SUBGHZ_ReadRegisters>
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f383 8810 	msr	PRIMASK, r3
}
 8002ee8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002eea:	bf00      	nop
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000938 	.word	0x20000938

08002ef8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	6039      	str	r1, [r7, #0]
 8002f02:	71fb      	strb	r3, [r7, #7]
 8002f04:	4613      	mov	r3, r2
 8002f06:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f08:	f3ef 8310 	mrs	r3, PRIMASK
 8002f0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002f10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f12:	b672      	cpsid	i
}
 8002f14:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8002f16:	79bb      	ldrb	r3, [r7, #6]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	79f9      	ldrb	r1, [r7, #7]
 8002f1c:	683a      	ldr	r2, [r7, #0]
 8002f1e:	4806      	ldr	r0, [pc, #24]	; (8002f38 <SUBGRF_WriteBuffer+0x40>)
 8002f20:	f004 f95d 	bl	80071de <HAL_SUBGHZ_WriteBuffer>
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f383 8810 	msr	PRIMASK, r3
}
 8002f2e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002f30:	bf00      	nop
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20000938 	.word	0x20000938

08002f3c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	6039      	str	r1, [r7, #0]
 8002f46:	71fb      	strb	r3, [r7, #7]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f50:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f52:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002f54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f56:	b672      	cpsid	i
}
 8002f58:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8002f5a:	79bb      	ldrb	r3, [r7, #6]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	79f9      	ldrb	r1, [r7, #7]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	4806      	ldr	r0, [pc, #24]	; (8002f7c <SUBGRF_ReadBuffer+0x40>)
 8002f64:	f004 f98e 	bl	8007284 <HAL_SUBGHZ_ReadBuffer>
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f383 8810 	msr	PRIMASK, r3
}
 8002f72:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002f74:	bf00      	nop
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000938 	.word	0x20000938

08002f80 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	71fb      	strb	r3, [r7, #7]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f90:	f3ef 8310 	mrs	r3, PRIMASK
 8002f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f96:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002f98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f9a:	b672      	cpsid	i
}
 8002f9c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8002f9e:	88bb      	ldrh	r3, [r7, #4]
 8002fa0:	79f9      	ldrb	r1, [r7, #7]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	4806      	ldr	r0, [pc, #24]	; (8002fc0 <SUBGRF_WriteCommand+0x40>)
 8002fa6:	f004 f867 	bl	8007078 <HAL_SUBGHZ_ExecSetCmd>
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f383 8810 	msr	PRIMASK, r3
}
 8002fb4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002fb6:	bf00      	nop
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20000938 	.word	0x20000938

08002fc4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	6039      	str	r1, [r7, #0]
 8002fce:	71fb      	strb	r3, [r7, #7]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fda:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002fdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fde:	b672      	cpsid	i
}
 8002fe0:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8002fe2:	88bb      	ldrh	r3, [r7, #4]
 8002fe4:	79f9      	ldrb	r1, [r7, #7]
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	4806      	ldr	r0, [pc, #24]	; (8003004 <SUBGRF_ReadCommand+0x40>)
 8002fea:	f004 f8a4 	bl	8007136 <HAL_SUBGHZ_ExecGetCmd>
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f383 8810 	msr	PRIMASK, r3
}
 8002ff8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8002ffa:	bf00      	nop
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000938 	.word	0x20000938

08003008 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	460a      	mov	r2, r1
 8003012:	71fb      	strb	r3, [r7, #7]
 8003014:	4613      	mov	r3, r2
 8003016:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800301c:	79bb      	ldrb	r3, [r7, #6]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d10d      	bne.n	800303e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d104      	bne.n	8003032 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8003028:	2302      	movs	r3, #2
 800302a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800302c:	2004      	movs	r0, #4
 800302e:	f000 f8e7 	bl	8003200 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	2b02      	cmp	r3, #2
 8003036:	d107      	bne.n	8003048 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8003038:	2303      	movs	r3, #3
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e004      	b.n	8003048 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800303e:	79bb      	ldrb	r3, [r7, #6]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff f8c7 	bl	80021de <RBI_ConfigRFSwitch>
}
 8003050:	bf00      	nop
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8003062:	2301      	movs	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8003066:	f7ff f8c8 	bl	80021fa <RBI_GetTxConfig>
 800306a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d016      	beq.n	80030a0 <SUBGRF_SetRfTxPower+0x48>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b02      	cmp	r3, #2
 8003076:	dc16      	bgt.n	80030a6 <SUBGRF_SetRfTxPower+0x4e>
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <SUBGRF_SetRfTxPower+0x2e>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d00a      	beq.n	800309a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8003084:	e00f      	b.n	80030a6 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8003086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308a:	2b0f      	cmp	r3, #15
 800308c:	dd02      	ble.n	8003094 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800308e:	2302      	movs	r3, #2
 8003090:	73fb      	strb	r3, [r7, #15]
            break;
 8003092:	e009      	b.n	80030a8 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
            break;
 8003098:	e006      	b.n	80030a8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800309a:	2301      	movs	r3, #1
 800309c:	73fb      	strb	r3, [r7, #15]
            break;
 800309e:	e003      	b.n	80030a8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80030a0:	2302      	movs	r3, #2
 80030a2:	73fb      	strb	r3, [r7, #15]
            break;
 80030a4:	e000      	b.n	80030a8 <SUBGRF_SetRfTxPower+0x50>
            break;
 80030a6:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80030a8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2202      	movs	r2, #2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fbdf 	bl	8002874 <SUBGRF_SetTxParams>
    //SUBGRF_SetTxParams( RFO_HP, power, RADIO_RAMP_40_US );
    return paSelect;
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2001      	movs	r0, #1
 80030ce:	4798      	blx	r3
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000b3c 	.word	0x20000b3c

080030dc <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80030e4:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2002      	movs	r0, #2
 80030ea:	4798      	blx	r3
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20000b3c 	.word	0x20000b3c

080030f8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2040      	movs	r0, #64	; 0x40
 8003106:	4798      	blx	r3
}
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000b3c 	.word	0x20000b3c

08003114 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_SUBGHZ_CADStatusCallback+0x18>
 8003126:	2b01      	cmp	r3, #1
 8003128:	d005      	beq.n	8003136 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800312a:	e00a      	b.n	8003142 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800312c:	4b07      	ldr	r3, [pc, #28]	; (800314c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2080      	movs	r0, #128	; 0x80
 8003132:	4798      	blx	r3
            break;
 8003134:	e005      	b.n	8003142 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800313e:	4798      	blx	r3
            break;
 8003140:	bf00      	nop
    }
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000b3c 	.word	0x20000b3c

08003150 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003160:	4798      	blx	r3
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000b3c 	.word	0x20000b3c

08003170 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2020      	movs	r0, #32
 800317e:	4798      	blx	r3
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20000b3c 	.word	0x20000b3c

0800318c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2004      	movs	r0, #4
 800319a:	4798      	blx	r3
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000b3c 	.word	0x20000b3c

080031a8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2008      	movs	r0, #8
 80031b6:	4798      	blx	r3
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000b3c 	.word	0x20000b3c

080031c4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80031cc:	4b03      	ldr	r3, [pc, #12]	; (80031dc <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2010      	movs	r0, #16
 80031d2:	4798      	blx	r3
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000b3c 	.word	0x20000b3c

080031e0 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80031f0:	4798      	blx	r3
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000b3c 	.word	0x20000b3c

08003200 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800320a:	f7ff f804 	bl	8002216 <RBI_IsDCDC>
 800320e:	4603      	mov	r3, r0
 8003210:	2b01      	cmp	r3, #1
 8003212:	d112      	bne.n	800323a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8003214:	f640 1023 	movw	r0, #2339	; 0x923
 8003218:	f7ff fe16 	bl	8002e48 <SUBGRF_ReadRegister>
 800321c:	4603      	mov	r3, r0
 800321e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	f023 0306 	bic.w	r3, r3, #6
 8003226:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8003228:	7bfa      	ldrb	r2, [r7, #15]
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	4313      	orrs	r3, r2
 800322e:	b2db      	uxtb	r3, r3
 8003230:	4619      	mov	r1, r3
 8003232:	f640 1023 	movw	r0, #2339	; 0x923
 8003236:	f7ff fdf3 	bl	8002e20 <SUBGRF_WriteRegister>
  }
}
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800324e:	2003      	movs	r0, #3
 8003250:	f000 f926 	bl	80034a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003254:	f003 fa12 	bl	800667c <HAL_RCC_GetHCLKFreq>
 8003258:	4603      	mov	r3, r0
 800325a:	4a09      	ldr	r2, [pc, #36]	; (8003280 <HAL_Init+0x3c>)
 800325c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800325e:	200f      	movs	r0, #15
 8003260:	f7fd fec4 	bl	8000fec <HAL_InitTick>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	71fb      	strb	r3, [r7, #7]
 800326e:	e001      	b.n	8003274 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003270:	f7fd fe9d 	bl	8000fae <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003274:	79fb      	ldrb	r3, [r7, #7]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000110 	.word	0x20000110

08003284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003288:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <HAL_IncTick+0x1c>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_IncTick+0x20>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4413      	add	r3, r2
 8003294:	4a03      	ldr	r2, [pc, #12]	; (80032a4 <HAL_IncTick+0x20>)
 8003296:	6013      	str	r3, [r2, #0]
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr
 80032a0:	20000124 	.word	0x20000124
 80032a4:	20000b40 	.word	0x20000b40

080032a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return uwTick;
 80032ac:	4b02      	ldr	r3, [pc, #8]	; (80032b8 <HAL_GetTick+0x10>)
 80032ae:	681b      	ldr	r3, [r3, #0]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	20000b40 	.word	0x20000b40

080032bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032c4:	f7ff fff0 	bl	80032a8 <HAL_GetTick>
 80032c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d005      	beq.n	80032e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_Delay+0x44>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032e2:	bf00      	nop
 80032e4:	f7ff ffe0 	bl	80032a8 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d8f7      	bhi.n	80032e4 <HAL_Delay+0x28>
  {
  }
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000124 	.word	0x20000124

08003304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003314:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <__NVIC_SetPriorityGrouping+0x44>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003320:	4013      	ands	r3, r2
 8003322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800332c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003336:	4a04      	ldr	r2, [pc, #16]	; (8003348 <__NVIC_SetPriorityGrouping+0x44>)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	60d3      	str	r3, [r2, #12]
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <__NVIC_GetPriorityGrouping+0x18>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	0a1b      	lsrs	r3, r3, #8
 8003356:	f003 0307 	and.w	r3, r3, #7
}
 800335a:	4618      	mov	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	2b00      	cmp	r3, #0
 8003378:	db0b      	blt.n	8003392 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	f003 021f 	and.w	r2, r3, #31
 8003380:	4906      	ldr	r1, [pc, #24]	; (800339c <__NVIC_EnableIRQ+0x34>)
 8003382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	2001      	movs	r0, #1
 800338a:	fa00 f202 	lsl.w	r2, r0, r2
 800338e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	e000e100 	.word	0xe000e100

080033a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	db12      	blt.n	80033d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	490a      	ldr	r1, [pc, #40]	; (80033e4 <__NVIC_DisableIRQ+0x44>)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2001      	movs	r0, #1
 80033c2:	fa00 f202 	lsl.w	r2, r0, r2
 80033c6:	3320      	adds	r3, #32
 80033c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80033cc:	f3bf 8f4f 	dsb	sy
}
 80033d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033d2:	f3bf 8f6f 	isb	sy
}
 80033d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	e000e100 	.word	0xe000e100

080033e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	6039      	str	r1, [r7, #0]
 80033f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	db0a      	blt.n	8003412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	490c      	ldr	r1, [pc, #48]	; (8003434 <__NVIC_SetPriority+0x4c>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	0112      	lsls	r2, r2, #4
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	440b      	add	r3, r1
 800340c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003410:	e00a      	b.n	8003428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4908      	ldr	r1, [pc, #32]	; (8003438 <__NVIC_SetPriority+0x50>)
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	3b04      	subs	r3, #4
 8003420:	0112      	lsls	r2, r2, #4
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	440b      	add	r3, r1
 8003426:	761a      	strb	r2, [r3, #24]
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	e000e100 	.word	0xe000e100
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	; 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f1c3 0307 	rsb	r3, r3, #7
 8003456:	2b04      	cmp	r3, #4
 8003458:	bf28      	it	cs
 800345a:	2304      	movcs	r3, #4
 800345c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3304      	adds	r3, #4
 8003462:	2b06      	cmp	r3, #6
 8003464:	d902      	bls.n	800346c <NVIC_EncodePriority+0x30>
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3b03      	subs	r3, #3
 800346a:	e000      	b.n	800346e <NVIC_EncodePriority+0x32>
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	f04f 32ff 	mov.w	r2, #4294967295
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43da      	mvns	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	401a      	ands	r2, r3
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003484:	f04f 31ff 	mov.w	r1, #4294967295
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	43d9      	mvns	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003494:	4313      	orrs	r3, r2
         );
}
 8003496:	4618      	mov	r0, r3
 8003498:	3724      	adds	r7, #36	; 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr

080034a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff ff2b 	bl	8003304 <__NVIC_SetPriorityGrouping>
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b086      	sub	sp, #24
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	4603      	mov	r3, r0
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034c4:	f7ff ff42 	bl	800334c <__NVIC_GetPriorityGrouping>
 80034c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	6978      	ldr	r0, [r7, #20]
 80034d0:	f7ff ffb4 	bl	800343c <NVIC_EncodePriority>
 80034d4:	4602      	mov	r2, r0
 80034d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff83 	bl	80033e8 <__NVIC_SetPriority>
}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff35 	bl	8003368 <__NVIC_EnableIRQ>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	4603      	mov	r3, r0
 800350e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ff43 	bl	80033a0 <__NVIC_DisableIRQ>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e02d      	b.n	8003590 <HAL_CRYP_Init+0x6e>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d106      	bne.n	800354e <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7fd f85f 	bl	800060c <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size (This bit field is do not care in the DES or TDES modes), data type and Algorithm */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 8003558:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6851      	ldr	r1, [r2, #4]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6892      	ldr	r2, [r2, #8]
 8003564:	4311      	orrs	r1, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6952      	ldr	r2, [r2, #20]
 800356a:	4311      	orrs	r1, r2
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	430b      	orrs	r3, r1
 8003572:	6013      	str	r3, [r2, #0]

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_CRYP_DeInit>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_CRYP_DeInit(CRYP_HandleTypeDef *hcryp)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_CRYP_DeInit+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e020      	b.n	80035ec <HAL_CRYP_DeInit+0x54>
  }

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset CrypInCount and CrypOutCount */
  hcryp->CrypInCount = 0;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->CrypOutCount = 0;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  hcryp->CrypHeaderCount = 0;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /* Disable the CRYP peripheral clock */
  __HAL_CRYP_DISABLE(hcryp);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
  hcryp->MspDeInitCallback(hcryp);

#else

  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_CRYP_MspDeInit(hcryp);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7fd f82d 	bl	8000634 <HAL_CRYP_MspDeInit>

#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_RESET;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hcryp);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_CRYP_Encrypt>:
  * @param  Output Pointer to the output buffer(ciphertext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d17c      	bne.n	800370a <HAL_CRYP_Encrypt+0x116>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process locked */
    __HAL_LOCK(hcryp);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_CRYP_Encrypt+0x32>
 8003622:	2302      	movs	r3, #2
 8003624:	e07a      	b.n	800371c <HAL_CRYP_Encrypt+0x128>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters*/
    hcryp->CrypInCount = 0U;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hcryp->pCrypInBuffPtr = Input;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <HAL_CRYP_Encrypt+0x6a>
    {
      hcryp->Size = Size * 4U;
 8003650:	88fb      	ldrh	r3, [r7, #6]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800365c:	e003      	b.n	8003666 <HAL_CRYP_Encrypt+0x72>
    }
    else
    {
      hcryp->Size = Size;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	88fa      	ldrh	r2, [r7, #6]
 8003662:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }

    /* Set the operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0218 	bic.w	r2, r2, #24
 8003674:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b29      	ldr	r3, [pc, #164]	; (8003724 <HAL_CRYP_Encrypt+0x130>)
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]

    switch (algo)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003688:	d023      	beq.n	80036d2 <HAL_CRYP_Encrypt+0xde>
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003690:	d826      	bhi.n	80036e0 <HAL_CRYP_Encrypt+0xec>
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	2b60      	cmp	r3, #96	; 0x60
 8003696:	d015      	beq.n	80036c4 <HAL_CRYP_Encrypt+0xd0>
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	2b60      	cmp	r3, #96	; 0x60
 800369c:	d820      	bhi.n	80036e0 <HAL_CRYP_Encrypt+0xec>
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b40      	cmp	r3, #64	; 0x40
 80036a2:	d008      	beq.n	80036b6 <HAL_CRYP_Encrypt+0xc2>
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d81a      	bhi.n	80036e0 <HAL_CRYP_Encrypt+0xec>
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d002      	beq.n	80036b6 <HAL_CRYP_Encrypt+0xc2>
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d114      	bne.n	80036e0 <HAL_CRYP_Encrypt+0xec>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 80036b6:	6a39      	ldr	r1, [r7, #32]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f8da 	bl	8003872 <CRYP_AES_Encrypt>
 80036be:	4603      	mov	r3, r0
 80036c0:	75fb      	strb	r3, [r7, #23]
        break;
 80036c2:	e016      	b.n	80036f2 <HAL_CRYP_Encrypt+0xfe>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 80036c4:	6a39      	ldr	r1, [r7, #32]
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fbc3 	bl	8003e52 <CRYP_AESGCM_Process>
 80036cc:	4603      	mov	r3, r0
 80036ce:	75fb      	strb	r3, [r7, #23]
        break;
 80036d0:	e00f      	b.n	80036f2 <HAL_CRYP_Encrypt+0xfe>

      case CRYP_AES_CCM:

        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 80036d2:	6a39      	ldr	r1, [r7, #32]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 fd64 	bl	80041a2 <CRYP_AESCCM_Process>
 80036da:	4603      	mov	r3, r0
 80036dc:	75fb      	strb	r3, [r7, #23]
        break;
 80036de:	e008      	b.n	80036f2 <HAL_CRYP_Encrypt+0xfe>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	75fb      	strb	r3, [r7, #23]
        break;
 80036f0:	bf00      	nop
    }

    if (status == HAL_OK)
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d110      	bne.n	800371a <HAL_CRYP_Encrypt+0x126>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003708:	e007      	b.n	800371a <HAL_CRYP_Encrypt+0x126>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	f043 0208 	orr.w	r2, r3, #8
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800371a:	7dfb      	ldrb	r3, [r7, #23]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	00010060 	.word	0x00010060

08003728 <HAL_CRYP_Decrypt>:
  * @param  Output Pointer to the output buffer(plaintext)
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t *Input, uint16_t Size, uint32_t *Output, uint32_t Timeout)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	4613      	mov	r3, r2
 8003736:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d17e      	bne.n	8003842 <HAL_CRYP_Decrypt+0x11a>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process locked */
    __HAL_LOCK(hcryp);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_CRYP_Decrypt+0x32>
 8003756:	2302      	movs	r3, #2
 8003758:	e07c      	b.n	8003854 <HAL_CRYP_Decrypt+0x12c>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/
    hcryp->CrypInCount = 0U;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	87da      	strh	r2, [r3, #62]	; 0x3e
    hcryp->CrypOutCount = 0U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hcryp->pCrypInBuffPtr = Input;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	635a      	str	r2, [r3, #52]	; 0x34
    hcryp->pCrypOutBuffPtr = Output;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	639a      	str	r2, [r3, #56]	; 0x38

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <HAL_CRYP_Decrypt+0x6a>
    {
      hcryp->Size = Size * 4U;
 8003784:	88fb      	ldrh	r3, [r7, #6]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8003790:	e003      	b.n	800379a <HAL_CRYP_Decrypt+0x72>
    }
    else
    {
      hcryp->Size = Size;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	88fa      	ldrh	r2, [r7, #6]
 8003796:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    }

    /* Set Decryption operating mode*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f023 0218 	bic.w	r2, r3, #24
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0210 	orr.w	r2, r2, #16
 80037ac:	601a      	str	r2, [r3, #0]

    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4b29      	ldr	r3, [pc, #164]	; (800385c <HAL_CRYP_Decrypt+0x134>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]

    switch (algo)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c0:	d023      	beq.n	800380a <HAL_CRYP_Decrypt+0xe2>
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c8:	d826      	bhi.n	8003818 <HAL_CRYP_Decrypt+0xf0>
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	2b60      	cmp	r3, #96	; 0x60
 80037ce:	d015      	beq.n	80037fc <HAL_CRYP_Decrypt+0xd4>
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2b60      	cmp	r3, #96	; 0x60
 80037d4:	d820      	bhi.n	8003818 <HAL_CRYP_Decrypt+0xf0>
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d008      	beq.n	80037ee <HAL_CRYP_Decrypt+0xc6>
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	2b40      	cmp	r3, #64	; 0x40
 80037e0:	d81a      	bhi.n	8003818 <HAL_CRYP_Decrypt+0xf0>
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_CRYP_Decrypt+0xc6>
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d114      	bne.n	8003818 <HAL_CRYP_Decrypt+0xf0>
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:

        /* AES decryption */
        status = CRYP_AES_Decrypt(hcryp, Timeout);
 80037ee:	6a39      	ldr	r1, [r7, #32]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f8c6 	bl	8003982 <CRYP_AES_Decrypt>
 80037f6:	4603      	mov	r3, r0
 80037f8:	75fb      	strb	r3, [r7, #23]
        break;
 80037fa:	e016      	b.n	800382a <HAL_CRYP_Decrypt+0x102>

      case CRYP_AES_GCM_GMAC:

        /* AES GCM decryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout) ;
 80037fc:	6a39      	ldr	r1, [r7, #32]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fb27 	bl	8003e52 <CRYP_AESGCM_Process>
 8003804:	4603      	mov	r3, r0
 8003806:	75fb      	strb	r3, [r7, #23]
        break;
 8003808:	e00f      	b.n	800382a <HAL_CRYP_Decrypt+0x102>

      case CRYP_AES_CCM:

        /* AES CCM decryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 800380a:	6a39      	ldr	r1, [r7, #32]
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 fcc8 	bl	80041a2 <CRYP_AESCCM_Process>
 8003812:	4603      	mov	r3, r0
 8003814:	75fb      	strb	r3, [r7, #23]
        break;
 8003816:	e008      	b.n	800382a <HAL_CRYP_Decrypt+0x102>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381c:	f043 0220 	orr.w	r2, r3, #32
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
        status = HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	75fb      	strb	r3, [r7, #23]
        break;
 8003828:	bf00      	nop
    }

    if (status == HAL_OK)
 800382a:	7dfb      	ldrb	r3, [r7, #23]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d110      	bne.n	8003852 <HAL_CRYP_Decrypt+0x12a>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked */
      __HAL_UNLOCK(hcryp);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003840:	e007      	b.n	8003852 <HAL_CRYP_Decrypt+0x12a>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003846:	f043 0208 	orr.w	r2, r3, #8
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003852:	7dfb      	ldrb	r3, [r7, #23]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	00010060 	.word	0x00010060

08003860 <HAL_CRYP_ErrorCallback>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CRYP_ErrorCallback can be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <CRYP_AES_Encrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 800387c:	2301      	movs	r3, #1
 800387e:	60bb      	str	r3, [r7, #8]

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)|| (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d003      	beq.n	8003890 <CRYP_AES_Encrypt+0x1e>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388c:	2b04      	cmp	r3, #4
 800388e:	d109      	bne.n	80038a4 <CRYP_AES_Encrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003894:	2b01      	cmp	r3, #1
 8003896:	d102      	bne.n	800389e <CRYP_AES_Encrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	e002      	b.n	80038a4 <CRYP_AES_Encrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d122      	bne.n	80038f0 <CRYP_AES_Encrypt+0x7e>
  {
    /*  Set the Key*/
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	4619      	mov	r1, r3
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fa6c 	bl	8003d8e <CRYP_SetKey>

    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d022      	beq.n	8003904 <CRYP_AES_Encrypt+0x92>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6852      	ldr	r2, [r2, #4]
 80038d4:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6892      	ldr	r2, [r2, #8]
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68d2      	ldr	r2, [r2, #12]
 80038ec:	621a      	str	r2, [r3, #32]
 80038ee:	e009      	b.n	8003904 <CRYP_AES_Encrypt+0x92>
    }
  } /* if (DoKeyIVConfig == 1U) */
  else
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d105      	bne.n	8003904 <CRYP_AES_Encrypt+0x92>
    {
      /* Set the Key */
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	4619      	mov	r1, r3
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fa45 	bl	8003d8e <CRYP_SetKey>
    }
  }
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f042 0201 	orr.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391e:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003926:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8003928:	e00a      	b.n	8003940 <CRYP_AES_Encrypt+0xce>
  {
    /* Write plain Ddta and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 800392a:	6839      	ldr	r1, [r7, #0]
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f976 	bl	8003c1e <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003936:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800393e:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	b29b      	uxth	r3, r3
 800394a:	89fa      	ldrh	r2, [r7, #14]
 800394c:	429a      	cmp	r2, r3
 800394e:	d207      	bcs.n	8003960 <CRYP_AES_Encrypt+0xee>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	b29b      	uxth	r3, r3
 800395a:	89ba      	ldrh	r2, [r7, #12]
 800395c:	429a      	cmp	r2, r3
 800395e:	d3e4      	bcc.n	800392a <CRYP_AES_Encrypt+0xb8>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Return function status */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <CRYP_AES_Decrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout Specify Timeout value
  * @retval HAL status
*/
static HAL_StatusTypeDef CRYP_AES_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 800398c:	2301      	movs	r3, #1
 800398e:	60bb      	str	r3, [r7, #8]

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	2b01      	cmp	r3, #1
 8003996:	d003      	beq.n	80039a0 <CRYP_AES_Decrypt+0x1e>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	2b04      	cmp	r3, #4
 800399e:	d109      	bne.n	80039b4 <CRYP_AES_Decrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d102      	bne.n	80039ae <CRYP_AES_Decrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	e002      	b.n	80039b4 <CRYP_AES_Decrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (DoKeyIVConfig == 1U)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	f040 8086 	bne.w	8003ac8 <CRYP_AES_Decrypt+0x146>
  {
    /*  Key preparation for ECB/CBC */
    if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	d05d      	beq.n	8003a80 <CRYP_AES_Decrypt+0xfe>
    {
      if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d149      	bne.n	8003a62 <CRYP_AES_Decrypt+0xe0>
      {
        /* Set key preparation for decryption operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f023 0218 	bic.w	r2, r3, #24
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0208 	orr.w	r2, r2, #8
 80039e0:	601a      	str	r2, [r3, #0]

        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	4619      	mov	r1, r3
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f9d0 	bl	8003d8e <CRYP_SetKey>

        /* Enable CRYP */
        __HAL_CRYP_ENABLE(hcryp);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0201 	orr.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80039fe:	6839      	ldr	r1, [r7, #0]
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 ff51 	bl	80048a8 <CRYP_WaitOnCCFlag>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d017      	beq.n	8003a3c <CRYP_AES_Decrypt+0xba>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0201 	bic.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

          /* Change state & error code*/
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	f043 0210 	orr.w	r2, r3, #16
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0ec      	b.n	8003c16 <CRYP_AES_Decrypt+0x294>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a4a:	601a      	str	r2, [r3, #0]

        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 0218 	bic.w	r2, r3, #24
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0210 	orr.w	r2, r2, #16
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	e014      	b.n	8003a8c <CRYP_AES_Decrypt+0x10a>
      }
      else /*Mode 4 : decryption & Key preparation*/
      {
        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	4619      	mov	r1, r3
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f990 	bl	8003d8e <CRYP_SetKey>

        /* Set decryption & Key preparation operating mode*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0218 	orr.w	r2, r2, #24
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e005      	b.n	8003a8c <CRYP_AES_Decrypt+0x10a>
      }
    }
    else  /*Algorithm CTR */
    {
      /*  Set the Key*/
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	4619      	mov	r1, r3
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f981 	bl	8003d8e <CRYP_SetKey>
    }

    /* Set IV */
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 8085 	beq.w	8003ba0 <CRYP_AES_Decrypt+0x21e>
    {
      /* Set the Initialization Vector*/
      hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	62da      	str	r2, [r3, #44]	; 0x2c
      hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6852      	ldr	r2, [r2, #4]
 8003aac:	629a      	str	r2, [r3, #40]	; 0x28
      hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6892      	ldr	r2, [r2, #8]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24
      hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68d2      	ldr	r2, [r2, #12]
 8003ac4:	621a      	str	r2, [r3, #32]
 8003ac6:	e06b      	b.n	8003ba0 <CRYP_AES_Decrypt+0x21e>
    }
  } /* if (DoKeyIVConfig == 1U) */
  else /* if (dokeyivconfig == 0U) */
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d167      	bne.n	8003ba0 <CRYP_AES_Decrypt+0x21e>
    {
      /*  Key preparation for ECB/CBC */
      if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	2b40      	cmp	r3, #64	; 0x40
 8003ad6:	d05d      	beq.n	8003b94 <CRYP_AES_Decrypt+0x212>
      {
        if (hcryp->AutoKeyDerivation == DISABLE)/*Mode 2 Key preparation*/
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d149      	bne.n	8003b76 <CRYP_AES_Decrypt+0x1f4>
        {
          /* Set key preparation for decryption operating mode*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 0218 	bic.w	r2, r3, #24
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 0208 	orr.w	r2, r2, #8
 8003af4:	601a      	str	r2, [r3, #0]
          
          /*  Set the Key*/
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	4619      	mov	r1, r3
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f946 	bl	8003d8e <CRYP_SetKey>
          
          /* Enable CRYP */
          __HAL_CRYP_ENABLE(hcryp);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0201 	orr.w	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
          
          /* Wait for CCF flag to be raised */
          if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003b12:	6839      	ldr	r1, [r7, #0]
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fec7 	bl	80048a8 <CRYP_WaitOnCCFlag>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d017      	beq.n	8003b50 <CRYP_AES_Decrypt+0x1ce>
          {
            /* Disable the CRYP peripheral clock */
            __HAL_CRYP_DISABLE(hcryp);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0201 	bic.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
            
            /* Change state & error code*/
            hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	f043 0210 	orr.w	r2, r3, #16
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54
            hcryp->State = HAL_CRYP_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            
            /* Process unlocked */
            __HAL_UNLOCK(hcryp);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e062      	b.n	8003c16 <CRYP_AES_Decrypt+0x294>
          }
          /* Clear CCF Flag */
          __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b5e:	601a      	str	r2, [r3, #0]
          
          /* Return to decryption operating mode(Mode 3)*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 0218 	bic.w	r2, r3, #24
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0210 	orr.w	r2, r2, #16
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	e014      	b.n	8003ba0 <CRYP_AES_Decrypt+0x21e>
        }
        else /*Mode 4 : decryption & Key preparation*/
        {
          /*  Set the Key*/
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f906 	bl	8003d8e <CRYP_SetKey>
          
          /* Set decryption & Key preparation operating mode*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION_DECRYPT);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0218 	orr.w	r2, r2, #24
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e005      	b.n	8003ba0 <CRYP_AES_Decrypt+0x21e>
        }
      }
      else  /*Algorithm CTR */
      {
        /*  Set the Key*/
        CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f8f7 	bl	8003d8e <CRYP_SetKey>
      }
    }
  }
 
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0201 	orr.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bba:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bc2:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8003bc4:	e00a      	b.n	8003bdc <CRYP_AES_Decrypt+0x25a>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8003bc6:	6839      	ldr	r1, [r7, #0]
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f828 	bl	8003c1e <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd2:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bda:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003be2:	089b      	lsrs	r3, r3, #2
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	89fa      	ldrh	r2, [r7, #14]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d207      	bcs.n	8003bfc <CRYP_AES_Decrypt+0x27a>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003bf2:	089b      	lsrs	r3, r3, #2
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	89ba      	ldrh	r2, [r7, #12]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d3e4      	bcc.n	8003bc6 <CRYP_AES_Decrypt+0x244>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0201 	bic.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Return function status */
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003c1e:	b580      	push	{r7, lr}
 8003c20:	b088      	sub	sp, #32
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	6078      	str	r0, [r7, #4]
 8003c26:	6039      	str	r1, [r7, #0]

  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t i;

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	441a      	add	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3301      	adds	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	441a      	add	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3301      	adds	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	441a      	add	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	441a      	add	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003cb8:	6839      	ldr	r1, [r7, #0]
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fdf4 	bl	80048a8 <CRYP_WaitOnCCFlag>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d018      	beq.n	8003cf8 <CRYP_AES_ProcessData+0xda>
  {
    /* Disable the CRYP peripheral clock */
    __HAL_CRYP_DISABLE(hcryp);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

    /* Change state */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	f043 0210 	orr.w	r2, r3, #16
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
    hcryp->State = HAL_CRYP_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Process unlocked */
    __HAL_UNLOCK(hcryp);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /*Call registered error callback*/
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff fdb4 	bl	8003860 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d06:	601a      	str	r2, [r3, #0]

  /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61fb      	str	r3, [r7, #28]
 8003d0c:	e00b      	b.n	8003d26 <CRYP_AES_ProcessData+0x108>
  {
    temp[i] = hcryp->Instance->DOUTR;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	3320      	adds	r3, #32
 8003d1a:	443b      	add	r3, r7
 8003d1c:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < 4U; i++)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	3301      	adds	r3, #1
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d9f0      	bls.n	8003d0e <CRYP_AES_ProcessData+0xf0>
  }
  i= 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8003d30:	e01a      	b.n	8003d68 <CRYP_AES_ProcessData+0x14a>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	441a      	add	r2, r3
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	3320      	adds	r3, #32
 8003d48:	443b      	add	r3, r7
 8003d4a:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8003d4e:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3301      	adds	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    i++;
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	3301      	adds	r3, #1
 8003d66:	61fb      	str	r3, [r7, #28]
  while((hcryp->CrypOutCount < ((hcryp->Size + 3U)/4U)) && (i<4U))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003d78:	3303      	adds	r3, #3
 8003d7a:	089b      	lsrs	r3, r3, #2
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d202      	bcs.n	8003d86 <CRYP_AES_ProcessData+0x168>
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d9d5      	bls.n	8003d32 <CRYP_AES_ProcessData+0x114>
  }
}
 8003d86:	bf00      	nop
 8003d88:	3720      	adds	r7, #32
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <CRYP_SetKey>:
  * @note   If pKey is NULL, the Key registers are not written. This configuration
  *         occurs when the key is written out of HAL scope.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	6039      	str	r1, [r7, #0]
  if (hcryp->Init.pKey != NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d050      	beq.n	8003e42 <CRYP_SetKey+0xb4>
  {
    switch (KeySize)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d034      	beq.n	8003e10 <CRYP_SetKey+0x82>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dac:	d14b      	bne.n	8003e46 <CRYP_SetKey+0xb8>
    {
      case CRYP_KEYSIZE_256B:
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68da      	ldr	r2, [r3, #12]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	63da      	str	r2, [r3, #60]	; 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6852      	ldr	r2, [r2, #4]
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6892      	ldr	r2, [r2, #8]
 8003dd0:	635a      	str	r2, [r3, #52]	; 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68d2      	ldr	r2, [r2, #12]
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6912      	ldr	r2, [r2, #16]
 8003de8:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6952      	ldr	r2, [r2, #20]
 8003df4:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6992      	ldr	r2, [r2, #24]
 8003e00:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69d2      	ldr	r2, [r2, #28]
 8003e0c:	611a      	str	r2, [r3, #16]
        break;
 8003e0e:	e01b      	b.n	8003e48 <CRYP_SetKey+0xba>
      case CRYP_KEYSIZE_128B:
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6852      	ldr	r2, [r2, #4]
 8003e26:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6892      	ldr	r2, [r2, #8]
 8003e32:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68d2      	ldr	r2, [r2, #12]
 8003e3e:	611a      	str	r2, [r3, #16]

        break;
 8003e40:	e002      	b.n	8003e48 <CRYP_SetKey+0xba>
      default:
        break;
    }
  }
 8003e42:	bf00      	nop
 8003e44:	e000      	b.n	8003e48 <CRYP_SetKey+0xba>
        break;
 8003e46:	bf00      	nop
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bc80      	pop	{r7}
 8003e50:	4770      	bx	lr

08003e52 <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b08e      	sub	sp, #56	; 0x38
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8003e68:	2301      	movs	r3, #1
 8003e6a:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d118      	bne.n	8003ea6 <CRYP_AESGCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d10a      	bne.n	8003e92 <CRYP_AESGCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8003e8a:	441a      	add	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e90:	e00f      	b.n	8003eb2 <CRYP_AESGCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ea4:	e005      	b.n	8003eb2 <CRYP_AESGCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003eac:	461a      	mov	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d16d      	bne.n	8003f94 <CRYP_AESGCM_Process+0x142>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	879a      	strh	r2, [r3, #60]	; 0x3c

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8003ecc:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ff5a 	bl	8003d8e <CRYP_SetKey>

    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6852      	ldr	r2, [r2, #4]
 8003ef0:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6892      	ldr	r2, [r2, #8]
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68d2      	ldr	r2, [r2, #12]
 8003f08:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003f1a:	6839      	ldr	r1, [r7, #0]
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fcc3 	bl	80048a8 <CRYP_WaitOnCCFlag>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00f      	beq.n	8003f48 <CRYP_AESGCM_Process+0xf6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2c:	f043 0210 	orr.w	r2, r3, #16
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e128      	b.n	800419a <CRYP_AESGCM_Process+0x348>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f56:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8003f58:	6839      	ldr	r1, [r7, #0]
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 face 	bl	80044fc <CRYP_GCMCCM_SetHeaderPhase>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <CRYP_AESGCM_Process+0x118>
    {
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e117      	b.n	800419a <CRYP_AESGCM_Process+0x348>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f82:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f92:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <CRYP_AESGCM_Process+0x15a>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 8003fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa6:	f023 0303 	bic.w	r3, r3, #3
 8003faa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fac:	f7ff f97c 	bl	80032a8 <HAL_GetTick>
 8003fb0:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output Data */
  incount = hcryp->CrypInCount;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8003fc4:	e033      	b.n	800402e <CRYP_AESGCM_Process+0x1dc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8003fc6:	6839      	ldr	r1, [r7, #0]
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff fe28 	bl	8003c1e <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d022      	beq.n	800401c <CRYP_AESGCM_Process+0x1ca>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fd6:	f7ff f967 	bl	80032a8 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d302      	bcc.n	8003fec <CRYP_AESGCM_Process+0x19a>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d117      	bne.n	800401c <CRYP_AESGCM_Process+0x1ca>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0201 	bic.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	f043 0210 	orr.w	r2, r3, #16
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0be      	b.n	800419a <CRYP_AESGCM_Process+0x348>
      }
    }
    incount = hcryp->CrypInCount;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004020:	b29b      	uxth	r3, r3
 8004022:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800402a:	b29b      	uxth	r3, r3
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 800402e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004032:	429a      	cmp	r2, r3
 8004034:	d203      	bcs.n	800403e <CRYP_AESGCM_Process+0x1ec>
 8004036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403a:	429a      	cmp	r2, r3
 800403c:	d3c3      	bcc.n	8003fc6 <CRYP_AESGCM_Process+0x174>
  }

  if ((hcryp->Size % 16U) != 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80a4 	beq.w	8004198 <CRYP_AESGCM_Process+0x346>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	b29b      	uxth	r3, r3
 800405a:	3301      	adds	r3, #1
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	61bb      	str	r3, [r7, #24]

    /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0318 	and.w	r3, r3, #24
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10a      	bne.n	800408c <CRYP_AESGCM_Process+0x23a>
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	051a      	lsls	r2, r3, #20
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	601a      	str	r2, [r3, #0]
    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d105      	bne.n	80040a2 <CRYP_AESGCM_Process+0x250>
    {
      lastwordsize = (16U - npblb) / 4U;
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f1c3 0310 	rsb	r3, r3, #16
 800409c:	089b      	lsrs	r3, r3, #2
 800409e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a0:	e005      	b.n	80040ae <CRYP_AESGCM_Process+0x25c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	f1c3 0310 	rsb	r3, r3, #16
 80040a8:	089b      	lsrs	r3, r3, #2
 80040aa:	3301      	adds	r3, #1
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /*  last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 80040ae:	2300      	movs	r3, #0
 80040b0:	633b      	str	r3, [r7, #48]	; 0x30
 80040b2:	e014      	b.n	80040de <CRYP_AESGCM_Process+0x28c>
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040bc:	b29b      	uxth	r3, r3
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	441a      	add	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6812      	ldr	r2, [r2, #0]
 80040c8:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3301      	adds	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (index = 0U; index < lastwordsize; index ++)
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	3301      	adds	r3, #1
 80040dc:	633b      	str	r3, [r7, #48]	; 0x30
 80040de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d3e6      	bcc.n	80040b4 <CRYP_AESGCM_Process+0x262>
    }
    while (index < 4U)
 80040e6:	e006      	b.n	80040f6 <CRYP_AESGCM_Process+0x2a4>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR  = 0U;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2200      	movs	r2, #0
 80040ee:	609a      	str	r2, [r3, #8]
      index++;
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	3301      	adds	r3, #1
 80040f4:	633b      	str	r3, [r7, #48]	; 0x30
    while (index < 4U)
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d9f5      	bls.n	80040e8 <CRYP_AESGCM_Process+0x296>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80040fc:	6839      	ldr	r1, [r7, #0]
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fbd2 	bl	80048a8 <CRYP_WaitOnCCFlag>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <CRYP_AESGCM_Process+0x2ce>
    {
      hcryp->State = HAL_CRYP_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      __HAL_UNLOCK(hcryp);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff fba0 	bl	8003860 <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800412e:	601a      	str	r2, [r3, #0]

    /*Read the output block from the output FIFO */
    for (index = 0U; index < 4U; index++)
 8004130:	2300      	movs	r3, #0
 8004132:	633b      	str	r3, [r7, #48]	; 0x30
 8004134:	e00b      	b.n	800414e <CRYP_AESGCM_Process+0x2fc>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[index] = hcryp->Instance->DOUTR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	3338      	adds	r3, #56	; 0x38
 8004142:	443b      	add	r3, r7
 8004144:	f843 2c30 	str.w	r2, [r3, #-48]
    for (index = 0U; index < 4U; index++)
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	3301      	adds	r3, #1
 800414c:	633b      	str	r3, [r7, #48]	; 0x30
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	2b03      	cmp	r3, #3
 8004152:	d9f0      	bls.n	8004136 <CRYP_AESGCM_Process+0x2e4>
    }
    for (index = 0U; index < lastwordsize; index++)
 8004154:	2300      	movs	r3, #0
 8004156:	633b      	str	r3, [r7, #48]	; 0x30
 8004158:	e01a      	b.n	8004190 <CRYP_AESGCM_Process+0x33e>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004164:	b29b      	uxth	r3, r3
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	441a      	add	r2, r3
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	3338      	adds	r3, #56	; 0x38
 8004170:	443b      	add	r3, r7
 8004172:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8004176:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800417e:	b29b      	uxth	r3, r3
 8004180:	3301      	adds	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (index = 0U; index < lastwordsize; index++)
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	3301      	adds	r3, #1
 800418e:	633b      	str	r3, [r7, #48]	; 0x30
 8004190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	429a      	cmp	r2, r3
 8004196:	d3e0      	bcc.n	800415a <CRYP_AESGCM_Process+0x308>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3738      	adds	r7, #56	; 0x38
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b08e      	sub	sp, #56	; 0x38
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U) ;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80041b2:	089b      	lsrs	r3, r3, #2
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t npblb;
  uint32_t lastwordsize;
  uint32_t temp[4] ;  /* Temporary CrypOutBuff */
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t DoKeyIVConfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 80041b8:	2301      	movs	r3, #1
 80041ba:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d118      	bne.n	80041f6 <CRYP_AESCCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d10a      	bne.n	80041e2 <CRYP_AESCCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      DoKeyIVConfig = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 80041da:	441a      	add	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	65da      	str	r2, [r3, #92]	; 0x5c
 80041e0:	e00f      	b.n	8004202 <CRYP_AESCCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	659a      	str	r2, [r3, #88]	; 0x58
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80041ee:	461a      	mov	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80041f4:	e005      	b.n	8004202 <CRYP_AESCCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80041fc:	461a      	mov	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  if (DoKeyIVConfig == 1U)
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d16d      	bne.n	80042e4 <CRYP_AESCCM_Process+0x142>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	879a      	strh	r2, [r3, #60]	; 0x3c

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800421c:	601a      	str	r2, [r3, #0]

    /* Set the key */
    CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff fdb2 	bl	8003d8e <CRYP_SetKey>

    /* Set the initialization vector (IV) with B0 */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1a      	ldr	r2, [r3, #32]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	62da      	str	r2, [r3, #44]	; 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1a      	ldr	r2, [r3, #32]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6852      	ldr	r2, [r2, #4]
 8004240:	629a      	str	r2, [r3, #40]	; 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1a      	ldr	r2, [r3, #32]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6892      	ldr	r2, [r2, #8]
 800424c:	625a      	str	r2, [r3, #36]	; 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1a      	ldr	r2, [r3, #32]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68d2      	ldr	r2, [r2, #12]
 8004258:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0201 	orr.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800426a:	6839      	ldr	r1, [r7, #0]
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fb1b 	bl	80048a8 <CRYP_WaitOnCCFlag>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00f      	beq.n	8004298 <CRYP_AESCCM_Process+0xf6>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800427c:	f043 0210 	orr.w	r2, r3, #16
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e12d      	b.n	80044f4 <CRYP_AESCCM_Process+0x352>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042a6:	601a      	str	r2, [r3, #0]

    /************************ Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 80042a8:	6839      	ldr	r1, [r7, #0]
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f926 	bl	80044fc <CRYP_GCMCCM_SetHeaderPhase>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <CRYP_AESCCM_Process+0x118>
    {
      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e11c      	b.n	80044f4 <CRYP_AESCCM_Process+0x352>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2202      	movs	r2, #2
 80042be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Select payload phase once the header phase is performed */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042d2:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80042e2:	601a      	str	r2, [r3, #0]

  } /* if (DoKeyIVConfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <CRYP_AESCCM_Process+0x15a>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U) ;
 80042f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f6:	f023 0303 	bic.w	r3, r3, #3
 80042fa:	637b      	str	r3, [r7, #52]	; 0x34
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80042fc:	f7fe ffd4 	bl	80032a8 <HAL_GetTick>
 8004300:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output data */
  incount = hcryp->CrypInCount;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004306:	b29b      	uxth	r3, r3
 8004308:	62bb      	str	r3, [r7, #40]	; 0x28
  outcount = hcryp->CrypOutCount;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004310:	b29b      	uxth	r3, r3
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8004314:	e033      	b.n	800437e <CRYP_AESCCM_Process+0x1dc>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8004316:	6839      	ldr	r1, [r7, #0]
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff fc80 	bl	8003c1e <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d022      	beq.n	800436c <CRYP_AESCCM_Process+0x1ca>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) ||(Timeout == 0U))
 8004326:	f7fe ffbf 	bl	80032a8 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d302      	bcc.n	800433c <CRYP_AESCCM_Process+0x19a>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d117      	bne.n	800436c <CRYP_AESCCM_Process+0x1ca>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0201 	bic.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004350:	f043 0210 	orr.w	r2, r3, #16
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e0c3      	b.n	80044f4 <CRYP_AESCCM_Process+0x352>
      }
    }
    incount = hcryp->CrypInCount;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004370:	b29b      	uxth	r3, r3
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
    outcount = hcryp->CrypOutCount;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800437a:	b29b      	uxth	r3, r3
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 800437e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004382:	429a      	cmp	r2, r3
 8004384:	d203      	bcs.n	800438e <CRYP_AESCCM_Process+0x1ec>
 8004386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438a:	429a      	cmp	r2, r3
 800438c:	d3c3      	bcc.n	8004316 <CRYP_AESCCM_Process+0x174>
  }

  if ((hcryp->Size % 16U) != 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80a9 	beq.w	80044f2 <CRYP_AESCCM_Process+0x350>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80043a6:	091b      	lsrs	r3, r3, #4
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3301      	adds	r3, #1
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]

    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0318 	and.w	r3, r3, #24
 80043c2:	2b10      	cmp	r3, #16
 80043c4:	d10a      	bne.n	80043dc <CRYP_AESCCM_Process+0x23a>
    {
      /* Set Npblb in case of AES CCM payload decryption to get right tag  */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	051a      	lsls	r2, r3, #20
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	601a      	str	r2, [r3, #0]

    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d105      	bne.n	80043f2 <CRYP_AESCCM_Process+0x250>
    {
      lastwordsize = (16U - npblb) / 4U;
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	f1c3 0310 	rsb	r3, r3, #16
 80043ec:	089b      	lsrs	r3, r3, #2
 80043ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043f0:	e005      	b.n	80043fe <CRYP_AESCCM_Process+0x25c>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	f1c3 0310 	rsb	r3, r3, #16
 80043f8:	089b      	lsrs	r3, r3, #2
 80043fa:	3301      	adds	r3, #1
 80043fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Write the last input block in the IN FIFO */
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 80043fe:	2300      	movs	r3, #0
 8004400:	633b      	str	r3, [r7, #48]	; 0x30
 8004402:	e014      	b.n	800442e <CRYP_AESCCM_Process+0x28c>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440c:	b29b      	uxth	r3, r3
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	441a      	add	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800441e:	b29b      	uxth	r3, r3
 8004420:	3301      	adds	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	87da      	strh	r2, [r3, #62]	; 0x3e
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800442a:	3301      	adds	r3, #1
 800442c:	633b      	str	r3, [r7, #48]	; 0x30
 800442e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004432:	429a      	cmp	r2, r3
 8004434:	d3e6      	bcc.n	8004404 <CRYP_AESCCM_Process+0x262>
    }

    /* Pad the data with zeros to have a complete block */
    while (loopcounter < 4U)
 8004436:	e006      	b.n	8004446 <CRYP_AESCCM_Process+0x2a4>
    {
      hcryp->Instance->DINR  = 0U;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2200      	movs	r2, #0
 800443e:	609a      	str	r2, [r3, #8]
      loopcounter++;
 8004440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004442:	3301      	adds	r3, #1
 8004444:	633b      	str	r3, [r7, #48]	; 0x30
    while (loopcounter < 4U)
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	2b03      	cmp	r3, #3
 800444a:	d9f5      	bls.n	8004438 <CRYP_AESCCM_Process+0x296>
    }
    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800444c:	6839      	ldr	r1, [r7, #0]
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa2a 	bl	80048a8 <CRYP_WaitOnCCFlag>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00f      	beq.n	800447a <CRYP_AESCCM_Process+0x2d8>
    {
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445e:	f043 0210 	orr.w	r2, r3, #16
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	655a      	str	r2, [r3, #84]	; 0x54
      hcryp->State = HAL_CRYP_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process unlocked & return error */
      __HAL_UNLOCK(hcryp);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e03c      	b.n	80044f4 <CRYP_AESCCM_Process+0x352>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004488:	601a      	str	r2, [r3, #0]

    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 800448a:	2300      	movs	r3, #0
 800448c:	633b      	str	r3, [r7, #48]	; 0x30
 800448e:	e00b      	b.n	80044a8 <CRYP_AESCCM_Process+0x306>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then get CrypOutBuff from temporary buffer */
      temp[loopcounter] = hcryp->Instance->DOUTR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	3338      	adds	r3, #56	; 0x38
 800449c:	443b      	add	r3, r7
 800449e:	f843 2c30 	str.w	r2, [r3, #-48]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	3301      	adds	r3, #1
 80044a6:	633b      	str	r3, [r7, #48]	; 0x30
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d9f0      	bls.n	8004490 <CRYP_AESCCM_Process+0x2ee>
    }
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	633b      	str	r3, [r7, #48]	; 0x30
 80044b2:	e01a      	b.n	80044ea <CRYP_AESCCM_Process+0x348>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044be:	b29b      	uxth	r3, r3
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	441a      	add	r2, r3
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	3338      	adds	r3, #56	; 0x38
 80044ca:	443b      	add	r3, r7
 80044cc:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80044d0:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3301      	adds	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    for (loopcounter = 0U; loopcounter<lastwordsize; loopcounter++)
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	3301      	adds	r3, #1
 80044e8:	633b      	str	r3, [r7, #48]	; 0x30
 80044ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d3e0      	bcc.n	80044b4 <CRYP_AESCCM_Process+0x312>
    }
  }

  /* Return function status */
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3738      	adds	r7, #56	; 0x38
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80044fc:	b5b0      	push	{r4, r5, r7, lr}
 80044fe:	b092      	sub	sp, #72	; 0x48
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 8004506:	4b8c      	ldr	r3, [pc, #560]	; (8004738 <CRYP_GCMCCM_SetHeaderPhase+0x23c>)
 8004508:	f107 040c 	add.w	r4, r7, #12
 800450c:	461d      	mov	r5, r3
 800450e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004516:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800451a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                       0x0U, 0x0000FF00U, 0x0000FFFFU, 0xFF00FFFFU,  /* 16-bit data type */
                       0x0U, 0x000000FFU, 0x0000FFFFU, 0x00FFFFFFU}; /*  8-bit data type */

  /***************************** Header phase for GCM/GMAC or CCM *********************************/
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004522:	2b00      	cmp	r3, #0
 8004524:	d104      	bne.n	8004530 <CRYP_GCMCCM_SetHeaderPhase+0x34>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	643b      	str	r3, [r7, #64]	; 0x40
 800452e:	e002      	b.n	8004536 <CRYP_GCMCCM_SetHeaderPhase+0x3a>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	643b      	str	r3, [r7, #64]	; 0x40
  }

  if ((size_in_bytes != 0U))
 8004536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8192 	beq.w	8004862 <CRYP_GCMCCM_SetHeaderPhase+0x366>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004550:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 0201 	orr.w	r2, r2, #1
 8004560:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 8004562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	2b00      	cmp	r3, #0
 800456a:	d17a      	bne.n	8004662 <CRYP_GCMCCM_SetHeaderPhase+0x166>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 800456c:	2300      	movs	r3, #0
 800456e:	647b      	str	r3, [r7, #68]	; 0x44
 8004570:	e071      	b.n	8004656 <CRYP_GCMCCM_SetHeaderPhase+0x15a>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699a      	ldr	r2, [r3, #24]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800457a:	b29b      	uxth	r3, r3
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	441a      	add	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800458c:	b29b      	uxth	r3, r3
 800458e:	3301      	adds	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699a      	ldr	r2, [r3, #24]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800459e:	b29b      	uxth	r3, r3
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	441a      	add	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6812      	ldr	r2, [r2, #0]
 80045aa:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3301      	adds	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	441a      	add	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6812      	ldr	r2, [r2, #0]
 80045ce:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3301      	adds	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	441a      	add	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3301      	adds	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8004602:	6839      	ldr	r1, [r7, #0]
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f94f 	bl	80048a8 <CRYP_WaitOnCCFlag>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d017      	beq.n	8004640 <CRYP_GCMCCM_SetHeaderPhase+0x144>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0201 	bic.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004624:	f043 0210 	orr.w	r2, r3, #16
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e12e      	b.n	800489e <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800464e:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8004650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004652:	3304      	adds	r3, #4
 8004654:	647b      	str	r3, [r7, #68]	; 0x44
 8004656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004658:	089b      	lsrs	r3, r3, #2
 800465a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800465c:	429a      	cmp	r2, r3
 800465e:	d388      	bcc.n	8004572 <CRYP_GCMCCM_SetHeaderPhase+0x76>
 8004660:	e11c      	b.n	800489c <CRYP_GCMCCM_SetHeaderPhase+0x3a0>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 8004662:	2300      	movs	r3, #0
 8004664:	647b      	str	r3, [r7, #68]	; 0x44
 8004666:	e074      	b.n	8004752 <CRYP_GCMCCM_SetHeaderPhase+0x256>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699a      	ldr	r2, [r3, #24]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004670:	b29b      	uxth	r3, r3
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	441a      	add	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004682:	b29b      	uxth	r3, r3
 8004684:	3301      	adds	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	699a      	ldr	r2, [r3, #24]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004694:	b29b      	uxth	r3, r3
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	441a      	add	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3301      	adds	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	699a      	ldr	r2, [r3, #24]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	441a      	add	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3301      	adds	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	879a      	strh	r2, [r3, #60]	; 0x3c
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80046dc:	b29b      	uxth	r3, r3
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	441a      	add	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6812      	ldr	r2, [r2, #0]
 80046e8:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3301      	adds	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	879a      	strh	r2, [r3, #60]	; 0x3c

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80046f8:	6839      	ldr	r1, [r7, #0]
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f8d4 	bl	80048a8 <CRYP_WaitOnCCFlag>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01a      	beq.n	800473c <CRYP_GCMCCM_SetHeaderPhase+0x240>
        {
          /* Disable the CRYP peripheral clock */
          __HAL_CRYP_DISABLE(hcryp);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0201 	bic.w	r2, r2, #1
 8004714:	601a      	str	r2, [r3, #0]

          /* Change state */
          hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471a:	f043 0210 	orr.w	r2, r3, #16
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	655a      	str	r2, [r3, #84]	; 0x54
          hcryp->State = HAL_CRYP_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hcryp);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e0b3      	b.n	800489e <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
 8004736:	bf00      	nop
 8004738:	0800ae24 	.word	0x0800ae24
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800474a:	601a      	str	r2, [r3, #0]
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 800474c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800474e:	3304      	adds	r3, #4
 8004750:	647b      	str	r3, [r7, #68]	; 0x44
 8004752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004754:	091b      	lsrs	r3, r3, #4
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800475a:	429a      	cmp	r2, r3
 800475c:	d384      	bcc.n	8004668 <CRYP_GCMCCM_SetHeaderPhase+0x16c>
      }
      /* Write last complete words */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 800475e:	2300      	movs	r3, #0
 8004760:	647b      	str	r3, [r7, #68]	; 0x44
 8004762:	e014      	b.n	800478e <CRYP_GCMCCM_SetHeaderPhase+0x292>
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699a      	ldr	r2, [r3, #24]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800476c:	b29b      	uxth	r3, r3
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	441a      	add	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6812      	ldr	r2, [r2, #0]
 8004778:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++ ;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800477e:	b29b      	uxth	r3, r3
 8004780:	3301      	adds	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	879a      	strh	r2, [r3, #60]	; 0x3c
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 8004788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800478a:	3301      	adds	r3, #1
 800478c:	647b      	str	r3, [r7, #68]	; 0x44
 800478e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004790:	089b      	lsrs	r3, r3, #2
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004798:	429a      	cmp	r2, r3
 800479a:	d3e3      	bcc.n	8004764 <CRYP_GCMCCM_SetHeaderPhase+0x268>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 800479c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10b      	bne.n	80047be <CRYP_GCMCCM_SetHeaderPhase+0x2c2>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 80047a6:	e006      	b.n	80047b6 <CRYP_GCMCCM_SetHeaderPhase+0x2ba>
        {
          hcryp->Instance->DINR = 0x0U;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2200      	movs	r2, #0
 80047ae:	609a      	str	r2, [r3, #8]
          loopcounter++;
 80047b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047b2:	3301      	adds	r3, #1
 80047b4:	647b      	str	r3, [r7, #68]	; 0x44
        while (loopcounter < 4U)
 80047b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d9f5      	bls.n	80047a8 <CRYP_GCMCCM_SetHeaderPhase+0x2ac>
 80047bc:	e029      	b.n	8004812 <CRYP_GCMCCM_SetHeaderPhase+0x316>
        }
      }
      else
      {
         /* Enter last bytes, padded with zeros */
         tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699a      	ldr	r2, [r3, #24]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	005a      	lsls	r2, r3, #1
 80047d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	3348      	adds	r3, #72	; 0x48
 80047e2:	443b      	add	r3, r7
 80047e4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80047e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ea:	4013      	ands	r3, r2
 80047ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         hcryp->Instance->DINR = tmp;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047f4:	609a      	str	r2, [r3, #8]
         loopcounter++;
 80047f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f8:	3301      	adds	r3, #1
 80047fa:	647b      	str	r3, [r7, #68]	; 0x44
         /* Pad the data with zeros to have a complete block */
         while (loopcounter < 4U)
 80047fc:	e006      	b.n	800480c <CRYP_GCMCCM_SetHeaderPhase+0x310>
         {
           hcryp->Instance->DINR = 0x0U;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2200      	movs	r2, #0
 8004804:	609a      	str	r2, [r3, #8]
           loopcounter++;
 8004806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004808:	3301      	adds	r3, #1
 800480a:	647b      	str	r3, [r7, #68]	; 0x44
         while (loopcounter < 4U)
 800480c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800480e:	2b03      	cmp	r3, #3
 8004810:	d9f5      	bls.n	80047fe <CRYP_GCMCCM_SetHeaderPhase+0x302>
         }
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8004812:	6839      	ldr	r1, [r7, #0]
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 f847 	bl	80048a8 <CRYP_WaitOnCCFlag>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d017      	beq.n	8004850 <CRYP_GCMCCM_SetHeaderPhase+0x354>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004834:	f043 0210 	orr.w	r2, r3, #16
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	655a      	str	r2, [r3, #84]	; 0x54
        hcryp->State = HAL_CRYP_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hcryp);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e026      	b.n	800489e <CRYP_GCMCCM_SetHeaderPhase+0x3a2>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	e01c      	b.n	800489c <CRYP_GCMCCM_SetHeaderPhase+0x3a0>
    }
  }
  else
  {
    /*Workaround 1: only AES, before re-enabling the peripheral, datatype can be configured.*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f023 0106 	bic.w	r1, r3, #6
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	601a      	str	r2, [r3, #0]

    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800488a:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]
  }
  /* Return function status */
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3748      	adds	r7, #72	; 0x48
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bdb0      	pop	{r4, r5, r7, pc}
 80048a6:	bf00      	nop

080048a8 <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 80048b2:	f7fe fcf9 	bl	80032a8 <HAL_GetTick>
 80048b6:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80048b8:	e010      	b.n	80048dc <CRYP_WaitOnCCFlag+0x34>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d00c      	beq.n	80048dc <CRYP_WaitOnCCFlag+0x34>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048c2:	f7fe fcf1 	bl	80032a8 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d302      	bcc.n	80048d8 <CRYP_WaitOnCCFlag+0x30>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <CRYP_WaitOnCCFlag+0x34>
      {
        return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e007      	b.n	80048ec <CRYP_WaitOnCCFlag+0x44>
  while (HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0e7      	beq.n	80048ba <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e08e      	b.n	8004a24 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	4b47      	ldr	r3, [pc, #284]	; (8004a2c <HAL_DMA_Init+0x138>)
 800490e:	429a      	cmp	r2, r3
 8004910:	d80f      	bhi.n	8004932 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	4b45      	ldr	r3, [pc, #276]	; (8004a30 <HAL_DMA_Init+0x13c>)
 800491a:	4413      	add	r3, r2
 800491c:	4a45      	ldr	r2, [pc, #276]	; (8004a34 <HAL_DMA_Init+0x140>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	091b      	lsrs	r3, r3, #4
 8004924:	009a      	lsls	r2, r3, #2
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a42      	ldr	r2, [pc, #264]	; (8004a38 <HAL_DMA_Init+0x144>)
 800492e:	641a      	str	r2, [r3, #64]	; 0x40
 8004930:	e00e      	b.n	8004950 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	4b40      	ldr	r3, [pc, #256]	; (8004a3c <HAL_DMA_Init+0x148>)
 800493a:	4413      	add	r3, r2
 800493c:	4a3d      	ldr	r2, [pc, #244]	; (8004a34 <HAL_DMA_Init+0x140>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	091b      	lsrs	r3, r3, #4
 8004944:	009a      	lsls	r2, r3, #2
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a3c      	ldr	r2, [pc, #240]	; (8004a40 <HAL_DMA_Init+0x14c>)
 800494e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6819      	ldr	r1, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	431a      	orrs	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fb52 	bl	800504c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049b0:	d102      	bne.n	80049b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049c4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049ce:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d010      	beq.n	80049fa <HAL_DMA_Init+0x106>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d80c      	bhi.n	80049fa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fb7b 	bl	80050dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80049f6:	605a      	str	r2, [r3, #4]
 80049f8:	e008      	b.n	8004a0c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40020407 	.word	0x40020407
 8004a30:	bffdfff8 	.word	0xbffdfff8
 8004a34:	cccccccd 	.word	0xcccccccd
 8004a38:	40020000 	.word	0x40020000
 8004a3c:	bffdfbf8 	.word	0xbffdfbf8
 8004a40:	40020400 	.word	0x40020400

08004a44 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e07b      	b.n	8004b4e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	4b3a      	ldr	r3, [pc, #232]	; (8004b58 <HAL_DMA_DeInit+0x114>)
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d80f      	bhi.n	8004a92 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	4b38      	ldr	r3, [pc, #224]	; (8004b5c <HAL_DMA_DeInit+0x118>)
 8004a7a:	4413      	add	r3, r2
 8004a7c:	4a38      	ldr	r2, [pc, #224]	; (8004b60 <HAL_DMA_DeInit+0x11c>)
 8004a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a82:	091b      	lsrs	r3, r3, #4
 8004a84:	009a      	lsls	r2, r3, #2
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a35      	ldr	r2, [pc, #212]	; (8004b64 <HAL_DMA_DeInit+0x120>)
 8004a8e:	641a      	str	r2, [r3, #64]	; 0x40
 8004a90:	e00e      	b.n	8004ab0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	4b33      	ldr	r3, [pc, #204]	; (8004b68 <HAL_DMA_DeInit+0x124>)
 8004a9a:	4413      	add	r3, r2
 8004a9c:	4a30      	ldr	r2, [pc, #192]	; (8004b60 <HAL_DMA_DeInit+0x11c>)
 8004a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa2:	091b      	lsrs	r3, r3, #4
 8004aa4:	009a      	lsls	r2, r3, #2
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a2f      	ldr	r2, [pc, #188]	; (8004b6c <HAL_DMA_DeInit+0x128>)
 8004aae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	f003 021c 	and.w	r2, r3, #28
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aca:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fabd 	bl	800504c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ae2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00f      	beq.n	8004b0c <HAL_DMA_DeInit+0xc8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d80b      	bhi.n	8004b0c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 faf1 	bl	80050dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b0a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40020407 	.word	0x40020407
 8004b5c:	bffdfff8 	.word	0xbffdfff8
 8004b60:	cccccccd 	.word	0xcccccccd
 8004b64:	40020000 	.word	0x40020000
 8004b68:	bffdfbf8 	.word	0xbffdfbf8
 8004b6c:	40020400 	.word	0x40020400

08004b70 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_DMA_Start_IT+0x20>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e069      	b.n	8004c64 <HAL_DMA_Start_IT+0xf4>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d155      	bne.n	8004c50 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0201 	bic.w	r2, r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	68b9      	ldr	r1, [r7, #8]
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 fa02 	bl	8004fd2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d008      	beq.n	8004be8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 020e 	orr.w	r2, r2, #14
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	e00f      	b.n	8004c08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0204 	bic.w	r2, r2, #4
 8004bf6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 020a 	orr.w	r2, r2, #10
 8004c06:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c24:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d007      	beq.n	8004c3e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c3c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f042 0201 	orr.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	e008      	b.n	8004c62 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2280      	movs	r2, #128	; 0x80
 8004c54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3718      	adds	r7, #24
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e04f      	b.n	8004d1e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d008      	beq.n	8004c9c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2204      	movs	r2, #4
 8004c8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e040      	b.n	8004d1e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 020e 	bic.w	r2, r2, #14
 8004caa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0201 	bic.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd0:	f003 021c 	and.w	r2, r3, #28
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	2101      	movs	r1, #1
 8004cda:	fa01 f202 	lsl.w	r2, r1, r2
 8004cde:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ce8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00c      	beq.n	8004d0c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d00:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d0a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr

08004d28 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d30:	2300      	movs	r3, #0
 8004d32:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d005      	beq.n	8004d4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2204      	movs	r2, #4
 8004d44:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	73fb      	strb	r3, [r7, #15]
 8004d4a:	e047      	b.n	8004ddc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 020e 	bic.w	r2, r2, #14
 8004d5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0201 	bic.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d80:	f003 021c 	and.w	r2, r3, #28
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	2101      	movs	r1, #1
 8004d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d8e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d98:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00c      	beq.n	8004dbc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004db0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004dba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	4798      	blx	r3
    }
  }
  return status;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e04:	f003 031c 	and.w	r3, r3, #28
 8004e08:	2204      	movs	r2, #4
 8004e0a:	409a      	lsls	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d027      	beq.n	8004e64 <HAL_DMA_IRQHandler+0x7c>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d022      	beq.n	8004e64 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d107      	bne.n	8004e3c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0204 	bic.w	r2, r2, #4
 8004e3a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e40:	f003 021c 	and.w	r2, r3, #28
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	2104      	movs	r1, #4
 8004e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e4e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 8081 	beq.w	8004f5c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004e62:	e07b      	b.n	8004f5c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e68:	f003 031c 	and.w	r3, r3, #28
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	409a      	lsls	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d03d      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x10c>
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d038      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0320 	and.w	r3, r3, #32
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10b      	bne.n	8004ea8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 020a 	bic.w	r2, r2, #10
 8004e9e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	4b2e      	ldr	r3, [pc, #184]	; (8004f68 <HAL_DMA_IRQHandler+0x180>)
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d909      	bls.n	8004ec8 <HAL_DMA_IRQHandler+0xe0>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb8:	f003 031c 	and.w	r3, r3, #28
 8004ebc:	4a2b      	ldr	r2, [pc, #172]	; (8004f6c <HAL_DMA_IRQHandler+0x184>)
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec4:	6053      	str	r3, [r2, #4]
 8004ec6:	e008      	b.n	8004eda <HAL_DMA_IRQHandler+0xf2>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ecc:	f003 031c 	and.w	r3, r3, #28
 8004ed0:	4a27      	ldr	r2, [pc, #156]	; (8004f70 <HAL_DMA_IRQHandler+0x188>)
 8004ed2:	2102      	movs	r1, #2
 8004ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed8:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d038      	beq.n	8004f5c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004ef2:	e033      	b.n	8004f5c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef8:	f003 031c 	and.w	r3, r3, #28
 8004efc:	2208      	movs	r2, #8
 8004efe:	409a      	lsls	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d02a      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x176>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d025      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 020e 	bic.w	r2, r2, #14
 8004f20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f26:	f003 021c 	and.w	r2, r3, #28
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	2101      	movs	r1, #1
 8004f30:	fa01 f202 	lsl.w	r2, r1, r2
 8004f34:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d004      	beq.n	8004f5e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
}
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40020080 	.word	0x40020080
 8004f6c:	40020400 	.word	0x40020400
 8004f70:	40020000 	.word	0x40020000

08004f74 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d103      	bne.n	8004f90 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	72fb      	strb	r3, [r7, #11]
    return status;
 8004f8c:	7afb      	ldrb	r3, [r7, #11]
 8004f8e:	e01b      	b.n	8004fc8 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00d      	beq.n	8004fbe <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d004      	beq.n	8004fb6 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	e003      	b.n	8004fbe <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004fbc:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	601a      	str	r2, [r3, #0]

  return status;
 8004fc6:	7afb      	ldrb	r3, [r7, #11]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc80      	pop	{r7}
 8004fd0:	4770      	bx	lr

08004fd2 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b085      	sub	sp, #20
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004fe8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d004      	beq.n	8004ffc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ffa:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005000:	f003 021c 	and.w	r2, r3, #28
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	2101      	movs	r1, #1
 800500a:	fa01 f202 	lsl.w	r2, r1, r2
 800500e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b10      	cmp	r3, #16
 800501e:	d108      	bne.n	8005032 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005030:	e007      	b.n	8005042 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	60da      	str	r2, [r3, #12]
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr

0800504c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	4b1c      	ldr	r3, [pc, #112]	; (80050cc <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800505c:	429a      	cmp	r2, r3
 800505e:	d813      	bhi.n	8005088 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005064:	089b      	lsrs	r3, r3, #2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800506c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	3b08      	subs	r3, #8
 800507c:	4a14      	ldr	r2, [pc, #80]	; (80050d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	091b      	lsrs	r3, r3, #4
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	e011      	b.n	80050ac <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508c:	089b      	lsrs	r3, r3, #2
 800508e:	009a      	lsls	r2, r3, #2
 8005090:	4b10      	ldr	r3, [pc, #64]	; (80050d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8005092:	4413      	add	r3, r2
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	3b08      	subs	r3, #8
 80050a0:	4a0b      	ldr	r2, [pc, #44]	; (80050d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	091b      	lsrs	r3, r3, #4
 80050a8:	3307      	adds	r3, #7
 80050aa:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a0a      	ldr	r2, [pc, #40]	; (80050d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80050b0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f003 031f 	and.w	r3, r3, #31
 80050b8:	2201      	movs	r2, #1
 80050ba:	409a      	lsls	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80050c0:	bf00      	nop
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40020407 	.word	0x40020407
 80050d0:	cccccccd 	.word	0xcccccccd
 80050d4:	4002081c 	.word	0x4002081c
 80050d8:	40020880 	.word	0x40020880

080050dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050ec:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4b0a      	ldr	r3, [pc, #40]	; (800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	461a      	mov	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a08      	ldr	r2, [pc, #32]	; (8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005100:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3b01      	subs	r3, #1
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	2201      	movs	r2, #1
 800510c:	409a      	lsls	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005112:	bf00      	nop
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr
 800511c:	1000823f 	.word	0x1000823f
 8005120:	40020940 	.word	0x40020940

08005124 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005132:	e140      	b.n	80053b6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	2101      	movs	r1, #1
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	fa01 f303 	lsl.w	r3, r1, r3
 8005140:	4013      	ands	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 8132 	beq.w	80053b0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	2b01      	cmp	r3, #1
 8005156:	d005      	beq.n	8005164 <HAL_GPIO_Init+0x40>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f003 0303 	and.w	r3, r3, #3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d130      	bne.n	80051c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	2203      	movs	r2, #3
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4013      	ands	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800519a:	2201      	movs	r2, #1
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	43db      	mvns	r3, r3
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4013      	ands	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	091b      	lsrs	r3, r3, #4
 80051b0:	f003 0201 	and.w	r2, r3, #1
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d017      	beq.n	8005202 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	2203      	movs	r2, #3
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	43db      	mvns	r3, r3
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4013      	ands	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d123      	bne.n	8005256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	08da      	lsrs	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3208      	adds	r2, #8
 8005216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f003 0307 	and.w	r3, r3, #7
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	220f      	movs	r2, #15
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	43db      	mvns	r3, r3
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4013      	ands	r3, r2
 8005230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	691a      	ldr	r2, [r3, #16]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	08da      	lsrs	r2, r3, #3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3208      	adds	r2, #8
 8005250:	6939      	ldr	r1, [r7, #16]
 8005252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	2203      	movs	r2, #3
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	43db      	mvns	r3, r3
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4013      	ands	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f003 0203 	and.w	r2, r3, #3
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4313      	orrs	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 808c 	beq.w	80053b0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005298:	4a4e      	ldr	r2, [pc, #312]	; (80053d4 <HAL_GPIO_Init+0x2b0>)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	089b      	lsrs	r3, r3, #2
 800529e:	3302      	adds	r3, #2
 80052a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	2207      	movs	r2, #7
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	43db      	mvns	r3, r3
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4013      	ands	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80052c2:	d00d      	beq.n	80052e0 <HAL_GPIO_Init+0x1bc>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a44      	ldr	r2, [pc, #272]	; (80053d8 <HAL_GPIO_Init+0x2b4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d007      	beq.n	80052dc <HAL_GPIO_Init+0x1b8>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a43      	ldr	r2, [pc, #268]	; (80053dc <HAL_GPIO_Init+0x2b8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d101      	bne.n	80052d8 <HAL_GPIO_Init+0x1b4>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e004      	b.n	80052e2 <HAL_GPIO_Init+0x1be>
 80052d8:	2307      	movs	r3, #7
 80052da:	e002      	b.n	80052e2 <HAL_GPIO_Init+0x1be>
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <HAL_GPIO_Init+0x1be>
 80052e0:	2300      	movs	r3, #0
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	f002 0203 	and.w	r2, r2, #3
 80052e8:	0092      	lsls	r2, r2, #2
 80052ea:	4093      	lsls	r3, r2
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80052f2:	4938      	ldr	r1, [pc, #224]	; (80053d4 <HAL_GPIO_Init+0x2b0>)
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	089b      	lsrs	r3, r3, #2
 80052f8:	3302      	adds	r3, #2
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005300:	4b37      	ldr	r3, [pc, #220]	; (80053e0 <HAL_GPIO_Init+0x2bc>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	43db      	mvns	r3, r3
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4013      	ands	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4313      	orrs	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005324:	4a2e      	ldr	r2, [pc, #184]	; (80053e0 <HAL_GPIO_Init+0x2bc>)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800532a:	4b2d      	ldr	r3, [pc, #180]	; (80053e0 <HAL_GPIO_Init+0x2bc>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	43db      	mvns	r3, r3
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4013      	ands	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800534e:	4a24      	ldr	r2, [pc, #144]	; (80053e0 <HAL_GPIO_Init+0x2bc>)
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005354:	4b22      	ldr	r3, [pc, #136]	; (80053e0 <HAL_GPIO_Init+0x2bc>)
 8005356:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800535a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	43db      	mvns	r3, r3
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4013      	ands	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800537a:	4a19      	ldr	r2, [pc, #100]	; (80053e0 <HAL_GPIO_Init+0x2bc>)
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005382:	4b17      	ldr	r3, [pc, #92]	; (80053e0 <HAL_GPIO_Init+0x2bc>)
 8005384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005388:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	43db      	mvns	r3, r3
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4013      	ands	r3, r2
 8005392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80053a8:	4a0d      	ldr	r2, [pc, #52]	; (80053e0 <HAL_GPIO_Init+0x2bc>)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	3301      	adds	r3, #1
 80053b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f47f aeb7 	bne.w	8005134 <HAL_GPIO_Init+0x10>
  }
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	371c      	adds	r7, #28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40010000 	.word	0x40010000
 80053d8:	48000400 	.word	0x48000400
 80053dc:	48000800 	.word	0x48000800
 80053e0:	58000800 	.word	0x58000800

080053e4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80053f2:	e0af      	b.n	8005554 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80053f4:	2201      	movs	r2, #1
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	4013      	ands	r3, r2
 8005400:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 80a2 	beq.w	800554e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800540a:	4a59      	ldr	r2, [pc, #356]	; (8005570 <HAL_GPIO_DeInit+0x18c>)
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	089b      	lsrs	r3, r3, #2
 8005410:	3302      	adds	r3, #2
 8005412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005416:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f003 0303 	and.w	r3, r3, #3
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	2207      	movs	r2, #7
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4013      	ands	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005432:	d00d      	beq.n	8005450 <HAL_GPIO_DeInit+0x6c>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a4f      	ldr	r2, [pc, #316]	; (8005574 <HAL_GPIO_DeInit+0x190>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d007      	beq.n	800544c <HAL_GPIO_DeInit+0x68>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a4e      	ldr	r2, [pc, #312]	; (8005578 <HAL_GPIO_DeInit+0x194>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d101      	bne.n	8005448 <HAL_GPIO_DeInit+0x64>
 8005444:	2302      	movs	r3, #2
 8005446:	e004      	b.n	8005452 <HAL_GPIO_DeInit+0x6e>
 8005448:	2307      	movs	r3, #7
 800544a:	e002      	b.n	8005452 <HAL_GPIO_DeInit+0x6e>
 800544c:	2301      	movs	r3, #1
 800544e:	e000      	b.n	8005452 <HAL_GPIO_DeInit+0x6e>
 8005450:	2300      	movs	r3, #0
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	f002 0203 	and.w	r2, r2, #3
 8005458:	0092      	lsls	r2, r2, #2
 800545a:	4093      	lsls	r3, r2
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	429a      	cmp	r2, r3
 8005460:	d136      	bne.n	80054d0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005462:	4b46      	ldr	r3, [pc, #280]	; (800557c <HAL_GPIO_DeInit+0x198>)
 8005464:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	43db      	mvns	r3, r3
 800546c:	4943      	ldr	r1, [pc, #268]	; (800557c <HAL_GPIO_DeInit+0x198>)
 800546e:	4013      	ands	r3, r2
 8005470:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005474:	4b41      	ldr	r3, [pc, #260]	; (800557c <HAL_GPIO_DeInit+0x198>)
 8005476:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	43db      	mvns	r3, r3
 800547e:	493f      	ldr	r1, [pc, #252]	; (800557c <HAL_GPIO_DeInit+0x198>)
 8005480:	4013      	ands	r3, r2
 8005482:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8005486:	4b3d      	ldr	r3, [pc, #244]	; (800557c <HAL_GPIO_DeInit+0x198>)
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	43db      	mvns	r3, r3
 800548e:	493b      	ldr	r1, [pc, #236]	; (800557c <HAL_GPIO_DeInit+0x198>)
 8005490:	4013      	ands	r3, r2
 8005492:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005494:	4b39      	ldr	r3, [pc, #228]	; (800557c <HAL_GPIO_DeInit+0x198>)
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	43db      	mvns	r3, r3
 800549c:	4937      	ldr	r1, [pc, #220]	; (800557c <HAL_GPIO_DeInit+0x198>)
 800549e:	4013      	ands	r3, r2
 80054a0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f003 0303 	and.w	r3, r3, #3
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	2207      	movs	r2, #7
 80054ac:	fa02 f303 	lsl.w	r3, r2, r3
 80054b0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80054b2:	4a2f      	ldr	r2, [pc, #188]	; (8005570 <HAL_GPIO_DeInit+0x18c>)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	089b      	lsrs	r3, r3, #2
 80054b8:	3302      	adds	r3, #2
 80054ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	43da      	mvns	r2, r3
 80054c2:	482b      	ldr	r0, [pc, #172]	; (8005570 <HAL_GPIO_DeInit+0x18c>)
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	089b      	lsrs	r3, r3, #2
 80054c8:	400a      	ands	r2, r1
 80054ca:	3302      	adds	r3, #2
 80054cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	2103      	movs	r1, #3
 80054da:	fa01 f303 	lsl.w	r3, r1, r3
 80054de:	431a      	orrs	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	08da      	lsrs	r2, r3, #3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3208      	adds	r2, #8
 80054ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	220f      	movs	r2, #15
 80054fa:	fa02 f303 	lsl.w	r3, r2, r3
 80054fe:	43db      	mvns	r3, r3
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	08d2      	lsrs	r2, r2, #3
 8005504:	4019      	ands	r1, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3208      	adds	r2, #8
 800550a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	2103      	movs	r1, #3
 8005518:	fa01 f303 	lsl.w	r3, r1, r3
 800551c:	43db      	mvns	r3, r3
 800551e:	401a      	ands	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	2101      	movs	r1, #1
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	fa01 f303 	lsl.w	r3, r1, r3
 8005530:	43db      	mvns	r3, r3
 8005532:	401a      	ands	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68da      	ldr	r2, [r3, #12]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	2103      	movs	r1, #3
 8005542:	fa01 f303 	lsl.w	r3, r1, r3
 8005546:	43db      	mvns	r3, r3
 8005548:	401a      	ands	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	3301      	adds	r3, #1
 8005552:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	f47f af49 	bne.w	80053f4 <HAL_GPIO_DeInit+0x10>
  }
}
 8005562:	bf00      	nop
 8005564:	bf00      	nop
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	bc80      	pop	{r7}
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40010000 	.word	0x40010000
 8005574:	48000400 	.word	0x48000400
 8005578:	48000800 	.word	0x48000800
 800557c:	58000800 	.word	0x58000800

08005580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	807b      	strh	r3, [r7, #2]
 800558c:	4613      	mov	r3, r2
 800558e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005590:	787b      	ldrb	r3, [r7, #1]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005596:	887a      	ldrh	r2, [r7, #2]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800559c:	e002      	b.n	80055a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800559e:	887a      	ldrh	r2, [r7, #2]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bc80      	pop	{r7}
 80055ac:	4770      	bx	lr

080055ae <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b085      	sub	sp, #20
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	460b      	mov	r3, r1
 80055b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80055c0:	887a      	ldrh	r2, [r7, #2]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4013      	ands	r3, r2
 80055c6:	041a      	lsls	r2, r3, #16
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	43d9      	mvns	r1, r3
 80055cc:	887b      	ldrh	r3, [r7, #2]
 80055ce:	400b      	ands	r3, r1
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	619a      	str	r2, [r3, #24]
}
 80055d6:	bf00      	nop
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr

080055e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	88fb      	ldrh	r3, [r7, #6]
 80055f0:	4013      	ands	r3, r2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d006      	beq.n	8005604 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055f6:	4a05      	ldr	r2, [pc, #20]	; (800560c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055f8:	88fb      	ldrh	r3, [r7, #6]
 80055fa:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fb fa76 	bl	8000af0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005604:	bf00      	nop
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	58000800 	.word	0x58000800

08005610 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005614:	4b04      	ldr	r3, [pc, #16]	; (8005628 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a03      	ldr	r2, [pc, #12]	; (8005628 <HAL_PWR_EnableBkUpAccess+0x18>)
 800561a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800561e:	6013      	str	r3, [r2, #0]
}
 8005620:	bf00      	nop
 8005622:	46bd      	mov	sp, r7
 8005624:	bc80      	pop	{r7}
 8005626:	4770      	bx	lr
 8005628:	58000400 	.word	0x58000400

0800562c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <HAL_PWREx_GetVoltageRange+0x14>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005638:	4618      	mov	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr
 8005640:	58000400 	.word	0x58000400

08005644 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005648:	4b06      	ldr	r3, [pc, #24]	; (8005664 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005654:	d101      	bne.n	800565a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr
 8005664:	58000400 	.word	0x58000400

08005668 <LL_RCC_HSE_EnableTcxo>:
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800566c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005676:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800567a:	6013      	str	r3, [r2, #0]
}
 800567c:	bf00      	nop
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr

08005684 <LL_RCC_HSE_DisableTcxo>:
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005692:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005696:	6013      	str	r3, [r2, #0]
}
 8005698:	bf00      	nop
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr

080056a0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80056a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056b2:	d101      	bne.n	80056b8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr

080056c2 <LL_RCC_HSE_Enable>:
{
 80056c2:	b480      	push	{r7}
 80056c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80056c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d4:	6013      	str	r3, [r2, #0]
}
 80056d6:	bf00      	nop
 80056d8:	46bd      	mov	sp, r7
 80056da:	bc80      	pop	{r7}
 80056dc:	4770      	bx	lr

080056de <LL_RCC_HSE_Disable>:
{
 80056de:	b480      	push	{r7}
 80056e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80056e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f0:	6013      	str	r3, [r2, #0]
}
 80056f2:	bf00      	nop
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bc80      	pop	{r7}
 80056f8:	4770      	bx	lr

080056fa <LL_RCC_HSE_IsReady>:
{
 80056fa:	b480      	push	{r7}
 80056fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80056fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800570c:	d101      	bne.n	8005712 <LL_RCC_HSE_IsReady+0x18>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <LL_RCC_HSE_IsReady+0x1a>
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr

0800571c <LL_RCC_HSI_Enable>:
{
 800571c:	b480      	push	{r7}
 800571e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800572a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800572e:	6013      	str	r3, [r2, #0]
}
 8005730:	bf00      	nop
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr

08005738 <LL_RCC_HSI_Disable>:
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800573c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005746:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800574a:	6013      	str	r3, [r2, #0]
}
 800574c:	bf00      	nop
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr

08005754 <LL_RCC_HSI_IsReady>:
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005766:	d101      	bne.n	800576c <LL_RCC_HSI_IsReady+0x18>
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <LL_RCC_HSI_IsReady+0x1a>
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	46bd      	mov	sp, r7
 8005772:	bc80      	pop	{r7}
 8005774:	4770      	bx	lr

08005776 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800577e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	061b      	lsls	r3, r3, #24
 800578c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005790:	4313      	orrs	r3, r2
 8005792:	604b      	str	r3, [r1, #4]
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr

0800579e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800579e:	b480      	push	{r7}
 80057a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80057a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d101      	bne.n	80057b6 <LL_RCC_LSE_IsReady+0x18>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <LL_RCC_LSE_IsReady+0x1a>
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr

080057c0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80057c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80057d8:	bf00      	nop
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr

080057e0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80057e0:	b480      	push	{r7}
 80057e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80057e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80057f8:	bf00      	nop
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr

08005800 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b02      	cmp	r3, #2
 8005812:	d101      	bne.n	8005818 <LL_RCC_LSI_IsReady+0x18>
 8005814:	2301      	movs	r3, #1
 8005816:	e000      	b.n	800581a <LL_RCC_LSI_IsReady+0x1a>
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	46bd      	mov	sp, r7
 800581e:	bc80      	pop	{r7}
 8005820:	4770      	bx	lr

08005822 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8005822:	b480      	push	{r7}
 8005824:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005830:	f043 0301 	orr.w	r3, r3, #1
 8005834:	6013      	str	r3, [r2, #0]
}
 8005836:	bf00      	nop
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr

0800583e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800583e:	b480      	push	{r7}
 8005840:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800584c:	f023 0301 	bic.w	r3, r3, #1
 8005850:	6013      	str	r3, [r2, #0]
}
 8005852:	bf00      	nop
 8005854:	46bd      	mov	sp, r7
 8005856:	bc80      	pop	{r7}
 8005858:	4770      	bx	lr

0800585a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800585a:	b480      	push	{r7}
 800585c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800585e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b02      	cmp	r3, #2
 800586a:	d101      	bne.n	8005870 <LL_RCC_MSI_IsReady+0x16>
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <LL_RCC_MSI_IsReady+0x18>
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr

0800587a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800587a:	b480      	push	{r7}
 800587c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800587e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b08      	cmp	r3, #8
 800588a:	d101      	bne.n	8005890 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr

0800589a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800589a:	b480      	push	{r7}
 800589c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800589e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bc80      	pop	{r7}
 80058ae:	4770      	bx	lr

080058b0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80058b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bc80      	pop	{r7}
 80058c6:	4770      	bx	lr

080058c8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80058d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	021b      	lsls	r3, r3, #8
 80058de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058e2:	4313      	orrs	r3, r2
 80058e4:	604b      	str	r3, [r1, #4]
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr

080058f0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80058f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f023 0203 	bic.w	r2, r3, #3
 8005902:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4313      	orrs	r3, r2
 800590a:	608b      	str	r3, [r1, #8]
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr

08005916 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005916:	b480      	push	{r7}
 8005918:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800591a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f003 030c 	and.w	r3, r3, #12
}
 8005924:	4618      	mov	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	bc80      	pop	{r7}
 800592a:	4770      	bx	lr

0800592c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800593e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4313      	orrs	r3, r2
 8005946:	608b      	str	r3, [r1, #8]
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	bc80      	pop	{r7}
 8005950:	4770      	bx	lr

08005952 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8005952:	b480      	push	{r7}
 8005954:	b083      	sub	sp, #12
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800595a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005962:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005966:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr

0800597c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005988:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800598c:	f023 020f 	bic.w	r2, r3, #15
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	091b      	lsrs	r3, r3, #4
 8005994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr

080059a8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80059b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	608b      	str	r3, [r1, #8]
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr

080059ce <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80059d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	608b      	str	r3, [r1, #8]
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr

080059f4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80059f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr

08005a0a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr

08005a24 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr

08005a3a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr

08005a50 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a62:	6013      	str	r3, [r2, #0]
}
 8005a64:	bf00      	nop
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bc80      	pop	{r7}
 8005a6a:	4770      	bx	lr

08005a6c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a7e:	6013      	str	r3, [r2, #0]
}
 8005a80:	bf00      	nop
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bc80      	pop	{r7}
 8005a86:	4770      	bx	lr

08005a88 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a9a:	d101      	bne.n	8005aa0 <LL_RCC_PLL_IsReady+0x18>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e000      	b.n	8005aa2 <LL_RCC_PLL_IsReady+0x1a>
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bc80      	pop	{r7}
 8005aa8:	4770      	bx	lr

08005aaa <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	0a1b      	lsrs	r3, r3, #8
 8005ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr

08005ac2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr

08005ad8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bc80      	pop	{r7}
 8005aec:	4770      	bx	lr

08005aee <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005aee:	b480      	push	{r7}
 8005af0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f003 0303 	and.w	r3, r3, #3
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bc80      	pop	{r7}
 8005b02:	4770      	bx	lr

08005b04 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005b04:	b480      	push	{r7}
 8005b06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b16:	d101      	bne.n	8005b1c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e000      	b.n	8005b1e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr

08005b26 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005b26:	b480      	push	{r7}
 8005b28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b3a:	d101      	bne.n	8005b40 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e000      	b.n	8005b42 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bc80      	pop	{r7}
 8005b48:	4770      	bx	lr

08005b4a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b52:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b5e:	d101      	bne.n	8005b64 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bc80      	pop	{r7}
 8005b6c:	4770      	bx	lr

08005b6e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b80:	d101      	bne.n	8005b86 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bc80      	pop	{r7}
 8005b8e:	4770      	bx	lr

08005b90 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ba2:	d101      	bne.n	8005ba8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e000      	b.n	8005baa <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr
	...

08005bb4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e36f      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bc6:	f7ff fea6 	bl	8005916 <LL_RCC_GetSysClkSource>
 8005bca:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bcc:	f7ff ff8f 	bl	8005aee <LL_RCC_PLL_GetMainSource>
 8005bd0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 80c4 	beq.w	8005d68 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d005      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x3e>
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	2b0c      	cmp	r3, #12
 8005bea:	d176      	bne.n	8005cda <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d173      	bne.n	8005cda <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e353      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d005      	beq.n	8005c1c <HAL_RCC_OscConfig+0x68>
 8005c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c1a:	e006      	b.n	8005c2a <HAL_RCC_OscConfig+0x76>
 8005c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c24:	091b      	lsrs	r3, r3, #4
 8005c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d222      	bcs.n	8005c74 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 fda2 	bl	800677c <RCC_SetFlashLatencyFromMSIRange>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e331      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c4c:	f043 0308 	orr.w	r3, r3, #8
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c64:	4313      	orrs	r3, r2
 8005c66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fe2b 	bl	80058c8 <LL_RCC_MSI_SetCalibTrimming>
 8005c72:	e021      	b.n	8005cb8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c7e:	f043 0308 	orr.w	r3, r3, #8
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c96:	4313      	orrs	r3, r2
 8005c98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff fe12 	bl	80058c8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 fd67 	bl	800677c <RCC_SetFlashLatencyFromMSIRange>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e2f6      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005cb8:	f000 fce0 	bl	800667c <HAL_RCC_GetHCLKFreq>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	4aa7      	ldr	r2, [pc, #668]	; (8005f5c <HAL_RCC_OscConfig+0x3a8>)
 8005cc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8005cc2:	4ba7      	ldr	r3, [pc, #668]	; (8005f60 <HAL_RCC_OscConfig+0x3ac>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fb f990 	bl	8000fec <HAL_InitTick>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005cd0:	7cfb      	ldrb	r3, [r7, #19]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d047      	beq.n	8005d66 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8005cd6:	7cfb      	ldrb	r3, [r7, #19]
 8005cd8:	e2e5      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d02c      	beq.n	8005d3c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ce2:	f7ff fd9e 	bl	8005822 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ce6:	f7fd fadf 	bl	80032a8 <HAL_GetTick>
 8005cea:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005cee:	f7fd fadb 	bl	80032a8 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e2d2      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d00:	f7ff fdab 	bl	800585a <LL_RCC_MSI_IsReady>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0f1      	beq.n	8005cee <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d14:	f043 0308 	orr.w	r3, r3, #8
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff fdc7 	bl	80058c8 <LL_RCC_MSI_SetCalibTrimming>
 8005d3a:	e015      	b.n	8005d68 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d3c:	f7ff fd7f 	bl	800583e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d40:	f7fd fab2 	bl	80032a8 <HAL_GetTick>
 8005d44:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d48:	f7fd faae 	bl	80032a8 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e2a5      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005d5a:	f7ff fd7e 	bl	800585a <LL_RCC_MSI_IsReady>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1f1      	bne.n	8005d48 <HAL_RCC_OscConfig+0x194>
 8005d64:	e000      	b.n	8005d68 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005d66:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d058      	beq.n	8005e26 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d005      	beq.n	8005d86 <HAL_RCC_OscConfig+0x1d2>
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	2b0c      	cmp	r3, #12
 8005d7e:	d108      	bne.n	8005d92 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d105      	bne.n	8005d92 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d14b      	bne.n	8005e26 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e289      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005da4:	4313      	orrs	r3, r2
 8005da6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db0:	d102      	bne.n	8005db8 <HAL_RCC_OscConfig+0x204>
 8005db2:	f7ff fc86 	bl	80056c2 <LL_RCC_HSE_Enable>
 8005db6:	e00d      	b.n	8005dd4 <HAL_RCC_OscConfig+0x220>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005dc0:	d104      	bne.n	8005dcc <HAL_RCC_OscConfig+0x218>
 8005dc2:	f7ff fc51 	bl	8005668 <LL_RCC_HSE_EnableTcxo>
 8005dc6:	f7ff fc7c 	bl	80056c2 <LL_RCC_HSE_Enable>
 8005dca:	e003      	b.n	8005dd4 <HAL_RCC_OscConfig+0x220>
 8005dcc:	f7ff fc87 	bl	80056de <LL_RCC_HSE_Disable>
 8005dd0:	f7ff fc58 	bl	8005684 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d012      	beq.n	8005e02 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ddc:	f7fd fa64 	bl	80032a8 <HAL_GetTick>
 8005de0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de4:	f7fd fa60 	bl	80032a8 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b64      	cmp	r3, #100	; 0x64
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e257      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005df6:	f7ff fc80 	bl	80056fa <LL_RCC_HSE_IsReady>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0f1      	beq.n	8005de4 <HAL_RCC_OscConfig+0x230>
 8005e00:	e011      	b.n	8005e26 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e02:	f7fd fa51 	bl	80032a8 <HAL_GetTick>
 8005e06:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005e08:	e008      	b.n	8005e1c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e0a:	f7fd fa4d 	bl	80032a8 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b64      	cmp	r3, #100	; 0x64
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e244      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005e1c:	f7ff fc6d 	bl	80056fa <LL_RCC_HSE_IsReady>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f1      	bne.n	8005e0a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d046      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	2b04      	cmp	r3, #4
 8005e36:	d005      	beq.n	8005e44 <HAL_RCC_OscConfig+0x290>
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	2b0c      	cmp	r3, #12
 8005e3c:	d10e      	bne.n	8005e5c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d10b      	bne.n	8005e5c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e22a      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff fc8e 	bl	8005776 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005e5a:	e031      	b.n	8005ec0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d019      	beq.n	8005e98 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e64:	f7ff fc5a 	bl	800571c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e68:	f7fd fa1e 	bl	80032a8 <HAL_GetTick>
 8005e6c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e70:	f7fd fa1a 	bl	80032a8 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e211      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005e82:	f7ff fc67 	bl	8005754 <LL_RCC_HSI_IsReady>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0f1      	beq.n	8005e70 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff fc70 	bl	8005776 <LL_RCC_HSI_SetCalibTrimming>
 8005e96:	e013      	b.n	8005ec0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e98:	f7ff fc4e 	bl	8005738 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9c:	f7fd fa04 	bl	80032a8 <HAL_GetTick>
 8005ea0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005ea2:	e008      	b.n	8005eb6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea4:	f7fd fa00 	bl	80032a8 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d901      	bls.n	8005eb6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e1f7      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005eb6:	f7ff fc4d 	bl	8005754 <LL_RCC_HSI_IsReady>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1f1      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d06e      	beq.n	8005faa <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d056      	beq.n	8005f82 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8005ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005edc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	69da      	ldr	r2, [r3, #28]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f003 0310 	and.w	r3, r3, #16
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d031      	beq.n	8005f50 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d006      	beq.n	8005f04 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e1d0      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d013      	beq.n	8005f36 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8005f0e:	f7ff fc67 	bl	80057e0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f12:	f7fd f9c9 	bl	80032a8 <HAL_GetTick>
 8005f16:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005f18:	e008      	b.n	8005f2c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f1a:	f7fd f9c5 	bl	80032a8 <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b11      	cmp	r3, #17
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e1bc      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005f2c:	f7ff fc68 	bl	8005800 <LL_RCC_LSI_IsReady>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1f1      	bne.n	8005f1a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f3e:	f023 0210 	bic.w	r2, r3, #16
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f50:	f7ff fc36 	bl	80057c0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f54:	f7fd f9a8 	bl	80032a8 <HAL_GetTick>
 8005f58:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005f5a:	e00c      	b.n	8005f76 <HAL_RCC_OscConfig+0x3c2>
 8005f5c:	20000110 	.word	0x20000110
 8005f60:	20000120 	.word	0x20000120
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f64:	f7fd f9a0 	bl	80032a8 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b11      	cmp	r3, #17
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e197      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005f76:	f7ff fc43 	bl	8005800 <LL_RCC_LSI_IsReady>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d0f1      	beq.n	8005f64 <HAL_RCC_OscConfig+0x3b0>
 8005f80:	e013      	b.n	8005faa <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f82:	f7ff fc2d 	bl	80057e0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f86:	f7fd f98f 	bl	80032a8 <HAL_GetTick>
 8005f8a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005f8c:	e008      	b.n	8005fa0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f8e:	f7fd f98b 	bl	80032a8 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	2b11      	cmp	r3, #17
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e182      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005fa0:	f7ff fc2e 	bl	8005800 <LL_RCC_LSI_IsReady>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1f1      	bne.n	8005f8e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 80d8 	beq.w	8006168 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005fb8:	f7ff fb44 	bl	8005644 <LL_PWR_IsEnabledBkUpAccess>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d113      	bne.n	8005fea <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005fc2:	f7ff fb25 	bl	8005610 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fc6:	f7fd f96f 	bl	80032a8 <HAL_GetTick>
 8005fca:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005fcc:	e008      	b.n	8005fe0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fce:	f7fd f96b 	bl	80032a8 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d901      	bls.n	8005fe0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e162      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005fe0:	f7ff fb30 	bl	8005644 <LL_PWR_IsEnabledBkUpAccess>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0f1      	beq.n	8005fce <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d07b      	beq.n	80060ea <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	2b85      	cmp	r3, #133	; 0x85
 8005ff8:	d003      	beq.n	8006002 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	2b05      	cmp	r3, #5
 8006000:	d109      	bne.n	8006016 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800600a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800600e:	f043 0304 	orr.w	r3, r3, #4
 8006012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006016:	f7fd f947 	bl	80032a8 <HAL_GetTick>
 800601a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800601c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006028:	f043 0301 	orr.w	r3, r3, #1
 800602c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006030:	e00a      	b.n	8006048 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006032:	f7fd f939 	bl	80032a8 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006040:	4293      	cmp	r3, r2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e12e      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006048:	f7ff fba9 	bl	800579e <LL_RCC_LSE_IsReady>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0ef      	beq.n	8006032 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	2b81      	cmp	r3, #129	; 0x81
 8006058:	d003      	beq.n	8006062 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	2b85      	cmp	r3, #133	; 0x85
 8006060:	d121      	bne.n	80060a6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006062:	f7fd f921 	bl	80032a8 <HAL_GetTick>
 8006066:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800606c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800607c:	e00a      	b.n	8006094 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800607e:	f7fd f913 	bl	80032a8 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	f241 3288 	movw	r2, #5000	; 0x1388
 800608c:	4293      	cmp	r3, r2
 800608e:	d901      	bls.n	8006094 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e108      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0ec      	beq.n	800607e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80060a4:	e060      	b.n	8006168 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a6:	f7fd f8ff 	bl	80032a8 <HAL_GetTick>
 80060aa:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80060ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80060c0:	e00a      	b.n	80060d8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c2:	f7fd f8f1 	bl	80032a8 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e0e6      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80060d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1ec      	bne.n	80060c2 <HAL_RCC_OscConfig+0x50e>
 80060e8:	e03e      	b.n	8006168 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ea:	f7fd f8dd 	bl	80032a8 <HAL_GetTick>
 80060ee:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80060f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006104:	e00a      	b.n	800611c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006106:	f7fd f8cf 	bl	80032a8 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	f241 3288 	movw	r2, #5000	; 0x1388
 8006114:	4293      	cmp	r3, r2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e0c4      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800611c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1ec      	bne.n	8006106 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800612c:	f7fd f8bc 	bl	80032a8 <HAL_GetTick>
 8006130:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800613e:	f023 0301 	bic.w	r3, r3, #1
 8006142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006146:	e00a      	b.n	800615e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006148:	f7fd f8ae 	bl	80032a8 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	f241 3288 	movw	r2, #5000	; 0x1388
 8006156:	4293      	cmp	r3, r2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e0a3      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800615e:	f7ff fb1e 	bl	800579e <LL_RCC_LSE_IsReady>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1ef      	bne.n	8006148 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	2b00      	cmp	r3, #0
 800616e:	f000 8099 	beq.w	80062a4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	2b0c      	cmp	r3, #12
 8006176:	d06c      	beq.n	8006252 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	2b02      	cmp	r3, #2
 800617e:	d14b      	bne.n	8006218 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006180:	f7ff fc74 	bl	8005a6c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006184:	f7fd f890 	bl	80032a8 <HAL_GetTick>
 8006188:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800618c:	f7fd f88c 	bl	80032a8 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b0a      	cmp	r3, #10
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e083      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800619e:	f7ff fc73 	bl	8005a88 <LL_RCC_PLL_IsReady>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1f1      	bne.n	800618c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	4b40      	ldr	r3, [pc, #256]	; (80062b0 <HAL_RCC_OscConfig+0x6fc>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061ba:	4311      	orrs	r1, r2
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061c0:	0212      	lsls	r2, r2, #8
 80061c2:	4311      	orrs	r1, r2
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80061c8:	4311      	orrs	r1, r2
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80061ce:	4311      	orrs	r1, r2
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80061d4:	430a      	orrs	r2, r1
 80061d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061da:	4313      	orrs	r3, r2
 80061dc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061de:	f7ff fc37 	bl	8005a50 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f2:	f7fd f859 	bl	80032a8 <HAL_GetTick>
 80061f6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80061f8:	e008      	b.n	800620c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061fa:	f7fd f855 	bl	80032a8 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b0a      	cmp	r3, #10
 8006206:	d901      	bls.n	800620c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	e04c      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800620c:	f7ff fc3c 	bl	8005a88 <LL_RCC_PLL_IsReady>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d0f1      	beq.n	80061fa <HAL_RCC_OscConfig+0x646>
 8006216:	e045      	b.n	80062a4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006218:	f7ff fc28 	bl	8005a6c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621c:	f7fd f844 	bl	80032a8 <HAL_GetTick>
 8006220:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006224:	f7fd f840 	bl	80032a8 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b0a      	cmp	r3, #10
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e037      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006236:	f7ff fc27 	bl	8005a88 <LL_RCC_PLL_IsReady>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1f1      	bne.n	8006224 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800624a:	4b1a      	ldr	r3, [pc, #104]	; (80062b4 <HAL_RCC_OscConfig+0x700>)
 800624c:	4013      	ands	r3, r2
 800624e:	60cb      	str	r3, [r1, #12]
 8006250:	e028      	b.n	80062a4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e023      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800625e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	f003 0203 	and.w	r2, r3, #3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	429a      	cmp	r2, r3
 8006272:	d115      	bne.n	80062a0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627e:	429a      	cmp	r2, r3
 8006280:	d10e      	bne.n	80062a0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628c:	021b      	lsls	r3, r3, #8
 800628e:	429a      	cmp	r2, r3
 8006290:	d106      	bne.n	80062a0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629c:	429a      	cmp	r2, r3
 800629e:	d001      	beq.n	80062a4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3720      	adds	r7, #32
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	11c1808c 	.word	0x11c1808c
 80062b4:	eefefffc 	.word	0xeefefffc

080062b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e12c      	b.n	8006526 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062cc:	4b98      	ldr	r3, [pc, #608]	; (8006530 <HAL_RCC_ClockConfig+0x278>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d91b      	bls.n	8006312 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062da:	4b95      	ldr	r3, [pc, #596]	; (8006530 <HAL_RCC_ClockConfig+0x278>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f023 0207 	bic.w	r2, r3, #7
 80062e2:	4993      	ldr	r1, [pc, #588]	; (8006530 <HAL_RCC_ClockConfig+0x278>)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062ea:	f7fc ffdd 	bl	80032a8 <HAL_GetTick>
 80062ee:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80062f2:	f7fc ffd9 	bl	80032a8 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e110      	b.n	8006526 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006304:	4b8a      	ldr	r3, [pc, #552]	; (8006530 <HAL_RCC_ClockConfig+0x278>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	429a      	cmp	r2, r3
 8006310:	d1ef      	bne.n	80062f2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d016      	beq.n	800634c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff fb02 	bl	800592c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006328:	f7fc ffbe 	bl	80032a8 <HAL_GetTick>
 800632c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800632e:	e008      	b.n	8006342 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006330:	f7fc ffba 	bl	80032a8 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e0f1      	b.n	8006526 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006342:	f7ff fbdf 	bl	8005b04 <LL_RCC_IsActiveFlag_HPRE>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0f1      	beq.n	8006330 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0320 	and.w	r3, r3, #32
 8006354:	2b00      	cmp	r3, #0
 8006356:	d016      	beq.n	8006386 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff faf8 	bl	8005952 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006362:	f7fc ffa1 	bl	80032a8 <HAL_GetTick>
 8006366:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006368:	e008      	b.n	800637c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800636a:	f7fc ff9d 	bl	80032a8 <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b02      	cmp	r3, #2
 8006376:	d901      	bls.n	800637c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e0d4      	b.n	8006526 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800637c:	f7ff fbd3 	bl	8005b26 <LL_RCC_IsActiveFlag_C2HPRE>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0f1      	beq.n	800636a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	d016      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff faf0 	bl	800597c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800639c:	f7fc ff84 	bl	80032a8 <HAL_GetTick>
 80063a0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80063a2:	e008      	b.n	80063b6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063a4:	f7fc ff80 	bl	80032a8 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e0b7      	b.n	8006526 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80063b6:	f7ff fbc8 	bl	8005b4a <LL_RCC_IsActiveFlag_SHDHPRE>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0f1      	beq.n	80063a4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d016      	beq.n	80063fa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff fae9 	bl	80059a8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063d6:	f7fc ff67 	bl	80032a8 <HAL_GetTick>
 80063da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80063dc:	e008      	b.n	80063f0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063de:	f7fc ff63 	bl	80032a8 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d901      	bls.n	80063f0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e09a      	b.n	8006526 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80063f0:	f7ff fbbd 	bl	8005b6e <LL_RCC_IsActiveFlag_PPRE1>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f1      	beq.n	80063de <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0308 	and.w	r3, r3, #8
 8006402:	2b00      	cmp	r3, #0
 8006404:	d017      	beq.n	8006436 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	4618      	mov	r0, r3
 800640e:	f7ff fade 	bl	80059ce <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006412:	f7fc ff49 	bl	80032a8 <HAL_GetTick>
 8006416:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006418:	e008      	b.n	800642c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800641a:	f7fc ff45 	bl	80032a8 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e07c      	b.n	8006526 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800642c:	f7ff fbb0 	bl	8005b90 <LL_RCC_IsActiveFlag_PPRE2>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0f1      	beq.n	800641a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0301 	and.w	r3, r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	d043      	beq.n	80064ca <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d106      	bne.n	8006458 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800644a:	f7ff f956 	bl	80056fa <LL_RCC_HSE_IsReady>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d11e      	bne.n	8006492 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e066      	b.n	8006526 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	2b03      	cmp	r3, #3
 800645e:	d106      	bne.n	800646e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006460:	f7ff fb12 	bl	8005a88 <LL_RCC_PLL_IsReady>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d113      	bne.n	8006492 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e05b      	b.n	8006526 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d106      	bne.n	8006484 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006476:	f7ff f9f0 	bl	800585a <LL_RCC_MSI_IsReady>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d108      	bne.n	8006492 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e050      	b.n	8006526 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006484:	f7ff f966 	bl	8005754 <LL_RCC_HSI_IsReady>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e049      	b.n	8006526 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	4618      	mov	r0, r3
 8006498:	f7ff fa2a 	bl	80058f0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800649c:	f7fc ff04 	bl	80032a8 <HAL_GetTick>
 80064a0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064a2:	e00a      	b.n	80064ba <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064a4:	f7fc ff00 	bl	80032a8 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e035      	b.n	8006526 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ba:	f7ff fa2c 	bl	8005916 <LL_RCC_GetSysClkSource>
 80064be:	4602      	mov	r2, r0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d1ec      	bne.n	80064a4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064ca:	4b19      	ldr	r3, [pc, #100]	; (8006530 <HAL_RCC_ClockConfig+0x278>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d21b      	bcs.n	8006510 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064d8:	4b15      	ldr	r3, [pc, #84]	; (8006530 <HAL_RCC_ClockConfig+0x278>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f023 0207 	bic.w	r2, r3, #7
 80064e0:	4913      	ldr	r1, [pc, #76]	; (8006530 <HAL_RCC_ClockConfig+0x278>)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064e8:	f7fc fede 	bl	80032a8 <HAL_GetTick>
 80064ec:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80064f0:	f7fc feda 	bl	80032a8 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e011      	b.n	8006526 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006502:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <HAL_RCC_ClockConfig+0x278>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d1ef      	bne.n	80064f0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006510:	f000 f8b4 	bl	800667c <HAL_RCC_GetHCLKFreq>
 8006514:	4603      	mov	r3, r0
 8006516:	4a07      	ldr	r2, [pc, #28]	; (8006534 <HAL_RCC_ClockConfig+0x27c>)
 8006518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800651a:	4b07      	ldr	r3, [pc, #28]	; (8006538 <HAL_RCC_ClockConfig+0x280>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4618      	mov	r0, r3
 8006520:	f7fa fd64 	bl	8000fec <HAL_InitTick>
 8006524:	4603      	mov	r3, r0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	58004000 	.word	0x58004000
 8006534:	20000110 	.word	0x20000110
 8006538:	20000120 	.word	0x20000120

0800653c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800653c:	b590      	push	{r4, r7, lr}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006546:	2300      	movs	r3, #0
 8006548:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800654a:	f7ff f9e4 	bl	8005916 <LL_RCC_GetSysClkSource>
 800654e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006550:	f7ff facd 	bl	8005aee <LL_RCC_PLL_GetMainSource>
 8006554:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d005      	beq.n	8006568 <HAL_RCC_GetSysClockFreq+0x2c>
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b0c      	cmp	r3, #12
 8006560:	d139      	bne.n	80065d6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d136      	bne.n	80065d6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006568:	f7ff f987 	bl	800587a <LL_RCC_MSI_IsEnabledRangeSelect>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d115      	bne.n	800659e <HAL_RCC_GetSysClockFreq+0x62>
 8006572:	f7ff f982 	bl	800587a <LL_RCC_MSI_IsEnabledRangeSelect>
 8006576:	4603      	mov	r3, r0
 8006578:	2b01      	cmp	r3, #1
 800657a:	d106      	bne.n	800658a <HAL_RCC_GetSysClockFreq+0x4e>
 800657c:	f7ff f98d 	bl	800589a <LL_RCC_MSI_GetRange>
 8006580:	4603      	mov	r3, r0
 8006582:	0a1b      	lsrs	r3, r3, #8
 8006584:	f003 030f 	and.w	r3, r3, #15
 8006588:	e005      	b.n	8006596 <HAL_RCC_GetSysClockFreq+0x5a>
 800658a:	f7ff f991 	bl	80058b0 <LL_RCC_MSI_GetRangeAfterStandby>
 800658e:	4603      	mov	r3, r0
 8006590:	0a1b      	lsrs	r3, r3, #8
 8006592:	f003 030f 	and.w	r3, r3, #15
 8006596:	4a36      	ldr	r2, [pc, #216]	; (8006670 <HAL_RCC_GetSysClockFreq+0x134>)
 8006598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800659c:	e014      	b.n	80065c8 <HAL_RCC_GetSysClockFreq+0x8c>
 800659e:	f7ff f96c 	bl	800587a <LL_RCC_MSI_IsEnabledRangeSelect>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d106      	bne.n	80065b6 <HAL_RCC_GetSysClockFreq+0x7a>
 80065a8:	f7ff f977 	bl	800589a <LL_RCC_MSI_GetRange>
 80065ac:	4603      	mov	r3, r0
 80065ae:	091b      	lsrs	r3, r3, #4
 80065b0:	f003 030f 	and.w	r3, r3, #15
 80065b4:	e005      	b.n	80065c2 <HAL_RCC_GetSysClockFreq+0x86>
 80065b6:	f7ff f97b 	bl	80058b0 <LL_RCC_MSI_GetRangeAfterStandby>
 80065ba:	4603      	mov	r3, r0
 80065bc:	091b      	lsrs	r3, r3, #4
 80065be:	f003 030f 	and.w	r3, r3, #15
 80065c2:	4a2b      	ldr	r2, [pc, #172]	; (8006670 <HAL_RCC_GetSysClockFreq+0x134>)
 80065c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d115      	bne.n	80065fc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80065d4:	e012      	b.n	80065fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d102      	bne.n	80065e2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065dc:	4b25      	ldr	r3, [pc, #148]	; (8006674 <HAL_RCC_GetSysClockFreq+0x138>)
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	e00c      	b.n	80065fc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d109      	bne.n	80065fc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80065e8:	f7ff f85a 	bl	80056a0 <LL_RCC_HSE_IsEnabledDiv2>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d102      	bne.n	80065f8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80065f2:	4b20      	ldr	r3, [pc, #128]	; (8006674 <HAL_RCC_GetSysClockFreq+0x138>)
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	e001      	b.n	80065fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80065f8:	4b1f      	ldr	r3, [pc, #124]	; (8006678 <HAL_RCC_GetSysClockFreq+0x13c>)
 80065fa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065fc:	f7ff f98b 	bl	8005916 <LL_RCC_GetSysClkSource>
 8006600:	4603      	mov	r3, r0
 8006602:	2b0c      	cmp	r3, #12
 8006604:	d12f      	bne.n	8006666 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006606:	f7ff fa72 	bl	8005aee <LL_RCC_PLL_GetMainSource>
 800660a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b02      	cmp	r3, #2
 8006610:	d003      	beq.n	800661a <HAL_RCC_GetSysClockFreq+0xde>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b03      	cmp	r3, #3
 8006616:	d003      	beq.n	8006620 <HAL_RCC_GetSysClockFreq+0xe4>
 8006618:	e00d      	b.n	8006636 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800661a:	4b16      	ldr	r3, [pc, #88]	; (8006674 <HAL_RCC_GetSysClockFreq+0x138>)
 800661c:	60fb      	str	r3, [r7, #12]
        break;
 800661e:	e00d      	b.n	800663c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006620:	f7ff f83e 	bl	80056a0 <LL_RCC_HSE_IsEnabledDiv2>
 8006624:	4603      	mov	r3, r0
 8006626:	2b01      	cmp	r3, #1
 8006628:	d102      	bne.n	8006630 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800662a:	4b12      	ldr	r3, [pc, #72]	; (8006674 <HAL_RCC_GetSysClockFreq+0x138>)
 800662c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800662e:	e005      	b.n	800663c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006630:	4b11      	ldr	r3, [pc, #68]	; (8006678 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006632:	60fb      	str	r3, [r7, #12]
        break;
 8006634:	e002      	b.n	800663c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	60fb      	str	r3, [r7, #12]
        break;
 800663a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800663c:	f7ff fa35 	bl	8005aaa <LL_RCC_PLL_GetN>
 8006640:	4602      	mov	r2, r0
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	fb03 f402 	mul.w	r4, r3, r2
 8006648:	f7ff fa46 	bl	8005ad8 <LL_RCC_PLL_GetDivider>
 800664c:	4603      	mov	r3, r0
 800664e:	091b      	lsrs	r3, r3, #4
 8006650:	3301      	adds	r3, #1
 8006652:	fbb4 f4f3 	udiv	r4, r4, r3
 8006656:	f7ff fa34 	bl	8005ac2 <LL_RCC_PLL_GetR>
 800665a:	4603      	mov	r3, r0
 800665c:	0f5b      	lsrs	r3, r3, #29
 800665e:	3301      	adds	r3, #1
 8006660:	fbb4 f3f3 	udiv	r3, r4, r3
 8006664:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006666:	697b      	ldr	r3, [r7, #20]
}
 8006668:	4618      	mov	r0, r3
 800666a:	371c      	adds	r7, #28
 800666c:	46bd      	mov	sp, r7
 800666e:	bd90      	pop	{r4, r7, pc}
 8006670:	0800aef0 	.word	0x0800aef0
 8006674:	00f42400 	.word	0x00f42400
 8006678:	01e84800 	.word	0x01e84800

0800667c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800667c:	b598      	push	{r3, r4, r7, lr}
 800667e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006680:	f7ff ff5c 	bl	800653c <HAL_RCC_GetSysClockFreq>
 8006684:	4604      	mov	r4, r0
 8006686:	f7ff f9b5 	bl	80059f4 <LL_RCC_GetAHBPrescaler>
 800668a:	4603      	mov	r3, r0
 800668c:	091b      	lsrs	r3, r3, #4
 800668e:	f003 030f 	and.w	r3, r3, #15
 8006692:	4a03      	ldr	r2, [pc, #12]	; (80066a0 <HAL_RCC_GetHCLKFreq+0x24>)
 8006694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006698:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800669c:	4618      	mov	r0, r3
 800669e:	bd98      	pop	{r3, r4, r7, pc}
 80066a0:	0800ae90 	.word	0x0800ae90

080066a4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066a4:	b598      	push	{r3, r4, r7, lr}
 80066a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80066a8:	f7ff ffe8 	bl	800667c <HAL_RCC_GetHCLKFreq>
 80066ac:	4604      	mov	r4, r0
 80066ae:	f7ff f9b9 	bl	8005a24 <LL_RCC_GetAPB1Prescaler>
 80066b2:	4603      	mov	r3, r0
 80066b4:	0a1b      	lsrs	r3, r3, #8
 80066b6:	4a03      	ldr	r2, [pc, #12]	; (80066c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	bd98      	pop	{r3, r4, r7, pc}
 80066c4:	0800aed0 	.word	0x0800aed0

080066c8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066c8:	b598      	push	{r3, r4, r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80066cc:	f7ff ffd6 	bl	800667c <HAL_RCC_GetHCLKFreq>
 80066d0:	4604      	mov	r4, r0
 80066d2:	f7ff f9b2 	bl	8005a3a <LL_RCC_GetAPB2Prescaler>
 80066d6:	4603      	mov	r3, r0
 80066d8:	0adb      	lsrs	r3, r3, #11
 80066da:	4a03      	ldr	r2, [pc, #12]	; (80066e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	bd98      	pop	{r3, r4, r7, pc}
 80066e8:	0800aed0 	.word	0x0800aed0

080066ec <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d038      	beq.n	800676e <HAL_RCC_GetClockConfig+0x82>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d035      	beq.n	800676e <HAL_RCC_GetClockConfig+0x82>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	224f      	movs	r2, #79	; 0x4f
 8006706:	601a      	str	r2, [r3, #0]
                                    | RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_HCLK3);
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f043 0220 	orr.w	r2, r3, #32
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	601a      	str	r2, [r3, #0]
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 8006714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f003 020c 	and.w	r2, r3, #12
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 8006744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006748:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800674c:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	615a      	str	r2, [r3, #20]
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	b2da      	uxtb	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	619a      	str	r2, [r3, #24]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8006762:	4b05      	ldr	r3, [pc, #20]	; (8006778 <HAL_RCC_GetClockConfig+0x8c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0207 	and.w	r2, r3, #7
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	601a      	str	r2, [r3, #0]
  }
}
 800676e:	bf00      	nop
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr
 8006778:	58004000 	.word	0x58004000

0800677c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800677c:	b590      	push	{r4, r7, lr}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	091b      	lsrs	r3, r3, #4
 8006788:	f003 030f 	and.w	r3, r3, #15
 800678c:	4a10      	ldr	r2, [pc, #64]	; (80067d0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800678e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006792:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006794:	f7ff f939 	bl	8005a0a <LL_RCC_GetAHB3Prescaler>
 8006798:	4603      	mov	r3, r0
 800679a:	091b      	lsrs	r3, r3, #4
 800679c:	f003 030f 	and.w	r3, r3, #15
 80067a0:	4a0c      	ldr	r2, [pc, #48]	; (80067d4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80067a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ac:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	4a09      	ldr	r2, [pc, #36]	; (80067d8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80067b2:	fba2 2303 	umull	r2, r3, r2, r3
 80067b6:	0c9c      	lsrs	r4, r3, #18
 80067b8:	f7fe ff38 	bl	800562c <HAL_PWREx_GetVoltageRange>
 80067bc:	4603      	mov	r3, r0
 80067be:	4619      	mov	r1, r3
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 f80b 	bl	80067dc <RCC_SetFlashLatency>
 80067c6:	4603      	mov	r3, r0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd90      	pop	{r4, r7, pc}
 80067d0:	0800aef0 	.word	0x0800aef0
 80067d4:	0800ae90 	.word	0x0800ae90
 80067d8:	431bde83 	.word	0x431bde83

080067dc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08e      	sub	sp, #56	; 0x38
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80067e6:	4a3a      	ldr	r2, [pc, #232]	; (80068d0 <RCC_SetFlashLatency+0xf4>)
 80067e8:	f107 0320 	add.w	r3, r7, #32
 80067ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067f0:	6018      	str	r0, [r3, #0]
 80067f2:	3304      	adds	r3, #4
 80067f4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80067f6:	4a37      	ldr	r2, [pc, #220]	; (80068d4 <RCC_SetFlashLatency+0xf8>)
 80067f8:	f107 0318 	add.w	r3, r7, #24
 80067fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006800:	6018      	str	r0, [r3, #0]
 8006802:	3304      	adds	r3, #4
 8006804:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006806:	4a34      	ldr	r2, [pc, #208]	; (80068d8 <RCC_SetFlashLatency+0xfc>)
 8006808:	f107 030c 	add.w	r3, r7, #12
 800680c:	ca07      	ldmia	r2, {r0, r1, r2}
 800680e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006812:	2300      	movs	r3, #0
 8006814:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800681c:	d11b      	bne.n	8006856 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800681e:	2300      	movs	r3, #0
 8006820:	633b      	str	r3, [r7, #48]	; 0x30
 8006822:	e014      	b.n	800684e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	3338      	adds	r3, #56	; 0x38
 800682a:	443b      	add	r3, r7
 800682c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006830:	461a      	mov	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4293      	cmp	r3, r2
 8006836:	d807      	bhi.n	8006848 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	3338      	adds	r3, #56	; 0x38
 800683e:	443b      	add	r3, r7
 8006840:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006844:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006846:	e021      	b.n	800688c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684a:	3301      	adds	r3, #1
 800684c:	633b      	str	r3, [r7, #48]	; 0x30
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	2b02      	cmp	r3, #2
 8006852:	d9e7      	bls.n	8006824 <RCC_SetFlashLatency+0x48>
 8006854:	e01a      	b.n	800688c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006856:	2300      	movs	r3, #0
 8006858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800685a:	e014      	b.n	8006886 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	3338      	adds	r3, #56	; 0x38
 8006862:	443b      	add	r3, r7
 8006864:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006868:	461a      	mov	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4293      	cmp	r3, r2
 800686e:	d807      	bhi.n	8006880 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	3338      	adds	r3, #56	; 0x38
 8006876:	443b      	add	r3, r7
 8006878:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800687c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800687e:	e005      	b.n	800688c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006882:	3301      	adds	r3, #1
 8006884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	2b02      	cmp	r3, #2
 800688a:	d9e7      	bls.n	800685c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800688c:	4b13      	ldr	r3, [pc, #76]	; (80068dc <RCC_SetFlashLatency+0x100>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f023 0207 	bic.w	r2, r3, #7
 8006894:	4911      	ldr	r1, [pc, #68]	; (80068dc <RCC_SetFlashLatency+0x100>)
 8006896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006898:	4313      	orrs	r3, r2
 800689a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800689c:	f7fc fd04 	bl	80032a8 <HAL_GetTick>
 80068a0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80068a2:	e008      	b.n	80068b6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80068a4:	f7fc fd00 	bl	80032a8 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d901      	bls.n	80068b6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e007      	b.n	80068c6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80068b6:	4b09      	ldr	r3, [pc, #36]	; (80068dc <RCC_SetFlashLatency+0x100>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0307 	and.w	r3, r3, #7
 80068be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d1ef      	bne.n	80068a4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3738      	adds	r7, #56	; 0x38
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	0800ae54 	.word	0x0800ae54
 80068d4:	0800ae5c 	.word	0x0800ae5c
 80068d8:	0800ae64 	.word	0x0800ae64
 80068dc:	58004000 	.word	0x58004000

080068e0 <LL_RCC_LSE_IsReady>:
{
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80068e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d101      	bne.n	80068f8 <LL_RCC_LSE_IsReady+0x18>
 80068f4:	2301      	movs	r3, #1
 80068f6:	e000      	b.n	80068fa <LL_RCC_LSE_IsReady+0x1a>
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bc80      	pop	{r7}
 8006900:	4770      	bx	lr

08006902 <LL_RCC_SetUSARTClockSource>:
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800690a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800690e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	0c1b      	lsrs	r3, r3, #16
 8006916:	43db      	mvns	r3, r3
 8006918:	401a      	ands	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	b29b      	uxth	r3, r3
 800691e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006922:	4313      	orrs	r3, r2
 8006924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr

08006932 <LL_RCC_SetI2SClockSource>:
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800693a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800693e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006942:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006946:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4313      	orrs	r3, r2
 800694e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006952:	bf00      	nop
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	bc80      	pop	{r7}
 800695a:	4770      	bx	lr

0800695c <LL_RCC_SetLPUARTClockSource>:
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006970:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4313      	orrs	r3, r2
 8006978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	bc80      	pop	{r7}
 8006984:	4770      	bx	lr

08006986 <LL_RCC_SetI2CClockSource>:
{
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800698e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006992:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	091b      	lsrs	r3, r3, #4
 800699a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800699e:	43db      	mvns	r3, r3
 80069a0:	401a      	ands	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80069aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069ae:	4313      	orrs	r3, r2
 80069b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bc80      	pop	{r7}
 80069bc:	4770      	bx	lr

080069be <LL_RCC_SetLPTIMClockSource>:
{
 80069be:	b480      	push	{r7}
 80069c0:	b083      	sub	sp, #12
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80069c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	0c1b      	lsrs	r3, r3, #16
 80069d2:	041b      	lsls	r3, r3, #16
 80069d4:	43db      	mvns	r3, r3
 80069d6:	401a      	ands	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	041b      	lsls	r3, r3, #16
 80069dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069e0:	4313      	orrs	r3, r2
 80069e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr

080069f0 <LL_RCC_SetRNGClockSource>:
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80069f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a00:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006a04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bc80      	pop	{r7}
 8006a18:	4770      	bx	lr

08006a1a <LL_RCC_SetADCClockSource>:
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b083      	sub	sp, #12
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a3a:	bf00      	nop
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr

08006a44 <LL_RCC_SetRTCClockSource>:
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr

08006a6e <LL_RCC_GetRTCClockSource>:
{
 8006a6e:	b480      	push	{r7}
 8006a70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bc80      	pop	{r7}
 8006a84:	4770      	bx	lr

08006a86 <LL_RCC_ForceBackupDomainReset>:
{
 8006a86:	b480      	push	{r7}
 8006a88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006a9e:	bf00      	nop
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bc80      	pop	{r7}
 8006aa4:	4770      	bx	lr

08006aa6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006abe:	bf00      	nop
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr
	...

08006ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006ad8:	2300      	movs	r3, #0
 8006ada:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d058      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006ae8:	f7fe fd92 	bl	8005610 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006aec:	f7fc fbdc 	bl	80032a8 <HAL_GetTick>
 8006af0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006af2:	e009      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006af4:	f7fc fbd8 	bl	80032a8 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d902      	bls.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	74fb      	strb	r3, [r7, #19]
        break;
 8006b06:	e006      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006b08:	4b7b      	ldr	r3, [pc, #492]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b14:	d1ee      	bne.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006b16:	7cfb      	ldrb	r3, [r7, #19]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d13c      	bne.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006b1c:	f7ff ffa7 	bl	8006a6e <LL_RCC_GetRTCClockSource>
 8006b20:	4602      	mov	r2, r0
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d00f      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b36:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b38:	f7ff ffa5 	bl	8006a86 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b3c:	f7ff ffb3 	bl	8006aa6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d014      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b54:	f7fc fba8 	bl	80032a8 <HAL_GetTick>
 8006b58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006b5a:	e00b      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b5c:	f7fc fba4 	bl	80032a8 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d902      	bls.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	74fb      	strb	r3, [r7, #19]
            break;
 8006b72:	e004      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006b74:	f7ff feb4 	bl	80068e0 <LL_RCC_LSE_IsReady>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d1ee      	bne.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006b7e:	7cfb      	ldrb	r3, [r7, #19]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d105      	bne.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff ff5b 	bl	8006a44 <LL_RCC_SetRTCClockSource>
 8006b8e:	e004      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b90:	7cfb      	ldrb	r3, [r7, #19]
 8006b92:	74bb      	strb	r3, [r7, #18]
 8006b94:	e001      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b96:	7cfb      	ldrb	r3, [r7, #19]
 8006b98:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d004      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7ff fea9 	bl	8006902 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d004      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7ff fe9e 	bl	8006902 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d004      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7ff fec0 	bl	800695c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d004      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff fee6 	bl	80069be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff fedb 	bl	80069be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d004      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7ff fed0 	bl	80069be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d004      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff fea9 	bl	8006986 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d004      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7ff fe9e 	bl	8006986 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d004      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7ff fe93 	bl	8006986 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0310 	and.w	r3, r3, #16
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d011      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7ff fe5e 	bl	8006932 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c7e:	d107      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d010      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff fea5 	bl	80069f0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d107      	bne.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cbc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d011      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7ff fea3 	bl	8006a1a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cdc:	d107      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cec:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006cee:	7cbb      	ldrb	r3, [r7, #18]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	58000400 	.word	0x58000400

08006cfc <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006d04:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d0c:	4904      	ldr	r1, [pc, #16]	; (8006d20 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	608b      	str	r3, [r1, #8]
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bc80      	pop	{r7}
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	58000400 	.word	0x58000400

08006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d28:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2e:	4a04      	ldr	r2, [pc, #16]	; (8006d40 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006d30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006d38:	bf00      	nop
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr
 8006d40:	58000400 	.word	0x58000400

08006d44 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8006d44:	b480      	push	{r7}
 8006d46:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d48:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4e:	4a04      	ldr	r2, [pc, #16]	; (8006d60 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006d50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006d58:	bf00      	nop
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bc80      	pop	{r7}
 8006d5e:	4770      	bx	lr
 8006d60:	58000400 	.word	0x58000400

08006d64 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8006d64:	b480      	push	{r7}
 8006d66:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006d68:	4b03      	ldr	r3, [pc, #12]	; (8006d78 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d6e:	619a      	str	r2, [r3, #24]
}
 8006d70:	bf00      	nop
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bc80      	pop	{r7}
 8006d76:	4770      	bx	lr
 8006d78:	58000400 	.word	0x58000400

08006d7c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006d80:	4b06      	ldr	r3, [pc, #24]	; (8006d9c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d101      	bne.n	8006d90 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e000      	b.n	8006d92 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc80      	pop	{r7}
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	58000400 	.word	0x58000400

08006da0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006da4:	4b06      	ldr	r3, [pc, #24]	; (8006dc0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b04      	cmp	r3, #4
 8006dae:	d101      	bne.n	8006db4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006db0:	2301      	movs	r3, #1
 8006db2:	e000      	b.n	8006db6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bc80      	pop	{r7}
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	58000400 	.word	0x58000400

08006dc4 <LL_RCC_RF_DisableReset>:
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006ddc:	bf00      	nop
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr

08006de4 <LL_RCC_IsRFUnderReset>:
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006df8:	d101      	bne.n	8006dfe <LL_RCC_IsRFUnderReset+0x1a>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e000      	b.n	8006e00 <LL_RCC_IsRFUnderReset+0x1c>
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bc80      	pop	{r7}
 8006e06:	4770      	bx	lr

08006e08 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006e10:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <LL_EXTI_EnableIT_32_63+0x24>)
 8006e12:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006e16:	4905      	ldr	r1, [pc, #20]	; (8006e2c <LL_EXTI_EnableIT_32_63+0x24>)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bc80      	pop	{r7}
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	58000800 	.word	0x58000800

08006e30 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	73fb      	strb	r3, [r7, #15]
    return status;
 8006e42:	7bfb      	ldrb	r3, [r7, #15]
 8006e44:	e052      	b.n	8006eec <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	799b      	ldrb	r3, [r3, #6]
 8006e4e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d002      	beq.n	8006e5c <HAL_SUBGHZ_Init+0x2c>
 8006e56:	7bbb      	ldrb	r3, [r7, #14]
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d109      	bne.n	8006e70 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7fa f9d4 	bl	8001210 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006e68:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006e6c:	f7ff ffcc 	bl	8006e08 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d126      	bne.n	8006ec4 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8006e7c:	f7ff ffa2 	bl	8006dc4 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006e80:	4b1c      	ldr	r3, [pc, #112]	; (8006ef4 <HAL_SUBGHZ_Init+0xc4>)
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	4613      	mov	r3, r2
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	0cdb      	lsrs	r3, r3, #19
 8006e8e:	2264      	movs	r2, #100	; 0x64
 8006e90:	fb02 f303 	mul.w	r3, r2, r3
 8006e94:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d105      	bne.n	8006ea8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	609a      	str	r2, [r3, #8]
        break;
 8006ea6:	e007      	b.n	8006eb8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006eae:	f7ff ff99 	bl	8006de4 <LL_RCC_IsRFUnderReset>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1ee      	bne.n	8006e96 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006eb8:	f7ff ff34 	bl	8006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006ebc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006ec0:	f7ff ff1c 	bl	8006cfc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006ec4:	f7ff ff4e 	bl	8006d64 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fab6 	bl	8007444 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	719a      	strb	r2, [r3, #6]

  return status;
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	20000110 	.word	0x20000110

08006ef8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	607a      	str	r2, [r7, #4]
 8006f02:	461a      	mov	r2, r3
 8006f04:	460b      	mov	r3, r1
 8006f06:	817b      	strh	r3, [r7, #10]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	799b      	ldrb	r3, [r3, #6]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d14a      	bne.n	8006fac <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	795b      	ldrb	r3, [r3, #5]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d101      	bne.n	8006f22 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	e045      	b.n	8006fae <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2201      	movs	r2, #1
 8006f26:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 fb56 	bl	80075e0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006f34:	f7ff ff06 	bl	8006d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006f38:	210d      	movs	r1, #13
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 faa2 	bl	8007484 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006f40:	897b      	ldrh	r3, [r7, #10]
 8006f42:	0a1b      	lsrs	r3, r3, #8
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	4619      	mov	r1, r3
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 fa9a 	bl	8007484 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006f50:	897b      	ldrh	r3, [r7, #10]
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	4619      	mov	r1, r3
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 fa94 	bl	8007484 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	82bb      	strh	r3, [r7, #20]
 8006f60:	e00a      	b.n	8006f78 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006f62:	8abb      	ldrh	r3, [r7, #20]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	4413      	add	r3, r2
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 fa89 	bl	8007484 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006f72:	8abb      	ldrh	r3, [r7, #20]
 8006f74:	3301      	adds	r3, #1
 8006f76:	82bb      	strh	r3, [r7, #20]
 8006f78:	8aba      	ldrh	r2, [r7, #20]
 8006f7a:	893b      	ldrh	r3, [r7, #8]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d3f0      	bcc.n	8006f62 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f80:	f7ff fed0 	bl	8006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 fb4f 	bl	8007628 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	75fb      	strb	r3, [r7, #23]
 8006f96:	e001      	b.n	8006f9c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	715a      	strb	r2, [r3, #5]

    return status;
 8006fa8:	7dfb      	ldrb	r3, [r7, #23]
 8006faa:	e000      	b.n	8006fae <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006fac:	2302      	movs	r3, #2
  }
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b088      	sub	sp, #32
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	817b      	strh	r3, [r7, #10]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	799b      	ldrb	r3, [r3, #6]
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d14a      	bne.n	800706e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	795b      	ldrb	r3, [r3, #5]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e045      	b.n	8007070 <HAL_SUBGHZ_ReadRegisters+0xba>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 faf8 	bl	80075e0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006ff0:	f7ff fea8 	bl	8006d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006ff4:	211d      	movs	r1, #29
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f000 fa44 	bl	8007484 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006ffc:	897b      	ldrh	r3, [r7, #10]
 8006ffe:	0a1b      	lsrs	r3, r3, #8
 8007000:	b29b      	uxth	r3, r3
 8007002:	b2db      	uxtb	r3, r3
 8007004:	4619      	mov	r1, r3
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 fa3c 	bl	8007484 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800700c:	897b      	ldrh	r3, [r7, #10]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	4619      	mov	r1, r3
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 fa36 	bl	8007484 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007018:	2100      	movs	r1, #0
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 fa32 	bl	8007484 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007020:	2300      	movs	r3, #0
 8007022:	82fb      	strh	r3, [r7, #22]
 8007024:	e009      	b.n	800703a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007026:	69b9      	ldr	r1, [r7, #24]
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 fa81 	bl	8007530 <SUBGHZSPI_Receive>
      pData++;
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	3301      	adds	r3, #1
 8007032:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007034:	8afb      	ldrh	r3, [r7, #22]
 8007036:	3301      	adds	r3, #1
 8007038:	82fb      	strh	r3, [r7, #22]
 800703a:	8afa      	ldrh	r2, [r7, #22]
 800703c:	893b      	ldrh	r3, [r7, #8]
 800703e:	429a      	cmp	r2, r3
 8007040:	d3f1      	bcc.n	8007026 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007042:	f7ff fe6f 	bl	8006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 faee 	bl	8007628 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	77fb      	strb	r3, [r7, #31]
 8007058:	e001      	b.n	800705e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2201      	movs	r2, #1
 8007062:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	715a      	strb	r2, [r3, #5]

    return status;
 800706a:	7ffb      	ldrb	r3, [r7, #31]
 800706c:	e000      	b.n	8007070 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800706e:	2302      	movs	r3, #2
  }
}
 8007070:	4618      	mov	r0, r3
 8007072:	3720      	adds	r7, #32
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	607a      	str	r2, [r7, #4]
 8007082:	461a      	mov	r2, r3
 8007084:	460b      	mov	r3, r1
 8007086:	72fb      	strb	r3, [r7, #11]
 8007088:	4613      	mov	r3, r2
 800708a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	799b      	ldrb	r3, [r3, #6]
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b01      	cmp	r3, #1
 8007094:	d14a      	bne.n	800712c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	795b      	ldrb	r3, [r3, #5]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d101      	bne.n	80070a2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800709e:	2302      	movs	r3, #2
 80070a0:	e045      	b.n	800712e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2201      	movs	r2, #1
 80070a6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 fa99 	bl	80075e0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80070ae:	7afb      	ldrb	r3, [r7, #11]
 80070b0:	2b84      	cmp	r3, #132	; 0x84
 80070b2:	d002      	beq.n	80070ba <HAL_SUBGHZ_ExecSetCmd+0x42>
 80070b4:	7afb      	ldrb	r3, [r7, #11]
 80070b6:	2b94      	cmp	r3, #148	; 0x94
 80070b8:	d103      	bne.n	80070c2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	711a      	strb	r2, [r3, #4]
 80070c0:	e002      	b.n	80070c8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80070c8:	f7ff fe3c 	bl	8006d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80070cc:	7afb      	ldrb	r3, [r7, #11]
 80070ce:	4619      	mov	r1, r3
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 f9d7 	bl	8007484 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80070d6:	2300      	movs	r3, #0
 80070d8:	82bb      	strh	r3, [r7, #20]
 80070da:	e00a      	b.n	80070f2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80070dc:	8abb      	ldrh	r3, [r7, #20]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	4413      	add	r3, r2
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	4619      	mov	r1, r3
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f000 f9cc 	bl	8007484 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070ec:	8abb      	ldrh	r3, [r7, #20]
 80070ee:	3301      	adds	r3, #1
 80070f0:	82bb      	strh	r3, [r7, #20]
 80070f2:	8aba      	ldrh	r2, [r7, #20]
 80070f4:	893b      	ldrh	r3, [r7, #8]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d3f0      	bcc.n	80070dc <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80070fa:	f7ff fe13 	bl	8006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80070fe:	7afb      	ldrb	r3, [r7, #11]
 8007100:	2b84      	cmp	r3, #132	; 0x84
 8007102:	d002      	beq.n	800710a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f000 fa8f 	bl	8007628 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	75fb      	strb	r3, [r7, #23]
 8007116:	e001      	b.n	800711c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2201      	movs	r2, #1
 8007120:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	715a      	strb	r2, [r3, #5]

    return status;
 8007128:	7dfb      	ldrb	r3, [r7, #23]
 800712a:	e000      	b.n	800712e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800712c:	2302      	movs	r3, #2
  }
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b088      	sub	sp, #32
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	461a      	mov	r2, r3
 8007142:	460b      	mov	r3, r1
 8007144:	72fb      	strb	r3, [r7, #11]
 8007146:	4613      	mov	r3, r2
 8007148:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	799b      	ldrb	r3, [r3, #6]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b01      	cmp	r3, #1
 8007156:	d13d      	bne.n	80071d4 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	795b      	ldrb	r3, [r3, #5]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d101      	bne.n	8007164 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007160:	2302      	movs	r3, #2
 8007162:	e038      	b.n	80071d6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2201      	movs	r2, #1
 8007168:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 fa38 	bl	80075e0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007170:	f7ff fde8 	bl	8006d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007174:	7afb      	ldrb	r3, [r7, #11]
 8007176:	4619      	mov	r1, r3
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 f983 	bl	8007484 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800717e:	2100      	movs	r1, #0
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f000 f97f 	bl	8007484 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007186:	2300      	movs	r3, #0
 8007188:	82fb      	strh	r3, [r7, #22]
 800718a:	e009      	b.n	80071a0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800718c:	69b9      	ldr	r1, [r7, #24]
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 f9ce 	bl	8007530 <SUBGHZSPI_Receive>
      pData++;
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	3301      	adds	r3, #1
 8007198:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800719a:	8afb      	ldrh	r3, [r7, #22]
 800719c:	3301      	adds	r3, #1
 800719e:	82fb      	strh	r3, [r7, #22]
 80071a0:	8afa      	ldrh	r2, [r7, #22]
 80071a2:	893b      	ldrh	r3, [r7, #8]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d3f1      	bcc.n	800718c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80071a8:	f7ff fdbc 	bl	8006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 fa3b 	bl	8007628 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	77fb      	strb	r3, [r7, #31]
 80071be:	e001      	b.n	80071c4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2201      	movs	r2, #1
 80071c8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	715a      	strb	r2, [r3, #5]

    return status;
 80071d0:	7ffb      	ldrb	r3, [r7, #31]
 80071d2:	e000      	b.n	80071d6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80071d4:	2302      	movs	r3, #2
  }
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3720      	adds	r7, #32
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b086      	sub	sp, #24
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	461a      	mov	r2, r3
 80071ea:	460b      	mov	r3, r1
 80071ec:	72fb      	strb	r3, [r7, #11]
 80071ee:	4613      	mov	r3, r2
 80071f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	799b      	ldrb	r3, [r3, #6]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d13e      	bne.n	800727a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	795b      	ldrb	r3, [r3, #5]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d101      	bne.n	8007208 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007204:	2302      	movs	r3, #2
 8007206:	e039      	b.n	800727c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2201      	movs	r2, #1
 800720c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 f9e6 	bl	80075e0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007214:	f7ff fd96 	bl	8006d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007218:	210e      	movs	r1, #14
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 f932 	bl	8007484 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007220:	7afb      	ldrb	r3, [r7, #11]
 8007222:	4619      	mov	r1, r3
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f000 f92d 	bl	8007484 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800722a:	2300      	movs	r3, #0
 800722c:	82bb      	strh	r3, [r7, #20]
 800722e:	e00a      	b.n	8007246 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007230:	8abb      	ldrh	r3, [r7, #20]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	4413      	add	r3, r2
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	4619      	mov	r1, r3
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 f922 	bl	8007484 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007240:	8abb      	ldrh	r3, [r7, #20]
 8007242:	3301      	adds	r3, #1
 8007244:	82bb      	strh	r3, [r7, #20]
 8007246:	8aba      	ldrh	r2, [r7, #20]
 8007248:	893b      	ldrh	r3, [r7, #8]
 800724a:	429a      	cmp	r2, r3
 800724c:	d3f0      	bcc.n	8007230 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800724e:	f7ff fd69 	bl	8006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f9e8 	bl	8007628 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	75fb      	strb	r3, [r7, #23]
 8007264:	e001      	b.n	800726a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2201      	movs	r2, #1
 800726e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	715a      	strb	r2, [r3, #5]

    return status;
 8007276:	7dfb      	ldrb	r3, [r7, #23]
 8007278:	e000      	b.n	800727c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800727a:	2302      	movs	r3, #2
  }
}
 800727c:	4618      	mov	r0, r3
 800727e:	3718      	adds	r7, #24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b088      	sub	sp, #32
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	607a      	str	r2, [r7, #4]
 800728e:	461a      	mov	r2, r3
 8007290:	460b      	mov	r3, r1
 8007292:	72fb      	strb	r3, [r7, #11]
 8007294:	4613      	mov	r3, r2
 8007296:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	799b      	ldrb	r3, [r3, #6]
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d141      	bne.n	800732a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	795b      	ldrb	r3, [r3, #5]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d101      	bne.n	80072b2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80072ae:	2302      	movs	r3, #2
 80072b0:	e03c      	b.n	800732c <HAL_SUBGHZ_ReadBuffer+0xa8>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2201      	movs	r2, #1
 80072b6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 f991 	bl	80075e0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80072be:	f7ff fd41 	bl	8006d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80072c2:	211e      	movs	r1, #30
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 f8dd 	bl	8007484 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80072ca:	7afb      	ldrb	r3, [r7, #11]
 80072cc:	4619      	mov	r1, r3
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 f8d8 	bl	8007484 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80072d4:	2100      	movs	r1, #0
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f8d4 	bl	8007484 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80072dc:	2300      	movs	r3, #0
 80072de:	82fb      	strh	r3, [r7, #22]
 80072e0:	e009      	b.n	80072f6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80072e2:	69b9      	ldr	r1, [r7, #24]
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 f923 	bl	8007530 <SUBGHZSPI_Receive>
      pData++;
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	3301      	adds	r3, #1
 80072ee:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80072f0:	8afb      	ldrh	r3, [r7, #22]
 80072f2:	3301      	adds	r3, #1
 80072f4:	82fb      	strh	r3, [r7, #22]
 80072f6:	8afa      	ldrh	r2, [r7, #22]
 80072f8:	893b      	ldrh	r3, [r7, #8]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d3f1      	bcc.n	80072e2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80072fe:	f7ff fd11 	bl	8006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 f990 	bl	8007628 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	77fb      	strb	r3, [r7, #31]
 8007314:	e001      	b.n	800731a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2201      	movs	r2, #1
 800731e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	715a      	strb	r2, [r3, #5]

    return status;
 8007326:	7ffb      	ldrb	r3, [r7, #31]
 8007328:	e000      	b.n	800732c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800732a:	2302      	movs	r3, #2
  }
}
 800732c:	4618      	mov	r0, r3
 800732e:	3720      	adds	r7, #32
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800733c:	2300      	movs	r3, #0
 800733e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007340:	f107 020c 	add.w	r2, r7, #12
 8007344:	2302      	movs	r3, #2
 8007346:	2112      	movs	r1, #18
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff fef4 	bl	8007136 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800734e:	7b3b      	ldrb	r3, [r7, #12]
 8007350:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007352:	89fb      	ldrh	r3, [r7, #14]
 8007354:	021b      	lsls	r3, r3, #8
 8007356:	b21a      	sxth	r2, r3
 8007358:	7b7b      	ldrb	r3, [r7, #13]
 800735a:	b21b      	sxth	r3, r3
 800735c:	4313      	orrs	r3, r2
 800735e:	b21b      	sxth	r3, r3
 8007360:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8007362:	f107 020c 	add.w	r2, r7, #12
 8007366:	2302      	movs	r3, #2
 8007368:	2102      	movs	r1, #2
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff fe84 	bl	8007078 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007370:	89fb      	ldrh	r3, [r7, #14]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	d002      	beq.n	8007380 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7fb fea0 	bl	80030c0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007380:	89fb      	ldrh	r3, [r7, #14]
 8007382:	085b      	lsrs	r3, r3, #1
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7fb fea5 	bl	80030dc <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007392:	89fb      	ldrh	r3, [r7, #14]
 8007394:	089b      	lsrs	r3, r3, #2
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <HAL_SUBGHZ_IRQHandler+0x70>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7fb fef4 	bl	800318c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80073a4:	89fb      	ldrh	r3, [r7, #14]
 80073a6:	08db      	lsrs	r3, r3, #3
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <HAL_SUBGHZ_IRQHandler+0x82>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7fb fef9 	bl	80031a8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80073b6:	89fb      	ldrh	r3, [r7, #14]
 80073b8:	091b      	lsrs	r3, r3, #4
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <HAL_SUBGHZ_IRQHandler+0x94>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7fb fefe 	bl	80031c4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80073c8:	89fb      	ldrh	r3, [r7, #14]
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7fb fecb 	bl	8003170 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80073da:	89fb      	ldrh	r3, [r7, #14]
 80073dc:	099b      	lsrs	r3, r3, #6
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <HAL_SUBGHZ_IRQHandler+0xb8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7fb fe86 	bl	80030f8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80073ec:	89fb      	ldrh	r3, [r7, #14]
 80073ee:	09db      	lsrs	r3, r3, #7
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00e      	beq.n	8007416 <HAL_SUBGHZ_IRQHandler+0xe2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80073f8:	89fb      	ldrh	r3, [r7, #14]
 80073fa:	0a1b      	lsrs	r3, r3, #8
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d004      	beq.n	800740e <HAL_SUBGHZ_IRQHandler+0xda>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007404:	2101      	movs	r1, #1
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fb fe84 	bl	8003114 <HAL_SUBGHZ_CADStatusCallback>
 800740c:	e003      	b.n	8007416 <HAL_SUBGHZ_IRQHandler+0xe2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800740e:	2100      	movs	r1, #0
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7fb fe7f 	bl	8003114 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007416:	89fb      	ldrh	r3, [r7, #14]
 8007418:	0a5b      	lsrs	r3, r3, #9
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <HAL_SUBGHZ_IRQHandler+0xf4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7fb fe94 	bl	8003150 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007428:	89fb      	ldrh	r3, [r7, #14]
 800742a:	0b9b      	lsrs	r3, r3, #14
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <HAL_SUBGHZ_IRQHandler+0x106>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7fb fed3 	bl	80031e0 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800743a:	bf00      	nop
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800744c:	4b0c      	ldr	r3, [pc, #48]	; (8007480 <SUBGHZSPI_Init+0x3c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a0b      	ldr	r2, [pc, #44]	; (8007480 <SUBGHZSPI_Init+0x3c>)
 8007452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007456:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007458:	4a09      	ldr	r2, [pc, #36]	; (8007480 <SUBGHZSPI_Init+0x3c>)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007460:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007462:	4b07      	ldr	r3, [pc, #28]	; (8007480 <SUBGHZSPI_Init+0x3c>)
 8007464:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007468:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800746a:	4b05      	ldr	r3, [pc, #20]	; (8007480 <SUBGHZSPI_Init+0x3c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a04      	ldr	r2, [pc, #16]	; (8007480 <SUBGHZSPI_Init+0x3c>)
 8007470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007474:	6013      	str	r3, [r2, #0]
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	bc80      	pop	{r7}
 800747e:	4770      	bx	lr
 8007480:	58010000 	.word	0x58010000

08007484 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	460b      	mov	r3, r1
 800748e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007494:	4b23      	ldr	r3, [pc, #140]	; (8007524 <SUBGHZSPI_Transmit+0xa0>)
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	4613      	mov	r3, r2
 800749a:	00db      	lsls	r3, r3, #3
 800749c:	1a9b      	subs	r3, r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	0cdb      	lsrs	r3, r3, #19
 80074a2:	2264      	movs	r2, #100	; 0x64
 80074a4:	fb02 f303 	mul.w	r3, r2, r3
 80074a8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d105      	bne.n	80074bc <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	609a      	str	r2, [r3, #8]
      break;
 80074ba:	e008      	b.n	80074ce <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3b01      	subs	r3, #1
 80074c0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80074c2:	4b19      	ldr	r3, [pc, #100]	; (8007528 <SUBGHZSPI_Transmit+0xa4>)
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d1ed      	bne.n	80074aa <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80074ce:	4b17      	ldr	r3, [pc, #92]	; (800752c <SUBGHZSPI_Transmit+0xa8>)
 80074d0:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	78fa      	ldrb	r2, [r7, #3]
 80074d6:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80074d8:	4b12      	ldr	r3, [pc, #72]	; (8007524 <SUBGHZSPI_Transmit+0xa0>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	4613      	mov	r3, r2
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	1a9b      	subs	r3, r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	0cdb      	lsrs	r3, r3, #19
 80074e6:	2264      	movs	r2, #100	; 0x64
 80074e8:	fb02 f303 	mul.w	r3, r2, r3
 80074ec:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d105      	bne.n	8007500 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	609a      	str	r2, [r3, #8]
      break;
 80074fe:	e008      	b.n	8007512 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3b01      	subs	r3, #1
 8007504:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007506:	4b08      	ldr	r3, [pc, #32]	; (8007528 <SUBGHZSPI_Transmit+0xa4>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b01      	cmp	r3, #1
 8007510:	d1ed      	bne.n	80074ee <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007512:	4b05      	ldr	r3, [pc, #20]	; (8007528 <SUBGHZSPI_Transmit+0xa4>)
 8007514:	68db      	ldr	r3, [r3, #12]

  return status;
 8007516:	7dfb      	ldrb	r3, [r7, #23]
}
 8007518:	4618      	mov	r0, r3
 800751a:	371c      	adds	r7, #28
 800751c:	46bd      	mov	sp, r7
 800751e:	bc80      	pop	{r7}
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	20000110 	.word	0x20000110
 8007528:	58010000 	.word	0x58010000
 800752c:	5801000c 	.word	0x5801000c

08007530 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800753e:	4b25      	ldr	r3, [pc, #148]	; (80075d4 <SUBGHZSPI_Receive+0xa4>)
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	4613      	mov	r3, r2
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	1a9b      	subs	r3, r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	0cdb      	lsrs	r3, r3, #19
 800754c:	2264      	movs	r2, #100	; 0x64
 800754e:	fb02 f303 	mul.w	r3, r2, r3
 8007552:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d105      	bne.n	8007566 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	609a      	str	r2, [r3, #8]
      break;
 8007564:	e008      	b.n	8007578 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3b01      	subs	r3, #1
 800756a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800756c:	4b1a      	ldr	r3, [pc, #104]	; (80075d8 <SUBGHZSPI_Receive+0xa8>)
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b02      	cmp	r3, #2
 8007576:	d1ed      	bne.n	8007554 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007578:	4b18      	ldr	r3, [pc, #96]	; (80075dc <SUBGHZSPI_Receive+0xac>)
 800757a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	22ff      	movs	r2, #255	; 0xff
 8007580:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007582:	4b14      	ldr	r3, [pc, #80]	; (80075d4 <SUBGHZSPI_Receive+0xa4>)
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	4613      	mov	r3, r2
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	1a9b      	subs	r3, r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	0cdb      	lsrs	r3, r3, #19
 8007590:	2264      	movs	r2, #100	; 0x64
 8007592:	fb02 f303 	mul.w	r3, r2, r3
 8007596:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d105      	bne.n	80075aa <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	609a      	str	r2, [r3, #8]
      break;
 80075a8:	e008      	b.n	80075bc <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3b01      	subs	r3, #1
 80075ae:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80075b0:	4b09      	ldr	r3, [pc, #36]	; (80075d8 <SUBGHZSPI_Receive+0xa8>)
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d1ed      	bne.n	8007598 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80075bc:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <SUBGHZSPI_Receive+0xa8>)
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	701a      	strb	r2, [r3, #0]

  return status;
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	371c      	adds	r7, #28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	20000110 	.word	0x20000110
 80075d8:	58010000 	.word	0x58010000
 80075dc:	5801000c 	.word	0x5801000c

080075e0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	791b      	ldrb	r3, [r3, #4]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d111      	bne.n	8007614 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80075f0:	4b0c      	ldr	r3, [pc, #48]	; (8007624 <SUBGHZ_CheckDeviceReady+0x44>)
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	4613      	mov	r3, r2
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	4413      	add	r3, r2
 80075fa:	00db      	lsls	r3, r3, #3
 80075fc:	0c1b      	lsrs	r3, r3, #16
 80075fe:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007600:	f7ff fba0 	bl	8006d44 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3b01      	subs	r3, #1
 8007608:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1f9      	bne.n	8007604 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007610:	f7ff fb88 	bl	8006d24 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f807 	bl	8007628 <SUBGHZ_WaitOnBusy>
 800761a:	4603      	mov	r3, r0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	20000110 	.word	0x20000110

08007628 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007634:	4b12      	ldr	r3, [pc, #72]	; (8007680 <SUBGHZ_WaitOnBusy+0x58>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	4613      	mov	r3, r2
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	4413      	add	r3, r2
 800763e:	00db      	lsls	r3, r3, #3
 8007640:	0d1b      	lsrs	r3, r3, #20
 8007642:	2264      	movs	r2, #100	; 0x64
 8007644:	fb02 f303 	mul.w	r3, r2, r3
 8007648:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800764a:	f7ff fba9 	bl	8006da0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800764e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d105      	bne.n	8007662 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2202      	movs	r2, #2
 800765e:	609a      	str	r2, [r3, #8]
      break;
 8007660:	e009      	b.n	8007676 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	3b01      	subs	r3, #1
 8007666:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007668:	f7ff fb88 	bl	8006d7c <LL_PWR_IsActiveFlag_RFBUSYS>
 800766c:	4602      	mov	r2, r0
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	4013      	ands	r3, r2
 8007672:	2b01      	cmp	r3, #1
 8007674:	d0e9      	beq.n	800764a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007676:	7dfb      	ldrb	r3, [r7, #23]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3718      	adds	r7, #24
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000110 	.word	0x20000110

08007684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e049      	b.n	800772a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d106      	bne.n	80076b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f841 	bl	8007732 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2202      	movs	r2, #2
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3304      	adds	r3, #4
 80076c0:	4619      	mov	r1, r3
 80076c2:	4610      	mov	r0, r2
 80076c4:	f000 f9ce 	bl	8007a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007732:	b480      	push	{r7}
 8007734:	b083      	sub	sp, #12
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800773a:	bf00      	nop
 800773c:	370c      	adds	r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	bc80      	pop	{r7}
 8007742:	4770      	bx	lr

08007744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007752:	b2db      	uxtb	r3, r3
 8007754:	2b01      	cmp	r3, #1
 8007756:	d001      	beq.n	800775c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e036      	b.n	80077ca <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f042 0201 	orr.w	r2, r2, #1
 8007772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a16      	ldr	r2, [pc, #88]	; (80077d4 <HAL_TIM_Base_Start_IT+0x90>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d004      	beq.n	8007788 <HAL_TIM_Base_Start_IT+0x44>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007786:	d115      	bne.n	80077b4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689a      	ldr	r2, [r3, #8]
 800778e:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <HAL_TIM_Base_Start_IT+0x94>)
 8007790:	4013      	ands	r3, r2
 8007792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b06      	cmp	r3, #6
 8007798:	d015      	beq.n	80077c6 <HAL_TIM_Base_Start_IT+0x82>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a0:	d011      	beq.n	80077c6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f042 0201 	orr.w	r2, r2, #1
 80077b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b2:	e008      	b.n	80077c6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 0201 	orr.w	r2, r2, #1
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	e000      	b.n	80077c8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bc80      	pop	{r7}
 80077d2:	4770      	bx	lr
 80077d4:	40012c00 	.word	0x40012c00
 80077d8:	00010007 	.word	0x00010007

080077dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d122      	bne.n	8007838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f003 0302 	and.w	r3, r3, #2
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d11b      	bne.n	8007838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f06f 0202 	mvn.w	r2, #2
 8007808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	f003 0303 	and.w	r3, r3, #3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f904 	bl	8007a2c <HAL_TIM_IC_CaptureCallback>
 8007824:	e005      	b.n	8007832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f8f7 	bl	8007a1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 f906 	bl	8007a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	f003 0304 	and.w	r3, r3, #4
 8007842:	2b04      	cmp	r3, #4
 8007844:	d122      	bne.n	800788c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f003 0304 	and.w	r3, r3, #4
 8007850:	2b04      	cmp	r3, #4
 8007852:	d11b      	bne.n	800788c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f06f 0204 	mvn.w	r2, #4
 800785c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2202      	movs	r2, #2
 8007862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800786e:	2b00      	cmp	r3, #0
 8007870:	d003      	beq.n	800787a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f8da 	bl	8007a2c <HAL_TIM_IC_CaptureCallback>
 8007878:	e005      	b.n	8007886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f8cd 	bl	8007a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f8dc 	bl	8007a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	f003 0308 	and.w	r3, r3, #8
 8007896:	2b08      	cmp	r3, #8
 8007898:	d122      	bne.n	80078e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f003 0308 	and.w	r3, r3, #8
 80078a4:	2b08      	cmp	r3, #8
 80078a6:	d11b      	bne.n	80078e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f06f 0208 	mvn.w	r2, #8
 80078b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2204      	movs	r2, #4
 80078b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	f003 0303 	and.w	r3, r3, #3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f8b0 	bl	8007a2c <HAL_TIM_IC_CaptureCallback>
 80078cc:	e005      	b.n	80078da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f8a3 	bl	8007a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f8b2 	bl	8007a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	f003 0310 	and.w	r3, r3, #16
 80078ea:	2b10      	cmp	r3, #16
 80078ec:	d122      	bne.n	8007934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68db      	ldr	r3, [r3, #12]
 80078f4:	f003 0310 	and.w	r3, r3, #16
 80078f8:	2b10      	cmp	r3, #16
 80078fa:	d11b      	bne.n	8007934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f06f 0210 	mvn.w	r2, #16
 8007904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2208      	movs	r2, #8
 800790a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f886 	bl	8007a2c <HAL_TIM_IC_CaptureCallback>
 8007920:	e005      	b.n	800792e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f879 	bl	8007a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f888 	bl	8007a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b01      	cmp	r3, #1
 8007940:	d10e      	bne.n	8007960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b01      	cmp	r3, #1
 800794e:	d107      	bne.n	8007960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f06f 0201 	mvn.w	r2, #1
 8007958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7f9 fb10 	bl	8000f80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800796a:	2b80      	cmp	r3, #128	; 0x80
 800796c:	d10e      	bne.n	800798c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007978:	2b80      	cmp	r3, #128	; 0x80
 800797a:	d107      	bne.n	800798c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f8d7 	bl	8007b3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800799a:	d10e      	bne.n	80079ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a6:	2b80      	cmp	r3, #128	; 0x80
 80079a8:	d107      	bne.n	80079ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f8c9 	bl	8007b4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c4:	2b40      	cmp	r3, #64	; 0x40
 80079c6:	d10e      	bne.n	80079e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d2:	2b40      	cmp	r3, #64	; 0x40
 80079d4:	d107      	bne.n	80079e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f835 	bl	8007a50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	f003 0320 	and.w	r3, r3, #32
 80079f0:	2b20      	cmp	r3, #32
 80079f2:	d10e      	bne.n	8007a12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f003 0320 	and.w	r3, r3, #32
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	d107      	bne.n	8007a12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f06f 0220 	mvn.w	r2, #32
 8007a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f88b 	bl	8007b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a12:	bf00      	nop
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b083      	sub	sp, #12
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a22:	bf00      	nop
 8007a24:	370c      	adds	r7, #12
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bc80      	pop	{r7}
 8007a2a:	4770      	bx	lr

08007a2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bc80      	pop	{r7}
 8007a3c:	4770      	bx	lr

08007a3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b083      	sub	sp, #12
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bc80      	pop	{r7}
 8007a4e:	4770      	bx	lr

08007a50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bc80      	pop	{r7}
 8007a60:	4770      	bx	lr
	...

08007a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a29      	ldr	r2, [pc, #164]	; (8007b1c <TIM_Base_SetConfig+0xb8>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d003      	beq.n	8007a84 <TIM_Base_SetConfig+0x20>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a82:	d108      	bne.n	8007a96 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	68fa      	ldr	r2, [r7, #12]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a20      	ldr	r2, [pc, #128]	; (8007b1c <TIM_Base_SetConfig+0xb8>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00b      	beq.n	8007ab6 <TIM_Base_SetConfig+0x52>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa4:	d007      	beq.n	8007ab6 <TIM_Base_SetConfig+0x52>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a1d      	ldr	r2, [pc, #116]	; (8007b20 <TIM_Base_SetConfig+0xbc>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d003      	beq.n	8007ab6 <TIM_Base_SetConfig+0x52>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a1c      	ldr	r2, [pc, #112]	; (8007b24 <TIM_Base_SetConfig+0xc0>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d108      	bne.n	8007ac8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a0b      	ldr	r2, [pc, #44]	; (8007b1c <TIM_Base_SetConfig+0xb8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d007      	beq.n	8007b04 <TIM_Base_SetConfig+0xa0>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a0a      	ldr	r2, [pc, #40]	; (8007b20 <TIM_Base_SetConfig+0xbc>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d003      	beq.n	8007b04 <TIM_Base_SetConfig+0xa0>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a09      	ldr	r2, [pc, #36]	; (8007b24 <TIM_Base_SetConfig+0xc0>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d103      	bne.n	8007b0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	691a      	ldr	r2, [r3, #16]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	615a      	str	r2, [r3, #20]
}
 8007b12:	bf00      	nop
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bc80      	pop	{r7}
 8007b1a:	4770      	bx	lr
 8007b1c:	40012c00 	.word	0x40012c00
 8007b20:	40014400 	.word	0x40014400
 8007b24:	40014800 	.word	0x40014800

08007b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bc80      	pop	{r7}
 8007b38:	4770      	bx	lr

08007b3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b42:	bf00      	nop
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bc80      	pop	{r7}
 8007b4a:	4770      	bx	lr

08007b4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bc80      	pop	{r7}
 8007b5c:	4770      	bx	lr

08007b5e <LL_RCC_GetUSARTClockSource>:
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b083      	sub	sp, #12
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	401a      	ands	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	041b      	lsls	r3, r3, #16
 8007b76:	4313      	orrs	r3, r2
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bc80      	pop	{r7}
 8007b80:	4770      	bx	lr

08007b82 <LL_RCC_GetLPUARTClockSource>:
{
 8007b82:	b480      	push	{r7}
 8007b84:	b083      	sub	sp, #12
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4013      	ands	r3, r2
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bc80      	pop	{r7}
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e042      	b.n	8007c38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d106      	bne.n	8007bca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7fa f883 	bl	8001cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2224      	movs	r2, #36	; 0x24
 8007bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0201 	bic.w	r2, r2, #1
 8007be0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fd80 	bl	80086e8 <UART_SetConfig>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d101      	bne.n	8007bf2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e022      	b.n	8007c38 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d002      	beq.n	8007c00 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 ffe8 	bl	8008bd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	685a      	ldr	r2, [r3, #4]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689a      	ldr	r2, [r3, #8]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f042 0201 	orr.w	r2, r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f001 f86e 	bl	8008d12 <UART_CheckIdleState>
 8007c36:	4603      	mov	r3, r0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e031      	b.n	8007cb6 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2224      	movs	r2, #36	; 0x24
 8007c56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f022 0201 	bic.w	r2, r2, #1
 8007c68:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2200      	movs	r2, #0
 8007c78:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7fa f918 	bl	8001eb8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b08a      	sub	sp, #40	; 0x28
 8007cc2:	af02      	add	r7, sp, #8
 8007cc4:	60f8      	str	r0, [r7, #12]
 8007cc6:	60b9      	str	r1, [r7, #8]
 8007cc8:	603b      	str	r3, [r7, #0]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd4:	2b20      	cmp	r3, #32
 8007cd6:	d173      	bne.n	8007dc0 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <HAL_UART_Transmit+0x26>
 8007cde:	88fb      	ldrh	r3, [r7, #6]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e06c      	b.n	8007dc2 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2221      	movs	r2, #33	; 0x21
 8007cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cf8:	f7fb fad6 	bl	80032a8 <HAL_GetTick>
 8007cfc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	88fa      	ldrh	r2, [r7, #6]
 8007d02:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	88fa      	ldrh	r2, [r7, #6]
 8007d0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d16:	d108      	bne.n	8007d2a <HAL_UART_Transmit+0x6c>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d104      	bne.n	8007d2a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007d20:	2300      	movs	r3, #0
 8007d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	61bb      	str	r3, [r7, #24]
 8007d28:	e003      	b.n	8007d32 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007d32:	e02c      	b.n	8007d8e <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2180      	movs	r1, #128	; 0x80
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f001 f835 	bl	8008dae <UART_WaitOnFlagUntilTimeout>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e039      	b.n	8007dc2 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10b      	bne.n	8007d6c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	3302      	adds	r3, #2
 8007d68:	61bb      	str	r3, [r7, #24]
 8007d6a:	e007      	b.n	8007d7c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	781a      	ldrb	r2, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	3b01      	subs	r3, #1
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1cc      	bne.n	8007d34 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2200      	movs	r2, #0
 8007da2:	2140      	movs	r1, #64	; 0x40
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f001 f802 	bl	8008dae <UART_WaitOnFlagUntilTimeout>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e006      	b.n	8007dc2 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2220      	movs	r2, #32
 8007db8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	e000      	b.n	8007dc2 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8007dc0:	2302      	movs	r3, #2
  }
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3720      	adds	r7, #32
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
	...

08007dcc <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b0a2      	sub	sp, #136	; 0x88
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007de2:	e853 3f00 	ldrex	r3, [r3]
 8007de6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dea:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8007dee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	461a      	mov	r2, r3
 8007df8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dfe:	66ba      	str	r2, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e04:	e841 2300 	strex	r3, r2, [r1]
 8007e08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1e4      	bne.n	8007dda <HAL_UART_Abort_IT+0xe>
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3308      	adds	r3, #8
 8007e16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e1a:	e853 3f00 	ldrex	r3, [r3]
 8007e1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e22:	f023 5384 	bic.w	r3, r3, #276824064	; 0x10800000
 8007e26:	f023 0301 	bic.w	r3, r3, #1
 8007e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	3308      	adds	r3, #8
 8007e32:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007e34:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e3c:	e841 2300 	strex	r3, r2, [r1]
 8007e40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e3      	bne.n	8007e10 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d118      	bne.n	8007e82 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e58:	e853 3f00 	ldrex	r3, [r3]
 8007e5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e60:	f023 0310 	bic.w	r3, r3, #16
 8007e64:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e6      	bne.n	8007e50 <HAL_UART_Abort_IT+0x84>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00f      	beq.n	8007eaa <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e94:	2b80      	cmp	r3, #128	; 0x80
 8007e96:	d104      	bne.n	8007ea2 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e9c:	4a67      	ldr	r2, [pc, #412]	; (800803c <HAL_UART_Abort_IT+0x270>)
 8007e9e:	639a      	str	r2, [r3, #56]	; 0x38
 8007ea0:	e003      	b.n	8007eaa <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d011      	beq.n	8007ed8 <HAL_UART_Abort_IT+0x10c>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ebe:	2b40      	cmp	r3, #64	; 0x40
 8007ec0:	d105      	bne.n	8007ece <HAL_UART_Abort_IT+0x102>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ec8:	4a5d      	ldr	r2, [pc, #372]	; (8008040 <HAL_UART_Abort_IT+0x274>)
 8007eca:	639a      	str	r2, [r3, #56]	; 0x38
 8007ecc:	e004      	b.n	8007ed8 <HAL_UART_Abort_IT+0x10c>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee2:	2b80      	cmp	r3, #128	; 0x80
 8007ee4:	d12d      	bne.n	8007f42 <HAL_UART_Abort_IT+0x176>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3308      	adds	r3, #8
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef0:	e853 3f00 	ldrex	r3, [r3]
 8007ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007efc:	677b      	str	r3, [r7, #116]	; 0x74
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3308      	adds	r3, #8
 8007f04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007f06:	633a      	str	r2, [r7, #48]	; 0x30
 8007f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f0e:	e841 2300 	strex	r3, r2, [r1]
 8007f12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1e5      	bne.n	8007ee6 <HAL_UART_Abort_IT+0x11a>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00f      	beq.n	8007f42 <HAL_UART_Abort_IT+0x176>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fc fefe 	bl	8004d28 <HAL_DMA_Abort_IT>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d004      	beq.n	8007f3c <HAL_UART_Abort_IT+0x170>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f36:	2200      	movs	r2, #0
 8007f38:	639a      	str	r2, [r3, #56]	; 0x38
 8007f3a:	e002      	b.n	8007f42 <HAL_UART_Abort_IT+0x176>
      }
      else
      {
        abortcplt = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f4c:	2b40      	cmp	r3, #64	; 0x40
 8007f4e:	d133      	bne.n	8007fb8 <HAL_UART_Abort_IT+0x1ec>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3308      	adds	r3, #8
 8007f56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	e853 3f00 	ldrex	r3, [r3]
 8007f5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f66:	673b      	str	r3, [r7, #112]	; 0x70
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3308      	adds	r3, #8
 8007f6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007f70:	61fa      	str	r2, [r7, #28]
 8007f72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f74:	69b9      	ldr	r1, [r7, #24]
 8007f76:	69fa      	ldr	r2, [r7, #28]
 8007f78:	e841 2300 	strex	r3, r2, [r1]
 8007f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d1e5      	bne.n	8007f50 <HAL_UART_Abort_IT+0x184>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d014      	beq.n	8007fb8 <HAL_UART_Abort_IT+0x1ec>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7fc fec7 	bl	8004d28 <HAL_DMA_Abort_IT>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d008      	beq.n	8007fb2 <HAL_UART_Abort_IT+0x1e6>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	639a      	str	r2, [r3, #56]	; 0x38
        abortcplt = 1U;
 8007faa:	2301      	movs	r3, #1
 8007fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fb0:	e002      	b.n	8007fb8 <HAL_UART_Abort_IT+0x1ec>
      }
      else
      {
        abortcplt = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8007fb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d138      	bne.n	8008032 <HAL_UART_Abort_IT+0x266>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->RxXferCount = 0U;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	675a      	str	r2, [r3, #116]	; 0x74
    huart->TxISR = NULL;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	679a      	str	r2, [r3, #120]	; 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	220f      	movs	r2, #15
 8007fea:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ff4:	d107      	bne.n	8008006 <HAL_UART_Abort_IT+0x23a>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	699a      	ldr	r2, [r3, #24]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f042 0210 	orr.w	r2, r2, #16
 8008004:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	699a      	ldr	r2, [r3, #24]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f042 0208 	orr.w	r2, r2, #8
 8008014:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2220      	movs	r2, #32
 800801a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fb51 	bl	80086d4 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3788      	adds	r7, #136	; 0x88
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	080093ed 	.word	0x080093ed
 8008040:	08009479 	.word	0x08009479

08008044 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b0ba      	sub	sp, #232	; 0xe8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800806a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800806e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008072:	4013      	ands	r3, r2
 8008074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800807c:	2b00      	cmp	r3, #0
 800807e:	d11b      	bne.n	80080b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008084:	f003 0320 	and.w	r3, r3, #32
 8008088:	2b00      	cmp	r3, #0
 800808a:	d015      	beq.n	80080b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800808c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008090:	f003 0320 	and.w	r3, r3, #32
 8008094:	2b00      	cmp	r3, #0
 8008096:	d105      	bne.n	80080a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800809c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d009      	beq.n	80080b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 82e3 	beq.w	8008674 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	4798      	blx	r3
      }
      return;
 80080b6:	e2dd      	b.n	8008674 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80080b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 8123 	beq.w	8008308 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80080c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80080c6:	4b8d      	ldr	r3, [pc, #564]	; (80082fc <HAL_UART_IRQHandler+0x2b8>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d106      	bne.n	80080dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80080ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80080d2:	4b8b      	ldr	r3, [pc, #556]	; (8008300 <HAL_UART_IRQHandler+0x2bc>)
 80080d4:	4013      	ands	r3, r2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 8116 	beq.w	8008308 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d011      	beq.n	800810c <HAL_UART_IRQHandler+0xc8>
 80080e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00b      	beq.n	800810c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2201      	movs	r2, #1
 80080fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008102:	f043 0201 	orr.w	r2, r3, #1
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800810c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d011      	beq.n	800813c <HAL_UART_IRQHandler+0xf8>
 8008118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00b      	beq.n	800813c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2202      	movs	r2, #2
 800812a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008132:	f043 0204 	orr.w	r2, r3, #4
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800813c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008140:	f003 0304 	and.w	r3, r3, #4
 8008144:	2b00      	cmp	r3, #0
 8008146:	d011      	beq.n	800816c <HAL_UART_IRQHandler+0x128>
 8008148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800814c:	f003 0301 	and.w	r3, r3, #1
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00b      	beq.n	800816c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2204      	movs	r2, #4
 800815a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008162:	f043 0202 	orr.w	r2, r3, #2
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800816c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008170:	f003 0308 	and.w	r3, r3, #8
 8008174:	2b00      	cmp	r3, #0
 8008176:	d017      	beq.n	80081a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800817c:	f003 0320 	and.w	r3, r3, #32
 8008180:	2b00      	cmp	r3, #0
 8008182:	d105      	bne.n	8008190 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008184:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008188:	4b5c      	ldr	r3, [pc, #368]	; (80082fc <HAL_UART_IRQHandler+0x2b8>)
 800818a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00b      	beq.n	80081a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2208      	movs	r2, #8
 8008196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800819e:	f043 0208 	orr.w	r2, r3, #8
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d012      	beq.n	80081da <HAL_UART_IRQHandler+0x196>
 80081b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00c      	beq.n	80081da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d0:	f043 0220 	orr.w	r2, r3, #32
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 8249 	beq.w	8008678 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80081e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ea:	f003 0320 	and.w	r3, r3, #32
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d013      	beq.n	800821a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80081f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081f6:	f003 0320 	and.w	r3, r3, #32
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d105      	bne.n	800820a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80081fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d007      	beq.n	800821a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822e:	2b40      	cmp	r3, #64	; 0x40
 8008230:	d005      	beq.n	800823e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008236:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800823a:	2b00      	cmp	r3, #0
 800823c:	d054      	beq.n	80082e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 ff64 	bl	800910c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824e:	2b40      	cmp	r3, #64	; 0x40
 8008250:	d146      	bne.n	80082e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3308      	adds	r3, #8
 8008258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008260:	e853 3f00 	ldrex	r3, [r3]
 8008264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800826c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	3308      	adds	r3, #8
 800827a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800827e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008286:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800828a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1d9      	bne.n	8008252 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d017      	beq.n	80082d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082ae:	4a15      	ldr	r2, [pc, #84]	; (8008304 <HAL_UART_IRQHandler+0x2c0>)
 80082b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fc fd35 	bl	8004d28 <HAL_DMA_Abort_IT>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d019      	beq.n	80082f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80082d2:	4610      	mov	r0, r2
 80082d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d6:	e00f      	b.n	80082f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f9f2 	bl	80086c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082de:	e00b      	b.n	80082f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f9ee 	bl	80086c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e6:	e007      	b.n	80082f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f9ea 	bl	80086c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80082f6:	e1bf      	b.n	8008678 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f8:	bf00      	nop
    return;
 80082fa:	e1bd      	b.n	8008678 <HAL_UART_IRQHandler+0x634>
 80082fc:	10000001 	.word	0x10000001
 8008300:	04000120 	.word	0x04000120
 8008304:	080093c1 	.word	0x080093c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800830c:	2b01      	cmp	r3, #1
 800830e:	f040 8153 	bne.w	80085b8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008316:	f003 0310 	and.w	r3, r3, #16
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 814c 	beq.w	80085b8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008324:	f003 0310 	and.w	r3, r3, #16
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 8145 	beq.w	80085b8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2210      	movs	r2, #16
 8008334:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008340:	2b40      	cmp	r3, #64	; 0x40
 8008342:	f040 80bb 	bne.w	80084bc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008354:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 818f 	beq.w	800867c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008364:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008368:	429a      	cmp	r2, r3
 800836a:	f080 8187 	bcs.w	800867c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008374:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0320 	and.w	r3, r3, #32
 8008386:	2b00      	cmp	r3, #0
 8008388:	f040 8087 	bne.w	800849a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008394:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008398:	e853 3f00 	ldrex	r3, [r3]
 800839c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80083a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80083ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083c6:	e841 2300 	strex	r3, r2, [r1]
 80083ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80083ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1da      	bne.n	800838c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	3308      	adds	r3, #8
 80083dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083e0:	e853 3f00 	ldrex	r3, [r3]
 80083e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80083e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083e8:	f023 0301 	bic.w	r3, r3, #1
 80083ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3308      	adds	r3, #8
 80083f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80083fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008400:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008402:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800840c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e1      	bne.n	80083d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3308      	adds	r3, #8
 8008418:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800841c:	e853 3f00 	ldrex	r3, [r3]
 8008420:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3308      	adds	r3, #8
 8008432:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008436:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008438:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800843c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800843e:	e841 2300 	strex	r3, r2, [r1]
 8008442:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1e3      	bne.n	8008412 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2220      	movs	r2, #32
 800844e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008468:	f023 0310 	bic.w	r3, r3, #16
 800846c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	461a      	mov	r2, r3
 8008476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800847a:	65bb      	str	r3, [r7, #88]	; 0x58
 800847c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008480:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e4      	bne.n	8008458 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008494:	4618      	mov	r0, r3
 8008496:	f7fc fbe9 	bl	8004c6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2202      	movs	r2, #2
 800849e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	1ad3      	subs	r3, r2, r3
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7f9 fd3b 	bl	8001f30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084ba:	e0df      	b.n	800867c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 80d1 	beq.w	8008680 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80084de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 80cc 	beq.w	8008680 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f0:	e853 3f00 	ldrex	r3, [r3]
 80084f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	461a      	mov	r2, r3
 8008506:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800850a:	647b      	str	r3, [r7, #68]	; 0x44
 800850c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008510:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e4      	bne.n	80084e8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3308      	adds	r3, #8
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	e853 3f00 	ldrex	r3, [r3]
 800852c:	623b      	str	r3, [r7, #32]
   return(result);
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008534:	f023 0301 	bic.w	r3, r3, #1
 8008538:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3308      	adds	r3, #8
 8008542:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008546:	633a      	str	r2, [r7, #48]	; 0x30
 8008548:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800854c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800854e:	e841 2300 	strex	r3, r2, [r1]
 8008552:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1e1      	bne.n	800851e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2220      	movs	r2, #32
 800855e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	e853 3f00 	ldrex	r3, [r3]
 800857a:	60fb      	str	r3, [r7, #12]
   return(result);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f023 0310 	bic.w	r3, r3, #16
 8008582:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	461a      	mov	r2, r3
 800858c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008590:	61fb      	str	r3, [r7, #28]
 8008592:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008594:	69b9      	ldr	r1, [r7, #24]
 8008596:	69fa      	ldr	r2, [r7, #28]
 8008598:	e841 2300 	strex	r3, r2, [r1]
 800859c:	617b      	str	r3, [r7, #20]
   return(result);
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1e4      	bne.n	800856e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085ae:	4619      	mov	r1, r3
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7f9 fcbd 	bl	8001f30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085b6:	e063      	b.n	8008680 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00e      	beq.n	80085e2 <HAL_UART_IRQHandler+0x59e>
 80085c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d008      	beq.n	80085e2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80085d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 ffb7 	bl	800954e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085e0:	e051      	b.n	8008686 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80085e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d014      	beq.n	8008618 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80085ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d105      	bne.n	8008606 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80085fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d008      	beq.n	8008618 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800860a:	2b00      	cmp	r3, #0
 800860c:	d03a      	beq.n	8008684 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	4798      	blx	r3
    }
    return;
 8008616:	e035      	b.n	8008684 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800861c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008620:	2b00      	cmp	r3, #0
 8008622:	d009      	beq.n	8008638 <HAL_UART_IRQHandler+0x5f4>
 8008624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862c:	2b00      	cmp	r3, #0
 800862e:	d003      	beq.n	8008638 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 ff61 	bl	80094f8 <UART_EndTransmit_IT>
    return;
 8008636:	e026      	b.n	8008686 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800863c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d009      	beq.n	8008658 <HAL_UART_IRQHandler+0x614>
 8008644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008648:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 ff8e 	bl	8009572 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008656:	e016      	b.n	8008686 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800865c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d010      	beq.n	8008686 <HAL_UART_IRQHandler+0x642>
 8008664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008668:	2b00      	cmp	r3, #0
 800866a:	da0c      	bge.n	8008686 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 ff77 	bl	8009560 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008672:	e008      	b.n	8008686 <HAL_UART_IRQHandler+0x642>
      return;
 8008674:	bf00      	nop
 8008676:	e006      	b.n	8008686 <HAL_UART_IRQHandler+0x642>
    return;
 8008678:	bf00      	nop
 800867a:	e004      	b.n	8008686 <HAL_UART_IRQHandler+0x642>
      return;
 800867c:	bf00      	nop
 800867e:	e002      	b.n	8008686 <HAL_UART_IRQHandler+0x642>
      return;
 8008680:	bf00      	nop
 8008682:	e000      	b.n	8008686 <HAL_UART_IRQHandler+0x642>
    return;
 8008684:	bf00      	nop
  }
}
 8008686:	37e8      	adds	r7, #232	; 0xe8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	bc80      	pop	{r7}
 800869c:	4770      	bx	lr

0800869e <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800869e:	b480      	push	{r7}
 80086a0:	b083      	sub	sp, #12
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80086a6:	bf00      	nop
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bc80      	pop	{r7}
 80086ae:	4770      	bx	lr

080086b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	bc80      	pop	{r7}
 80086c0:	4770      	bx	lr

080086c2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086ca:	bf00      	nop
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bc80      	pop	{r7}
 80086d2:	4770      	bx	lr

080086d4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bc80      	pop	{r7}
 80086e4:	4770      	bx	lr
	...

080086e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086ec:	b08c      	sub	sp, #48	; 0x30
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	689a      	ldr	r2, [r3, #8]
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	431a      	orrs	r2, r3
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	431a      	orrs	r2, r3
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	69db      	ldr	r3, [r3, #28]
 800870c:	4313      	orrs	r3, r2
 800870e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	4b94      	ldr	r3, [pc, #592]	; (8008968 <UART_SetConfig+0x280>)
 8008718:	4013      	ands	r3, r2
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	6812      	ldr	r2, [r2, #0]
 800871e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008720:	430b      	orrs	r3, r1
 8008722:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	430a      	orrs	r2, r1
 8008738:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a89      	ldr	r2, [pc, #548]	; (800896c <UART_SetConfig+0x284>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d004      	beq.n	8008754 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	6a1b      	ldr	r3, [r3, #32]
 800874e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008750:	4313      	orrs	r3, r2
 8008752:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800875e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	6812      	ldr	r2, [r2, #0]
 8008766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008768:	430b      	orrs	r3, r1
 800876a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008772:	f023 010f 	bic.w	r1, r3, #15
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	430a      	orrs	r2, r1
 8008780:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a7a      	ldr	r2, [pc, #488]	; (8008970 <UART_SetConfig+0x288>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d127      	bne.n	80087dc <UART_SetConfig+0xf4>
 800878c:	2003      	movs	r0, #3
 800878e:	f7ff f9e6 	bl	8007b5e <LL_RCC_GetUSARTClockSource>
 8008792:	4603      	mov	r3, r0
 8008794:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008798:	2b03      	cmp	r3, #3
 800879a:	d81b      	bhi.n	80087d4 <UART_SetConfig+0xec>
 800879c:	a201      	add	r2, pc, #4	; (adr r2, 80087a4 <UART_SetConfig+0xbc>)
 800879e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a2:	bf00      	nop
 80087a4:	080087b5 	.word	0x080087b5
 80087a8:	080087c5 	.word	0x080087c5
 80087ac:	080087bd 	.word	0x080087bd
 80087b0:	080087cd 	.word	0x080087cd
 80087b4:	2301      	movs	r3, #1
 80087b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ba:	e080      	b.n	80088be <UART_SetConfig+0x1d6>
 80087bc:	2302      	movs	r3, #2
 80087be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087c2:	e07c      	b.n	80088be <UART_SetConfig+0x1d6>
 80087c4:	2304      	movs	r3, #4
 80087c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ca:	e078      	b.n	80088be <UART_SetConfig+0x1d6>
 80087cc:	2308      	movs	r3, #8
 80087ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087d2:	e074      	b.n	80088be <UART_SetConfig+0x1d6>
 80087d4:	2310      	movs	r3, #16
 80087d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087da:	e070      	b.n	80088be <UART_SetConfig+0x1d6>
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a64      	ldr	r2, [pc, #400]	; (8008974 <UART_SetConfig+0x28c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d138      	bne.n	8008858 <UART_SetConfig+0x170>
 80087e6:	200c      	movs	r0, #12
 80087e8:	f7ff f9b9 	bl	8007b5e <LL_RCC_GetUSARTClockSource>
 80087ec:	4603      	mov	r3, r0
 80087ee:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80087f2:	2b0c      	cmp	r3, #12
 80087f4:	d82c      	bhi.n	8008850 <UART_SetConfig+0x168>
 80087f6:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <UART_SetConfig+0x114>)
 80087f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fc:	08008831 	.word	0x08008831
 8008800:	08008851 	.word	0x08008851
 8008804:	08008851 	.word	0x08008851
 8008808:	08008851 	.word	0x08008851
 800880c:	08008841 	.word	0x08008841
 8008810:	08008851 	.word	0x08008851
 8008814:	08008851 	.word	0x08008851
 8008818:	08008851 	.word	0x08008851
 800881c:	08008839 	.word	0x08008839
 8008820:	08008851 	.word	0x08008851
 8008824:	08008851 	.word	0x08008851
 8008828:	08008851 	.word	0x08008851
 800882c:	08008849 	.word	0x08008849
 8008830:	2300      	movs	r3, #0
 8008832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008836:	e042      	b.n	80088be <UART_SetConfig+0x1d6>
 8008838:	2302      	movs	r3, #2
 800883a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800883e:	e03e      	b.n	80088be <UART_SetConfig+0x1d6>
 8008840:	2304      	movs	r3, #4
 8008842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008846:	e03a      	b.n	80088be <UART_SetConfig+0x1d6>
 8008848:	2308      	movs	r3, #8
 800884a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800884e:	e036      	b.n	80088be <UART_SetConfig+0x1d6>
 8008850:	2310      	movs	r3, #16
 8008852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008856:	e032      	b.n	80088be <UART_SetConfig+0x1d6>
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a43      	ldr	r2, [pc, #268]	; (800896c <UART_SetConfig+0x284>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d12a      	bne.n	80088b8 <UART_SetConfig+0x1d0>
 8008862:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008866:	f7ff f98c 	bl	8007b82 <LL_RCC_GetLPUARTClockSource>
 800886a:	4603      	mov	r3, r0
 800886c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008870:	d01a      	beq.n	80088a8 <UART_SetConfig+0x1c0>
 8008872:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008876:	d81b      	bhi.n	80088b0 <UART_SetConfig+0x1c8>
 8008878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800887c:	d00c      	beq.n	8008898 <UART_SetConfig+0x1b0>
 800887e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008882:	d815      	bhi.n	80088b0 <UART_SetConfig+0x1c8>
 8008884:	2b00      	cmp	r3, #0
 8008886:	d003      	beq.n	8008890 <UART_SetConfig+0x1a8>
 8008888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800888c:	d008      	beq.n	80088a0 <UART_SetConfig+0x1b8>
 800888e:	e00f      	b.n	80088b0 <UART_SetConfig+0x1c8>
 8008890:	2300      	movs	r3, #0
 8008892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008896:	e012      	b.n	80088be <UART_SetConfig+0x1d6>
 8008898:	2302      	movs	r3, #2
 800889a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800889e:	e00e      	b.n	80088be <UART_SetConfig+0x1d6>
 80088a0:	2304      	movs	r3, #4
 80088a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088a6:	e00a      	b.n	80088be <UART_SetConfig+0x1d6>
 80088a8:	2308      	movs	r3, #8
 80088aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ae:	e006      	b.n	80088be <UART_SetConfig+0x1d6>
 80088b0:	2310      	movs	r3, #16
 80088b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088b6:	e002      	b.n	80088be <UART_SetConfig+0x1d6>
 80088b8:	2310      	movs	r3, #16
 80088ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a2a      	ldr	r2, [pc, #168]	; (800896c <UART_SetConfig+0x284>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	f040 80a4 	bne.w	8008a12 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80088ce:	2b08      	cmp	r3, #8
 80088d0:	d823      	bhi.n	800891a <UART_SetConfig+0x232>
 80088d2:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <UART_SetConfig+0x1f0>)
 80088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d8:	080088fd 	.word	0x080088fd
 80088dc:	0800891b 	.word	0x0800891b
 80088e0:	08008905 	.word	0x08008905
 80088e4:	0800891b 	.word	0x0800891b
 80088e8:	0800890b 	.word	0x0800890b
 80088ec:	0800891b 	.word	0x0800891b
 80088f0:	0800891b 	.word	0x0800891b
 80088f4:	0800891b 	.word	0x0800891b
 80088f8:	08008913 	.word	0x08008913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088fc:	f7fd fed2 	bl	80066a4 <HAL_RCC_GetPCLK1Freq>
 8008900:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008902:	e010      	b.n	8008926 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008904:	4b1c      	ldr	r3, [pc, #112]	; (8008978 <UART_SetConfig+0x290>)
 8008906:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008908:	e00d      	b.n	8008926 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800890a:	f7fd fe17 	bl	800653c <HAL_RCC_GetSysClockFreq>
 800890e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008910:	e009      	b.n	8008926 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008918:	e005      	b.n	8008926 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800891a:	2300      	movs	r3, #0
 800891c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008924:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 8137 	beq.w	8008b9c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008932:	4a12      	ldr	r2, [pc, #72]	; (800897c <UART_SetConfig+0x294>)
 8008934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008938:	461a      	mov	r2, r3
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008940:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	4613      	mov	r3, r2
 8008948:	005b      	lsls	r3, r3, #1
 800894a:	4413      	add	r3, r2
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	429a      	cmp	r2, r3
 8008950:	d305      	bcc.n	800895e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	429a      	cmp	r2, r3
 800895c:	d910      	bls.n	8008980 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008964:	e11a      	b.n	8008b9c <UART_SetConfig+0x4b4>
 8008966:	bf00      	nop
 8008968:	cfff69f3 	.word	0xcfff69f3
 800896c:	40008000 	.word	0x40008000
 8008970:	40013800 	.word	0x40013800
 8008974:	40004400 	.word	0x40004400
 8008978:	00f42400 	.word	0x00f42400
 800897c:	0800af38 	.word	0x0800af38
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	2200      	movs	r2, #0
 8008984:	60bb      	str	r3, [r7, #8]
 8008986:	60fa      	str	r2, [r7, #12]
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	4a8e      	ldr	r2, [pc, #568]	; (8008bc8 <UART_SetConfig+0x4e0>)
 800898e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008992:	b29b      	uxth	r3, r3
 8008994:	2200      	movs	r2, #0
 8008996:	603b      	str	r3, [r7, #0]
 8008998:	607a      	str	r2, [r7, #4]
 800899a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800899e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80089a2:	f7f7 fc45 	bl	8000230 <__aeabi_uldivmod>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	4610      	mov	r0, r2
 80089ac:	4619      	mov	r1, r3
 80089ae:	f04f 0200 	mov.w	r2, #0
 80089b2:	f04f 0300 	mov.w	r3, #0
 80089b6:	020b      	lsls	r3, r1, #8
 80089b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089bc:	0202      	lsls	r2, r0, #8
 80089be:	6979      	ldr	r1, [r7, #20]
 80089c0:	6849      	ldr	r1, [r1, #4]
 80089c2:	0849      	lsrs	r1, r1, #1
 80089c4:	2000      	movs	r0, #0
 80089c6:	460c      	mov	r4, r1
 80089c8:	4605      	mov	r5, r0
 80089ca:	eb12 0804 	adds.w	r8, r2, r4
 80089ce:	eb43 0905 	adc.w	r9, r3, r5
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	469a      	mov	sl, r3
 80089da:	4693      	mov	fp, r2
 80089dc:	4652      	mov	r2, sl
 80089de:	465b      	mov	r3, fp
 80089e0:	4640      	mov	r0, r8
 80089e2:	4649      	mov	r1, r9
 80089e4:	f7f7 fc24 	bl	8000230 <__aeabi_uldivmod>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4613      	mov	r3, r2
 80089ee:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089f6:	d308      	bcc.n	8008a0a <UART_SetConfig+0x322>
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089fe:	d204      	bcs.n	8008a0a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6a3a      	ldr	r2, [r7, #32]
 8008a06:	60da      	str	r2, [r3, #12]
 8008a08:	e0c8      	b.n	8008b9c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a10:	e0c4      	b.n	8008b9c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a1a:	d167      	bne.n	8008aec <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8008a1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	d828      	bhi.n	8008a76 <UART_SetConfig+0x38e>
 8008a24:	a201      	add	r2, pc, #4	; (adr r2, 8008a2c <UART_SetConfig+0x344>)
 8008a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2a:	bf00      	nop
 8008a2c:	08008a51 	.word	0x08008a51
 8008a30:	08008a59 	.word	0x08008a59
 8008a34:	08008a61 	.word	0x08008a61
 8008a38:	08008a77 	.word	0x08008a77
 8008a3c:	08008a67 	.word	0x08008a67
 8008a40:	08008a77 	.word	0x08008a77
 8008a44:	08008a77 	.word	0x08008a77
 8008a48:	08008a77 	.word	0x08008a77
 8008a4c:	08008a6f 	.word	0x08008a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a50:	f7fd fe28 	bl	80066a4 <HAL_RCC_GetPCLK1Freq>
 8008a54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a56:	e014      	b.n	8008a82 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a58:	f7fd fe36 	bl	80066c8 <HAL_RCC_GetPCLK2Freq>
 8008a5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a5e:	e010      	b.n	8008a82 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a60:	4b5a      	ldr	r3, [pc, #360]	; (8008bcc <UART_SetConfig+0x4e4>)
 8008a62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a64:	e00d      	b.n	8008a82 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a66:	f7fd fd69 	bl	800653c <HAL_RCC_GetSysClockFreq>
 8008a6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a6c:	e009      	b.n	8008a82 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a74:	e005      	b.n	8008a82 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008a76:	2300      	movs	r3, #0
 8008a78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 8089 	beq.w	8008b9c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8e:	4a4e      	ldr	r2, [pc, #312]	; (8008bc8 <UART_SetConfig+0x4e0>)
 8008a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a94:	461a      	mov	r2, r3
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a9c:	005a      	lsls	r2, r3, #1
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	085b      	lsrs	r3, r3, #1
 8008aa4:	441a      	add	r2, r3
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	2b0f      	cmp	r3, #15
 8008ab4:	d916      	bls.n	8008ae4 <UART_SetConfig+0x3fc>
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008abc:	d212      	bcs.n	8008ae4 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	f023 030f 	bic.w	r3, r3, #15
 8008ac6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	085b      	lsrs	r3, r3, #1
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	f003 0307 	and.w	r3, r3, #7
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	8bfb      	ldrh	r3, [r7, #30]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	8bfa      	ldrh	r2, [r7, #30]
 8008ae0:	60da      	str	r2, [r3, #12]
 8008ae2:	e05b      	b.n	8008b9c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008aea:	e057      	b.n	8008b9c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008aec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008af0:	2b08      	cmp	r3, #8
 8008af2:	d828      	bhi.n	8008b46 <UART_SetConfig+0x45e>
 8008af4:	a201      	add	r2, pc, #4	; (adr r2, 8008afc <UART_SetConfig+0x414>)
 8008af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afa:	bf00      	nop
 8008afc:	08008b21 	.word	0x08008b21
 8008b00:	08008b29 	.word	0x08008b29
 8008b04:	08008b31 	.word	0x08008b31
 8008b08:	08008b47 	.word	0x08008b47
 8008b0c:	08008b37 	.word	0x08008b37
 8008b10:	08008b47 	.word	0x08008b47
 8008b14:	08008b47 	.word	0x08008b47
 8008b18:	08008b47 	.word	0x08008b47
 8008b1c:	08008b3f 	.word	0x08008b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b20:	f7fd fdc0 	bl	80066a4 <HAL_RCC_GetPCLK1Freq>
 8008b24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b26:	e014      	b.n	8008b52 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b28:	f7fd fdce 	bl	80066c8 <HAL_RCC_GetPCLK2Freq>
 8008b2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b2e:	e010      	b.n	8008b52 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b30:	4b26      	ldr	r3, [pc, #152]	; (8008bcc <UART_SetConfig+0x4e4>)
 8008b32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b34:	e00d      	b.n	8008b52 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b36:	f7fd fd01 	bl	800653c <HAL_RCC_GetSysClockFreq>
 8008b3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b3c:	e009      	b.n	8008b52 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b44:	e005      	b.n	8008b52 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b50:	bf00      	nop
    }

    if (pclk != 0U)
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d021      	beq.n	8008b9c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	4a1a      	ldr	r2, [pc, #104]	; (8008bc8 <UART_SetConfig+0x4e0>)
 8008b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b62:	461a      	mov	r2, r3
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b66:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	085b      	lsrs	r3, r3, #1
 8008b70:	441a      	add	r2, r3
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b7a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	2b0f      	cmp	r3, #15
 8008b80:	d909      	bls.n	8008b96 <UART_SetConfig+0x4ae>
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b88:	d205      	bcs.n	8008b96 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	60da      	str	r2, [r3, #12]
 8008b94:	e002      	b.n	8008b9c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008bb8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3730      	adds	r7, #48	; 0x30
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bc6:	bf00      	nop
 8008bc8:	0800af38 	.word	0x0800af38
 8008bcc:	00f42400 	.word	0x00f42400

08008bd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00a      	beq.n	8008bfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfe:	f003 0302 	and.w	r3, r3, #2
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00a      	beq.n	8008c1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c20:	f003 0304 	and.w	r3, r3, #4
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00a      	beq.n	8008c3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c42:	f003 0308 	and.w	r3, r3, #8
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00a      	beq.n	8008c60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	430a      	orrs	r2, r1
 8008c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c64:	f003 0310 	and.w	r3, r3, #16
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00a      	beq.n	8008c82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	430a      	orrs	r2, r1
 8008c80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c86:	f003 0320 	and.w	r3, r3, #32
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00a      	beq.n	8008ca4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d01a      	beq.n	8008ce6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cce:	d10a      	bne.n	8008ce6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	430a      	orrs	r2, r1
 8008ce4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00a      	beq.n	8008d08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	430a      	orrs	r2, r1
 8008d06:	605a      	str	r2, [r3, #4]
  }
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bc80      	pop	{r7}
 8008d10:	4770      	bx	lr

08008d12 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b086      	sub	sp, #24
 8008d16:	af02      	add	r7, sp, #8
 8008d18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d22:	f7fa fac1 	bl	80032a8 <HAL_GetTick>
 8008d26:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0308 	and.w	r3, r3, #8
 8008d32:	2b08      	cmp	r3, #8
 8008d34:	d10e      	bne.n	8008d54 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 f832 	bl	8008dae <UART_WaitOnFlagUntilTimeout>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d001      	beq.n	8008d54 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e028      	b.n	8008da6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0304 	and.w	r3, r3, #4
 8008d5e:	2b04      	cmp	r3, #4
 8008d60:	d10e      	bne.n	8008d80 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f81c 	bl	8008dae <UART_WaitOnFlagUntilTimeout>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e012      	b.n	8008da6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2220      	movs	r2, #32
 8008d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b09c      	sub	sp, #112	; 0x70
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	60f8      	str	r0, [r7, #12]
 8008db6:	60b9      	str	r1, [r7, #8]
 8008db8:	603b      	str	r3, [r7, #0]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dbe:	e0a9      	b.n	8008f14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc6:	f000 80a5 	beq.w	8008f14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dca:	f7fa fa6d 	bl	80032a8 <HAL_GetTick>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d302      	bcc.n	8008de0 <UART_WaitOnFlagUntilTimeout+0x32>
 8008dda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d140      	bne.n	8008e62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008de8:	e853 3f00 	ldrex	r3, [r3]
 8008dec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008df0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008df4:	667b      	str	r3, [r7, #100]	; 0x64
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e06:	e841 2300 	strex	r3, r2, [r1]
 8008e0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1e6      	bne.n	8008de0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3308      	adds	r3, #8
 8008e18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e1c:	e853 3f00 	ldrex	r3, [r3]
 8008e20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e24:	f023 0301 	bic.w	r3, r3, #1
 8008e28:	663b      	str	r3, [r7, #96]	; 0x60
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3308      	adds	r3, #8
 8008e30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e32:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e3a:	e841 2300 	strex	r3, r2, [r1]
 8008e3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1e5      	bne.n	8008e12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2220      	movs	r2, #32
 8008e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2220      	movs	r2, #32
 8008e52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e069      	b.n	8008f36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0304 	and.w	r3, r3, #4
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d051      	beq.n	8008f14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e7e:	d149      	bne.n	8008f14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	e853 3f00 	ldrex	r3, [r3]
 8008e96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8008eaa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eb0:	e841 2300 	strex	r3, r2, [r1]
 8008eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1e6      	bne.n	8008e8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3308      	adds	r3, #8
 8008ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	e853 3f00 	ldrex	r3, [r3]
 8008eca:	613b      	str	r3, [r7, #16]
   return(result);
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	f023 0301 	bic.w	r3, r3, #1
 8008ed2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3308      	adds	r3, #8
 8008eda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008edc:	623a      	str	r2, [r7, #32]
 8008ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee0:	69f9      	ldr	r1, [r7, #28]
 8008ee2:	6a3a      	ldr	r2, [r7, #32]
 8008ee4:	e841 2300 	strex	r3, r2, [r1]
 8008ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1e5      	bne.n	8008ebc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2220      	movs	r2, #32
 8008efc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e010      	b.n	8008f36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	69da      	ldr	r2, [r3, #28]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	bf0c      	ite	eq
 8008f24:	2301      	moveq	r3, #1
 8008f26:	2300      	movne	r3, #0
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	79fb      	ldrb	r3, [r7, #7]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	f43f af46 	beq.w	8008dc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3770      	adds	r7, #112	; 0x70
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
	...

08008f40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b096      	sub	sp, #88	; 0x58
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	88fa      	ldrh	r2, [r7, #6]
 8008f58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2222      	movs	r2, #34	; 0x22
 8008f68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d02d      	beq.n	8008fd2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f7c:	4a40      	ldr	r2, [pc, #256]	; (8009080 <UART_Start_Receive_DMA+0x140>)
 8008f7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f86:	4a3f      	ldr	r2, [pc, #252]	; (8009084 <UART_Start_Receive_DMA+0x144>)
 8008f88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f90:	4a3d      	ldr	r2, [pc, #244]	; (8009088 <UART_Start_Receive_DMA+0x148>)
 8008f92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	3324      	adds	r3, #36	; 0x24
 8008faa:	4619      	mov	r1, r3
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	88fb      	ldrh	r3, [r7, #6]
 8008fb4:	f7fb fddc 	bl	8004b70 <HAL_DMA_Start_IT>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d009      	beq.n	8008fd2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2210      	movs	r2, #16
 8008fc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2220      	movs	r2, #32
 8008fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	e051      	b.n	8009076 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d018      	beq.n	800900c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe2:	e853 3f00 	ldrex	r3, [r3]
 8008fe6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fee:	657b      	str	r3, [r7, #84]	; 0x54
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ffa:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009000:	e841 2300 	strex	r3, r2, [r1]
 8009004:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e6      	bne.n	8008fda <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	3308      	adds	r3, #8
 8009012:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	e853 3f00 	ldrex	r3, [r3]
 800901a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901e:	f043 0301 	orr.w	r3, r3, #1
 8009022:	653b      	str	r3, [r7, #80]	; 0x50
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3308      	adds	r3, #8
 800902a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800902c:	637a      	str	r2, [r7, #52]	; 0x34
 800902e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009030:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009034:	e841 2300 	strex	r3, r2, [r1]
 8009038:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800903a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1e5      	bne.n	800900c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3308      	adds	r3, #8
 8009046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	e853 3f00 	ldrex	r3, [r3]
 800904e:	613b      	str	r3, [r7, #16]
   return(result);
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3308      	adds	r3, #8
 800905e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009060:	623a      	str	r2, [r7, #32]
 8009062:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009064:	69f9      	ldr	r1, [r7, #28]
 8009066:	6a3a      	ldr	r2, [r7, #32]
 8009068:	e841 2300 	strex	r3, r2, [r1]
 800906c:	61bb      	str	r3, [r7, #24]
   return(result);
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1e5      	bne.n	8009040 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3758      	adds	r7, #88	; 0x58
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	080091d7 	.word	0x080091d7
 8009084:	08009303 	.word	0x08009303
 8009088:	08009341 	.word	0x08009341

0800908c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800908c:	b480      	push	{r7}
 800908e:	b08f      	sub	sp, #60	; 0x3c
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909a:	6a3b      	ldr	r3, [r7, #32]
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80090a8:	637b      	str	r3, [r7, #52]	; 0x34
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	461a      	mov	r2, r3
 80090b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090b4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e6      	bne.n	8009094 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	3308      	adds	r3, #8
 80090cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	e853 3f00 	ldrex	r3, [r3]
 80090d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80090dc:	633b      	str	r3, [r7, #48]	; 0x30
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	3308      	adds	r3, #8
 80090e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090e6:	61ba      	str	r2, [r7, #24]
 80090e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ea:	6979      	ldr	r1, [r7, #20]
 80090ec:	69ba      	ldr	r2, [r7, #24]
 80090ee:	e841 2300 	strex	r3, r2, [r1]
 80090f2:	613b      	str	r3, [r7, #16]
   return(result);
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1e5      	bne.n	80090c6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2220      	movs	r2, #32
 80090fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8009102:	bf00      	nop
 8009104:	373c      	adds	r7, #60	; 0x3c
 8009106:	46bd      	mov	sp, r7
 8009108:	bc80      	pop	{r7}
 800910a:	4770      	bx	lr

0800910c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800910c:	b480      	push	{r7}
 800910e:	b095      	sub	sp, #84	; 0x54
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800911c:	e853 3f00 	ldrex	r3, [r3]
 8009120:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009124:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009128:	64fb      	str	r3, [r7, #76]	; 0x4c
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	461a      	mov	r2, r3
 8009130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009132:	643b      	str	r3, [r7, #64]	; 0x40
 8009134:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009136:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009138:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800913a:	e841 2300 	strex	r3, r2, [r1]
 800913e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1e6      	bne.n	8009114 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3308      	adds	r3, #8
 800914c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	e853 3f00 	ldrex	r3, [r3]
 8009154:	61fb      	str	r3, [r7, #28]
   return(result);
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800915c:	f023 0301 	bic.w	r3, r3, #1
 8009160:	64bb      	str	r3, [r7, #72]	; 0x48
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3308      	adds	r3, #8
 8009168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800916a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800916c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009172:	e841 2300 	strex	r3, r2, [r1]
 8009176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1e3      	bne.n	8009146 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009182:	2b01      	cmp	r3, #1
 8009184:	d118      	bne.n	80091b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	e853 3f00 	ldrex	r3, [r3]
 8009192:	60bb      	str	r3, [r7, #8]
   return(result);
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	f023 0310 	bic.w	r3, r3, #16
 800919a:	647b      	str	r3, [r7, #68]	; 0x44
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	461a      	mov	r2, r3
 80091a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091a4:	61bb      	str	r3, [r7, #24]
 80091a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	6979      	ldr	r1, [r7, #20]
 80091aa:	69ba      	ldr	r2, [r7, #24]
 80091ac:	e841 2300 	strex	r3, r2, [r1]
 80091b0:	613b      	str	r3, [r7, #16]
   return(result);
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1e6      	bne.n	8009186 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2220      	movs	r2, #32
 80091bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	675a      	str	r2, [r3, #116]	; 0x74
}
 80091cc:	bf00      	nop
 80091ce:	3754      	adds	r7, #84	; 0x54
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bc80      	pop	{r7}
 80091d4:	4770      	bx	lr

080091d6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b09c      	sub	sp, #112	; 0x70
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0320 	and.w	r3, r3, #32
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d171      	bne.n	80092d6 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80091f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091f4:	2200      	movs	r2, #0
 80091f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009202:	e853 3f00 	ldrex	r3, [r3]
 8009206:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800920a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800920e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	461a      	mov	r2, r3
 8009216:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009218:	65bb      	str	r3, [r7, #88]	; 0x58
 800921a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800921e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009220:	e841 2300 	strex	r3, r2, [r1]
 8009224:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1e6      	bne.n	80091fa <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800922c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3308      	adds	r3, #8
 8009232:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009236:	e853 3f00 	ldrex	r3, [r3]
 800923a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800923c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923e:	f023 0301 	bic.w	r3, r3, #1
 8009242:	667b      	str	r3, [r7, #100]	; 0x64
 8009244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3308      	adds	r3, #8
 800924a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800924c:	647a      	str	r2, [r7, #68]	; 0x44
 800924e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009250:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009252:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009254:	e841 2300 	strex	r3, r2, [r1]
 8009258:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800925a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1e5      	bne.n	800922c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3308      	adds	r3, #8
 8009266:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	e853 3f00 	ldrex	r3, [r3]
 800926e:	623b      	str	r3, [r7, #32]
   return(result);
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009276:	663b      	str	r3, [r7, #96]	; 0x60
 8009278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	3308      	adds	r3, #8
 800927e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009280:	633a      	str	r2, [r7, #48]	; 0x30
 8009282:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009284:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009288:	e841 2300 	strex	r3, r2, [r1]
 800928c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800928e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1e5      	bne.n	8009260 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009296:	2220      	movs	r2, #32
 8009298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800929c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800929e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d118      	bne.n	80092d6 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	e853 3f00 	ldrex	r3, [r3]
 80092b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f023 0310 	bic.w	r3, r3, #16
 80092b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	461a      	mov	r2, r3
 80092c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092c2:	61fb      	str	r3, [r7, #28]
 80092c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c6:	69b9      	ldr	r1, [r7, #24]
 80092c8:	69fa      	ldr	r2, [r7, #28]
 80092ca:	e841 2300 	strex	r3, r2, [r1]
 80092ce:	617b      	str	r3, [r7, #20]
   return(result);
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1e6      	bne.n	80092a4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092d8:	2200      	movs	r2, #0
 80092da:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d107      	bne.n	80092f4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092ea:	4619      	mov	r1, r3
 80092ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80092ee:	f7f8 fe1f 	bl	8001f30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092f2:	e002      	b.n	80092fa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80092f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80092f6:	f7ff f9d2 	bl	800869e <HAL_UART_RxCpltCallback>
}
 80092fa:	bf00      	nop
 80092fc:	3770      	adds	r7, #112	; 0x70
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b084      	sub	sp, #16
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2201      	movs	r2, #1
 8009314:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800931a:	2b01      	cmp	r3, #1
 800931c:	d109      	bne.n	8009332 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009324:	085b      	lsrs	r3, r3, #1
 8009326:	b29b      	uxth	r3, r3
 8009328:	4619      	mov	r1, r3
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f7f8 fe00 	bl	8001f30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009330:	e002      	b.n	8009338 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f7ff f9bc 	bl	80086b0 <HAL_UART_RxHalfCpltCallback>
}
 8009338:	bf00      	nop
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800934c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009354:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800935c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009368:	2b80      	cmp	r3, #128	; 0x80
 800936a:	d109      	bne.n	8009380 <UART_DMAError+0x40>
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	2b21      	cmp	r3, #33	; 0x21
 8009370:	d106      	bne.n	8009380 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2200      	movs	r2, #0
 8009376:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800937a:	6978      	ldr	r0, [r7, #20]
 800937c:	f7ff fe86 	bl	800908c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800938a:	2b40      	cmp	r3, #64	; 0x40
 800938c:	d109      	bne.n	80093a2 <UART_DMAError+0x62>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2b22      	cmp	r3, #34	; 0x22
 8009392:	d106      	bne.n	80093a2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	2200      	movs	r2, #0
 8009398:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800939c:	6978      	ldr	r0, [r7, #20]
 800939e:	f7ff feb5 	bl	800910c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a8:	f043 0210 	orr.w	r2, r3, #16
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093b2:	6978      	ldr	r0, [r7, #20]
 80093b4:	f7ff f985 	bl	80086c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093b8:	bf00      	nop
 80093ba:	3718      	adds	r7, #24
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f7ff f96f 	bl	80086c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093e4:	bf00      	nop
 80093e6:	3710      	adds	r7, #16
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f8:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093fe:	2200      	movs	r2, #0
 8009400:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009408:	2b00      	cmp	r3, #0
 800940a:	d005      	beq.n	8009418 <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009414:	2b00      	cmp	r3, #0
 8009416:	d12b      	bne.n	8009470 <UART_DMATxAbortCallback+0x84>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	220f      	movs	r2, #15
 8009436:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800943c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009440:	d107      	bne.n	8009452 <UART_DMATxAbortCallback+0x66>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	699a      	ldr	r2, [r3, #24]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f042 0210 	orr.w	r2, r2, #16
 8009450:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2220      	movs	r2, #32
 8009456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2220      	movs	r2, #32
 800945e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f7ff f933 	bl	80086d4 <HAL_UART_AbortCpltCallback>
 800946e:	e000      	b.n	8009472 <UART_DMATxAbortCallback+0x86>
      return;
 8009470:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009484:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800948c:	2200      	movs	r2, #0
 800948e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009494:	2b00      	cmp	r3, #0
 8009496:	d004      	beq.n	80094a2 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800949c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d126      	bne.n	80094f0 <UART_DMARxAbortCallback+0x78>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	220f      	movs	r2, #15
 80094c0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	699a      	ldr	r2, [r3, #24]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f042 0208 	orr.w	r2, r2, #8
 80094d0:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2220      	movs	r2, #32
 80094de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f7ff f8f3 	bl	80086d4 <HAL_UART_AbortCpltCallback>
 80094ee:	e000      	b.n	80094f2 <UART_DMARxAbortCallback+0x7a>
      return;
 80094f0:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b088      	sub	sp, #32
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	e853 3f00 	ldrex	r3, [r3]
 800950c:	60bb      	str	r3, [r7, #8]
   return(result);
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009514:	61fb      	str	r3, [r7, #28]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	61bb      	str	r3, [r7, #24]
 8009520:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009522:	6979      	ldr	r1, [r7, #20]
 8009524:	69ba      	ldr	r2, [r7, #24]
 8009526:	e841 2300 	strex	r3, r2, [r1]
 800952a:	613b      	str	r3, [r7, #16]
   return(result);
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1e6      	bne.n	8009500 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2220      	movs	r2, #32
 8009536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7ff f8a3 	bl	800868c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009546:	bf00      	nop
 8009548:	3720      	adds	r7, #32
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800954e:	b480      	push	{r7}
 8009550:	b083      	sub	sp, #12
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009556:	bf00      	nop
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	bc80      	pop	{r7}
 800955e:	4770      	bx	lr

08009560 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	bc80      	pop	{r7}
 8009570:	4770      	bx	lr

08009572 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009572:	b480      	push	{r7}
 8009574:	b083      	sub	sp, #12
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800957a:	bf00      	nop
 800957c:	370c      	adds	r7, #12
 800957e:	46bd      	mov	sp, r7
 8009580:	bc80      	pop	{r7}
 8009582:	4770      	bx	lr

08009584 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009592:	2b01      	cmp	r3, #1
 8009594:	d101      	bne.n	800959a <HAL_UARTEx_DisableFifoMode+0x16>
 8009596:	2302      	movs	r3, #2
 8009598:	e027      	b.n	80095ea <HAL_UARTEx_DisableFifoMode+0x66>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2224      	movs	r2, #36	; 0x24
 80095a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f022 0201 	bic.w	r2, r2, #1
 80095c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2220      	movs	r2, #32
 80095dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80095e8:	2300      	movs	r3, #0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3714      	adds	r7, #20
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bc80      	pop	{r7}
 80095f2:	4770      	bx	lr

080095f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009604:	2b01      	cmp	r3, #1
 8009606:	d101      	bne.n	800960c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009608:	2302      	movs	r3, #2
 800960a:	e02d      	b.n	8009668 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2224      	movs	r2, #36	; 0x24
 8009618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f022 0201 	bic.w	r2, r2, #1
 8009632:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	430a      	orrs	r2, r1
 8009646:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f8a3 	bl	8009794 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2220      	movs	r2, #32
 800965a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009680:	2b01      	cmp	r3, #1
 8009682:	d101      	bne.n	8009688 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009684:	2302      	movs	r3, #2
 8009686:	e02d      	b.n	80096e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2224      	movs	r2, #36	; 0x24
 8009694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f022 0201 	bic.w	r2, r2, #1
 80096ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	430a      	orrs	r2, r1
 80096c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f865 	bl	8009794 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2220      	movs	r2, #32
 80096d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b08c      	sub	sp, #48	; 0x30
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	4613      	mov	r3, r2
 80096f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009700:	2b20      	cmp	r3, #32
 8009702:	d142      	bne.n	800978a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d002      	beq.n	8009710 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800970a:	88fb      	ldrh	r3, [r7, #6]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	e03b      	b.n	800978c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2201      	movs	r2, #1
 8009718:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2200      	movs	r2, #0
 800971e:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009720:	88fb      	ldrh	r3, [r7, #6]
 8009722:	461a      	mov	r2, r3
 8009724:	68b9      	ldr	r1, [r7, #8]
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f7ff fc0a 	bl	8008f40 <UART_Start_Receive_DMA>
 800972c:	4603      	mov	r3, r0
 800972e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009732:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009736:	2b00      	cmp	r3, #0
 8009738:	d124      	bne.n	8009784 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800973e:	2b01      	cmp	r3, #1
 8009740:	d11d      	bne.n	800977e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	2210      	movs	r2, #16
 8009748:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	e853 3f00 	ldrex	r3, [r3]
 8009756:	617b      	str	r3, [r7, #20]
   return(result);
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	f043 0310 	orr.w	r3, r3, #16
 800975e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	461a      	mov	r2, r3
 8009766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009768:	627b      	str	r3, [r7, #36]	; 0x24
 800976a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976c:	6a39      	ldr	r1, [r7, #32]
 800976e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009770:	e841 2300 	strex	r3, r2, [r1]
 8009774:	61fb      	str	r3, [r7, #28]
   return(result);
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1e6      	bne.n	800974a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800977c:	e002      	b.n	8009784 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009784:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009788:	e000      	b.n	800978c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800978a:	2302      	movs	r3, #2
  }
}
 800978c:	4618      	mov	r0, r3
 800978e:	3730      	adds	r7, #48	; 0x30
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d108      	bne.n	80097b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80097b4:	e031      	b.n	800981a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80097b6:	2308      	movs	r3, #8
 80097b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097ba:	2308      	movs	r3, #8
 80097bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	0e5b      	lsrs	r3, r3, #25
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	f003 0307 	and.w	r3, r3, #7
 80097cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	0f5b      	lsrs	r3, r3, #29
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	f003 0307 	and.w	r3, r3, #7
 80097dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097de:	7bbb      	ldrb	r3, [r7, #14]
 80097e0:	7b3a      	ldrb	r2, [r7, #12]
 80097e2:	4910      	ldr	r1, [pc, #64]	; (8009824 <UARTEx_SetNbDataToProcess+0x90>)
 80097e4:	5c8a      	ldrb	r2, [r1, r2]
 80097e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097ea:	7b3a      	ldrb	r2, [r7, #12]
 80097ec:	490e      	ldr	r1, [pc, #56]	; (8009828 <UARTEx_SetNbDataToProcess+0x94>)
 80097ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
 80097fe:	7b7a      	ldrb	r2, [r7, #13]
 8009800:	4908      	ldr	r1, [pc, #32]	; (8009824 <UARTEx_SetNbDataToProcess+0x90>)
 8009802:	5c8a      	ldrb	r2, [r1, r2]
 8009804:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009808:	7b7a      	ldrb	r2, [r7, #13]
 800980a:	4907      	ldr	r1, [pc, #28]	; (8009828 <UARTEx_SetNbDataToProcess+0x94>)
 800980c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800980e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009812:	b29a      	uxth	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800981a:	bf00      	nop
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	bc80      	pop	{r7}
 8009822:	4770      	bx	lr
 8009824:	0800af50 	.word	0x0800af50
 8009828:	0800af58 	.word	0x0800af58

0800982c <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	70fb      	strb	r3, [r7, #3]
 8009838:	4613      	mov	r3, r2
 800983a:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8009840:	e004      	b.n	800984c <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	1c5a      	adds	r2, r3, #1
 8009846:	60fa      	str	r2, [r7, #12]
 8009848:	78fa      	ldrb	r2, [r7, #3]
 800984a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800984c:	883b      	ldrh	r3, [r7, #0]
 800984e:	1e5a      	subs	r2, r3, #1
 8009850:	803a      	strh	r2, [r7, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1f5      	bne.n	8009842 <UTIL_MEM_set_8+0x16>
  }
}
 8009856:	bf00      	nop
 8009858:	bf00      	nop
 800985a:	3714      	adds	r7, #20
 800985c:	46bd      	mov	sp, r7
 800985e:	bc80      	pop	{r7}
 8009860:	4770      	bx	lr
	...

08009864 <__errno>:
 8009864:	4b01      	ldr	r3, [pc, #4]	; (800986c <__errno+0x8>)
 8009866:	6818      	ldr	r0, [r3, #0]
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	20000128 	.word	0x20000128

08009870 <__libc_init_array>:
 8009870:	b570      	push	{r4, r5, r6, lr}
 8009872:	4d0d      	ldr	r5, [pc, #52]	; (80098a8 <__libc_init_array+0x38>)
 8009874:	4c0d      	ldr	r4, [pc, #52]	; (80098ac <__libc_init_array+0x3c>)
 8009876:	1b64      	subs	r4, r4, r5
 8009878:	10a4      	asrs	r4, r4, #2
 800987a:	2600      	movs	r6, #0
 800987c:	42a6      	cmp	r6, r4
 800987e:	d109      	bne.n	8009894 <__libc_init_array+0x24>
 8009880:	4d0b      	ldr	r5, [pc, #44]	; (80098b0 <__libc_init_array+0x40>)
 8009882:	4c0c      	ldr	r4, [pc, #48]	; (80098b4 <__libc_init_array+0x44>)
 8009884:	f001 fa1c 	bl	800acc0 <_init>
 8009888:	1b64      	subs	r4, r4, r5
 800988a:	10a4      	asrs	r4, r4, #2
 800988c:	2600      	movs	r6, #0
 800988e:	42a6      	cmp	r6, r4
 8009890:	d105      	bne.n	800989e <__libc_init_array+0x2e>
 8009892:	bd70      	pop	{r4, r5, r6, pc}
 8009894:	f855 3b04 	ldr.w	r3, [r5], #4
 8009898:	4798      	blx	r3
 800989a:	3601      	adds	r6, #1
 800989c:	e7ee      	b.n	800987c <__libc_init_array+0xc>
 800989e:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a2:	4798      	blx	r3
 80098a4:	3601      	adds	r6, #1
 80098a6:	e7f2      	b.n	800988e <__libc_init_array+0x1e>
 80098a8:	0800b000 	.word	0x0800b000
 80098ac:	0800b000 	.word	0x0800b000
 80098b0:	0800b000 	.word	0x0800b000
 80098b4:	0800b004 	.word	0x0800b004

080098b8 <memcpy>:
 80098b8:	440a      	add	r2, r1
 80098ba:	4291      	cmp	r1, r2
 80098bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80098c0:	d100      	bne.n	80098c4 <memcpy+0xc>
 80098c2:	4770      	bx	lr
 80098c4:	b510      	push	{r4, lr}
 80098c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098ce:	4291      	cmp	r1, r2
 80098d0:	d1f9      	bne.n	80098c6 <memcpy+0xe>
 80098d2:	bd10      	pop	{r4, pc}

080098d4 <memset>:
 80098d4:	4402      	add	r2, r0
 80098d6:	4603      	mov	r3, r0
 80098d8:	4293      	cmp	r3, r2
 80098da:	d100      	bne.n	80098de <memset+0xa>
 80098dc:	4770      	bx	lr
 80098de:	f803 1b01 	strb.w	r1, [r3], #1
 80098e2:	e7f9      	b.n	80098d8 <memset+0x4>

080098e4 <iprintf>:
 80098e4:	b40f      	push	{r0, r1, r2, r3}
 80098e6:	4b0a      	ldr	r3, [pc, #40]	; (8009910 <iprintf+0x2c>)
 80098e8:	b513      	push	{r0, r1, r4, lr}
 80098ea:	681c      	ldr	r4, [r3, #0]
 80098ec:	b124      	cbz	r4, 80098f8 <iprintf+0x14>
 80098ee:	69a3      	ldr	r3, [r4, #24]
 80098f0:	b913      	cbnz	r3, 80098f8 <iprintf+0x14>
 80098f2:	4620      	mov	r0, r4
 80098f4:	f000 fa9e 	bl	8009e34 <__sinit>
 80098f8:	ab05      	add	r3, sp, #20
 80098fa:	9a04      	ldr	r2, [sp, #16]
 80098fc:	68a1      	ldr	r1, [r4, #8]
 80098fe:	9301      	str	r3, [sp, #4]
 8009900:	4620      	mov	r0, r4
 8009902:	f000 fdff 	bl	800a504 <_vfiprintf_r>
 8009906:	b002      	add	sp, #8
 8009908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800990c:	b004      	add	sp, #16
 800990e:	4770      	bx	lr
 8009910:	20000128 	.word	0x20000128

08009914 <_puts_r>:
 8009914:	b570      	push	{r4, r5, r6, lr}
 8009916:	460e      	mov	r6, r1
 8009918:	4605      	mov	r5, r0
 800991a:	b118      	cbz	r0, 8009924 <_puts_r+0x10>
 800991c:	6983      	ldr	r3, [r0, #24]
 800991e:	b90b      	cbnz	r3, 8009924 <_puts_r+0x10>
 8009920:	f000 fa88 	bl	8009e34 <__sinit>
 8009924:	69ab      	ldr	r3, [r5, #24]
 8009926:	68ac      	ldr	r4, [r5, #8]
 8009928:	b913      	cbnz	r3, 8009930 <_puts_r+0x1c>
 800992a:	4628      	mov	r0, r5
 800992c:	f000 fa82 	bl	8009e34 <__sinit>
 8009930:	4b2c      	ldr	r3, [pc, #176]	; (80099e4 <_puts_r+0xd0>)
 8009932:	429c      	cmp	r4, r3
 8009934:	d120      	bne.n	8009978 <_puts_r+0x64>
 8009936:	686c      	ldr	r4, [r5, #4]
 8009938:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800993a:	07db      	lsls	r3, r3, #31
 800993c:	d405      	bmi.n	800994a <_puts_r+0x36>
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	0598      	lsls	r0, r3, #22
 8009942:	d402      	bmi.n	800994a <_puts_r+0x36>
 8009944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009946:	f000 fb13 	bl	8009f70 <__retarget_lock_acquire_recursive>
 800994a:	89a3      	ldrh	r3, [r4, #12]
 800994c:	0719      	lsls	r1, r3, #28
 800994e:	d51d      	bpl.n	800998c <_puts_r+0x78>
 8009950:	6923      	ldr	r3, [r4, #16]
 8009952:	b1db      	cbz	r3, 800998c <_puts_r+0x78>
 8009954:	3e01      	subs	r6, #1
 8009956:	68a3      	ldr	r3, [r4, #8]
 8009958:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800995c:	3b01      	subs	r3, #1
 800995e:	60a3      	str	r3, [r4, #8]
 8009960:	bb39      	cbnz	r1, 80099b2 <_puts_r+0x9e>
 8009962:	2b00      	cmp	r3, #0
 8009964:	da38      	bge.n	80099d8 <_puts_r+0xc4>
 8009966:	4622      	mov	r2, r4
 8009968:	210a      	movs	r1, #10
 800996a:	4628      	mov	r0, r5
 800996c:	f000 f88c 	bl	8009a88 <__swbuf_r>
 8009970:	3001      	adds	r0, #1
 8009972:	d011      	beq.n	8009998 <_puts_r+0x84>
 8009974:	250a      	movs	r5, #10
 8009976:	e011      	b.n	800999c <_puts_r+0x88>
 8009978:	4b1b      	ldr	r3, [pc, #108]	; (80099e8 <_puts_r+0xd4>)
 800997a:	429c      	cmp	r4, r3
 800997c:	d101      	bne.n	8009982 <_puts_r+0x6e>
 800997e:	68ac      	ldr	r4, [r5, #8]
 8009980:	e7da      	b.n	8009938 <_puts_r+0x24>
 8009982:	4b1a      	ldr	r3, [pc, #104]	; (80099ec <_puts_r+0xd8>)
 8009984:	429c      	cmp	r4, r3
 8009986:	bf08      	it	eq
 8009988:	68ec      	ldreq	r4, [r5, #12]
 800998a:	e7d5      	b.n	8009938 <_puts_r+0x24>
 800998c:	4621      	mov	r1, r4
 800998e:	4628      	mov	r0, r5
 8009990:	f000 f8cc 	bl	8009b2c <__swsetup_r>
 8009994:	2800      	cmp	r0, #0
 8009996:	d0dd      	beq.n	8009954 <_puts_r+0x40>
 8009998:	f04f 35ff 	mov.w	r5, #4294967295
 800999c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800999e:	07da      	lsls	r2, r3, #31
 80099a0:	d405      	bmi.n	80099ae <_puts_r+0x9a>
 80099a2:	89a3      	ldrh	r3, [r4, #12]
 80099a4:	059b      	lsls	r3, r3, #22
 80099a6:	d402      	bmi.n	80099ae <_puts_r+0x9a>
 80099a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099aa:	f000 fae2 	bl	8009f72 <__retarget_lock_release_recursive>
 80099ae:	4628      	mov	r0, r5
 80099b0:	bd70      	pop	{r4, r5, r6, pc}
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	da04      	bge.n	80099c0 <_puts_r+0xac>
 80099b6:	69a2      	ldr	r2, [r4, #24]
 80099b8:	429a      	cmp	r2, r3
 80099ba:	dc06      	bgt.n	80099ca <_puts_r+0xb6>
 80099bc:	290a      	cmp	r1, #10
 80099be:	d004      	beq.n	80099ca <_puts_r+0xb6>
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	1c5a      	adds	r2, r3, #1
 80099c4:	6022      	str	r2, [r4, #0]
 80099c6:	7019      	strb	r1, [r3, #0]
 80099c8:	e7c5      	b.n	8009956 <_puts_r+0x42>
 80099ca:	4622      	mov	r2, r4
 80099cc:	4628      	mov	r0, r5
 80099ce:	f000 f85b 	bl	8009a88 <__swbuf_r>
 80099d2:	3001      	adds	r0, #1
 80099d4:	d1bf      	bne.n	8009956 <_puts_r+0x42>
 80099d6:	e7df      	b.n	8009998 <_puts_r+0x84>
 80099d8:	6823      	ldr	r3, [r4, #0]
 80099da:	250a      	movs	r5, #10
 80099dc:	1c5a      	adds	r2, r3, #1
 80099de:	6022      	str	r2, [r4, #0]
 80099e0:	701d      	strb	r5, [r3, #0]
 80099e2:	e7db      	b.n	800999c <_puts_r+0x88>
 80099e4:	0800af84 	.word	0x0800af84
 80099e8:	0800afa4 	.word	0x0800afa4
 80099ec:	0800af64 	.word	0x0800af64

080099f0 <puts>:
 80099f0:	4b02      	ldr	r3, [pc, #8]	; (80099fc <puts+0xc>)
 80099f2:	4601      	mov	r1, r0
 80099f4:	6818      	ldr	r0, [r3, #0]
 80099f6:	f7ff bf8d 	b.w	8009914 <_puts_r>
 80099fa:	bf00      	nop
 80099fc:	20000128 	.word	0x20000128

08009a00 <siprintf>:
 8009a00:	b40e      	push	{r1, r2, r3}
 8009a02:	b500      	push	{lr}
 8009a04:	b09c      	sub	sp, #112	; 0x70
 8009a06:	ab1d      	add	r3, sp, #116	; 0x74
 8009a08:	9002      	str	r0, [sp, #8]
 8009a0a:	9006      	str	r0, [sp, #24]
 8009a0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a10:	4809      	ldr	r0, [pc, #36]	; (8009a38 <siprintf+0x38>)
 8009a12:	9107      	str	r1, [sp, #28]
 8009a14:	9104      	str	r1, [sp, #16]
 8009a16:	4909      	ldr	r1, [pc, #36]	; (8009a3c <siprintf+0x3c>)
 8009a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a1c:	9105      	str	r1, [sp, #20]
 8009a1e:	6800      	ldr	r0, [r0, #0]
 8009a20:	9301      	str	r3, [sp, #4]
 8009a22:	a902      	add	r1, sp, #8
 8009a24:	f000 fc46 	bl	800a2b4 <_svfiprintf_r>
 8009a28:	9b02      	ldr	r3, [sp, #8]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	701a      	strb	r2, [r3, #0]
 8009a2e:	b01c      	add	sp, #112	; 0x70
 8009a30:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a34:	b003      	add	sp, #12
 8009a36:	4770      	bx	lr
 8009a38:	20000128 	.word	0x20000128
 8009a3c:	ffff0208 	.word	0xffff0208

08009a40 <strcat>:
 8009a40:	b510      	push	{r4, lr}
 8009a42:	4602      	mov	r2, r0
 8009a44:	7814      	ldrb	r4, [r2, #0]
 8009a46:	4613      	mov	r3, r2
 8009a48:	3201      	adds	r2, #1
 8009a4a:	2c00      	cmp	r4, #0
 8009a4c:	d1fa      	bne.n	8009a44 <strcat+0x4>
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a54:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a58:	2a00      	cmp	r2, #0
 8009a5a:	d1f9      	bne.n	8009a50 <strcat+0x10>
 8009a5c:	bd10      	pop	{r4, pc}

08009a5e <strncmp>:
 8009a5e:	b510      	push	{r4, lr}
 8009a60:	4603      	mov	r3, r0
 8009a62:	b172      	cbz	r2, 8009a82 <strncmp+0x24>
 8009a64:	3901      	subs	r1, #1
 8009a66:	1884      	adds	r4, r0, r2
 8009a68:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009a6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009a70:	4290      	cmp	r0, r2
 8009a72:	d101      	bne.n	8009a78 <strncmp+0x1a>
 8009a74:	42a3      	cmp	r3, r4
 8009a76:	d101      	bne.n	8009a7c <strncmp+0x1e>
 8009a78:	1a80      	subs	r0, r0, r2
 8009a7a:	bd10      	pop	{r4, pc}
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d1f3      	bne.n	8009a68 <strncmp+0xa>
 8009a80:	e7fa      	b.n	8009a78 <strncmp+0x1a>
 8009a82:	4610      	mov	r0, r2
 8009a84:	e7f9      	b.n	8009a7a <strncmp+0x1c>
	...

08009a88 <__swbuf_r>:
 8009a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8a:	460e      	mov	r6, r1
 8009a8c:	4614      	mov	r4, r2
 8009a8e:	4605      	mov	r5, r0
 8009a90:	b118      	cbz	r0, 8009a9a <__swbuf_r+0x12>
 8009a92:	6983      	ldr	r3, [r0, #24]
 8009a94:	b90b      	cbnz	r3, 8009a9a <__swbuf_r+0x12>
 8009a96:	f000 f9cd 	bl	8009e34 <__sinit>
 8009a9a:	4b21      	ldr	r3, [pc, #132]	; (8009b20 <__swbuf_r+0x98>)
 8009a9c:	429c      	cmp	r4, r3
 8009a9e:	d12b      	bne.n	8009af8 <__swbuf_r+0x70>
 8009aa0:	686c      	ldr	r4, [r5, #4]
 8009aa2:	69a3      	ldr	r3, [r4, #24]
 8009aa4:	60a3      	str	r3, [r4, #8]
 8009aa6:	89a3      	ldrh	r3, [r4, #12]
 8009aa8:	071a      	lsls	r2, r3, #28
 8009aaa:	d52f      	bpl.n	8009b0c <__swbuf_r+0x84>
 8009aac:	6923      	ldr	r3, [r4, #16]
 8009aae:	b36b      	cbz	r3, 8009b0c <__swbuf_r+0x84>
 8009ab0:	6923      	ldr	r3, [r4, #16]
 8009ab2:	6820      	ldr	r0, [r4, #0]
 8009ab4:	1ac0      	subs	r0, r0, r3
 8009ab6:	6963      	ldr	r3, [r4, #20]
 8009ab8:	b2f6      	uxtb	r6, r6
 8009aba:	4283      	cmp	r3, r0
 8009abc:	4637      	mov	r7, r6
 8009abe:	dc04      	bgt.n	8009aca <__swbuf_r+0x42>
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	f000 f922 	bl	8009d0c <_fflush_r>
 8009ac8:	bb30      	cbnz	r0, 8009b18 <__swbuf_r+0x90>
 8009aca:	68a3      	ldr	r3, [r4, #8]
 8009acc:	3b01      	subs	r3, #1
 8009ace:	60a3      	str	r3, [r4, #8]
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	1c5a      	adds	r2, r3, #1
 8009ad4:	6022      	str	r2, [r4, #0]
 8009ad6:	701e      	strb	r6, [r3, #0]
 8009ad8:	6963      	ldr	r3, [r4, #20]
 8009ada:	3001      	adds	r0, #1
 8009adc:	4283      	cmp	r3, r0
 8009ade:	d004      	beq.n	8009aea <__swbuf_r+0x62>
 8009ae0:	89a3      	ldrh	r3, [r4, #12]
 8009ae2:	07db      	lsls	r3, r3, #31
 8009ae4:	d506      	bpl.n	8009af4 <__swbuf_r+0x6c>
 8009ae6:	2e0a      	cmp	r6, #10
 8009ae8:	d104      	bne.n	8009af4 <__swbuf_r+0x6c>
 8009aea:	4621      	mov	r1, r4
 8009aec:	4628      	mov	r0, r5
 8009aee:	f000 f90d 	bl	8009d0c <_fflush_r>
 8009af2:	b988      	cbnz	r0, 8009b18 <__swbuf_r+0x90>
 8009af4:	4638      	mov	r0, r7
 8009af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009af8:	4b0a      	ldr	r3, [pc, #40]	; (8009b24 <__swbuf_r+0x9c>)
 8009afa:	429c      	cmp	r4, r3
 8009afc:	d101      	bne.n	8009b02 <__swbuf_r+0x7a>
 8009afe:	68ac      	ldr	r4, [r5, #8]
 8009b00:	e7cf      	b.n	8009aa2 <__swbuf_r+0x1a>
 8009b02:	4b09      	ldr	r3, [pc, #36]	; (8009b28 <__swbuf_r+0xa0>)
 8009b04:	429c      	cmp	r4, r3
 8009b06:	bf08      	it	eq
 8009b08:	68ec      	ldreq	r4, [r5, #12]
 8009b0a:	e7ca      	b.n	8009aa2 <__swbuf_r+0x1a>
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	4628      	mov	r0, r5
 8009b10:	f000 f80c 	bl	8009b2c <__swsetup_r>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d0cb      	beq.n	8009ab0 <__swbuf_r+0x28>
 8009b18:	f04f 37ff 	mov.w	r7, #4294967295
 8009b1c:	e7ea      	b.n	8009af4 <__swbuf_r+0x6c>
 8009b1e:	bf00      	nop
 8009b20:	0800af84 	.word	0x0800af84
 8009b24:	0800afa4 	.word	0x0800afa4
 8009b28:	0800af64 	.word	0x0800af64

08009b2c <__swsetup_r>:
 8009b2c:	4b32      	ldr	r3, [pc, #200]	; (8009bf8 <__swsetup_r+0xcc>)
 8009b2e:	b570      	push	{r4, r5, r6, lr}
 8009b30:	681d      	ldr	r5, [r3, #0]
 8009b32:	4606      	mov	r6, r0
 8009b34:	460c      	mov	r4, r1
 8009b36:	b125      	cbz	r5, 8009b42 <__swsetup_r+0x16>
 8009b38:	69ab      	ldr	r3, [r5, #24]
 8009b3a:	b913      	cbnz	r3, 8009b42 <__swsetup_r+0x16>
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	f000 f979 	bl	8009e34 <__sinit>
 8009b42:	4b2e      	ldr	r3, [pc, #184]	; (8009bfc <__swsetup_r+0xd0>)
 8009b44:	429c      	cmp	r4, r3
 8009b46:	d10f      	bne.n	8009b68 <__swsetup_r+0x3c>
 8009b48:	686c      	ldr	r4, [r5, #4]
 8009b4a:	89a3      	ldrh	r3, [r4, #12]
 8009b4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b50:	0719      	lsls	r1, r3, #28
 8009b52:	d42c      	bmi.n	8009bae <__swsetup_r+0x82>
 8009b54:	06dd      	lsls	r5, r3, #27
 8009b56:	d411      	bmi.n	8009b7c <__swsetup_r+0x50>
 8009b58:	2309      	movs	r3, #9
 8009b5a:	6033      	str	r3, [r6, #0]
 8009b5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b60:	81a3      	strh	r3, [r4, #12]
 8009b62:	f04f 30ff 	mov.w	r0, #4294967295
 8009b66:	e03e      	b.n	8009be6 <__swsetup_r+0xba>
 8009b68:	4b25      	ldr	r3, [pc, #148]	; (8009c00 <__swsetup_r+0xd4>)
 8009b6a:	429c      	cmp	r4, r3
 8009b6c:	d101      	bne.n	8009b72 <__swsetup_r+0x46>
 8009b6e:	68ac      	ldr	r4, [r5, #8]
 8009b70:	e7eb      	b.n	8009b4a <__swsetup_r+0x1e>
 8009b72:	4b24      	ldr	r3, [pc, #144]	; (8009c04 <__swsetup_r+0xd8>)
 8009b74:	429c      	cmp	r4, r3
 8009b76:	bf08      	it	eq
 8009b78:	68ec      	ldreq	r4, [r5, #12]
 8009b7a:	e7e6      	b.n	8009b4a <__swsetup_r+0x1e>
 8009b7c:	0758      	lsls	r0, r3, #29
 8009b7e:	d512      	bpl.n	8009ba6 <__swsetup_r+0x7a>
 8009b80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b82:	b141      	cbz	r1, 8009b96 <__swsetup_r+0x6a>
 8009b84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b88:	4299      	cmp	r1, r3
 8009b8a:	d002      	beq.n	8009b92 <__swsetup_r+0x66>
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	f000 fa57 	bl	800a040 <_free_r>
 8009b92:	2300      	movs	r3, #0
 8009b94:	6363      	str	r3, [r4, #52]	; 0x34
 8009b96:	89a3      	ldrh	r3, [r4, #12]
 8009b98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b9c:	81a3      	strh	r3, [r4, #12]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	6063      	str	r3, [r4, #4]
 8009ba2:	6923      	ldr	r3, [r4, #16]
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	89a3      	ldrh	r3, [r4, #12]
 8009ba8:	f043 0308 	orr.w	r3, r3, #8
 8009bac:	81a3      	strh	r3, [r4, #12]
 8009bae:	6923      	ldr	r3, [r4, #16]
 8009bb0:	b94b      	cbnz	r3, 8009bc6 <__swsetup_r+0x9a>
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bbc:	d003      	beq.n	8009bc6 <__swsetup_r+0x9a>
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f000 f9fd 	bl	8009fc0 <__smakebuf_r>
 8009bc6:	89a0      	ldrh	r0, [r4, #12]
 8009bc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bcc:	f010 0301 	ands.w	r3, r0, #1
 8009bd0:	d00a      	beq.n	8009be8 <__swsetup_r+0xbc>
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	60a3      	str	r3, [r4, #8]
 8009bd6:	6963      	ldr	r3, [r4, #20]
 8009bd8:	425b      	negs	r3, r3
 8009bda:	61a3      	str	r3, [r4, #24]
 8009bdc:	6923      	ldr	r3, [r4, #16]
 8009bde:	b943      	cbnz	r3, 8009bf2 <__swsetup_r+0xc6>
 8009be0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009be4:	d1ba      	bne.n	8009b5c <__swsetup_r+0x30>
 8009be6:	bd70      	pop	{r4, r5, r6, pc}
 8009be8:	0781      	lsls	r1, r0, #30
 8009bea:	bf58      	it	pl
 8009bec:	6963      	ldrpl	r3, [r4, #20]
 8009bee:	60a3      	str	r3, [r4, #8]
 8009bf0:	e7f4      	b.n	8009bdc <__swsetup_r+0xb0>
 8009bf2:	2000      	movs	r0, #0
 8009bf4:	e7f7      	b.n	8009be6 <__swsetup_r+0xba>
 8009bf6:	bf00      	nop
 8009bf8:	20000128 	.word	0x20000128
 8009bfc:	0800af84 	.word	0x0800af84
 8009c00:	0800afa4 	.word	0x0800afa4
 8009c04:	0800af64 	.word	0x0800af64

08009c08 <__sflush_r>:
 8009c08:	898a      	ldrh	r2, [r1, #12]
 8009c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c0c:	4605      	mov	r5, r0
 8009c0e:	0710      	lsls	r0, r2, #28
 8009c10:	460c      	mov	r4, r1
 8009c12:	d457      	bmi.n	8009cc4 <__sflush_r+0xbc>
 8009c14:	684b      	ldr	r3, [r1, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	dc04      	bgt.n	8009c24 <__sflush_r+0x1c>
 8009c1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	dc01      	bgt.n	8009c24 <__sflush_r+0x1c>
 8009c20:	2000      	movs	r0, #0
 8009c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c26:	2e00      	cmp	r6, #0
 8009c28:	d0fa      	beq.n	8009c20 <__sflush_r+0x18>
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c30:	682f      	ldr	r7, [r5, #0]
 8009c32:	602b      	str	r3, [r5, #0]
 8009c34:	d032      	beq.n	8009c9c <__sflush_r+0x94>
 8009c36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c38:	89a3      	ldrh	r3, [r4, #12]
 8009c3a:	075a      	lsls	r2, r3, #29
 8009c3c:	d505      	bpl.n	8009c4a <__sflush_r+0x42>
 8009c3e:	6863      	ldr	r3, [r4, #4]
 8009c40:	1ac0      	subs	r0, r0, r3
 8009c42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c44:	b10b      	cbz	r3, 8009c4a <__sflush_r+0x42>
 8009c46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c48:	1ac0      	subs	r0, r0, r3
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c50:	6a21      	ldr	r1, [r4, #32]
 8009c52:	4628      	mov	r0, r5
 8009c54:	47b0      	blx	r6
 8009c56:	1c43      	adds	r3, r0, #1
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	d106      	bne.n	8009c6a <__sflush_r+0x62>
 8009c5c:	6829      	ldr	r1, [r5, #0]
 8009c5e:	291d      	cmp	r1, #29
 8009c60:	d82c      	bhi.n	8009cbc <__sflush_r+0xb4>
 8009c62:	4a29      	ldr	r2, [pc, #164]	; (8009d08 <__sflush_r+0x100>)
 8009c64:	40ca      	lsrs	r2, r1
 8009c66:	07d6      	lsls	r6, r2, #31
 8009c68:	d528      	bpl.n	8009cbc <__sflush_r+0xb4>
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	6062      	str	r2, [r4, #4]
 8009c6e:	04d9      	lsls	r1, r3, #19
 8009c70:	6922      	ldr	r2, [r4, #16]
 8009c72:	6022      	str	r2, [r4, #0]
 8009c74:	d504      	bpl.n	8009c80 <__sflush_r+0x78>
 8009c76:	1c42      	adds	r2, r0, #1
 8009c78:	d101      	bne.n	8009c7e <__sflush_r+0x76>
 8009c7a:	682b      	ldr	r3, [r5, #0]
 8009c7c:	b903      	cbnz	r3, 8009c80 <__sflush_r+0x78>
 8009c7e:	6560      	str	r0, [r4, #84]	; 0x54
 8009c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c82:	602f      	str	r7, [r5, #0]
 8009c84:	2900      	cmp	r1, #0
 8009c86:	d0cb      	beq.n	8009c20 <__sflush_r+0x18>
 8009c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c8c:	4299      	cmp	r1, r3
 8009c8e:	d002      	beq.n	8009c96 <__sflush_r+0x8e>
 8009c90:	4628      	mov	r0, r5
 8009c92:	f000 f9d5 	bl	800a040 <_free_r>
 8009c96:	2000      	movs	r0, #0
 8009c98:	6360      	str	r0, [r4, #52]	; 0x34
 8009c9a:	e7c2      	b.n	8009c22 <__sflush_r+0x1a>
 8009c9c:	6a21      	ldr	r1, [r4, #32]
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	47b0      	blx	r6
 8009ca4:	1c41      	adds	r1, r0, #1
 8009ca6:	d1c7      	bne.n	8009c38 <__sflush_r+0x30>
 8009ca8:	682b      	ldr	r3, [r5, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0c4      	beq.n	8009c38 <__sflush_r+0x30>
 8009cae:	2b1d      	cmp	r3, #29
 8009cb0:	d001      	beq.n	8009cb6 <__sflush_r+0xae>
 8009cb2:	2b16      	cmp	r3, #22
 8009cb4:	d101      	bne.n	8009cba <__sflush_r+0xb2>
 8009cb6:	602f      	str	r7, [r5, #0]
 8009cb8:	e7b2      	b.n	8009c20 <__sflush_r+0x18>
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cc0:	81a3      	strh	r3, [r4, #12]
 8009cc2:	e7ae      	b.n	8009c22 <__sflush_r+0x1a>
 8009cc4:	690f      	ldr	r7, [r1, #16]
 8009cc6:	2f00      	cmp	r7, #0
 8009cc8:	d0aa      	beq.n	8009c20 <__sflush_r+0x18>
 8009cca:	0793      	lsls	r3, r2, #30
 8009ccc:	680e      	ldr	r6, [r1, #0]
 8009cce:	bf08      	it	eq
 8009cd0:	694b      	ldreq	r3, [r1, #20]
 8009cd2:	600f      	str	r7, [r1, #0]
 8009cd4:	bf18      	it	ne
 8009cd6:	2300      	movne	r3, #0
 8009cd8:	1bf6      	subs	r6, r6, r7
 8009cda:	608b      	str	r3, [r1, #8]
 8009cdc:	2e00      	cmp	r6, #0
 8009cde:	dd9f      	ble.n	8009c20 <__sflush_r+0x18>
 8009ce0:	6a21      	ldr	r1, [r4, #32]
 8009ce2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009ce6:	4633      	mov	r3, r6
 8009ce8:	463a      	mov	r2, r7
 8009cea:	4628      	mov	r0, r5
 8009cec:	47e0      	blx	ip
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	dc06      	bgt.n	8009d00 <__sflush_r+0xf8>
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cf8:	81a3      	strh	r3, [r4, #12]
 8009cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8009cfe:	e790      	b.n	8009c22 <__sflush_r+0x1a>
 8009d00:	4407      	add	r7, r0
 8009d02:	1a36      	subs	r6, r6, r0
 8009d04:	e7ea      	b.n	8009cdc <__sflush_r+0xd4>
 8009d06:	bf00      	nop
 8009d08:	20400001 	.word	0x20400001

08009d0c <_fflush_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	690b      	ldr	r3, [r1, #16]
 8009d10:	4605      	mov	r5, r0
 8009d12:	460c      	mov	r4, r1
 8009d14:	b913      	cbnz	r3, 8009d1c <_fflush_r+0x10>
 8009d16:	2500      	movs	r5, #0
 8009d18:	4628      	mov	r0, r5
 8009d1a:	bd38      	pop	{r3, r4, r5, pc}
 8009d1c:	b118      	cbz	r0, 8009d26 <_fflush_r+0x1a>
 8009d1e:	6983      	ldr	r3, [r0, #24]
 8009d20:	b90b      	cbnz	r3, 8009d26 <_fflush_r+0x1a>
 8009d22:	f000 f887 	bl	8009e34 <__sinit>
 8009d26:	4b14      	ldr	r3, [pc, #80]	; (8009d78 <_fflush_r+0x6c>)
 8009d28:	429c      	cmp	r4, r3
 8009d2a:	d11b      	bne.n	8009d64 <_fflush_r+0x58>
 8009d2c:	686c      	ldr	r4, [r5, #4]
 8009d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d0ef      	beq.n	8009d16 <_fflush_r+0xa>
 8009d36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d38:	07d0      	lsls	r0, r2, #31
 8009d3a:	d404      	bmi.n	8009d46 <_fflush_r+0x3a>
 8009d3c:	0599      	lsls	r1, r3, #22
 8009d3e:	d402      	bmi.n	8009d46 <_fflush_r+0x3a>
 8009d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d42:	f000 f915 	bl	8009f70 <__retarget_lock_acquire_recursive>
 8009d46:	4628      	mov	r0, r5
 8009d48:	4621      	mov	r1, r4
 8009d4a:	f7ff ff5d 	bl	8009c08 <__sflush_r>
 8009d4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d50:	07da      	lsls	r2, r3, #31
 8009d52:	4605      	mov	r5, r0
 8009d54:	d4e0      	bmi.n	8009d18 <_fflush_r+0xc>
 8009d56:	89a3      	ldrh	r3, [r4, #12]
 8009d58:	059b      	lsls	r3, r3, #22
 8009d5a:	d4dd      	bmi.n	8009d18 <_fflush_r+0xc>
 8009d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d5e:	f000 f908 	bl	8009f72 <__retarget_lock_release_recursive>
 8009d62:	e7d9      	b.n	8009d18 <_fflush_r+0xc>
 8009d64:	4b05      	ldr	r3, [pc, #20]	; (8009d7c <_fflush_r+0x70>)
 8009d66:	429c      	cmp	r4, r3
 8009d68:	d101      	bne.n	8009d6e <_fflush_r+0x62>
 8009d6a:	68ac      	ldr	r4, [r5, #8]
 8009d6c:	e7df      	b.n	8009d2e <_fflush_r+0x22>
 8009d6e:	4b04      	ldr	r3, [pc, #16]	; (8009d80 <_fflush_r+0x74>)
 8009d70:	429c      	cmp	r4, r3
 8009d72:	bf08      	it	eq
 8009d74:	68ec      	ldreq	r4, [r5, #12]
 8009d76:	e7da      	b.n	8009d2e <_fflush_r+0x22>
 8009d78:	0800af84 	.word	0x0800af84
 8009d7c:	0800afa4 	.word	0x0800afa4
 8009d80:	0800af64 	.word	0x0800af64

08009d84 <std>:
 8009d84:	2300      	movs	r3, #0
 8009d86:	b510      	push	{r4, lr}
 8009d88:	4604      	mov	r4, r0
 8009d8a:	e9c0 3300 	strd	r3, r3, [r0]
 8009d8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d92:	6083      	str	r3, [r0, #8]
 8009d94:	8181      	strh	r1, [r0, #12]
 8009d96:	6643      	str	r3, [r0, #100]	; 0x64
 8009d98:	81c2      	strh	r2, [r0, #14]
 8009d9a:	6183      	str	r3, [r0, #24]
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	2208      	movs	r2, #8
 8009da0:	305c      	adds	r0, #92	; 0x5c
 8009da2:	f7ff fd97 	bl	80098d4 <memset>
 8009da6:	4b05      	ldr	r3, [pc, #20]	; (8009dbc <std+0x38>)
 8009da8:	6263      	str	r3, [r4, #36]	; 0x24
 8009daa:	4b05      	ldr	r3, [pc, #20]	; (8009dc0 <std+0x3c>)
 8009dac:	62a3      	str	r3, [r4, #40]	; 0x28
 8009dae:	4b05      	ldr	r3, [pc, #20]	; (8009dc4 <std+0x40>)
 8009db0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009db2:	4b05      	ldr	r3, [pc, #20]	; (8009dc8 <std+0x44>)
 8009db4:	6224      	str	r4, [r4, #32]
 8009db6:	6323      	str	r3, [r4, #48]	; 0x30
 8009db8:	bd10      	pop	{r4, pc}
 8009dba:	bf00      	nop
 8009dbc:	0800aaad 	.word	0x0800aaad
 8009dc0:	0800aacf 	.word	0x0800aacf
 8009dc4:	0800ab07 	.word	0x0800ab07
 8009dc8:	0800ab2b 	.word	0x0800ab2b

08009dcc <_cleanup_r>:
 8009dcc:	4901      	ldr	r1, [pc, #4]	; (8009dd4 <_cleanup_r+0x8>)
 8009dce:	f000 b8af 	b.w	8009f30 <_fwalk_reent>
 8009dd2:	bf00      	nop
 8009dd4:	08009d0d 	.word	0x08009d0d

08009dd8 <__sfmoreglue>:
 8009dd8:	b570      	push	{r4, r5, r6, lr}
 8009dda:	2268      	movs	r2, #104	; 0x68
 8009ddc:	1e4d      	subs	r5, r1, #1
 8009dde:	4355      	muls	r5, r2
 8009de0:	460e      	mov	r6, r1
 8009de2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009de6:	f000 f995 	bl	800a114 <_malloc_r>
 8009dea:	4604      	mov	r4, r0
 8009dec:	b140      	cbz	r0, 8009e00 <__sfmoreglue+0x28>
 8009dee:	2100      	movs	r1, #0
 8009df0:	e9c0 1600 	strd	r1, r6, [r0]
 8009df4:	300c      	adds	r0, #12
 8009df6:	60a0      	str	r0, [r4, #8]
 8009df8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009dfc:	f7ff fd6a 	bl	80098d4 <memset>
 8009e00:	4620      	mov	r0, r4
 8009e02:	bd70      	pop	{r4, r5, r6, pc}

08009e04 <__sfp_lock_acquire>:
 8009e04:	4801      	ldr	r0, [pc, #4]	; (8009e0c <__sfp_lock_acquire+0x8>)
 8009e06:	f000 b8b3 	b.w	8009f70 <__retarget_lock_acquire_recursive>
 8009e0a:	bf00      	nop
 8009e0c:	20000b45 	.word	0x20000b45

08009e10 <__sfp_lock_release>:
 8009e10:	4801      	ldr	r0, [pc, #4]	; (8009e18 <__sfp_lock_release+0x8>)
 8009e12:	f000 b8ae 	b.w	8009f72 <__retarget_lock_release_recursive>
 8009e16:	bf00      	nop
 8009e18:	20000b45 	.word	0x20000b45

08009e1c <__sinit_lock_acquire>:
 8009e1c:	4801      	ldr	r0, [pc, #4]	; (8009e24 <__sinit_lock_acquire+0x8>)
 8009e1e:	f000 b8a7 	b.w	8009f70 <__retarget_lock_acquire_recursive>
 8009e22:	bf00      	nop
 8009e24:	20000b46 	.word	0x20000b46

08009e28 <__sinit_lock_release>:
 8009e28:	4801      	ldr	r0, [pc, #4]	; (8009e30 <__sinit_lock_release+0x8>)
 8009e2a:	f000 b8a2 	b.w	8009f72 <__retarget_lock_release_recursive>
 8009e2e:	bf00      	nop
 8009e30:	20000b46 	.word	0x20000b46

08009e34 <__sinit>:
 8009e34:	b510      	push	{r4, lr}
 8009e36:	4604      	mov	r4, r0
 8009e38:	f7ff fff0 	bl	8009e1c <__sinit_lock_acquire>
 8009e3c:	69a3      	ldr	r3, [r4, #24]
 8009e3e:	b11b      	cbz	r3, 8009e48 <__sinit+0x14>
 8009e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e44:	f7ff bff0 	b.w	8009e28 <__sinit_lock_release>
 8009e48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e4c:	6523      	str	r3, [r4, #80]	; 0x50
 8009e4e:	4b13      	ldr	r3, [pc, #76]	; (8009e9c <__sinit+0x68>)
 8009e50:	4a13      	ldr	r2, [pc, #76]	; (8009ea0 <__sinit+0x6c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e56:	42a3      	cmp	r3, r4
 8009e58:	bf04      	itt	eq
 8009e5a:	2301      	moveq	r3, #1
 8009e5c:	61a3      	streq	r3, [r4, #24]
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f000 f820 	bl	8009ea4 <__sfp>
 8009e64:	6060      	str	r0, [r4, #4]
 8009e66:	4620      	mov	r0, r4
 8009e68:	f000 f81c 	bl	8009ea4 <__sfp>
 8009e6c:	60a0      	str	r0, [r4, #8]
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f000 f818 	bl	8009ea4 <__sfp>
 8009e74:	2200      	movs	r2, #0
 8009e76:	60e0      	str	r0, [r4, #12]
 8009e78:	2104      	movs	r1, #4
 8009e7a:	6860      	ldr	r0, [r4, #4]
 8009e7c:	f7ff ff82 	bl	8009d84 <std>
 8009e80:	68a0      	ldr	r0, [r4, #8]
 8009e82:	2201      	movs	r2, #1
 8009e84:	2109      	movs	r1, #9
 8009e86:	f7ff ff7d 	bl	8009d84 <std>
 8009e8a:	68e0      	ldr	r0, [r4, #12]
 8009e8c:	2202      	movs	r2, #2
 8009e8e:	2112      	movs	r1, #18
 8009e90:	f7ff ff78 	bl	8009d84 <std>
 8009e94:	2301      	movs	r3, #1
 8009e96:	61a3      	str	r3, [r4, #24]
 8009e98:	e7d2      	b.n	8009e40 <__sinit+0xc>
 8009e9a:	bf00      	nop
 8009e9c:	0800af60 	.word	0x0800af60
 8009ea0:	08009dcd 	.word	0x08009dcd

08009ea4 <__sfp>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	4607      	mov	r7, r0
 8009ea8:	f7ff ffac 	bl	8009e04 <__sfp_lock_acquire>
 8009eac:	4b1e      	ldr	r3, [pc, #120]	; (8009f28 <__sfp+0x84>)
 8009eae:	681e      	ldr	r6, [r3, #0]
 8009eb0:	69b3      	ldr	r3, [r6, #24]
 8009eb2:	b913      	cbnz	r3, 8009eba <__sfp+0x16>
 8009eb4:	4630      	mov	r0, r6
 8009eb6:	f7ff ffbd 	bl	8009e34 <__sinit>
 8009eba:	3648      	adds	r6, #72	; 0x48
 8009ebc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	d503      	bpl.n	8009ecc <__sfp+0x28>
 8009ec4:	6833      	ldr	r3, [r6, #0]
 8009ec6:	b30b      	cbz	r3, 8009f0c <__sfp+0x68>
 8009ec8:	6836      	ldr	r6, [r6, #0]
 8009eca:	e7f7      	b.n	8009ebc <__sfp+0x18>
 8009ecc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ed0:	b9d5      	cbnz	r5, 8009f08 <__sfp+0x64>
 8009ed2:	4b16      	ldr	r3, [pc, #88]	; (8009f2c <__sfp+0x88>)
 8009ed4:	60e3      	str	r3, [r4, #12]
 8009ed6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009eda:	6665      	str	r5, [r4, #100]	; 0x64
 8009edc:	f000 f847 	bl	8009f6e <__retarget_lock_init_recursive>
 8009ee0:	f7ff ff96 	bl	8009e10 <__sfp_lock_release>
 8009ee4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ee8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009eec:	6025      	str	r5, [r4, #0]
 8009eee:	61a5      	str	r5, [r4, #24]
 8009ef0:	2208      	movs	r2, #8
 8009ef2:	4629      	mov	r1, r5
 8009ef4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ef8:	f7ff fcec 	bl	80098d4 <memset>
 8009efc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f04:	4620      	mov	r0, r4
 8009f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f08:	3468      	adds	r4, #104	; 0x68
 8009f0a:	e7d9      	b.n	8009ec0 <__sfp+0x1c>
 8009f0c:	2104      	movs	r1, #4
 8009f0e:	4638      	mov	r0, r7
 8009f10:	f7ff ff62 	bl	8009dd8 <__sfmoreglue>
 8009f14:	4604      	mov	r4, r0
 8009f16:	6030      	str	r0, [r6, #0]
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d1d5      	bne.n	8009ec8 <__sfp+0x24>
 8009f1c:	f7ff ff78 	bl	8009e10 <__sfp_lock_release>
 8009f20:	230c      	movs	r3, #12
 8009f22:	603b      	str	r3, [r7, #0]
 8009f24:	e7ee      	b.n	8009f04 <__sfp+0x60>
 8009f26:	bf00      	nop
 8009f28:	0800af60 	.word	0x0800af60
 8009f2c:	ffff0001 	.word	0xffff0001

08009f30 <_fwalk_reent>:
 8009f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f34:	4606      	mov	r6, r0
 8009f36:	4688      	mov	r8, r1
 8009f38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f3c:	2700      	movs	r7, #0
 8009f3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f42:	f1b9 0901 	subs.w	r9, r9, #1
 8009f46:	d505      	bpl.n	8009f54 <_fwalk_reent+0x24>
 8009f48:	6824      	ldr	r4, [r4, #0]
 8009f4a:	2c00      	cmp	r4, #0
 8009f4c:	d1f7      	bne.n	8009f3e <_fwalk_reent+0xe>
 8009f4e:	4638      	mov	r0, r7
 8009f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f54:	89ab      	ldrh	r3, [r5, #12]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d907      	bls.n	8009f6a <_fwalk_reent+0x3a>
 8009f5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	d003      	beq.n	8009f6a <_fwalk_reent+0x3a>
 8009f62:	4629      	mov	r1, r5
 8009f64:	4630      	mov	r0, r6
 8009f66:	47c0      	blx	r8
 8009f68:	4307      	orrs	r7, r0
 8009f6a:	3568      	adds	r5, #104	; 0x68
 8009f6c:	e7e9      	b.n	8009f42 <_fwalk_reent+0x12>

08009f6e <__retarget_lock_init_recursive>:
 8009f6e:	4770      	bx	lr

08009f70 <__retarget_lock_acquire_recursive>:
 8009f70:	4770      	bx	lr

08009f72 <__retarget_lock_release_recursive>:
 8009f72:	4770      	bx	lr

08009f74 <__swhatbuf_r>:
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	460e      	mov	r6, r1
 8009f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f7c:	2900      	cmp	r1, #0
 8009f7e:	b096      	sub	sp, #88	; 0x58
 8009f80:	4614      	mov	r4, r2
 8009f82:	461d      	mov	r5, r3
 8009f84:	da08      	bge.n	8009f98 <__swhatbuf_r+0x24>
 8009f86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	602a      	str	r2, [r5, #0]
 8009f8e:	061a      	lsls	r2, r3, #24
 8009f90:	d410      	bmi.n	8009fb4 <__swhatbuf_r+0x40>
 8009f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f96:	e00e      	b.n	8009fb6 <__swhatbuf_r+0x42>
 8009f98:	466a      	mov	r2, sp
 8009f9a:	f000 fded 	bl	800ab78 <_fstat_r>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	dbf1      	blt.n	8009f86 <__swhatbuf_r+0x12>
 8009fa2:	9a01      	ldr	r2, [sp, #4]
 8009fa4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009fa8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009fac:	425a      	negs	r2, r3
 8009fae:	415a      	adcs	r2, r3
 8009fb0:	602a      	str	r2, [r5, #0]
 8009fb2:	e7ee      	b.n	8009f92 <__swhatbuf_r+0x1e>
 8009fb4:	2340      	movs	r3, #64	; 0x40
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	b016      	add	sp, #88	; 0x58
 8009fbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009fc0 <__smakebuf_r>:
 8009fc0:	898b      	ldrh	r3, [r1, #12]
 8009fc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fc4:	079d      	lsls	r5, r3, #30
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	460c      	mov	r4, r1
 8009fca:	d507      	bpl.n	8009fdc <__smakebuf_r+0x1c>
 8009fcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	6123      	str	r3, [r4, #16]
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	6163      	str	r3, [r4, #20]
 8009fd8:	b002      	add	sp, #8
 8009fda:	bd70      	pop	{r4, r5, r6, pc}
 8009fdc:	ab01      	add	r3, sp, #4
 8009fde:	466a      	mov	r2, sp
 8009fe0:	f7ff ffc8 	bl	8009f74 <__swhatbuf_r>
 8009fe4:	9900      	ldr	r1, [sp, #0]
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f000 f893 	bl	800a114 <_malloc_r>
 8009fee:	b948      	cbnz	r0, 800a004 <__smakebuf_r+0x44>
 8009ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ff4:	059a      	lsls	r2, r3, #22
 8009ff6:	d4ef      	bmi.n	8009fd8 <__smakebuf_r+0x18>
 8009ff8:	f023 0303 	bic.w	r3, r3, #3
 8009ffc:	f043 0302 	orr.w	r3, r3, #2
 800a000:	81a3      	strh	r3, [r4, #12]
 800a002:	e7e3      	b.n	8009fcc <__smakebuf_r+0xc>
 800a004:	4b0d      	ldr	r3, [pc, #52]	; (800a03c <__smakebuf_r+0x7c>)
 800a006:	62b3      	str	r3, [r6, #40]	; 0x28
 800a008:	89a3      	ldrh	r3, [r4, #12]
 800a00a:	6020      	str	r0, [r4, #0]
 800a00c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a010:	81a3      	strh	r3, [r4, #12]
 800a012:	9b00      	ldr	r3, [sp, #0]
 800a014:	6163      	str	r3, [r4, #20]
 800a016:	9b01      	ldr	r3, [sp, #4]
 800a018:	6120      	str	r0, [r4, #16]
 800a01a:	b15b      	cbz	r3, 800a034 <__smakebuf_r+0x74>
 800a01c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a020:	4630      	mov	r0, r6
 800a022:	f000 fdbb 	bl	800ab9c <_isatty_r>
 800a026:	b128      	cbz	r0, 800a034 <__smakebuf_r+0x74>
 800a028:	89a3      	ldrh	r3, [r4, #12]
 800a02a:	f023 0303 	bic.w	r3, r3, #3
 800a02e:	f043 0301 	orr.w	r3, r3, #1
 800a032:	81a3      	strh	r3, [r4, #12]
 800a034:	89a0      	ldrh	r0, [r4, #12]
 800a036:	4305      	orrs	r5, r0
 800a038:	81a5      	strh	r5, [r4, #12]
 800a03a:	e7cd      	b.n	8009fd8 <__smakebuf_r+0x18>
 800a03c:	08009dcd 	.word	0x08009dcd

0800a040 <_free_r>:
 800a040:	b538      	push	{r3, r4, r5, lr}
 800a042:	4605      	mov	r5, r0
 800a044:	2900      	cmp	r1, #0
 800a046:	d041      	beq.n	800a0cc <_free_r+0x8c>
 800a048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a04c:	1f0c      	subs	r4, r1, #4
 800a04e:	2b00      	cmp	r3, #0
 800a050:	bfb8      	it	lt
 800a052:	18e4      	addlt	r4, r4, r3
 800a054:	f000 fdde 	bl	800ac14 <__malloc_lock>
 800a058:	4a1d      	ldr	r2, [pc, #116]	; (800a0d0 <_free_r+0x90>)
 800a05a:	6813      	ldr	r3, [r2, #0]
 800a05c:	b933      	cbnz	r3, 800a06c <_free_r+0x2c>
 800a05e:	6063      	str	r3, [r4, #4]
 800a060:	6014      	str	r4, [r2, #0]
 800a062:	4628      	mov	r0, r5
 800a064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a068:	f000 bdda 	b.w	800ac20 <__malloc_unlock>
 800a06c:	42a3      	cmp	r3, r4
 800a06e:	d908      	bls.n	800a082 <_free_r+0x42>
 800a070:	6820      	ldr	r0, [r4, #0]
 800a072:	1821      	adds	r1, r4, r0
 800a074:	428b      	cmp	r3, r1
 800a076:	bf01      	itttt	eq
 800a078:	6819      	ldreq	r1, [r3, #0]
 800a07a:	685b      	ldreq	r3, [r3, #4]
 800a07c:	1809      	addeq	r1, r1, r0
 800a07e:	6021      	streq	r1, [r4, #0]
 800a080:	e7ed      	b.n	800a05e <_free_r+0x1e>
 800a082:	461a      	mov	r2, r3
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	b10b      	cbz	r3, 800a08c <_free_r+0x4c>
 800a088:	42a3      	cmp	r3, r4
 800a08a:	d9fa      	bls.n	800a082 <_free_r+0x42>
 800a08c:	6811      	ldr	r1, [r2, #0]
 800a08e:	1850      	adds	r0, r2, r1
 800a090:	42a0      	cmp	r0, r4
 800a092:	d10b      	bne.n	800a0ac <_free_r+0x6c>
 800a094:	6820      	ldr	r0, [r4, #0]
 800a096:	4401      	add	r1, r0
 800a098:	1850      	adds	r0, r2, r1
 800a09a:	4283      	cmp	r3, r0
 800a09c:	6011      	str	r1, [r2, #0]
 800a09e:	d1e0      	bne.n	800a062 <_free_r+0x22>
 800a0a0:	6818      	ldr	r0, [r3, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	6053      	str	r3, [r2, #4]
 800a0a6:	4401      	add	r1, r0
 800a0a8:	6011      	str	r1, [r2, #0]
 800a0aa:	e7da      	b.n	800a062 <_free_r+0x22>
 800a0ac:	d902      	bls.n	800a0b4 <_free_r+0x74>
 800a0ae:	230c      	movs	r3, #12
 800a0b0:	602b      	str	r3, [r5, #0]
 800a0b2:	e7d6      	b.n	800a062 <_free_r+0x22>
 800a0b4:	6820      	ldr	r0, [r4, #0]
 800a0b6:	1821      	adds	r1, r4, r0
 800a0b8:	428b      	cmp	r3, r1
 800a0ba:	bf04      	itt	eq
 800a0bc:	6819      	ldreq	r1, [r3, #0]
 800a0be:	685b      	ldreq	r3, [r3, #4]
 800a0c0:	6063      	str	r3, [r4, #4]
 800a0c2:	bf04      	itt	eq
 800a0c4:	1809      	addeq	r1, r1, r0
 800a0c6:	6021      	streq	r1, [r4, #0]
 800a0c8:	6054      	str	r4, [r2, #4]
 800a0ca:	e7ca      	b.n	800a062 <_free_r+0x22>
 800a0cc:	bd38      	pop	{r3, r4, r5, pc}
 800a0ce:	bf00      	nop
 800a0d0:	20000b48 	.word	0x20000b48

0800a0d4 <sbrk_aligned>:
 800a0d4:	b570      	push	{r4, r5, r6, lr}
 800a0d6:	4e0e      	ldr	r6, [pc, #56]	; (800a110 <sbrk_aligned+0x3c>)
 800a0d8:	460c      	mov	r4, r1
 800a0da:	6831      	ldr	r1, [r6, #0]
 800a0dc:	4605      	mov	r5, r0
 800a0de:	b911      	cbnz	r1, 800a0e6 <sbrk_aligned+0x12>
 800a0e0:	f000 fcd4 	bl	800aa8c <_sbrk_r>
 800a0e4:	6030      	str	r0, [r6, #0]
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	f000 fccf 	bl	800aa8c <_sbrk_r>
 800a0ee:	1c43      	adds	r3, r0, #1
 800a0f0:	d00a      	beq.n	800a108 <sbrk_aligned+0x34>
 800a0f2:	1cc4      	adds	r4, r0, #3
 800a0f4:	f024 0403 	bic.w	r4, r4, #3
 800a0f8:	42a0      	cmp	r0, r4
 800a0fa:	d007      	beq.n	800a10c <sbrk_aligned+0x38>
 800a0fc:	1a21      	subs	r1, r4, r0
 800a0fe:	4628      	mov	r0, r5
 800a100:	f000 fcc4 	bl	800aa8c <_sbrk_r>
 800a104:	3001      	adds	r0, #1
 800a106:	d101      	bne.n	800a10c <sbrk_aligned+0x38>
 800a108:	f04f 34ff 	mov.w	r4, #4294967295
 800a10c:	4620      	mov	r0, r4
 800a10e:	bd70      	pop	{r4, r5, r6, pc}
 800a110:	20000b4c 	.word	0x20000b4c

0800a114 <_malloc_r>:
 800a114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a118:	1ccd      	adds	r5, r1, #3
 800a11a:	f025 0503 	bic.w	r5, r5, #3
 800a11e:	3508      	adds	r5, #8
 800a120:	2d0c      	cmp	r5, #12
 800a122:	bf38      	it	cc
 800a124:	250c      	movcc	r5, #12
 800a126:	2d00      	cmp	r5, #0
 800a128:	4607      	mov	r7, r0
 800a12a:	db01      	blt.n	800a130 <_malloc_r+0x1c>
 800a12c:	42a9      	cmp	r1, r5
 800a12e:	d905      	bls.n	800a13c <_malloc_r+0x28>
 800a130:	230c      	movs	r3, #12
 800a132:	603b      	str	r3, [r7, #0]
 800a134:	2600      	movs	r6, #0
 800a136:	4630      	mov	r0, r6
 800a138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a13c:	4e2e      	ldr	r6, [pc, #184]	; (800a1f8 <_malloc_r+0xe4>)
 800a13e:	f000 fd69 	bl	800ac14 <__malloc_lock>
 800a142:	6833      	ldr	r3, [r6, #0]
 800a144:	461c      	mov	r4, r3
 800a146:	bb34      	cbnz	r4, 800a196 <_malloc_r+0x82>
 800a148:	4629      	mov	r1, r5
 800a14a:	4638      	mov	r0, r7
 800a14c:	f7ff ffc2 	bl	800a0d4 <sbrk_aligned>
 800a150:	1c43      	adds	r3, r0, #1
 800a152:	4604      	mov	r4, r0
 800a154:	d14d      	bne.n	800a1f2 <_malloc_r+0xde>
 800a156:	6834      	ldr	r4, [r6, #0]
 800a158:	4626      	mov	r6, r4
 800a15a:	2e00      	cmp	r6, #0
 800a15c:	d140      	bne.n	800a1e0 <_malloc_r+0xcc>
 800a15e:	6823      	ldr	r3, [r4, #0]
 800a160:	4631      	mov	r1, r6
 800a162:	4638      	mov	r0, r7
 800a164:	eb04 0803 	add.w	r8, r4, r3
 800a168:	f000 fc90 	bl	800aa8c <_sbrk_r>
 800a16c:	4580      	cmp	r8, r0
 800a16e:	d13a      	bne.n	800a1e6 <_malloc_r+0xd2>
 800a170:	6821      	ldr	r1, [r4, #0]
 800a172:	3503      	adds	r5, #3
 800a174:	1a6d      	subs	r5, r5, r1
 800a176:	f025 0503 	bic.w	r5, r5, #3
 800a17a:	3508      	adds	r5, #8
 800a17c:	2d0c      	cmp	r5, #12
 800a17e:	bf38      	it	cc
 800a180:	250c      	movcc	r5, #12
 800a182:	4629      	mov	r1, r5
 800a184:	4638      	mov	r0, r7
 800a186:	f7ff ffa5 	bl	800a0d4 <sbrk_aligned>
 800a18a:	3001      	adds	r0, #1
 800a18c:	d02b      	beq.n	800a1e6 <_malloc_r+0xd2>
 800a18e:	6823      	ldr	r3, [r4, #0]
 800a190:	442b      	add	r3, r5
 800a192:	6023      	str	r3, [r4, #0]
 800a194:	e00e      	b.n	800a1b4 <_malloc_r+0xa0>
 800a196:	6822      	ldr	r2, [r4, #0]
 800a198:	1b52      	subs	r2, r2, r5
 800a19a:	d41e      	bmi.n	800a1da <_malloc_r+0xc6>
 800a19c:	2a0b      	cmp	r2, #11
 800a19e:	d916      	bls.n	800a1ce <_malloc_r+0xba>
 800a1a0:	1961      	adds	r1, r4, r5
 800a1a2:	42a3      	cmp	r3, r4
 800a1a4:	6025      	str	r5, [r4, #0]
 800a1a6:	bf18      	it	ne
 800a1a8:	6059      	strne	r1, [r3, #4]
 800a1aa:	6863      	ldr	r3, [r4, #4]
 800a1ac:	bf08      	it	eq
 800a1ae:	6031      	streq	r1, [r6, #0]
 800a1b0:	5162      	str	r2, [r4, r5]
 800a1b2:	604b      	str	r3, [r1, #4]
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	f104 060b 	add.w	r6, r4, #11
 800a1ba:	f000 fd31 	bl	800ac20 <__malloc_unlock>
 800a1be:	f026 0607 	bic.w	r6, r6, #7
 800a1c2:	1d23      	adds	r3, r4, #4
 800a1c4:	1af2      	subs	r2, r6, r3
 800a1c6:	d0b6      	beq.n	800a136 <_malloc_r+0x22>
 800a1c8:	1b9b      	subs	r3, r3, r6
 800a1ca:	50a3      	str	r3, [r4, r2]
 800a1cc:	e7b3      	b.n	800a136 <_malloc_r+0x22>
 800a1ce:	6862      	ldr	r2, [r4, #4]
 800a1d0:	42a3      	cmp	r3, r4
 800a1d2:	bf0c      	ite	eq
 800a1d4:	6032      	streq	r2, [r6, #0]
 800a1d6:	605a      	strne	r2, [r3, #4]
 800a1d8:	e7ec      	b.n	800a1b4 <_malloc_r+0xa0>
 800a1da:	4623      	mov	r3, r4
 800a1dc:	6864      	ldr	r4, [r4, #4]
 800a1de:	e7b2      	b.n	800a146 <_malloc_r+0x32>
 800a1e0:	4634      	mov	r4, r6
 800a1e2:	6876      	ldr	r6, [r6, #4]
 800a1e4:	e7b9      	b.n	800a15a <_malloc_r+0x46>
 800a1e6:	230c      	movs	r3, #12
 800a1e8:	603b      	str	r3, [r7, #0]
 800a1ea:	4638      	mov	r0, r7
 800a1ec:	f000 fd18 	bl	800ac20 <__malloc_unlock>
 800a1f0:	e7a1      	b.n	800a136 <_malloc_r+0x22>
 800a1f2:	6025      	str	r5, [r4, #0]
 800a1f4:	e7de      	b.n	800a1b4 <_malloc_r+0xa0>
 800a1f6:	bf00      	nop
 800a1f8:	20000b48 	.word	0x20000b48

0800a1fc <__ssputs_r>:
 800a1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a200:	688e      	ldr	r6, [r1, #8]
 800a202:	429e      	cmp	r6, r3
 800a204:	4682      	mov	sl, r0
 800a206:	460c      	mov	r4, r1
 800a208:	4690      	mov	r8, r2
 800a20a:	461f      	mov	r7, r3
 800a20c:	d838      	bhi.n	800a280 <__ssputs_r+0x84>
 800a20e:	898a      	ldrh	r2, [r1, #12]
 800a210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a214:	d032      	beq.n	800a27c <__ssputs_r+0x80>
 800a216:	6825      	ldr	r5, [r4, #0]
 800a218:	6909      	ldr	r1, [r1, #16]
 800a21a:	eba5 0901 	sub.w	r9, r5, r1
 800a21e:	6965      	ldr	r5, [r4, #20]
 800a220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a228:	3301      	adds	r3, #1
 800a22a:	444b      	add	r3, r9
 800a22c:	106d      	asrs	r5, r5, #1
 800a22e:	429d      	cmp	r5, r3
 800a230:	bf38      	it	cc
 800a232:	461d      	movcc	r5, r3
 800a234:	0553      	lsls	r3, r2, #21
 800a236:	d531      	bpl.n	800a29c <__ssputs_r+0xa0>
 800a238:	4629      	mov	r1, r5
 800a23a:	f7ff ff6b 	bl	800a114 <_malloc_r>
 800a23e:	4606      	mov	r6, r0
 800a240:	b950      	cbnz	r0, 800a258 <__ssputs_r+0x5c>
 800a242:	230c      	movs	r3, #12
 800a244:	f8ca 3000 	str.w	r3, [sl]
 800a248:	89a3      	ldrh	r3, [r4, #12]
 800a24a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a24e:	81a3      	strh	r3, [r4, #12]
 800a250:	f04f 30ff 	mov.w	r0, #4294967295
 800a254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a258:	6921      	ldr	r1, [r4, #16]
 800a25a:	464a      	mov	r2, r9
 800a25c:	f7ff fb2c 	bl	80098b8 <memcpy>
 800a260:	89a3      	ldrh	r3, [r4, #12]
 800a262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a26a:	81a3      	strh	r3, [r4, #12]
 800a26c:	6126      	str	r6, [r4, #16]
 800a26e:	6165      	str	r5, [r4, #20]
 800a270:	444e      	add	r6, r9
 800a272:	eba5 0509 	sub.w	r5, r5, r9
 800a276:	6026      	str	r6, [r4, #0]
 800a278:	60a5      	str	r5, [r4, #8]
 800a27a:	463e      	mov	r6, r7
 800a27c:	42be      	cmp	r6, r7
 800a27e:	d900      	bls.n	800a282 <__ssputs_r+0x86>
 800a280:	463e      	mov	r6, r7
 800a282:	6820      	ldr	r0, [r4, #0]
 800a284:	4632      	mov	r2, r6
 800a286:	4641      	mov	r1, r8
 800a288:	f000 fcaa 	bl	800abe0 <memmove>
 800a28c:	68a3      	ldr	r3, [r4, #8]
 800a28e:	1b9b      	subs	r3, r3, r6
 800a290:	60a3      	str	r3, [r4, #8]
 800a292:	6823      	ldr	r3, [r4, #0]
 800a294:	4433      	add	r3, r6
 800a296:	6023      	str	r3, [r4, #0]
 800a298:	2000      	movs	r0, #0
 800a29a:	e7db      	b.n	800a254 <__ssputs_r+0x58>
 800a29c:	462a      	mov	r2, r5
 800a29e:	f000 fcc5 	bl	800ac2c <_realloc_r>
 800a2a2:	4606      	mov	r6, r0
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	d1e1      	bne.n	800a26c <__ssputs_r+0x70>
 800a2a8:	6921      	ldr	r1, [r4, #16]
 800a2aa:	4650      	mov	r0, sl
 800a2ac:	f7ff fec8 	bl	800a040 <_free_r>
 800a2b0:	e7c7      	b.n	800a242 <__ssputs_r+0x46>
	...

0800a2b4 <_svfiprintf_r>:
 800a2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b8:	4698      	mov	r8, r3
 800a2ba:	898b      	ldrh	r3, [r1, #12]
 800a2bc:	061b      	lsls	r3, r3, #24
 800a2be:	b09d      	sub	sp, #116	; 0x74
 800a2c0:	4607      	mov	r7, r0
 800a2c2:	460d      	mov	r5, r1
 800a2c4:	4614      	mov	r4, r2
 800a2c6:	d50e      	bpl.n	800a2e6 <_svfiprintf_r+0x32>
 800a2c8:	690b      	ldr	r3, [r1, #16]
 800a2ca:	b963      	cbnz	r3, 800a2e6 <_svfiprintf_r+0x32>
 800a2cc:	2140      	movs	r1, #64	; 0x40
 800a2ce:	f7ff ff21 	bl	800a114 <_malloc_r>
 800a2d2:	6028      	str	r0, [r5, #0]
 800a2d4:	6128      	str	r0, [r5, #16]
 800a2d6:	b920      	cbnz	r0, 800a2e2 <_svfiprintf_r+0x2e>
 800a2d8:	230c      	movs	r3, #12
 800a2da:	603b      	str	r3, [r7, #0]
 800a2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e0:	e0d1      	b.n	800a486 <_svfiprintf_r+0x1d2>
 800a2e2:	2340      	movs	r3, #64	; 0x40
 800a2e4:	616b      	str	r3, [r5, #20]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ea:	2320      	movs	r3, #32
 800a2ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2f4:	2330      	movs	r3, #48	; 0x30
 800a2f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a4a0 <_svfiprintf_r+0x1ec>
 800a2fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2fe:	f04f 0901 	mov.w	r9, #1
 800a302:	4623      	mov	r3, r4
 800a304:	469a      	mov	sl, r3
 800a306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a30a:	b10a      	cbz	r2, 800a310 <_svfiprintf_r+0x5c>
 800a30c:	2a25      	cmp	r2, #37	; 0x25
 800a30e:	d1f9      	bne.n	800a304 <_svfiprintf_r+0x50>
 800a310:	ebba 0b04 	subs.w	fp, sl, r4
 800a314:	d00b      	beq.n	800a32e <_svfiprintf_r+0x7a>
 800a316:	465b      	mov	r3, fp
 800a318:	4622      	mov	r2, r4
 800a31a:	4629      	mov	r1, r5
 800a31c:	4638      	mov	r0, r7
 800a31e:	f7ff ff6d 	bl	800a1fc <__ssputs_r>
 800a322:	3001      	adds	r0, #1
 800a324:	f000 80aa 	beq.w	800a47c <_svfiprintf_r+0x1c8>
 800a328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a32a:	445a      	add	r2, fp
 800a32c:	9209      	str	r2, [sp, #36]	; 0x24
 800a32e:	f89a 3000 	ldrb.w	r3, [sl]
 800a332:	2b00      	cmp	r3, #0
 800a334:	f000 80a2 	beq.w	800a47c <_svfiprintf_r+0x1c8>
 800a338:	2300      	movs	r3, #0
 800a33a:	f04f 32ff 	mov.w	r2, #4294967295
 800a33e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a342:	f10a 0a01 	add.w	sl, sl, #1
 800a346:	9304      	str	r3, [sp, #16]
 800a348:	9307      	str	r3, [sp, #28]
 800a34a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a34e:	931a      	str	r3, [sp, #104]	; 0x68
 800a350:	4654      	mov	r4, sl
 800a352:	2205      	movs	r2, #5
 800a354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a358:	4851      	ldr	r0, [pc, #324]	; (800a4a0 <_svfiprintf_r+0x1ec>)
 800a35a:	f7f5 ff19 	bl	8000190 <memchr>
 800a35e:	9a04      	ldr	r2, [sp, #16]
 800a360:	b9d8      	cbnz	r0, 800a39a <_svfiprintf_r+0xe6>
 800a362:	06d0      	lsls	r0, r2, #27
 800a364:	bf44      	itt	mi
 800a366:	2320      	movmi	r3, #32
 800a368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a36c:	0711      	lsls	r1, r2, #28
 800a36e:	bf44      	itt	mi
 800a370:	232b      	movmi	r3, #43	; 0x2b
 800a372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a376:	f89a 3000 	ldrb.w	r3, [sl]
 800a37a:	2b2a      	cmp	r3, #42	; 0x2a
 800a37c:	d015      	beq.n	800a3aa <_svfiprintf_r+0xf6>
 800a37e:	9a07      	ldr	r2, [sp, #28]
 800a380:	4654      	mov	r4, sl
 800a382:	2000      	movs	r0, #0
 800a384:	f04f 0c0a 	mov.w	ip, #10
 800a388:	4621      	mov	r1, r4
 800a38a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a38e:	3b30      	subs	r3, #48	; 0x30
 800a390:	2b09      	cmp	r3, #9
 800a392:	d94e      	bls.n	800a432 <_svfiprintf_r+0x17e>
 800a394:	b1b0      	cbz	r0, 800a3c4 <_svfiprintf_r+0x110>
 800a396:	9207      	str	r2, [sp, #28]
 800a398:	e014      	b.n	800a3c4 <_svfiprintf_r+0x110>
 800a39a:	eba0 0308 	sub.w	r3, r0, r8
 800a39e:	fa09 f303 	lsl.w	r3, r9, r3
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	9304      	str	r3, [sp, #16]
 800a3a6:	46a2      	mov	sl, r4
 800a3a8:	e7d2      	b.n	800a350 <_svfiprintf_r+0x9c>
 800a3aa:	9b03      	ldr	r3, [sp, #12]
 800a3ac:	1d19      	adds	r1, r3, #4
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	9103      	str	r1, [sp, #12]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	bfbb      	ittet	lt
 800a3b6:	425b      	neglt	r3, r3
 800a3b8:	f042 0202 	orrlt.w	r2, r2, #2
 800a3bc:	9307      	strge	r3, [sp, #28]
 800a3be:	9307      	strlt	r3, [sp, #28]
 800a3c0:	bfb8      	it	lt
 800a3c2:	9204      	strlt	r2, [sp, #16]
 800a3c4:	7823      	ldrb	r3, [r4, #0]
 800a3c6:	2b2e      	cmp	r3, #46	; 0x2e
 800a3c8:	d10c      	bne.n	800a3e4 <_svfiprintf_r+0x130>
 800a3ca:	7863      	ldrb	r3, [r4, #1]
 800a3cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ce:	d135      	bne.n	800a43c <_svfiprintf_r+0x188>
 800a3d0:	9b03      	ldr	r3, [sp, #12]
 800a3d2:	1d1a      	adds	r2, r3, #4
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	9203      	str	r2, [sp, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	bfb8      	it	lt
 800a3dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3e0:	3402      	adds	r4, #2
 800a3e2:	9305      	str	r3, [sp, #20]
 800a3e4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a4a4 <_svfiprintf_r+0x1f0>
 800a3e8:	7821      	ldrb	r1, [r4, #0]
 800a3ea:	2203      	movs	r2, #3
 800a3ec:	4650      	mov	r0, sl
 800a3ee:	f7f5 fecf 	bl	8000190 <memchr>
 800a3f2:	b140      	cbz	r0, 800a406 <_svfiprintf_r+0x152>
 800a3f4:	2340      	movs	r3, #64	; 0x40
 800a3f6:	eba0 000a 	sub.w	r0, r0, sl
 800a3fa:	fa03 f000 	lsl.w	r0, r3, r0
 800a3fe:	9b04      	ldr	r3, [sp, #16]
 800a400:	4303      	orrs	r3, r0
 800a402:	3401      	adds	r4, #1
 800a404:	9304      	str	r3, [sp, #16]
 800a406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a40a:	4827      	ldr	r0, [pc, #156]	; (800a4a8 <_svfiprintf_r+0x1f4>)
 800a40c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a410:	2206      	movs	r2, #6
 800a412:	f7f5 febd 	bl	8000190 <memchr>
 800a416:	2800      	cmp	r0, #0
 800a418:	d038      	beq.n	800a48c <_svfiprintf_r+0x1d8>
 800a41a:	4b24      	ldr	r3, [pc, #144]	; (800a4ac <_svfiprintf_r+0x1f8>)
 800a41c:	bb1b      	cbnz	r3, 800a466 <_svfiprintf_r+0x1b2>
 800a41e:	9b03      	ldr	r3, [sp, #12]
 800a420:	3307      	adds	r3, #7
 800a422:	f023 0307 	bic.w	r3, r3, #7
 800a426:	3308      	adds	r3, #8
 800a428:	9303      	str	r3, [sp, #12]
 800a42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a42c:	4433      	add	r3, r6
 800a42e:	9309      	str	r3, [sp, #36]	; 0x24
 800a430:	e767      	b.n	800a302 <_svfiprintf_r+0x4e>
 800a432:	fb0c 3202 	mla	r2, ip, r2, r3
 800a436:	460c      	mov	r4, r1
 800a438:	2001      	movs	r0, #1
 800a43a:	e7a5      	b.n	800a388 <_svfiprintf_r+0xd4>
 800a43c:	2300      	movs	r3, #0
 800a43e:	3401      	adds	r4, #1
 800a440:	9305      	str	r3, [sp, #20]
 800a442:	4619      	mov	r1, r3
 800a444:	f04f 0c0a 	mov.w	ip, #10
 800a448:	4620      	mov	r0, r4
 800a44a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a44e:	3a30      	subs	r2, #48	; 0x30
 800a450:	2a09      	cmp	r2, #9
 800a452:	d903      	bls.n	800a45c <_svfiprintf_r+0x1a8>
 800a454:	2b00      	cmp	r3, #0
 800a456:	d0c5      	beq.n	800a3e4 <_svfiprintf_r+0x130>
 800a458:	9105      	str	r1, [sp, #20]
 800a45a:	e7c3      	b.n	800a3e4 <_svfiprintf_r+0x130>
 800a45c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a460:	4604      	mov	r4, r0
 800a462:	2301      	movs	r3, #1
 800a464:	e7f0      	b.n	800a448 <_svfiprintf_r+0x194>
 800a466:	ab03      	add	r3, sp, #12
 800a468:	9300      	str	r3, [sp, #0]
 800a46a:	462a      	mov	r2, r5
 800a46c:	4b10      	ldr	r3, [pc, #64]	; (800a4b0 <_svfiprintf_r+0x1fc>)
 800a46e:	a904      	add	r1, sp, #16
 800a470:	4638      	mov	r0, r7
 800a472:	f3af 8000 	nop.w
 800a476:	1c42      	adds	r2, r0, #1
 800a478:	4606      	mov	r6, r0
 800a47a:	d1d6      	bne.n	800a42a <_svfiprintf_r+0x176>
 800a47c:	89ab      	ldrh	r3, [r5, #12]
 800a47e:	065b      	lsls	r3, r3, #25
 800a480:	f53f af2c 	bmi.w	800a2dc <_svfiprintf_r+0x28>
 800a484:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a486:	b01d      	add	sp, #116	; 0x74
 800a488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48c:	ab03      	add	r3, sp, #12
 800a48e:	9300      	str	r3, [sp, #0]
 800a490:	462a      	mov	r2, r5
 800a492:	4b07      	ldr	r3, [pc, #28]	; (800a4b0 <_svfiprintf_r+0x1fc>)
 800a494:	a904      	add	r1, sp, #16
 800a496:	4638      	mov	r0, r7
 800a498:	f000 f9d2 	bl	800a840 <_printf_i>
 800a49c:	e7eb      	b.n	800a476 <_svfiprintf_r+0x1c2>
 800a49e:	bf00      	nop
 800a4a0:	0800afc4 	.word	0x0800afc4
 800a4a4:	0800afca 	.word	0x0800afca
 800a4a8:	0800afce 	.word	0x0800afce
 800a4ac:	00000000 	.word	0x00000000
 800a4b0:	0800a1fd 	.word	0x0800a1fd

0800a4b4 <__sfputc_r>:
 800a4b4:	6893      	ldr	r3, [r2, #8]
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	b410      	push	{r4}
 800a4bc:	6093      	str	r3, [r2, #8]
 800a4be:	da07      	bge.n	800a4d0 <__sfputc_r+0x1c>
 800a4c0:	6994      	ldr	r4, [r2, #24]
 800a4c2:	42a3      	cmp	r3, r4
 800a4c4:	db01      	blt.n	800a4ca <__sfputc_r+0x16>
 800a4c6:	290a      	cmp	r1, #10
 800a4c8:	d102      	bne.n	800a4d0 <__sfputc_r+0x1c>
 800a4ca:	bc10      	pop	{r4}
 800a4cc:	f7ff badc 	b.w	8009a88 <__swbuf_r>
 800a4d0:	6813      	ldr	r3, [r2, #0]
 800a4d2:	1c58      	adds	r0, r3, #1
 800a4d4:	6010      	str	r0, [r2, #0]
 800a4d6:	7019      	strb	r1, [r3, #0]
 800a4d8:	4608      	mov	r0, r1
 800a4da:	bc10      	pop	{r4}
 800a4dc:	4770      	bx	lr

0800a4de <__sfputs_r>:
 800a4de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	460f      	mov	r7, r1
 800a4e4:	4614      	mov	r4, r2
 800a4e6:	18d5      	adds	r5, r2, r3
 800a4e8:	42ac      	cmp	r4, r5
 800a4ea:	d101      	bne.n	800a4f0 <__sfputs_r+0x12>
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	e007      	b.n	800a500 <__sfputs_r+0x22>
 800a4f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4f4:	463a      	mov	r2, r7
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	f7ff ffdc 	bl	800a4b4 <__sfputc_r>
 800a4fc:	1c43      	adds	r3, r0, #1
 800a4fe:	d1f3      	bne.n	800a4e8 <__sfputs_r+0xa>
 800a500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a504 <_vfiprintf_r>:
 800a504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a508:	460d      	mov	r5, r1
 800a50a:	b09d      	sub	sp, #116	; 0x74
 800a50c:	4614      	mov	r4, r2
 800a50e:	4698      	mov	r8, r3
 800a510:	4606      	mov	r6, r0
 800a512:	b118      	cbz	r0, 800a51c <_vfiprintf_r+0x18>
 800a514:	6983      	ldr	r3, [r0, #24]
 800a516:	b90b      	cbnz	r3, 800a51c <_vfiprintf_r+0x18>
 800a518:	f7ff fc8c 	bl	8009e34 <__sinit>
 800a51c:	4b89      	ldr	r3, [pc, #548]	; (800a744 <_vfiprintf_r+0x240>)
 800a51e:	429d      	cmp	r5, r3
 800a520:	d11b      	bne.n	800a55a <_vfiprintf_r+0x56>
 800a522:	6875      	ldr	r5, [r6, #4]
 800a524:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a526:	07d9      	lsls	r1, r3, #31
 800a528:	d405      	bmi.n	800a536 <_vfiprintf_r+0x32>
 800a52a:	89ab      	ldrh	r3, [r5, #12]
 800a52c:	059a      	lsls	r2, r3, #22
 800a52e:	d402      	bmi.n	800a536 <_vfiprintf_r+0x32>
 800a530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a532:	f7ff fd1d 	bl	8009f70 <__retarget_lock_acquire_recursive>
 800a536:	89ab      	ldrh	r3, [r5, #12]
 800a538:	071b      	lsls	r3, r3, #28
 800a53a:	d501      	bpl.n	800a540 <_vfiprintf_r+0x3c>
 800a53c:	692b      	ldr	r3, [r5, #16]
 800a53e:	b9eb      	cbnz	r3, 800a57c <_vfiprintf_r+0x78>
 800a540:	4629      	mov	r1, r5
 800a542:	4630      	mov	r0, r6
 800a544:	f7ff faf2 	bl	8009b2c <__swsetup_r>
 800a548:	b1c0      	cbz	r0, 800a57c <_vfiprintf_r+0x78>
 800a54a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a54c:	07dc      	lsls	r4, r3, #31
 800a54e:	d50e      	bpl.n	800a56e <_vfiprintf_r+0x6a>
 800a550:	f04f 30ff 	mov.w	r0, #4294967295
 800a554:	b01d      	add	sp, #116	; 0x74
 800a556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a55a:	4b7b      	ldr	r3, [pc, #492]	; (800a748 <_vfiprintf_r+0x244>)
 800a55c:	429d      	cmp	r5, r3
 800a55e:	d101      	bne.n	800a564 <_vfiprintf_r+0x60>
 800a560:	68b5      	ldr	r5, [r6, #8]
 800a562:	e7df      	b.n	800a524 <_vfiprintf_r+0x20>
 800a564:	4b79      	ldr	r3, [pc, #484]	; (800a74c <_vfiprintf_r+0x248>)
 800a566:	429d      	cmp	r5, r3
 800a568:	bf08      	it	eq
 800a56a:	68f5      	ldreq	r5, [r6, #12]
 800a56c:	e7da      	b.n	800a524 <_vfiprintf_r+0x20>
 800a56e:	89ab      	ldrh	r3, [r5, #12]
 800a570:	0598      	lsls	r0, r3, #22
 800a572:	d4ed      	bmi.n	800a550 <_vfiprintf_r+0x4c>
 800a574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a576:	f7ff fcfc 	bl	8009f72 <__retarget_lock_release_recursive>
 800a57a:	e7e9      	b.n	800a550 <_vfiprintf_r+0x4c>
 800a57c:	2300      	movs	r3, #0
 800a57e:	9309      	str	r3, [sp, #36]	; 0x24
 800a580:	2320      	movs	r3, #32
 800a582:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a586:	f8cd 800c 	str.w	r8, [sp, #12]
 800a58a:	2330      	movs	r3, #48	; 0x30
 800a58c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a750 <_vfiprintf_r+0x24c>
 800a590:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a594:	f04f 0901 	mov.w	r9, #1
 800a598:	4623      	mov	r3, r4
 800a59a:	469a      	mov	sl, r3
 800a59c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5a0:	b10a      	cbz	r2, 800a5a6 <_vfiprintf_r+0xa2>
 800a5a2:	2a25      	cmp	r2, #37	; 0x25
 800a5a4:	d1f9      	bne.n	800a59a <_vfiprintf_r+0x96>
 800a5a6:	ebba 0b04 	subs.w	fp, sl, r4
 800a5aa:	d00b      	beq.n	800a5c4 <_vfiprintf_r+0xc0>
 800a5ac:	465b      	mov	r3, fp
 800a5ae:	4622      	mov	r2, r4
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	4630      	mov	r0, r6
 800a5b4:	f7ff ff93 	bl	800a4de <__sfputs_r>
 800a5b8:	3001      	adds	r0, #1
 800a5ba:	f000 80aa 	beq.w	800a712 <_vfiprintf_r+0x20e>
 800a5be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5c0:	445a      	add	r2, fp
 800a5c2:	9209      	str	r2, [sp, #36]	; 0x24
 800a5c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 80a2 	beq.w	800a712 <_vfiprintf_r+0x20e>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5d8:	f10a 0a01 	add.w	sl, sl, #1
 800a5dc:	9304      	str	r3, [sp, #16]
 800a5de:	9307      	str	r3, [sp, #28]
 800a5e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5e4:	931a      	str	r3, [sp, #104]	; 0x68
 800a5e6:	4654      	mov	r4, sl
 800a5e8:	2205      	movs	r2, #5
 800a5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ee:	4858      	ldr	r0, [pc, #352]	; (800a750 <_vfiprintf_r+0x24c>)
 800a5f0:	f7f5 fdce 	bl	8000190 <memchr>
 800a5f4:	9a04      	ldr	r2, [sp, #16]
 800a5f6:	b9d8      	cbnz	r0, 800a630 <_vfiprintf_r+0x12c>
 800a5f8:	06d1      	lsls	r1, r2, #27
 800a5fa:	bf44      	itt	mi
 800a5fc:	2320      	movmi	r3, #32
 800a5fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a602:	0713      	lsls	r3, r2, #28
 800a604:	bf44      	itt	mi
 800a606:	232b      	movmi	r3, #43	; 0x2b
 800a608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a60c:	f89a 3000 	ldrb.w	r3, [sl]
 800a610:	2b2a      	cmp	r3, #42	; 0x2a
 800a612:	d015      	beq.n	800a640 <_vfiprintf_r+0x13c>
 800a614:	9a07      	ldr	r2, [sp, #28]
 800a616:	4654      	mov	r4, sl
 800a618:	2000      	movs	r0, #0
 800a61a:	f04f 0c0a 	mov.w	ip, #10
 800a61e:	4621      	mov	r1, r4
 800a620:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a624:	3b30      	subs	r3, #48	; 0x30
 800a626:	2b09      	cmp	r3, #9
 800a628:	d94e      	bls.n	800a6c8 <_vfiprintf_r+0x1c4>
 800a62a:	b1b0      	cbz	r0, 800a65a <_vfiprintf_r+0x156>
 800a62c:	9207      	str	r2, [sp, #28]
 800a62e:	e014      	b.n	800a65a <_vfiprintf_r+0x156>
 800a630:	eba0 0308 	sub.w	r3, r0, r8
 800a634:	fa09 f303 	lsl.w	r3, r9, r3
 800a638:	4313      	orrs	r3, r2
 800a63a:	9304      	str	r3, [sp, #16]
 800a63c:	46a2      	mov	sl, r4
 800a63e:	e7d2      	b.n	800a5e6 <_vfiprintf_r+0xe2>
 800a640:	9b03      	ldr	r3, [sp, #12]
 800a642:	1d19      	adds	r1, r3, #4
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	9103      	str	r1, [sp, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	bfbb      	ittet	lt
 800a64c:	425b      	neglt	r3, r3
 800a64e:	f042 0202 	orrlt.w	r2, r2, #2
 800a652:	9307      	strge	r3, [sp, #28]
 800a654:	9307      	strlt	r3, [sp, #28]
 800a656:	bfb8      	it	lt
 800a658:	9204      	strlt	r2, [sp, #16]
 800a65a:	7823      	ldrb	r3, [r4, #0]
 800a65c:	2b2e      	cmp	r3, #46	; 0x2e
 800a65e:	d10c      	bne.n	800a67a <_vfiprintf_r+0x176>
 800a660:	7863      	ldrb	r3, [r4, #1]
 800a662:	2b2a      	cmp	r3, #42	; 0x2a
 800a664:	d135      	bne.n	800a6d2 <_vfiprintf_r+0x1ce>
 800a666:	9b03      	ldr	r3, [sp, #12]
 800a668:	1d1a      	adds	r2, r3, #4
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	9203      	str	r2, [sp, #12]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	bfb8      	it	lt
 800a672:	f04f 33ff 	movlt.w	r3, #4294967295
 800a676:	3402      	adds	r4, #2
 800a678:	9305      	str	r3, [sp, #20]
 800a67a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a754 <_vfiprintf_r+0x250>
 800a67e:	7821      	ldrb	r1, [r4, #0]
 800a680:	2203      	movs	r2, #3
 800a682:	4650      	mov	r0, sl
 800a684:	f7f5 fd84 	bl	8000190 <memchr>
 800a688:	b140      	cbz	r0, 800a69c <_vfiprintf_r+0x198>
 800a68a:	2340      	movs	r3, #64	; 0x40
 800a68c:	eba0 000a 	sub.w	r0, r0, sl
 800a690:	fa03 f000 	lsl.w	r0, r3, r0
 800a694:	9b04      	ldr	r3, [sp, #16]
 800a696:	4303      	orrs	r3, r0
 800a698:	3401      	adds	r4, #1
 800a69a:	9304      	str	r3, [sp, #16]
 800a69c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6a0:	482d      	ldr	r0, [pc, #180]	; (800a758 <_vfiprintf_r+0x254>)
 800a6a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6a6:	2206      	movs	r2, #6
 800a6a8:	f7f5 fd72 	bl	8000190 <memchr>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d03f      	beq.n	800a730 <_vfiprintf_r+0x22c>
 800a6b0:	4b2a      	ldr	r3, [pc, #168]	; (800a75c <_vfiprintf_r+0x258>)
 800a6b2:	bb1b      	cbnz	r3, 800a6fc <_vfiprintf_r+0x1f8>
 800a6b4:	9b03      	ldr	r3, [sp, #12]
 800a6b6:	3307      	adds	r3, #7
 800a6b8:	f023 0307 	bic.w	r3, r3, #7
 800a6bc:	3308      	adds	r3, #8
 800a6be:	9303      	str	r3, [sp, #12]
 800a6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c2:	443b      	add	r3, r7
 800a6c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c6:	e767      	b.n	800a598 <_vfiprintf_r+0x94>
 800a6c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6cc:	460c      	mov	r4, r1
 800a6ce:	2001      	movs	r0, #1
 800a6d0:	e7a5      	b.n	800a61e <_vfiprintf_r+0x11a>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	3401      	adds	r4, #1
 800a6d6:	9305      	str	r3, [sp, #20]
 800a6d8:	4619      	mov	r1, r3
 800a6da:	f04f 0c0a 	mov.w	ip, #10
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6e4:	3a30      	subs	r2, #48	; 0x30
 800a6e6:	2a09      	cmp	r2, #9
 800a6e8:	d903      	bls.n	800a6f2 <_vfiprintf_r+0x1ee>
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d0c5      	beq.n	800a67a <_vfiprintf_r+0x176>
 800a6ee:	9105      	str	r1, [sp, #20]
 800a6f0:	e7c3      	b.n	800a67a <_vfiprintf_r+0x176>
 800a6f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e7f0      	b.n	800a6de <_vfiprintf_r+0x1da>
 800a6fc:	ab03      	add	r3, sp, #12
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	462a      	mov	r2, r5
 800a702:	4b17      	ldr	r3, [pc, #92]	; (800a760 <_vfiprintf_r+0x25c>)
 800a704:	a904      	add	r1, sp, #16
 800a706:	4630      	mov	r0, r6
 800a708:	f3af 8000 	nop.w
 800a70c:	4607      	mov	r7, r0
 800a70e:	1c78      	adds	r0, r7, #1
 800a710:	d1d6      	bne.n	800a6c0 <_vfiprintf_r+0x1bc>
 800a712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a714:	07d9      	lsls	r1, r3, #31
 800a716:	d405      	bmi.n	800a724 <_vfiprintf_r+0x220>
 800a718:	89ab      	ldrh	r3, [r5, #12]
 800a71a:	059a      	lsls	r2, r3, #22
 800a71c:	d402      	bmi.n	800a724 <_vfiprintf_r+0x220>
 800a71e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a720:	f7ff fc27 	bl	8009f72 <__retarget_lock_release_recursive>
 800a724:	89ab      	ldrh	r3, [r5, #12]
 800a726:	065b      	lsls	r3, r3, #25
 800a728:	f53f af12 	bmi.w	800a550 <_vfiprintf_r+0x4c>
 800a72c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a72e:	e711      	b.n	800a554 <_vfiprintf_r+0x50>
 800a730:	ab03      	add	r3, sp, #12
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	462a      	mov	r2, r5
 800a736:	4b0a      	ldr	r3, [pc, #40]	; (800a760 <_vfiprintf_r+0x25c>)
 800a738:	a904      	add	r1, sp, #16
 800a73a:	4630      	mov	r0, r6
 800a73c:	f000 f880 	bl	800a840 <_printf_i>
 800a740:	e7e4      	b.n	800a70c <_vfiprintf_r+0x208>
 800a742:	bf00      	nop
 800a744:	0800af84 	.word	0x0800af84
 800a748:	0800afa4 	.word	0x0800afa4
 800a74c:	0800af64 	.word	0x0800af64
 800a750:	0800afc4 	.word	0x0800afc4
 800a754:	0800afca 	.word	0x0800afca
 800a758:	0800afce 	.word	0x0800afce
 800a75c:	00000000 	.word	0x00000000
 800a760:	0800a4df 	.word	0x0800a4df

0800a764 <_printf_common>:
 800a764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a768:	4616      	mov	r6, r2
 800a76a:	4699      	mov	r9, r3
 800a76c:	688a      	ldr	r2, [r1, #8]
 800a76e:	690b      	ldr	r3, [r1, #16]
 800a770:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a774:	4293      	cmp	r3, r2
 800a776:	bfb8      	it	lt
 800a778:	4613      	movlt	r3, r2
 800a77a:	6033      	str	r3, [r6, #0]
 800a77c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a780:	4607      	mov	r7, r0
 800a782:	460c      	mov	r4, r1
 800a784:	b10a      	cbz	r2, 800a78a <_printf_common+0x26>
 800a786:	3301      	adds	r3, #1
 800a788:	6033      	str	r3, [r6, #0]
 800a78a:	6823      	ldr	r3, [r4, #0]
 800a78c:	0699      	lsls	r1, r3, #26
 800a78e:	bf42      	ittt	mi
 800a790:	6833      	ldrmi	r3, [r6, #0]
 800a792:	3302      	addmi	r3, #2
 800a794:	6033      	strmi	r3, [r6, #0]
 800a796:	6825      	ldr	r5, [r4, #0]
 800a798:	f015 0506 	ands.w	r5, r5, #6
 800a79c:	d106      	bne.n	800a7ac <_printf_common+0x48>
 800a79e:	f104 0a19 	add.w	sl, r4, #25
 800a7a2:	68e3      	ldr	r3, [r4, #12]
 800a7a4:	6832      	ldr	r2, [r6, #0]
 800a7a6:	1a9b      	subs	r3, r3, r2
 800a7a8:	42ab      	cmp	r3, r5
 800a7aa:	dc26      	bgt.n	800a7fa <_printf_common+0x96>
 800a7ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7b0:	1e13      	subs	r3, r2, #0
 800a7b2:	6822      	ldr	r2, [r4, #0]
 800a7b4:	bf18      	it	ne
 800a7b6:	2301      	movne	r3, #1
 800a7b8:	0692      	lsls	r2, r2, #26
 800a7ba:	d42b      	bmi.n	800a814 <_printf_common+0xb0>
 800a7bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7c0:	4649      	mov	r1, r9
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	47c0      	blx	r8
 800a7c6:	3001      	adds	r0, #1
 800a7c8:	d01e      	beq.n	800a808 <_printf_common+0xa4>
 800a7ca:	6823      	ldr	r3, [r4, #0]
 800a7cc:	68e5      	ldr	r5, [r4, #12]
 800a7ce:	6832      	ldr	r2, [r6, #0]
 800a7d0:	f003 0306 	and.w	r3, r3, #6
 800a7d4:	2b04      	cmp	r3, #4
 800a7d6:	bf08      	it	eq
 800a7d8:	1aad      	subeq	r5, r5, r2
 800a7da:	68a3      	ldr	r3, [r4, #8]
 800a7dc:	6922      	ldr	r2, [r4, #16]
 800a7de:	bf0c      	ite	eq
 800a7e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7e4:	2500      	movne	r5, #0
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	bfc4      	itt	gt
 800a7ea:	1a9b      	subgt	r3, r3, r2
 800a7ec:	18ed      	addgt	r5, r5, r3
 800a7ee:	2600      	movs	r6, #0
 800a7f0:	341a      	adds	r4, #26
 800a7f2:	42b5      	cmp	r5, r6
 800a7f4:	d11a      	bne.n	800a82c <_printf_common+0xc8>
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	e008      	b.n	800a80c <_printf_common+0xa8>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	4652      	mov	r2, sl
 800a7fe:	4649      	mov	r1, r9
 800a800:	4638      	mov	r0, r7
 800a802:	47c0      	blx	r8
 800a804:	3001      	adds	r0, #1
 800a806:	d103      	bne.n	800a810 <_printf_common+0xac>
 800a808:	f04f 30ff 	mov.w	r0, #4294967295
 800a80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a810:	3501      	adds	r5, #1
 800a812:	e7c6      	b.n	800a7a2 <_printf_common+0x3e>
 800a814:	18e1      	adds	r1, r4, r3
 800a816:	1c5a      	adds	r2, r3, #1
 800a818:	2030      	movs	r0, #48	; 0x30
 800a81a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a81e:	4422      	add	r2, r4
 800a820:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a824:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a828:	3302      	adds	r3, #2
 800a82a:	e7c7      	b.n	800a7bc <_printf_common+0x58>
 800a82c:	2301      	movs	r3, #1
 800a82e:	4622      	mov	r2, r4
 800a830:	4649      	mov	r1, r9
 800a832:	4638      	mov	r0, r7
 800a834:	47c0      	blx	r8
 800a836:	3001      	adds	r0, #1
 800a838:	d0e6      	beq.n	800a808 <_printf_common+0xa4>
 800a83a:	3601      	adds	r6, #1
 800a83c:	e7d9      	b.n	800a7f2 <_printf_common+0x8e>
	...

0800a840 <_printf_i>:
 800a840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a844:	7e0f      	ldrb	r7, [r1, #24]
 800a846:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a848:	2f78      	cmp	r7, #120	; 0x78
 800a84a:	4691      	mov	r9, r2
 800a84c:	4680      	mov	r8, r0
 800a84e:	460c      	mov	r4, r1
 800a850:	469a      	mov	sl, r3
 800a852:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a856:	d807      	bhi.n	800a868 <_printf_i+0x28>
 800a858:	2f62      	cmp	r7, #98	; 0x62
 800a85a:	d80a      	bhi.n	800a872 <_printf_i+0x32>
 800a85c:	2f00      	cmp	r7, #0
 800a85e:	f000 80d8 	beq.w	800aa12 <_printf_i+0x1d2>
 800a862:	2f58      	cmp	r7, #88	; 0x58
 800a864:	f000 80a3 	beq.w	800a9ae <_printf_i+0x16e>
 800a868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a86c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a870:	e03a      	b.n	800a8e8 <_printf_i+0xa8>
 800a872:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a876:	2b15      	cmp	r3, #21
 800a878:	d8f6      	bhi.n	800a868 <_printf_i+0x28>
 800a87a:	a101      	add	r1, pc, #4	; (adr r1, 800a880 <_printf_i+0x40>)
 800a87c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a880:	0800a8d9 	.word	0x0800a8d9
 800a884:	0800a8ed 	.word	0x0800a8ed
 800a888:	0800a869 	.word	0x0800a869
 800a88c:	0800a869 	.word	0x0800a869
 800a890:	0800a869 	.word	0x0800a869
 800a894:	0800a869 	.word	0x0800a869
 800a898:	0800a8ed 	.word	0x0800a8ed
 800a89c:	0800a869 	.word	0x0800a869
 800a8a0:	0800a869 	.word	0x0800a869
 800a8a4:	0800a869 	.word	0x0800a869
 800a8a8:	0800a869 	.word	0x0800a869
 800a8ac:	0800a9f9 	.word	0x0800a9f9
 800a8b0:	0800a91d 	.word	0x0800a91d
 800a8b4:	0800a9db 	.word	0x0800a9db
 800a8b8:	0800a869 	.word	0x0800a869
 800a8bc:	0800a869 	.word	0x0800a869
 800a8c0:	0800aa1b 	.word	0x0800aa1b
 800a8c4:	0800a869 	.word	0x0800a869
 800a8c8:	0800a91d 	.word	0x0800a91d
 800a8cc:	0800a869 	.word	0x0800a869
 800a8d0:	0800a869 	.word	0x0800a869
 800a8d4:	0800a9e3 	.word	0x0800a9e3
 800a8d8:	682b      	ldr	r3, [r5, #0]
 800a8da:	1d1a      	adds	r2, r3, #4
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	602a      	str	r2, [r5, #0]
 800a8e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e0a3      	b.n	800aa34 <_printf_i+0x1f4>
 800a8ec:	6820      	ldr	r0, [r4, #0]
 800a8ee:	6829      	ldr	r1, [r5, #0]
 800a8f0:	0606      	lsls	r6, r0, #24
 800a8f2:	f101 0304 	add.w	r3, r1, #4
 800a8f6:	d50a      	bpl.n	800a90e <_printf_i+0xce>
 800a8f8:	680e      	ldr	r6, [r1, #0]
 800a8fa:	602b      	str	r3, [r5, #0]
 800a8fc:	2e00      	cmp	r6, #0
 800a8fe:	da03      	bge.n	800a908 <_printf_i+0xc8>
 800a900:	232d      	movs	r3, #45	; 0x2d
 800a902:	4276      	negs	r6, r6
 800a904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a908:	485e      	ldr	r0, [pc, #376]	; (800aa84 <_printf_i+0x244>)
 800a90a:	230a      	movs	r3, #10
 800a90c:	e019      	b.n	800a942 <_printf_i+0x102>
 800a90e:	680e      	ldr	r6, [r1, #0]
 800a910:	602b      	str	r3, [r5, #0]
 800a912:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a916:	bf18      	it	ne
 800a918:	b236      	sxthne	r6, r6
 800a91a:	e7ef      	b.n	800a8fc <_printf_i+0xbc>
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	6820      	ldr	r0, [r4, #0]
 800a920:	1d19      	adds	r1, r3, #4
 800a922:	6029      	str	r1, [r5, #0]
 800a924:	0601      	lsls	r1, r0, #24
 800a926:	d501      	bpl.n	800a92c <_printf_i+0xec>
 800a928:	681e      	ldr	r6, [r3, #0]
 800a92a:	e002      	b.n	800a932 <_printf_i+0xf2>
 800a92c:	0646      	lsls	r6, r0, #25
 800a92e:	d5fb      	bpl.n	800a928 <_printf_i+0xe8>
 800a930:	881e      	ldrh	r6, [r3, #0]
 800a932:	4854      	ldr	r0, [pc, #336]	; (800aa84 <_printf_i+0x244>)
 800a934:	2f6f      	cmp	r7, #111	; 0x6f
 800a936:	bf0c      	ite	eq
 800a938:	2308      	moveq	r3, #8
 800a93a:	230a      	movne	r3, #10
 800a93c:	2100      	movs	r1, #0
 800a93e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a942:	6865      	ldr	r5, [r4, #4]
 800a944:	60a5      	str	r5, [r4, #8]
 800a946:	2d00      	cmp	r5, #0
 800a948:	bfa2      	ittt	ge
 800a94a:	6821      	ldrge	r1, [r4, #0]
 800a94c:	f021 0104 	bicge.w	r1, r1, #4
 800a950:	6021      	strge	r1, [r4, #0]
 800a952:	b90e      	cbnz	r6, 800a958 <_printf_i+0x118>
 800a954:	2d00      	cmp	r5, #0
 800a956:	d04d      	beq.n	800a9f4 <_printf_i+0x1b4>
 800a958:	4615      	mov	r5, r2
 800a95a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a95e:	fb03 6711 	mls	r7, r3, r1, r6
 800a962:	5dc7      	ldrb	r7, [r0, r7]
 800a964:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a968:	4637      	mov	r7, r6
 800a96a:	42bb      	cmp	r3, r7
 800a96c:	460e      	mov	r6, r1
 800a96e:	d9f4      	bls.n	800a95a <_printf_i+0x11a>
 800a970:	2b08      	cmp	r3, #8
 800a972:	d10b      	bne.n	800a98c <_printf_i+0x14c>
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	07de      	lsls	r6, r3, #31
 800a978:	d508      	bpl.n	800a98c <_printf_i+0x14c>
 800a97a:	6923      	ldr	r3, [r4, #16]
 800a97c:	6861      	ldr	r1, [r4, #4]
 800a97e:	4299      	cmp	r1, r3
 800a980:	bfde      	ittt	le
 800a982:	2330      	movle	r3, #48	; 0x30
 800a984:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a988:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a98c:	1b52      	subs	r2, r2, r5
 800a98e:	6122      	str	r2, [r4, #16]
 800a990:	f8cd a000 	str.w	sl, [sp]
 800a994:	464b      	mov	r3, r9
 800a996:	aa03      	add	r2, sp, #12
 800a998:	4621      	mov	r1, r4
 800a99a:	4640      	mov	r0, r8
 800a99c:	f7ff fee2 	bl	800a764 <_printf_common>
 800a9a0:	3001      	adds	r0, #1
 800a9a2:	d14c      	bne.n	800aa3e <_printf_i+0x1fe>
 800a9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a8:	b004      	add	sp, #16
 800a9aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ae:	4835      	ldr	r0, [pc, #212]	; (800aa84 <_printf_i+0x244>)
 800a9b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9b4:	6829      	ldr	r1, [r5, #0]
 800a9b6:	6823      	ldr	r3, [r4, #0]
 800a9b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9bc:	6029      	str	r1, [r5, #0]
 800a9be:	061d      	lsls	r5, r3, #24
 800a9c0:	d514      	bpl.n	800a9ec <_printf_i+0x1ac>
 800a9c2:	07df      	lsls	r7, r3, #31
 800a9c4:	bf44      	itt	mi
 800a9c6:	f043 0320 	orrmi.w	r3, r3, #32
 800a9ca:	6023      	strmi	r3, [r4, #0]
 800a9cc:	b91e      	cbnz	r6, 800a9d6 <_printf_i+0x196>
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	f023 0320 	bic.w	r3, r3, #32
 800a9d4:	6023      	str	r3, [r4, #0]
 800a9d6:	2310      	movs	r3, #16
 800a9d8:	e7b0      	b.n	800a93c <_printf_i+0xfc>
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	f043 0320 	orr.w	r3, r3, #32
 800a9e0:	6023      	str	r3, [r4, #0]
 800a9e2:	2378      	movs	r3, #120	; 0x78
 800a9e4:	4828      	ldr	r0, [pc, #160]	; (800aa88 <_printf_i+0x248>)
 800a9e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9ea:	e7e3      	b.n	800a9b4 <_printf_i+0x174>
 800a9ec:	0659      	lsls	r1, r3, #25
 800a9ee:	bf48      	it	mi
 800a9f0:	b2b6      	uxthmi	r6, r6
 800a9f2:	e7e6      	b.n	800a9c2 <_printf_i+0x182>
 800a9f4:	4615      	mov	r5, r2
 800a9f6:	e7bb      	b.n	800a970 <_printf_i+0x130>
 800a9f8:	682b      	ldr	r3, [r5, #0]
 800a9fa:	6826      	ldr	r6, [r4, #0]
 800a9fc:	6961      	ldr	r1, [r4, #20]
 800a9fe:	1d18      	adds	r0, r3, #4
 800aa00:	6028      	str	r0, [r5, #0]
 800aa02:	0635      	lsls	r5, r6, #24
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	d501      	bpl.n	800aa0c <_printf_i+0x1cc>
 800aa08:	6019      	str	r1, [r3, #0]
 800aa0a:	e002      	b.n	800aa12 <_printf_i+0x1d2>
 800aa0c:	0670      	lsls	r0, r6, #25
 800aa0e:	d5fb      	bpl.n	800aa08 <_printf_i+0x1c8>
 800aa10:	8019      	strh	r1, [r3, #0]
 800aa12:	2300      	movs	r3, #0
 800aa14:	6123      	str	r3, [r4, #16]
 800aa16:	4615      	mov	r5, r2
 800aa18:	e7ba      	b.n	800a990 <_printf_i+0x150>
 800aa1a:	682b      	ldr	r3, [r5, #0]
 800aa1c:	1d1a      	adds	r2, r3, #4
 800aa1e:	602a      	str	r2, [r5, #0]
 800aa20:	681d      	ldr	r5, [r3, #0]
 800aa22:	6862      	ldr	r2, [r4, #4]
 800aa24:	2100      	movs	r1, #0
 800aa26:	4628      	mov	r0, r5
 800aa28:	f7f5 fbb2 	bl	8000190 <memchr>
 800aa2c:	b108      	cbz	r0, 800aa32 <_printf_i+0x1f2>
 800aa2e:	1b40      	subs	r0, r0, r5
 800aa30:	6060      	str	r0, [r4, #4]
 800aa32:	6863      	ldr	r3, [r4, #4]
 800aa34:	6123      	str	r3, [r4, #16]
 800aa36:	2300      	movs	r3, #0
 800aa38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa3c:	e7a8      	b.n	800a990 <_printf_i+0x150>
 800aa3e:	6923      	ldr	r3, [r4, #16]
 800aa40:	462a      	mov	r2, r5
 800aa42:	4649      	mov	r1, r9
 800aa44:	4640      	mov	r0, r8
 800aa46:	47d0      	blx	sl
 800aa48:	3001      	adds	r0, #1
 800aa4a:	d0ab      	beq.n	800a9a4 <_printf_i+0x164>
 800aa4c:	6823      	ldr	r3, [r4, #0]
 800aa4e:	079b      	lsls	r3, r3, #30
 800aa50:	d413      	bmi.n	800aa7a <_printf_i+0x23a>
 800aa52:	68e0      	ldr	r0, [r4, #12]
 800aa54:	9b03      	ldr	r3, [sp, #12]
 800aa56:	4298      	cmp	r0, r3
 800aa58:	bfb8      	it	lt
 800aa5a:	4618      	movlt	r0, r3
 800aa5c:	e7a4      	b.n	800a9a8 <_printf_i+0x168>
 800aa5e:	2301      	movs	r3, #1
 800aa60:	4632      	mov	r2, r6
 800aa62:	4649      	mov	r1, r9
 800aa64:	4640      	mov	r0, r8
 800aa66:	47d0      	blx	sl
 800aa68:	3001      	adds	r0, #1
 800aa6a:	d09b      	beq.n	800a9a4 <_printf_i+0x164>
 800aa6c:	3501      	adds	r5, #1
 800aa6e:	68e3      	ldr	r3, [r4, #12]
 800aa70:	9903      	ldr	r1, [sp, #12]
 800aa72:	1a5b      	subs	r3, r3, r1
 800aa74:	42ab      	cmp	r3, r5
 800aa76:	dcf2      	bgt.n	800aa5e <_printf_i+0x21e>
 800aa78:	e7eb      	b.n	800aa52 <_printf_i+0x212>
 800aa7a:	2500      	movs	r5, #0
 800aa7c:	f104 0619 	add.w	r6, r4, #25
 800aa80:	e7f5      	b.n	800aa6e <_printf_i+0x22e>
 800aa82:	bf00      	nop
 800aa84:	0800afd5 	.word	0x0800afd5
 800aa88:	0800afe6 	.word	0x0800afe6

0800aa8c <_sbrk_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	4d06      	ldr	r5, [pc, #24]	; (800aaa8 <_sbrk_r+0x1c>)
 800aa90:	2300      	movs	r3, #0
 800aa92:	4604      	mov	r4, r0
 800aa94:	4608      	mov	r0, r1
 800aa96:	602b      	str	r3, [r5, #0]
 800aa98:	f7f6 ffd8 	bl	8001a4c <_sbrk>
 800aa9c:	1c43      	adds	r3, r0, #1
 800aa9e:	d102      	bne.n	800aaa6 <_sbrk_r+0x1a>
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	b103      	cbz	r3, 800aaa6 <_sbrk_r+0x1a>
 800aaa4:	6023      	str	r3, [r4, #0]
 800aaa6:	bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	20000b50 	.word	0x20000b50

0800aaac <__sread>:
 800aaac:	b510      	push	{r4, lr}
 800aaae:	460c      	mov	r4, r1
 800aab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aab4:	f000 f8ea 	bl	800ac8c <_read_r>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	bfab      	itete	ge
 800aabc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aabe:	89a3      	ldrhlt	r3, [r4, #12]
 800aac0:	181b      	addge	r3, r3, r0
 800aac2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aac6:	bfac      	ite	ge
 800aac8:	6563      	strge	r3, [r4, #84]	; 0x54
 800aaca:	81a3      	strhlt	r3, [r4, #12]
 800aacc:	bd10      	pop	{r4, pc}

0800aace <__swrite>:
 800aace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad2:	461f      	mov	r7, r3
 800aad4:	898b      	ldrh	r3, [r1, #12]
 800aad6:	05db      	lsls	r3, r3, #23
 800aad8:	4605      	mov	r5, r0
 800aada:	460c      	mov	r4, r1
 800aadc:	4616      	mov	r6, r2
 800aade:	d505      	bpl.n	800aaec <__swrite+0x1e>
 800aae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aae4:	2302      	movs	r3, #2
 800aae6:	2200      	movs	r2, #0
 800aae8:	f000 f868 	bl	800abbc <_lseek_r>
 800aaec:	89a3      	ldrh	r3, [r4, #12]
 800aaee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aaf6:	81a3      	strh	r3, [r4, #12]
 800aaf8:	4632      	mov	r2, r6
 800aafa:	463b      	mov	r3, r7
 800aafc:	4628      	mov	r0, r5
 800aafe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab02:	f000 b817 	b.w	800ab34 <_write_r>

0800ab06 <__sseek>:
 800ab06:	b510      	push	{r4, lr}
 800ab08:	460c      	mov	r4, r1
 800ab0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab0e:	f000 f855 	bl	800abbc <_lseek_r>
 800ab12:	1c43      	adds	r3, r0, #1
 800ab14:	89a3      	ldrh	r3, [r4, #12]
 800ab16:	bf15      	itete	ne
 800ab18:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab22:	81a3      	strheq	r3, [r4, #12]
 800ab24:	bf18      	it	ne
 800ab26:	81a3      	strhne	r3, [r4, #12]
 800ab28:	bd10      	pop	{r4, pc}

0800ab2a <__sclose>:
 800ab2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab2e:	f000 b813 	b.w	800ab58 <_close_r>
	...

0800ab34 <_write_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	4d07      	ldr	r5, [pc, #28]	; (800ab54 <_write_r+0x20>)
 800ab38:	4604      	mov	r4, r0
 800ab3a:	4608      	mov	r0, r1
 800ab3c:	4611      	mov	r1, r2
 800ab3e:	2200      	movs	r2, #0
 800ab40:	602a      	str	r2, [r5, #0]
 800ab42:	461a      	mov	r2, r3
 800ab44:	f7f5 fd20 	bl	8000588 <_write>
 800ab48:	1c43      	adds	r3, r0, #1
 800ab4a:	d102      	bne.n	800ab52 <_write_r+0x1e>
 800ab4c:	682b      	ldr	r3, [r5, #0]
 800ab4e:	b103      	cbz	r3, 800ab52 <_write_r+0x1e>
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	bd38      	pop	{r3, r4, r5, pc}
 800ab54:	20000b50 	.word	0x20000b50

0800ab58 <_close_r>:
 800ab58:	b538      	push	{r3, r4, r5, lr}
 800ab5a:	4d06      	ldr	r5, [pc, #24]	; (800ab74 <_close_r+0x1c>)
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	4604      	mov	r4, r0
 800ab60:	4608      	mov	r0, r1
 800ab62:	602b      	str	r3, [r5, #0]
 800ab64:	f7f6 ff41 	bl	80019ea <_close>
 800ab68:	1c43      	adds	r3, r0, #1
 800ab6a:	d102      	bne.n	800ab72 <_close_r+0x1a>
 800ab6c:	682b      	ldr	r3, [r5, #0]
 800ab6e:	b103      	cbz	r3, 800ab72 <_close_r+0x1a>
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	bd38      	pop	{r3, r4, r5, pc}
 800ab74:	20000b50 	.word	0x20000b50

0800ab78 <_fstat_r>:
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	4d07      	ldr	r5, [pc, #28]	; (800ab98 <_fstat_r+0x20>)
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	4604      	mov	r4, r0
 800ab80:	4608      	mov	r0, r1
 800ab82:	4611      	mov	r1, r2
 800ab84:	602b      	str	r3, [r5, #0]
 800ab86:	f7f6 ff3b 	bl	8001a00 <_fstat>
 800ab8a:	1c43      	adds	r3, r0, #1
 800ab8c:	d102      	bne.n	800ab94 <_fstat_r+0x1c>
 800ab8e:	682b      	ldr	r3, [r5, #0]
 800ab90:	b103      	cbz	r3, 800ab94 <_fstat_r+0x1c>
 800ab92:	6023      	str	r3, [r4, #0]
 800ab94:	bd38      	pop	{r3, r4, r5, pc}
 800ab96:	bf00      	nop
 800ab98:	20000b50 	.word	0x20000b50

0800ab9c <_isatty_r>:
 800ab9c:	b538      	push	{r3, r4, r5, lr}
 800ab9e:	4d06      	ldr	r5, [pc, #24]	; (800abb8 <_isatty_r+0x1c>)
 800aba0:	2300      	movs	r3, #0
 800aba2:	4604      	mov	r4, r0
 800aba4:	4608      	mov	r0, r1
 800aba6:	602b      	str	r3, [r5, #0]
 800aba8:	f7f6 ff39 	bl	8001a1e <_isatty>
 800abac:	1c43      	adds	r3, r0, #1
 800abae:	d102      	bne.n	800abb6 <_isatty_r+0x1a>
 800abb0:	682b      	ldr	r3, [r5, #0]
 800abb2:	b103      	cbz	r3, 800abb6 <_isatty_r+0x1a>
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	bd38      	pop	{r3, r4, r5, pc}
 800abb8:	20000b50 	.word	0x20000b50

0800abbc <_lseek_r>:
 800abbc:	b538      	push	{r3, r4, r5, lr}
 800abbe:	4d07      	ldr	r5, [pc, #28]	; (800abdc <_lseek_r+0x20>)
 800abc0:	4604      	mov	r4, r0
 800abc2:	4608      	mov	r0, r1
 800abc4:	4611      	mov	r1, r2
 800abc6:	2200      	movs	r2, #0
 800abc8:	602a      	str	r2, [r5, #0]
 800abca:	461a      	mov	r2, r3
 800abcc:	f7f6 ff31 	bl	8001a32 <_lseek>
 800abd0:	1c43      	adds	r3, r0, #1
 800abd2:	d102      	bne.n	800abda <_lseek_r+0x1e>
 800abd4:	682b      	ldr	r3, [r5, #0]
 800abd6:	b103      	cbz	r3, 800abda <_lseek_r+0x1e>
 800abd8:	6023      	str	r3, [r4, #0]
 800abda:	bd38      	pop	{r3, r4, r5, pc}
 800abdc:	20000b50 	.word	0x20000b50

0800abe0 <memmove>:
 800abe0:	4288      	cmp	r0, r1
 800abe2:	b510      	push	{r4, lr}
 800abe4:	eb01 0402 	add.w	r4, r1, r2
 800abe8:	d902      	bls.n	800abf0 <memmove+0x10>
 800abea:	4284      	cmp	r4, r0
 800abec:	4623      	mov	r3, r4
 800abee:	d807      	bhi.n	800ac00 <memmove+0x20>
 800abf0:	1e43      	subs	r3, r0, #1
 800abf2:	42a1      	cmp	r1, r4
 800abf4:	d008      	beq.n	800ac08 <memmove+0x28>
 800abf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abfe:	e7f8      	b.n	800abf2 <memmove+0x12>
 800ac00:	4402      	add	r2, r0
 800ac02:	4601      	mov	r1, r0
 800ac04:	428a      	cmp	r2, r1
 800ac06:	d100      	bne.n	800ac0a <memmove+0x2a>
 800ac08:	bd10      	pop	{r4, pc}
 800ac0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac12:	e7f7      	b.n	800ac04 <memmove+0x24>

0800ac14 <__malloc_lock>:
 800ac14:	4801      	ldr	r0, [pc, #4]	; (800ac1c <__malloc_lock+0x8>)
 800ac16:	f7ff b9ab 	b.w	8009f70 <__retarget_lock_acquire_recursive>
 800ac1a:	bf00      	nop
 800ac1c:	20000b44 	.word	0x20000b44

0800ac20 <__malloc_unlock>:
 800ac20:	4801      	ldr	r0, [pc, #4]	; (800ac28 <__malloc_unlock+0x8>)
 800ac22:	f7ff b9a6 	b.w	8009f72 <__retarget_lock_release_recursive>
 800ac26:	bf00      	nop
 800ac28:	20000b44 	.word	0x20000b44

0800ac2c <_realloc_r>:
 800ac2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac30:	4680      	mov	r8, r0
 800ac32:	4614      	mov	r4, r2
 800ac34:	460e      	mov	r6, r1
 800ac36:	b921      	cbnz	r1, 800ac42 <_realloc_r+0x16>
 800ac38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	f7ff ba69 	b.w	800a114 <_malloc_r>
 800ac42:	b92a      	cbnz	r2, 800ac50 <_realloc_r+0x24>
 800ac44:	f7ff f9fc 	bl	800a040 <_free_r>
 800ac48:	4625      	mov	r5, r4
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac50:	f000 f82e 	bl	800acb0 <_malloc_usable_size_r>
 800ac54:	4284      	cmp	r4, r0
 800ac56:	4607      	mov	r7, r0
 800ac58:	d802      	bhi.n	800ac60 <_realloc_r+0x34>
 800ac5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac5e:	d812      	bhi.n	800ac86 <_realloc_r+0x5a>
 800ac60:	4621      	mov	r1, r4
 800ac62:	4640      	mov	r0, r8
 800ac64:	f7ff fa56 	bl	800a114 <_malloc_r>
 800ac68:	4605      	mov	r5, r0
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	d0ed      	beq.n	800ac4a <_realloc_r+0x1e>
 800ac6e:	42bc      	cmp	r4, r7
 800ac70:	4622      	mov	r2, r4
 800ac72:	4631      	mov	r1, r6
 800ac74:	bf28      	it	cs
 800ac76:	463a      	movcs	r2, r7
 800ac78:	f7fe fe1e 	bl	80098b8 <memcpy>
 800ac7c:	4631      	mov	r1, r6
 800ac7e:	4640      	mov	r0, r8
 800ac80:	f7ff f9de 	bl	800a040 <_free_r>
 800ac84:	e7e1      	b.n	800ac4a <_realloc_r+0x1e>
 800ac86:	4635      	mov	r5, r6
 800ac88:	e7df      	b.n	800ac4a <_realloc_r+0x1e>
	...

0800ac8c <_read_r>:
 800ac8c:	b538      	push	{r3, r4, r5, lr}
 800ac8e:	4d07      	ldr	r5, [pc, #28]	; (800acac <_read_r+0x20>)
 800ac90:	4604      	mov	r4, r0
 800ac92:	4608      	mov	r0, r1
 800ac94:	4611      	mov	r1, r2
 800ac96:	2200      	movs	r2, #0
 800ac98:	602a      	str	r2, [r5, #0]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	f7f6 fe88 	bl	80019b0 <_read>
 800aca0:	1c43      	adds	r3, r0, #1
 800aca2:	d102      	bne.n	800acaa <_read_r+0x1e>
 800aca4:	682b      	ldr	r3, [r5, #0]
 800aca6:	b103      	cbz	r3, 800acaa <_read_r+0x1e>
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	bd38      	pop	{r3, r4, r5, pc}
 800acac:	20000b50 	.word	0x20000b50

0800acb0 <_malloc_usable_size_r>:
 800acb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acb4:	1f18      	subs	r0, r3, #4
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	bfbc      	itt	lt
 800acba:	580b      	ldrlt	r3, [r1, r0]
 800acbc:	18c0      	addlt	r0, r0, r3
 800acbe:	4770      	bx	lr

0800acc0 <_init>:
 800acc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc2:	bf00      	nop
 800acc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acc6:	bc08      	pop	{r3}
 800acc8:	469e      	mov	lr, r3
 800acca:	4770      	bx	lr

0800accc <_fini>:
 800accc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acce:	bf00      	nop
 800acd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd2:	bc08      	pop	{r3}
 800acd4:	469e      	mov	lr, r3
 800acd6:	4770      	bx	lr
